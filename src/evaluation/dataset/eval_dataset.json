{
    "questions": [
        {
            "question": "What is WCAG?",
            "ground_truth": "WCAG stands for Web Content Accessibility Guidelines.\n\nWCAG, or Web Content Accessibility Guidelines, is a set of guidelines developed through the W3C process in cooperation with individuals and organizations around the world. The aim is to provide a single shared standard for web content accessibility that meets the needs of individuals, organizations, and governments internationally. The guidelines explain how to make web content more accessible to people with disabilities. The context mentions WCAG 2.0, which includes specific criteria and techniques for building accessible web content, such as providing a site map, a table of contents, and links to all web pages from the home page.\n\nWhen discussing WCAG, it is important to:\n1. Mention that it stands for Web Content Accessibility Guidelines.\n2. Explain that it is developed by the World Wide Web Consortium (W3C).\n3. Highlight that it aims to make web content accessible to people with disabilities.\n4. Note the version of WCAG being referred to, as there are multiple versions (e.g., WCAG 2.0, WCAG 2.1).\n5. Describe some specific techniques or criteria mentioned in WCAG that help in achieving web accessibility.\n\nExample 1: In a discussion about web development, explaining that using semantic markup as per WCAG guidelines helps in making content accessible to users with visual impairments.\nExample 2: In a training session for web designers, illustrating how following WCAG 2.0 guidelines, such as providing text alternatives for non-text content, enhances the usability of websites for users with hearing or visual disabilities."
        },
        {
            "question": "What are the four principles of WCAG?",
            "ground_truth": "The four principles of WCAG are:\n1. Perceivable\n2. Operable\n3. Understandable\n4. Robust\n\nThe four principles of WCAG form the foundation for web accessibility and are designed to provide guidance on making web content more accessible to people with disabilities. These principles are:\n1. **Perceivable**: Information and user interface components must be presentable to users in ways they can perceive. This means that users must be able to perceive the information being presented (it can't be invisible to all of their senses).\n2. **Operable**: User interface components and navigation must be operable. This means that users must be able to operate the interface (the interface cannot require interaction that a user cannot perform).\n3. **Understandable**: Information and the operation of the user interface must be understandable. This means that users must be able to understand the information as well as the operation of the user interface (the content or operation cannot be beyond their understanding).\n4. **Robust**: Content must be robust enough that it can be interpreted reliably by a wide variety of user agents, including assistive technologies. This means that users must be able to access the content as technologies advance (as technologies and user agents evolve, the content should remain accessible).\n\nWhen discussing the principles of WCAG, it is important to:\n- Clearly state each principle and provide a brief description.\n- Explain how each principle contributes to the overall accessibility of web content.\n- Use examples or scenarios to illustrate how each principle can be applied in real-world web design.\n\n1. **Perceivable**: An example of making content perceivable is providing text alternatives for non-text content, such as images or videos, so that it can be changed into other forms people need, such as large print, braille, speech, symbols, or simpler language.\n2. **Operable**: An example of making content operable is ensuring that all functionalities can be accessed via keyboard for users who cannot use a mouse.\n3. **Understandable**: An example of making content understandable is ensuring that web pages operate in predictable ways and provide helpful guidance and feedback to users.\n4. **Robust**: An example of making content robust is ensuring compatibility with current and future user tools, such as designing websites that function well with screen readers and other assistive technologies."
        },
        {
            "question": "What is ARIA?",
            "ground_truth": "ARIA stands for Accessible Rich Internet Applications. It is a set of attributes that define ways to make web content and web applications more accessible to people with disabilities.\n\nARIA provides a framework for adding attributes to HTML elements which can improve the accessibility and interaction for users with disabilities. These attributes help assistive technologies understand the roles, states, and properties of elements on a web page. The context mentions specific roles like progressbar, meter, slider, and article, which are part of the ARIA specifications designed to enhance user interface components and improve accessibility.\n\nWhen using ARIA:\n1. Use native HTML elements when available as they usually provide built-in accessibility features.\n2. Apply ARIA roles and attributes only when necessary, such as when native HTML elements do not suffice.\n3. Ensure that ARIA attributes are used according to specification to avoid accessibility issues.\n4. Test accessibility implementations with assistive technologies to ensure they work as intended.\n\n1. Using the progressbar role:\n   ```html\n   <div role=\"progressbar\" aria-valuenow=\"70\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n   ```\n   This example shows a div element with a progressbar role indicating it's 70% complete.\n\n2. Using the article role:\n   ```html\n   <div role=\"article\">\n     <h2>News Article</h2>\n     <p>Details about recent events...</p>\n   </div>\n   ```\n   This example uses the article role to denote a section that could stand alone, such as a news article."
        },
        {
            "question": "What is the purpose of alt text in images?",
            "ground_truth": "The purpose of alt text in images is to provide a text-based alternative that describes the content and function of the image, ensuring accessibility for users who cannot see the images, such as those using screen readers.\n\nAlt text (alternative text) serves as a substitute for an image if the image cannot be viewed or accessed by a user. It helps in understanding what the image depicts or conveys, especially for content that is crucial for comprehension but not accessible visually. This is essential for users with visual impairments or those who rely on assistive technologies like screen readers. Alt text should succinctly encapsulate the key information or function of the image, ensuring that the absence of the image does not hinder the understanding of the content.\n\n1. **Be Concise**: Keep the alt text short and to the point.\n2. **Be Descriptive**: Describe the function or content of the image rather than its appearance.\n3. **Include Text in Images**: If the image includes text, that text should also be included in the alt text.\n4. **Avoid Redundant Phrasing**: Avoid phrases like \"image of\" or \"graphic of,\" as screen readers already announce the image role.\n5. **Use Null Alt Text for Decorative Images**: If an image is purely decorative and adds no informational value, use an empty alt attribute (alt=\"\").\n\n- **Example 1**: For an image of a warning sign that reads \"Wet Floor\", the alt text could be \"Wet Floor warning sign\".\n- **Example 2**: For a company logo that includes the company name, \"XYZ Corporation\", the alt text should be \"XYZ Corporation logo\".\n- **Example 3**: For a decorative image used as a spacer or stylistic element, the alt text should be set as an empty string (alt=\"\")."
        },
        {
            "question": "What is keyboard navigation?",
            "ground_truth": "Keyboard navigation refers to the use of a keyboard to move the focus between different interactive elements on a digital interface, such as links, buttons, form fields, and other actionable items, without the need for a mouse.\n\nKeyboard navigation enables users, particularly those with visual impairments or physical disabilities, to interact with various elements on a webpage or within software applications using specific keystrokes. This method of navigation is crucial for accessibility, as it allows users who cannot use a mouse or other pointing devices to access all functionalities of digital content. The context highlights the role of assistive technologies in managing keyboard inputs to facilitate navigation and interaction, ensuring that users can enter and exit different modes (like forms mode or focus mode) to interact with content effectively.\n\n1. Ensure all interactive elements are accessible via keyboard: This includes links, buttons, form fields, and custom widgets.\n2. Use standard HTML elements when possible: These elements inherently support keyboard accessibility.\n3. Implement focus management: Make sure that the keyboard focus is visible and moves in a logical order across the page.\n4. Provide skip navigation links: These allow users to bypass repetitive content and navigate directly to main content areas.\n5. Avoid keyboard traps: Ensure that users can navigate into and out of all content areas using only the keyboard.\n6. Test with real users: Include users who rely on keyboard navigation in your testing process to ensure all interactive elements are accessible.\n\n1. A user presses the \"Tab\" key to move focus from one button to another on a webpage.\n2. Pressing \"Enter\" activates a focused link or button.\n3. Using arrow keys to navigate through items in a dropdown menu.\n4. A user employs a combination of \"Tab\" and \"Shift + Tab\" to navigate forward and backward through interactive elements.\n5. Implementing a \"Skip to main content\" link at the beginning of each page allows users to bypass navigation menus and go directly to the primary content."
        }
    ]
} 