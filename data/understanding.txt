Section 1: non_text_content
==================================================

In Brief
	- Goal
	- Non-text information is available to more people.
	- What to do
	- Create a text alternative for visual and auditory content.
	- Why it's important
	- People who can’t fully see or hear content can understand it.

Success Criterion (SC): All non-text content that is presented to the user has a text alternative that serves the equivalent purpose, except for the situations listed below.: Controls, Input: If non-text content is a control or accepts user input, then it has a name that describes its purpose. (Refer to Success Criterion 4.1.2 for additional requirements for controls and content that accepts user input.): Time-Based Media: If non-text content is time-based media, then text alternatives at least provide descriptive identification of the non-text content. (Refer to Guideline 1.2 for additional requirements for media.): Test: If non-text content is a test or exercise that would be invalid if presented in text, then text alternatives at least provide descriptive identification of the non-text content.: Sensory: If non-text content is primarily intended to create a specific sensory experience, then text alternatives at least provide descriptive identification of the non-text content.: CAPTCHA: If the purpose of non-text content is to confirm that content is being accessed by a person rather than a computer, then text alternatives that identify and describe the purpose of the non-text content are provided, and alternative forms of CAPTCHA using output modes for different types of sensory perception are provided to accommodate different disabilities.: Decoration, Formatting, Invisible: If non-text content is pure decoration, is used only for visual formatting, or is not presented to users, then it is implemented in a way that it can be ignored by assistive technology.

Intent: The intent of this Success Criterion is to make information conveyed by non-text content accessible through the use of a text alternative. Text alternatives are a primary way for making information accessible because they can be rendered through any sensory modality (for example, visual, auditory or tactile) to match the needs of the user. Providing text alternatives allows the information to be rendered in a variety of ways by a variety of user agents. For example, people who cannot see a picture can have the text alternative read aloud using synthesized speech. People who cannot hear an audio file can have the text alternative displayed so that they can read it. In the future, text alternatives will also allow information to be more easily translated into sign language or into a simpler form of the same language.: Note on CAPTCHA: CAPTCHAs are a controversial topic in the accessibility community. As is described in the paper Inaccessibility of CAPTCHA, CAPTCHAs intrinsically push the edges of human abilities in an attempt to defeat automated processes. Every type of CAPTCHA will be unsolvable by users with certain disabilities. However, they are widely used, and the Web Content Accessibility Guidelines Working Group believes that if CAPTCHAs were forbidden outright, Web sites would choose not to conform to WCAG rather than abandon CAPTCHA. This would create barriers for a great many more users with disabilities. For this reason the Working Group has chosen to structure the requirement about CAPTCHA in a way that meets the needs of most people with disabilities, yet is also considered adoptable by sites. Requiring two different forms of CAPTCHA on a given site ensures that most people with disabilities will find a form they can use.: Because some users with disabilities will still not be able to access sites that meet the minimum requirements, the Working Group provides recommendations for additional steps. Organizations motivated to conform to WCAG should be aware of the importance of this topic and should go as far beyond the minimum requirements of the guidelines as possible. Additional recommended steps include:: Providing more than two modalities of CAPTCHAs
	- Providing access to a human customer service representative who can bypass CAPTCHA
	- Not requiring CAPTCHAs for authorized users
	- Additional information: Non-text content can take a number of forms, and this Success Criterion specifies how each is to be handled.: For non-text content that is not covered by one of the other situations listed below, such as charts, diagrams, audio recordings, pictures, and animations, text alternatives can make the same information available in a form that can be rendered through any modality (for example, visual, auditory or tactile). Short and long text alternatives can be used as needed to convey the information in the non-text content. Note that prerecorded audio-only and prerecorded video-only files are covered here. Live-audio-only and Live-video-only files are covered below (see 3rd paragraph following this one).: For non-text content that is a control or accepts user input , such as images used as submit buttons, image maps or complex animations, a name is provided to describe the purpose of the non-text content so that the person at least knows what the non-text content is and why it is there.: Non-text content that is time-based media is made accessible through 1.2: Time-Based Media. However, it is important that users know what it is when they encounter it on a page so they can decide what action if any they want to take with it. A text alternative that describes the time-based media and/or gives its title is therefore provided.: For Live Audio-only and live video-only content , it can be much more difficult to provide text alternatives that provide equivalent information as live audio-only and live video-only content. For these types of non-text content, text alternatives provide a descriptive label.: Sometimes a test or exercise must be partially or completely presented in non-text format. Audio or visual information is provided that cannot be changed to text because the test or exercise must be conducted using that sense. For example, a hearing test would be invalid if a text alternative were provided. A visual skill development exercise would similarly make no sense in text form. And a spelling test with text alternatives would not be very effective. For these cases, text alternatives should be provided to describe the purpose of the non-text content; of course, the text alternatives would not provide the same information needed to pass the test.: Sometimes content is primarily intended to create a specific sensory experience that words cannot fully capture. Examples include a symphony performance, works of visual art etc. For such content, text alternatives at least identify the non-text content with a descriptive label and where possible, additional descriptive text. If the reason for including the content in the page is known and can be described it is helpful to include that information.: Sometimes there are non-text exercises that are used to prove you are human. To avoid spam robots and other software from gaining access to a site a device called a CAPTCHA is used. These usually involve visual or auditory tasks that are beyond the current capabilities of Web robots. Providing a text alternative to them would however make them operable by Robots, thus defeating their purpose. In this case a text alternative would describe the purpose of the CAPTCHA, and alternate forms using different modalities would be provided to address the needs of people with different disabilities.: Sometimes there is non-text content that really is not meant to be seen or understood by the user. Transparent images used to move text over on a page; an invisible image that is used to track usage statistics; and a swirl in the corner that conveys no information but just fills up a blank space to create an aesthetic effect are all examples of this. Putting alternative text on such items just distracts people using screen readers from the content on the page. Not marking the content in any way, though, leaves users guessing what the non-text content is and what information they may have missed (even though they have not missed anything in reality). This type of non-text content, therefore, is marked or implemented in a way that assistive technologies (AT) will ignore it and not present anything to the user.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: Select the situation below that matches your content. Each situation includes techniques or combinations of techniques that are known and documented to be sufficient for that situation.: Situation A: If a short description can serve the same purpose and present the same information as the non-text content:
	- G94: Providing short text alternative for non-text content that serves the same purpose and presents the same information as the non-text content using one of the following Short text alternative techniques for Situation A :: Short text alternative techniques for Situation A:: ARIA6: Using aria-label to provide labels for objects
	- ARIA10: Using aria-labelledby to provide a text alternative for non-text content
	- G196: Using a text alternative on one item within a group of images that describes all items in the group
	- H2: Combining adjacent image and text links for the same resource
	- H37: Using alt attributes on img elements
	- H53: Using the body of the object element
	- H86: Providing text alternatives for emojis, emoticons, ASCII art, and leetspeak
	- PDF1: Applying text alternatives to images with the Alt entry in PDF documents
	- Situation B: If a short description can not serve the same purpose and present the same information as the non-text content (e.g., a chart or diagram):
	- G95: Providing short text alternatives that provide a brief description of the non-text content using one of the following Short text alternative techniques for Situation B AND one of the following Long text alternative techniques for Situation B :: Short text alternative techniques for Situation B:: ARIA6: Using aria-label to provide labels for objects
	- ARIA10: Using aria-labelledby to provide a text alternative for non-text content
	- G196: Using a text alternative on one item within a group of images that describes all items in the group
	- H2: Combining adjacent image and text links for the same resource
	- H37: Using alt attributes on img elements
	- H53: Using the body of the object element
	- H86: Providing text alternatives for emojis, emoticons, ASCII art, and leetspeak
	- PDF1: Applying text alternatives to images with the Alt entry in PDF documents: Long text alternative techniques for Situation B:: ARIA15: Using aria-describedby to provide descriptions of images
	- G73: Providing a long description in another location with a link to it that is immediately adjacent to the non-text content
	- G74: Providing a long description in text near the non-text content, with a reference to the location of the long description in the short description
	- G92: Providing long description for non-text content that serves the same purpose and presents the same information
	- H53: Using the body of the object element
	- Situation C: If non-text content is a control or accepts user input:
	- G82: Providing a text alternative that identifies the purpose of the non-text content using one of the following Text alternative techniques for controls and input for Situation C :: Text alternative techniques for controls and input for Situation C:: ARIA6: Using aria-label to provide labels for objects
	- ARIA9: Using aria-labelledby to concatenate a label from several text nodes
	- H24: Providing text alternatives for the area elements of image maps
	- H30: Providing link text that describes the purpose of a link for anchor elements
	- H36: Using alt attributes on images used as submit buttons
	- H44: Using label elements to associate text labels with form controls
	- H65: Using the title attribute to identify form controls when the label element cannot be used
	- Situation D: If non-text content is time-based media (including live video-only and live audio-only); a test or exercise that would be invalid if presented in text; or primarily intended to create a specific sensory experience:
	- Providing a descriptive label using one of the following Short text alternative techniques for Situation D :
	- G68: Providing a short text alternative that describes the purpose of live audio-only and live video-only content using one of the following Short text alternative techniques for Situation D :
	- G100: Providing a short text alternative which is the accepted name or a descriptive name of the non-text content using one of the following Short text alternative techniques for Situation D :: Short text alternative techniques for Situation D:: ARIA6: Using aria-label to provide labels for objects
	- ARIA10: Using aria-labelledby to provide a text alternative for non-text content
	- G196: Using a text alternative on one item within a group of images that describes all items in the group
	- H2: Combining adjacent image and text links for the same resource
	- H37: Using alt attributes on img elements
	- H53: Using the body of the object element
	- H86: Providing text alternatives for emojis, emoticons, ASCII art, and leetspeak
	- PDF1: Applying text alternatives to images with the Alt entry in PDF documents
	- Situation E: If non-text content is a CAPTCHA:
	- G143: Providing a text alternative that describes the purpose of the CAPTCHA AND G144: Ensuring that the Web Page contains another CAPTCHA serving the same purpose using a different modality
	- Situation F: If the non-text content should be ignored by assistive technology:
	- Implementing or marking the non-text content so that it will be ignored by assistive technology using one of the following Techniques to indicate that text alternatives are not required for Situation F :: Techniques to indicate that text alternatives are not required for Situation F:: C9: Using CSS to include decorative images
	- H67: Using null alt text and no title attribute on img elements for images that assistive technology should ignore
	- PDF4: Hiding decorative images with the Artifact tag in PDF documents
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: CSS Techniques (Advisory)
	- C18: Using CSS margin and padding rules instead of spacer images for layout design
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F3: Failure of Success Criterion 1.1.1 due to using CSS to include images that convey important information
	- F13: Failure of Success Criterion 1.1.1 and 1.4.1 due to having a text alternative that does not include information that is conveyed by color differences in the image
	- F20: Failure of Success Criterion 1.1.1 and 4.1.2 due to not updating text alternatives when changes to non-text content occur
	- F30: Failure of Success Criterion 1.1.1 and 1.2.1 due to using text alternatives that are not alternatives (e.g., filenames or placeholder text)
	- F38: Failure of Success Criterion 1.1.1 due to not marking up decorative images in HTML in a way that allows assistive technology to ignore them
	- F39: Failure of Success Criterion 1.1.1 due to providing a text alternative that is not null (e.g., alt="spacer" or alt="image") for images that should be ignored by assistive technology
	- F65: Failure of Success Criterion 1.1.1 due to omitting the alt attribute or text alternative on img elements, area elements, and input elements of type "image"
	- F67: Failure of Success Criterion 1.1.1 and 1.2.1 due to providing long descriptions for non-text content that does not serve the same purpose or does not present the same information
	- F71: Failure of Success Criterion 1.1.1 due to using text look-alikes to represent text without providing a text alternative
	- F72: Failure of Success Criterion 1.1.1 due to using ASCII art without providing a text alternative

- G94: Providing short text alternative for non-text content that serves the same purpose and presents the same information as the non-text content: http://localhost:3000/techniques/general/G94
- ARIA6: Using aria-label to provide labels for objects: http://localhost:3000/techniques/aria/ARIA6
- ARIA10: Using aria-labelledby to provide a text alternative for non-text content: http://localhost:3000/techniques/aria/ARIA10
- G196: Using a text alternative on one item within a group of images that describes all items in the group: http://localhost:3000/techniques/general/G196
- H2: Combining adjacent image and text links for the same resource: http://localhost:3000/techniques/html/H2
- H37: Using alt attributes on img elements: http://localhost:3000/techniques/html/H37
- H53: Using the body of the object element: http://localhost:3000/techniques/html/H53
- H86: Providing text alternatives for emojis, emoticons, ASCII art, and leetspeak: http://localhost:3000/techniques/html/H86
- PDF1: Applying text alternatives to images with the Alt entry in PDF documents: http://localhost:3000/techniques/pdf/PDF1
- G95: Providing short text alternatives that provide a brief description of the non-text content: http://localhost:3000/techniques/general/G95
- ARIA6: Using aria-label to provide labels for objects: http://localhost:3000/techniques/aria/ARIA6
- ARIA10: Using aria-labelledby to provide a text alternative for non-text content: http://localhost:3000/techniques/aria/ARIA10
- G196: Using a text alternative on one item within a group of images that describes all items in the group: http://localhost:3000/techniques/general/G196
- H2: Combining adjacent image and text links for the same resource: http://localhost:3000/techniques/html/H2
- H37: Using alt attributes on img elements: http://localhost:3000/techniques/html/H37
- H53: Using the body of the object element: http://localhost:3000/techniques/html/H53
- H86: Providing text alternatives for emojis, emoticons, ASCII art, and leetspeak: http://localhost:3000/techniques/html/H86
- PDF1: Applying text alternatives to images with the Alt entry in PDF documents: http://localhost:3000/techniques/pdf/PDF1
- ARIA15: Using aria-describedby to provide descriptions of images: http://localhost:3000/techniques/aria/ARIA15
- G73: Providing a long description in another location with a link to it that is immediately adjacent to the non-text content: http://localhost:3000/techniques/general/G73
- G74: Providing a long description in text near the non-text content, with a reference to the location of the long description in the short description: http://localhost:3000/techniques/general/G74
- G92: Providing long description for non-text content that serves the same purpose and presents the same information: http://localhost:3000/techniques/general/G92
- H53: Using the body of the object element: http://localhost:3000/techniques/html/H53
- G82: Providing a text alternative that identifies the purpose of the non-text content: http://localhost:3000/techniques/general/G82
- ARIA6: Using aria-label to provide labels for objects: http://localhost:3000/techniques/aria/ARIA6
- ARIA9: Using aria-labelledby to concatenate a label from several text nodes: http://localhost:3000/techniques/aria/ARIA9
- H24: Providing text alternatives for the area elements of image maps: http://localhost:3000/techniques/html/H24
- H30: Providing link text that describes the purpose of a link for anchor elements: http://localhost:3000/techniques/html/H30
- H36: Using alt attributes on images used as submit buttons: http://localhost:3000/techniques/html/H36
- H44: Using label elements to associate text labels with form controls: http://localhost:3000/techniques/html/H44
- H65: Using the title attribute to identify form controls when the label element cannot be used: http://localhost:3000/techniques/html/H65
- G68: Providing a short text alternative that describes the purpose of live audio-only and live video-only content: http://localhost:3000/techniques/general/G68
- G100: Providing a short text alternative which is the accepted name or a descriptive name of the non-text content: http://localhost:3000/techniques/general/G100
- ARIA6: Using aria-label to provide labels for objects: http://localhost:3000/techniques/aria/ARIA6
- ARIA10: Using aria-labelledby to provide a text alternative for non-text content: http://localhost:3000/techniques/aria/ARIA10
- G196: Using a text alternative on one item within a group of images that describes all items in the group: http://localhost:3000/techniques/general/G196
- H2: Combining adjacent image and text links for the same resource: http://localhost:3000/techniques/html/H2
- H37: Using alt attributes on img elements: http://localhost:3000/techniques/html/H37
- H53: Using the body of the object element: http://localhost:3000/techniques/html/H53
- H86: Providing text alternatives for emojis, emoticons, ASCII art, and leetspeak: http://localhost:3000/techniques/html/H86
- PDF1: Applying text alternatives to images with the Alt entry in PDF documents: http://localhost:3000/techniques/pdf/PDF1
- G143: Providing a text alternative that describes the purpose of the CAPTCHA: http://localhost:3000/techniques/general/G143
- G144: Ensuring that the Web Page contains another CAPTCHA serving the same purpose using a different modality: http://localhost:3000/techniques/general/G144
- C9: Using CSS to include decorative images: http://localhost:3000/techniques/css/C9
- H67: Using null alt text and no title attribute on img elements for images that assistive technology should ignore: http://localhost:3000/techniques/html/H67
- PDF4: Hiding decorative images with the Artifact tag in PDF documents: http://localhost:3000/techniques/pdf/PDF4
- C18: Using CSS margin and padding rules instead of spacer images for layout design: http://localhost:3000/techniques/css/C18
- F3: Failure of Success Criterion 1.1.1 due to using CSS to include images that convey important information: http://localhost:3000/techniques/failures/F3
- F13: Failure of Success Criterion 1.1.1 and 1.4.1 due to having a text alternative that does not include information that is conveyed by color differences in the image: http://localhost:3000/techniques/failures/F13
- F20: Failure of Success Criterion 1.1.1 and 4.1.2 due to not updating text alternatives when changes to non-text content occur: http://localhost:3000/techniques/failures/F20
- F30: Failure of Success Criterion 1.1.1 and 1.2.1 due to using text alternatives that are not alternatives (e.g., filenames or placeholder text): http://localhost:3000/techniques/failures/F30
- F38: Failure of Success Criterion 1.1.1 due to not marking up decorative images in HTML in a way that allows assistive technology to ignore them: http://localhost:3000/techniques/failures/F38
- F39: Failure of Success Criterion 1.1.1 due to providing a text alternative that is not null (e.g., alt="spacer" or alt="image") for images that should be ignored by assistive technology: http://localhost:3000/techniques/failures/F39
- F65: Failure of Success Criterion 1.1.1 due to omitting the alt attribute or text alternative on img elements, area elements, and input elements of type "image": http://localhost:3000/techniques/failures/F65
- F67: Failure of Success Criterion 1.1.1 and 1.2.1 due to providing long descriptions for non-text content that does not serve the same purpose or does not present the same information: http://localhost:3000/techniques/failures/F67
- F71: Failure of Success Criterion 1.1.1 due to using text look-alikes to represent text without providing a text alternative: http://localhost:3000/techniques/failures/F71
- F72: Failure of Success Criterion 1.1.1 due to using ASCII art without providing a text alternative: http://localhost:3000/techniques/failures/F72



--------------------------------------------------

Section 2: audio_only_and_video_only_prerecorded
==================================================

In Brief
	- Goal
	- Audio and video-only content can be understood by more people.
	- What to do
	- Provide an alternative when content is perceivable with only one sense.
	- Why it's important
	- People who can’t fully see or hear content can understand it.

Success Criterion (SC): For prerecorded audio-only and prerecorded video-only media, the following are true, except when the audio or video is a media alternative for text and is clearly labeled as such:: Prerecorded Audio-only: An alternative for time-based media is provided that presents equivalent information for prerecorded audio-only content.: Prerecorded Video-only: Either an alternative for time-based media or an audio track is provided that presents equivalent information for prerecorded video-only content.

Intent: The intent of this Success Criterion is to make information conveyed by prerecorded audio-only and prerecorded video-only content available to all users. Alternatives for time-based media that are text based make information accessible because text can be rendered through any sensory modality (for example, visual, auditory or tactile) to match the needs of the user. In the future, text could also be translated into symbols, sign language or simpler forms of the language (future).: An example of pre-recorded video with no audio information or user interaction is a silent movie. The purpose of the transcript is to provide an equivalent to what is presented visually. For prerecorded video content, authors have the option to provide an audio track. The purpose of the audio alternative is to be an equivalent to the video. This makes it possible for users with and without vision impairment to review content simultaneously. The approach can also make it easier for those with cognitive, language and learning disabilities to understand the content because it would provide parallel presentation.: Note: A text equivalent is not required for audio that is provided as an equivalent for video with no audio information. For example, it is not required to caption audio description that is provided as an alternative to a silent movie.: See also 1.2.9: Audio-only (Live)

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: Select the situation below that matches your content. Each situation includes techniques or combinations of techniques that are known and documented to be sufficient for that situation.: Situation A: If the content is prerecorded audio-only:
	- G158: Providing an alternative for time-based media for audio-only content
	- Situation B: If the content is prerecorded video-only:
	- G159: Providing an alternative for time-based media for video-only content
	- G166: Providing audio that describes the important video content and describing it as such
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: H96: Using the track element to provide audio descriptions
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F30: Failure of Success Criterion 1.1.1 and 1.2.1 due to using text alternatives that are not alternatives (e.g., filenames or placeholder text)
	- F67: Failure of Success Criterion 1.1.1 and 1.2.1 due to providing long descriptions for non-text content that does not serve the same purpose or does not present the same information

- G158: Providing an alternative for time-based media for audio-only content: http://localhost:3000/techniques/general/G158
- G159: Providing an alternative for time-based media for video-only content: http://localhost:3000/techniques/general/G159
- G166: Providing audio that describes the important video content and describing it as such: http://localhost:3000/techniques/general/G166
- H96: Using the track element to provide audio descriptions: http://localhost:3000/techniques/html/H96
- F30: Failure of Success Criterion 1.1.1 and 1.2.1 due to using text alternatives that are not alternatives (e.g., filenames or placeholder text): http://localhost:3000/techniques/failures/F30
- F67: Failure of Success Criterion 1.1.1 and 1.2.1 due to providing long descriptions for non-text content that does not serve the same purpose or does not present the same information: http://localhost:3000/techniques/failures/F67



--------------------------------------------------

Section 3: captions_prerecorded
==================================================

In Brief
	- Goal
	- Videos can be played with captions.
	- What to do
	- Provide synchronized text for audio content in existing videos.
	- Why it's important
	- People who are deaf or hard of hearing can understand audio in videos.

Success Criterion (SC): Captions are provided for all prerecorded audio content in synchronized media, except when the media is a media alternative for text and is clearly labeled as such.

Intent: The intent of this Success Criterion is to enable people who are deaf or hard of hearing to watch synchronized media presentations. Captions provide the part of the content available via the audio track. Captions not only include dialogue, but identify who is speaking and include non-speech information conveyed through sound, including meaningful sound effects.: It is acknowledged that at the present time there may be difficulty in creating captions for time-sensitive material and this may result in the author being faced with the choice of delaying the information until captions are available, or publishing time-sensitive content that is inaccessible to the deaf, at least for the interval until captions are available. Over time, the tools for captioning as well as building the captioning into the delivery process can shorten or eliminate such delays.: Captions are not needed when the synchronized media is, itself, an alternate presentation of information that is also presented via text on the Web page. For example, if information on a page is accompanied by a synchronized media presentation that presents no more information than is already presented in text, but is easier for people with cognitive, language, or learning disabilities to understand, then it would not need to be captioned since the information is already presented on the page in text or in text alternatives (e.g., for images).: See also 1.2.4: Captions (Live).

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G93: Providing open (always visible) captions
	- G87: Providing closed captions using any readily available media format that has a video player that supports closed captioning: G87: Providing closed captions using any of the technology-specific techniques below: SM11: Providing captions through synchronized text streams in SMIL 1.0
	- SM12: Providing captions through synchronized text streams in SMIL 2.0
	- H95: Using the track element to provide captions
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F8: Failure of Success Criterion 1.2.2 due to captions omitting some dialogue or important sound effects
	- F75: Failure of Success Criterion 1.2.2 by providing synchronized media without captions when the synchronized media presents more information than is presented on the page
	- F74: Failure of Success Criterion 1.2.2 and 1.2.8 due to not labeling a synchronized media alternative to text as an alternative

- G93: Providing open (always visible) captions: http://localhost:3000/techniques/general/G93
- G87: Providing closed captions: http://localhost:3000/techniques/general/G87
- G87: Providing closed captions: http://localhost:3000/techniques/general/G87
- SM11: Providing captions through synchronized text streams in SMIL 1.0: http://localhost:3000/techniques/smil/SM11
- SM12: Providing captions through synchronized text streams in SMIL 2.0: http://localhost:3000/techniques/smil/SM12
- H95: Using the track element to provide captions: http://localhost:3000/techniques/html/H95
- F8: Failure of Success Criterion 1.2.2 due to captions omitting some dialogue or important sound effects: http://localhost:3000/techniques/failures/F8
- F75: Failure of Success Criterion 1.2.2 by providing synchronized media without captions when the synchronized media presents more information than is presented on the page: http://localhost:3000/techniques/failures/F75
- F74: Failure of Success Criterion 1.2.2 and 1.2.8 due to not labeling a synchronized media alternative to text as an alternative: http://localhost:3000/techniques/failures/F74



--------------------------------------------------

Section 4: audio_description_or_media_alternative_prerecorded
==================================================

In Brief
	- Goal
	- Prerecorded videos can be understood by more people.
	- What to do
	- Provide a description of the visual content in videos.
	- Why it's important
	- People who are blind or who cannot understand the visual content can have it described.

Success Criterion (SC): An alternative for time-based media or audio description of the prerecorded video content is provided for synchronized media, except when the media is a media alternative for text and is clearly labeled as such.

Intent: The intent of this Success Criterion is to provide people who are blind or visually impaired access to the visual information in a synchronized media presentation. This Success Criterion describes two approaches, either of which can be used.: One approach is to provide audio description of the video content. The audio description augments the audio portion of the presentation with the information needed when the video portion is not available. During existing pauses in dialogue, audio description provides information about actions, characters, scene changes, and on-screen text that are important and are not described or spoken in the main sound track.: The second approach involves providing all of the information in the synchronized media (both visual and auditory) in text form. An alternative for time-based media provides a running description of all that is going on in the synchronized media content. The alternative for time-based media reads something like a screenplay or book. Unlike audio description, the description of the video portion is not constrained to just the pauses in the existing dialogue. Full descriptions are provided of all visual information, including visual context, actions and expressions of actors, and any other visual material. In addition, non-speech sounds (laughter, off-screen voices, etc.) are described, and transcripts of all dialogue are included. The sequence of description and dialogue transcripts are the same as the sequence in the synchronized media itself. As a result, the alternative for time-based media can provide a much more complete representation of the synchronized media content than audio description alone.: If there is any interaction as part of the synchronized media presentation (e.g., "press now to answer the question") then the alternative for time-based media would provide hyperlinks or whatever is needed to provide the same functionality.: Note: For 1.2.3, 1.2.5, and 1.2.7, if all of the information in the video track is already provided in the audio track, no audio description is necessary.: 1.2.3, 1.2.5, and 1.2.8 overlap somewhat with each other. This is to give the author some choice at the minimum conformance level, and to provide additional requirements at higher levels. At Level A in Success Criterion 1.2.3, authors do have the choice of providing either an audio description or a full text alternative. If they wish to conform at Level AA, under Success Criterion 1.2.5 authors must provide an audio description - a requirement already met if they chose that alternative for 1.2.3, otherwise an additional requirement. At Level AAA under Success Criterion 1.2.8 they must provide an extended text description. This is an additional requirement if both 1.2.3 and 1.2.5 were met by providing an audio description only. If 1.2.3 was met, however, by providing a text description, and the 1.2.5 requirement for an audio description was met, then 1.2.8 does not add new requirements.: See also 1.2.5 Audio Description (Prerecorded), 1.2.7 Extended Audio Description (Prerecorded) and 1.2.8 Media Alternative (Prerecorded).

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: G69: Providing an alternative for time based media using one of the following techniques: G58: Placing a link to the alternative for time-based media immediately next to the non-text content: Linking to the alternative for time-based media using one of the following techniques: H53: Using the body of the object element
	- G78: Providing a second, user-selectable, audio track that includes audio descriptions: G173: Providing a version of a movie with audio descriptions using one of the following:: SM6: Providing audio description in SMIL 1.0
	- SM7: Providing audio description in SMIL 2.0
	- Using any player that supports audio and video: G8: Providing a movie with extended audio descriptions using one of the following:: SM1: Adding extended audio description in SMIL 1.0
	- SM2: Adding extended audio description in SMIL 2.0
	- Using any player that supports audio and video
	- G203: Using a static text alternative to describe a talking head video
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: H96: Using the track element to provide audio descriptions

- G69: Providing an alternative for time based media: http://localhost:3000/techniques/general/G69
- G58: Placing a link to the alternative for time-based media immediately next to the non-text content: http://localhost:3000/techniques/general/G58
- H53: Using the body of the object element: http://localhost:3000/techniques/html/H53
- G78: Providing a second, user-selectable, audio track that includes audio descriptions: http://localhost:3000/techniques/general/G78
- G173: Providing a version of a movie with audio descriptions: http://localhost:3000/techniques/general/G173
- SM6: Providing audio description in SMIL 1.0: http://localhost:3000/techniques/smil/SM6
- SM7: Providing audio description in SMIL 2.0: http://localhost:3000/techniques/smil/SM7
- G8: Providing a movie with extended audio descriptions: http://localhost:3000/techniques/general/G8
- SM1: Adding extended audio description in SMIL 1.0: http://localhost:3000/techniques/smil/SM1
- SM2: Adding extended audio description in SMIL 2.0: http://localhost:3000/techniques/smil/SM2
- G203: Using a static text alternative to describe a talking head video: http://localhost:3000/techniques/general/G203
- H96: Using the track element to provide audio descriptions: http://localhost:3000/techniques/html/H96



--------------------------------------------------

Section 5: captions_live
==================================================

In Brief
	- Goal
	- Live videos have captions.
	- What to do
	- Provide synchronized text for audio content in real-time videos.
	- Why it's important
	- People who are deaf or hard of hearing can understand audio in real-time video content.

Success Criterion (SC): Captions are provided for all live audio content in synchronized media.

Intent: The intent of this Success Criterion is to enable people who are deaf or hard of hearing to watch real-time presentations. Captions provide the part of the content available via the audio track. Captions not only include dialogue, but also identify who is speaking and notate sound effects and other significant audio.: This success criterion was intended to apply to broadcast of synchronized media and is not intended to require that two-way multimedia calls between two or more individuals through web apps must be captioned regardless of the needs of users. Responsibility for providing captions would fall to the content providers (the callers) or the “host” caller, and not the application.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G9: Creating captions for live synchronized media AND G93: Providing open (always visible) captions
	- G9: Creating captions for live synchronized media AND G87: Providing closed captions using any readily available media format that has a video player that supports closed captioning: G9: Creating captions for live synchronized media AND G87: Providing closed captions using one of the following techniques:: SM11: Providing captions through synchronized text streams in SMIL 1.0
	- SM12: Providing captions through synchronized text streams in SMIL 2.0: Note: Captions may be generated using real-time text translation service.

- G9: Creating captions for live synchronized media: http://localhost:3000/techniques/general/G9
- G93: Providing open (always visible) captions: http://localhost:3000/techniques/general/G93
- G9: Creating captions for live synchronized media: http://localhost:3000/techniques/general/G9
- G87: Providing closed captions: http://localhost:3000/techniques/general/G87
- G9: Creating captions for live synchronized media: http://localhost:3000/techniques/general/G9
- G87: Providing closed captions: http://localhost:3000/techniques/general/G87
- SM11: Providing captions through synchronized text streams in SMIL 1.0: http://localhost:3000/techniques/smil/SM11
- SM12: Providing captions through synchronized text streams in SMIL 2.0: http://localhost:3000/techniques/smil/SM12



--------------------------------------------------

Section 6: audio_description_prerecorded
==================================================

In Brief
	- Goal
	- Videos can be played with audio descriptions.
	- What to do
	- Provide a synchronized spoken description of the visual content in videos.
	- Why it's important
	- People who cannot see or understand the visual content can hear about it while playing videos.

Success Criterion (SC): Audio description is provided for all prerecorded video content in synchronized media.

Intent: The intent of this Success Criterion is to provide people who are blind or visually impaired access to the visual information in a synchronized media presentation. The audio description augments the audio portion of the presentation with the information needed when the video portion is not available. During existing pauses in dialogue, audio description provides information about actions, characters, scene changes, and on-screen text that are important and are not described or spoken in the main sound track.: Note: For 1.2.3, 1.2.5, and 1.2.7, if all of the information in the video track is already provided in the audio track, no audio description is necessary.: 1.2.3, 1.2.5, and 1.2.8 overlap somewhat with each other. This is to give the author some choice at the minimum conformance level, and to provide additional requirements at higher levels. At Level A in Success Criterion 1.2.3, authors do have the choice of providing either an audio description or a full text alternative. If they wish to conform at Level AA, under Success Criterion 1.2.5 authors must provide an audio description - a requirement already met if they chose that alternative for 1.2.3, otherwise an additional requirement. At Level AAA under Success Criterion 1.2.8 they must provide an extended text description. This is an additional requirement if both 1.2.3 and 1.2.5 were met by providing an audio description only. If 1.2.3 was met, however, by providing a text description, and the 1.2.5 requirement for an audio description was met, then 1.2.8 does not add new requirements.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G78: Providing a second, user-selectable, audio track that includes audio descriptions: G173: Providing a version of a movie with audio descriptions using one of the following:: SM6: Providing audio description in SMIL 1.0
	- SM7: Providing audio description in SMIL 2.0
	- Using any player that supports audio and video: G8: Providing a movie with extended audio descriptions using one of the following:: SM1: Adding extended audio description in SMIL 1.0
	- SM2: Adding extended audio description in SMIL 2.0
	- Using any player that supports audio and video
	- G203: Using a static text alternative to describe a talking head video
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: H96: Using the track element to provide audio descriptions

- G78: Providing a second, user-selectable, audio track that includes audio descriptions: http://localhost:3000/techniques/general/G78
- G173: Providing a version of a movie with audio descriptions: http://localhost:3000/techniques/general/G173
- SM6: Providing audio description in SMIL 1.0: http://localhost:3000/techniques/smil/SM6
- SM7: Providing audio description in SMIL 2.0: http://localhost:3000/techniques/smil/SM7
- G8: Providing a movie with extended audio descriptions: http://localhost:3000/techniques/general/G8
- SM1: Adding extended audio description in SMIL 1.0: http://localhost:3000/techniques/smil/SM1
- SM2: Adding extended audio description in SMIL 2.0: http://localhost:3000/techniques/smil/SM2
- G203: Using a static text alternative to describe a talking head video: http://localhost:3000/techniques/general/G203
- H96: Using the track element to provide audio descriptions: http://localhost:3000/techniques/html/H96



--------------------------------------------------

Section 7: sign_language_prerecorded
==================================================

In Brief
	- Goal
	- Videos can be accompanied by sign language.
	- What to do
	- Provide sign language interpretation for audio content in existing videos.
	- Why it's important
	- People who are deaf or hard of hearing have more ways to understand multimedia content.

Success Criterion (SC): Sign language interpretation is provided for all prerecorded audio content in synchronized media.

Intent: The intent of this Success Criterion is to enable people who are deaf or hard of hearing and who are fluent in a sign language to understand the content of the audio track of synchronized media presentations. Written text, such as that found in captions, is often a second language. Because sign language provides the ability to provide intonation, emotion and other audio information that is reflected in sign language interpretation, but not in captions, sign language interpretation provides richer and more equivalent access to synchronized media. People who communicate extensively in sign language are also faster in sign language and synchronized media is a time-based presentation.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G54: Including a sign language interpreter in the video stream: G81: Providing a synchronized video of the sign language interpreter that can be displayed in a different viewport or overlaid on the image by the player using one of the following techniques: SM13: Providing sign language interpretation through synchronized video streams in SMIL 1.0
	- SM14: Providing sign language interpretation through synchronized video streams in SMIL 2.0

- G54: Including a sign language interpreter in the video stream: http://localhost:3000/techniques/general/G54
- G81: Providing a synchronized video of the sign language interpreter that can be displayed in a different viewport or overlaid on the image by the player: http://localhost:3000/techniques/general/G81
- SM13: Providing sign language interpretation through synchronized video streams in SMIL 1.0: http://localhost:3000/techniques/smil/SM13
- SM14: Providing sign language interpretation through synchronized video streams in SMIL 2.0: http://localhost:3000/techniques/smil/SM14



--------------------------------------------------

Section 8: extended_audio_description_prerecorded
==================================================

In Brief
	- Goal
	- Videos can be played with more detailed audio descriptions.
	- What to do
	- Provide extended spoken descriptions of the visual content in videos.
	- Why it's important
	- People who are blind or who cannot understand the visual content can have it described to them while playing videos.

Success Criterion (SC): Where pauses in foreground audio are insufficient to allow audio descriptions to convey the sense of the video, extended audio description is provided for all prerecorded video content in synchronized media.

Intent: The intent of this Success Criterion is to provide people who are blind or visually impaired access to a synchronized media presentation beyond that which can be provided by standard audio description. This is done by periodically freezing the synchronized media presentation and playing additional audio description. The synchronized media presentation is then resumed.: Because it disrupts viewing for those who do not need the additional description, techniques that allow you to turn the feature on and off are often provided. Alternately, versions with and without the additional description can be provided.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: G8: Providing a movie with extended audio descriptions using one of the following:: SM1: Adding extended audio description in SMIL 1.0
	- SM2: Adding extended audio description in SMIL 2.0
	- Using any player that supports audio and video
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: H96: Using the track element to provide audio descriptions

- G8: Providing a movie with extended audio descriptions: http://localhost:3000/techniques/general/G8
- SM1: Adding extended audio description in SMIL 1.0: http://localhost:3000/techniques/smil/SM1
- SM2: Adding extended audio description in SMIL 2.0: http://localhost:3000/techniques/smil/SM2
- H96: Using the track element to provide audio descriptions: http://localhost:3000/techniques/html/H96



--------------------------------------------------

Section 9: media_alternative_prerecorded
==================================================

In Brief
	- Goal
	- Precorded videos can be understood by more people.
	- What to do
	- Provide a text equivalent for all content in videos.
	- Why it's important
	- More people, including those who are deaf-blind, can better understand the content at their own pace.

Success Criterion (SC): An alternative for time-based media is provided for all prerecorded synchronized media and for all prerecorded video-only media.

Intent: The intent of this Success Criterion is to make audio visual material available to individuals whose vision is too poor to reliably read captions and whose hearing is too poor to reliably hear dialogue and audio description. This is done by providing an alternative for time-based media.: This approach involves providing all of the information in the synchronized media (both visual and auditory) in text form. An alternative for time-based media provides a running description of all that is going on in the synchronized media content. The alternative for time-based media reads something like a book. Unlike audio description, the description of the video portion is not constrained to just the pauses in the existing dialogue. Full descriptions are provided of all visual information, including visual context, actions and expressions of actors, and any other visual material. In addition, non-speech sounds (laughter, off-screen voices, etc.) are described, and transcripts of all dialogue are included. The sequence of descriptions and dialogue transcripts is the same as the sequence in the synchronized media itself. As a result, the alternative for time-based media can provide a much more complete representation of the synchronized media content than audio description alone.: If there is any interaction as part of the synchronized media presentation (e.g., "press now to answer the question") then the alternative for time-based media would provide hyperlinks or whatever is needed to provide parallel functionality.: Individuals whose vision is too poor to reliably read captions and whose hearing is too poor to reliably hear dialogue can access the alternative for time-based media by using a refreshable braille display.: Note: For 1.2.3, 1.2.5, and 1.2.7, if all of the information in the video track is already provided in the audio track, no audio description is necessary.: 1.2.3, 1.2.5, and 1.2.8 overlap somewhat with each other. This is to give the author some choice at the minimum conformance level, and to provide additional requirements at higher levels. At Level A in Success Criterion 1.2.3, authors do have the choice of providing either an audio description or a full text alternative. If they wish to conform at Level AA, under Success Criterion 1.2.5 authors must provide an audio description - a requirement already met if they chose that alternative for 1.2.3, otherwise an additional requirement. At Level AAA under Success Criterion 1.2.8 they must provide an extended text description. This is an additional requirement if both 1.2.3 and 1.2.5 were met by providing an audio description only. If 1.2.3 was met, however, by providing a text description, and the 1.2.5 requirement for an audio description was met, then 1.2.8 does not add new requirements.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: Select the situation below that matches your content. Each situation includes techniques or combinations of techniques that are known and documented to be sufficient for that situation.: Situation A: If the content is prerecorded synchronized media:: G69: Providing an alternative for time based media using one of the following techniques: G58: Placing a link to the alternative for time-based media immediately next to the non-text content: Linking to the alternative for time-based media using one of the following techniques: H53: Using the body of the object element
	- Situation B: If the content is prerecorded video-only:
	- G159: Providing an alternative for time-based media for video-only content
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F74: Failure of Success Criterion 1.2.2 and 1.2.8 due to not labeling a synchronized media alternative to text as an alternative

- G69: Providing an alternative for time based media: http://localhost:3000/techniques/general/G69
- G58: Placing a link to the alternative for time-based media immediately next to the non-text content: http://localhost:3000/techniques/general/G58
- H53: Using the body of the object element: http://localhost:3000/techniques/html/H53
- G159: Providing an alternative for time-based media for video-only content: http://localhost:3000/techniques/general/G159
- F74: Failure of Success Criterion 1.2.2 and 1.2.8 due to not labeling a synchronized media alternative to text as an alternative: http://localhost:3000/techniques/failures/F74



--------------------------------------------------

Section 10: audio_only_live
==================================================

In Brief
	- Goal
	- Live audio can be understood by more people.
	- What to do
	- Provide a text equivalent for live audio-only content.
	- Why it's important
	- People who cannot hear or understand real-time audio can read an equivalent.

Success Criterion (SC): An alternative for time-based media that presents equivalent information for live audio-only content is provided.

Intent: The intent of this Success Criterion is to make information conveyed by live audio, such as web-based audio conferencing, live speeches and radio Webcasts, accessible through the use of a text alternative. A live text caption service will enable live audio to be accessible to people who are deaf or hard of hearing, or who cannot otherwise hear the audio. Such services use a trained human operator who listens in to what is being said and uses a special keyboard to enter the text with only a small delay. They are able to capture a live event with a high degree of fidelity, and also to insert notes on any non spoken audio which is essential to understanding the event. A transcript is sometimes a possibility if the live audio is following a set script; but a live caption service is preferred because it plays out at the same pace as the audio itself, and can adapt to any deviations from the script that might occur.: Using untrained operators, or providing a transcript which differs markedly from what actually happens would not be considered meeting this Success Criterion.: This success criterion was intended to apply to broadcast of audio and is not intended to require that two-way audio calls between two or more individuals through web apps must be captioned regardless of the needs of users. Responsibility for providing captions would fall to the content providers (the callers) or the “host” caller, and not the application.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G151: Providing a link to a text transcript of a prepared statement or script if the script is followed
	- G150: Providing text based alternatives for live audio-only content
	- G157: Incorporating a live audio captioning service into a Web page

- G151: Providing a link to a text transcript of a prepared statement or script if the script is followed: http://localhost:3000/techniques/general/G151
- G150: Providing text based alternatives for live audio-only content: http://localhost:3000/techniques/general/G150
- G157: Incorporating a live audio captioning service into a Web page: http://localhost:3000/techniques/general/G157



--------------------------------------------------

Section 11: info_and_relationships
==================================================

In Brief
	- Goal
	- Information about content structure is available to more people.
	- What to do
	- Use code to reinforce relationships and information conveyed through presentation.
	- Why it's important
	- People can adapt the presentation to suit their needs while preserving the original meaning.

Success Criterion (SC): Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text.

Intent: The intent of this Success Criterion is to ensure that information and relationships that are implied by visual or auditory formatting are preserved when the presentation format changes. For example, the presentation format changes when the content is read by a screen reader or when a user style sheet is substituted for the style sheet provided by the author.: Sighted users perceive structure and relationships through various visual cues — headings are often in a larger, bold font separated from paragraphs by blank lines; list items are preceded by a bullet and perhaps indented; paragraphs are separated by a blank line; items that share a common characteristic are organized into tabular rows and columns; form fields may be positioned as groups that share text labels; a different background color may be used to indicate that several items are related to each other; words that have special status are indicated by changing the font family and /or bolding, italicizing, or underlining them; items that share a common characteristic are organized into a table where the relationship of cells sharing the same row or column and the relationship of each cell to its row and/or column header are necessary for understanding; and so on. Having these structures and these relationships programmatically determined or available in text ensures that information important for comprehension will be perceivable to all.: Auditory cues may be used as well. For example, a chime might indicate the beginning of a new section; a change in voice pitch or speech rate may be used to emphasize important information or to indicate quoted text; etc.: When such relationships are perceivable to one set of users, those relationships can be made to be perceivable to all. One method of determining whether or not information has been properly provided to all users is to access the information serially in different modalities.: If links to glossary items are implemented using anchor elements (or the proper link element for the technology in use) and identified using a different font face, a screen reader user will hear that the item is a link when the glossary term is encountered even though they may not receive information about the change in font face. An on-line catalog may indicate prices using a larger font colored red. A screen reader or person who cannot perceive red, still has the information about the price as long as it is preceded by the currency symbol.: Some technologies do not provide a means to programmatically determine some types of information and relationships. In that case then there should be a text description of the information and relationships. For instance, "all required fields are marked with an asterisk (*)". The text description should be near the information it is describing (when the page is linearized), such as in the parent element or in the adjacent element.: There may also be cases where it may be a judgment call as to whether the relationships should be programmatically determined or be presented in text. However, when technologies support programmatic relationships, it is strongly encouraged that information and relationships be programmatically determined rather than described in text.: Note: It is not required that color values be programmatically determined. The information conveyed by color cannot be adequately presented simply by exposing the value. Therefore, Success Criterion 1.4.1 addresses the specific case of color, rather than Success Criterion 1.3.1.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: Select the situation below that matches your content. Each situation includes techniques or combinations of techniques that are known and documented to be sufficient for that situation.: Situation A: The technology provides semantic structure to make information and relationships conveyed through presentation programmatically determinable:
	- ARIA11: Using ARIA landmarks to identify regions of a page
	- H101: Using semantic HTML elements to identify regions of a page
	- ARIA12: Using role=heading to identify headings
	- ARIA13: Using aria-labelledby to name regions and landmarks
	- ARIA16: Using aria-labelledby to provide a name for user interface controls
	- ARIA17: Using grouping roles to identify related form controls
	- ARIA20: Using the region role to identify a region of the page
	- G115: Using semantic elements to mark up structure AND H49: Using semantic markup to mark emphasized or special text
	- G117: Using text to convey information that is conveyed by variations in presentation of text
	- G140: Separating information and structure from presentation to enable different presentations
	- ARIA24: Semantically identifying a font icon with role="img": Making information and relationships conveyed through presentation programmatically determinable using the following techniques:: G138: Using semantic markup whenever color cues are used
	- H51: Using table markup to present tabular information
	- PDF6: Using table elements for table markup in PDF Documents
	- PDF20: Using Adobe Acrobat Pro's Table Editor to repair mistagged tables
	- H39: Using caption elements to associate data table captions with data tables
	- H63: Using the scope attribute to associate header cells with data cells in data tables
	- H43: Using id and headers attributes to associate data cells with header cells in data tables
	- H44: Using label elements to associate text labels with form controls
	- H65: Using the title attribute to identify form controls when the label element cannot be used
	- PDF10: Providing labels for interactive form controls in PDF documents
	- PDF12: Providing name, role, value information for form fields in PDF documents
	- H71: Providing a description for groups of form controls using fieldset and legend elements
	- H85: Using optgroup to group option elements inside a select
	- H48: Using ol, ul and dl for lists or groups of links
	- H42: Using h1-h6 to identify headings
	- PDF9: Providing headings by marking content with heading tags in PDF documents
	- PDF11: Providing links and link text using the Link annotation and the /Link structure element in PDF documents
	- PDF17: Specifying consistent page numbering for PDF documents
	- PDF21: Using List tags for lists in PDF documents
	- H97: Grouping related links using the nav element
	- Situation B: The technology in use does NOT provide the semantic structure to make the information and relationships conveyed through presentation programmatically determinable:
	- G117: Using text to convey information that is conveyed by variations in presentation of text: Making information and relationships conveyed through presentation programmatically determinable or available in text using the following techniques:: T1: Using standard text formatting conventions for paragraphs
	- T2: Using standard text formatting conventions for lists
	- T3: Using standard text formatting conventions for headings
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: C22: Using CSS to control visual presentation of text
	- G162: Positioning labels to maximize predictability of relationships
	- ARIA1: Using the aria-describedby property to provide a descriptive label for user interface controls
	- ARIA2: Identifying a required field with the aria-required property
	- G141: Organizing a page using headings
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F2: Failure of Success Criterion 1.3.1 due to using changes in text presentation to convey information without using the appropriate markup or text
	- F33: Failure of Success Criterion 1.3.1 and 1.3.2 due to using white space characters to create multiple columns in plain text content
	- F34: Failure of Success Criterion 1.3.1 and 1.3.2 due to using white space characters to format tables in plain text content
	- F42: Failure of Success Criteria 1.3.1, 2.1.1, 2.1.3, or 4.1.2 when emulating links
	- F43: Failure of Success Criterion 1.3.1 due to using structural markup in a way that does not represent relationships in the content
	- F46: Failure of Success Criterion 1.3.1 due to using th elements, … layout tables
	- F48: Failure of Success Criterion 1.3.1 due to using the pre element to markup tabular information
	- F90: Failure of Success Criterion 1.3.1 for incorrectly associating table headers and content via the headers and id attributes
	- F91: Failure of Success Criterion 1.3.1 for not correctly marking up table headers
	- F92: Failure of Success Criterion 1.3.1 due to the use of role presentation on content which conveys semantic information
	- F111: Failure of Success Criteria 1.3.1, 2.5.3, and 4.1.2 due to a control with visible label text but no accessible name

- ARIA11: Using ARIA landmarks to identify regions of a page: http://localhost:3000/techniques/aria/ARIA11
- H101: Using semantic HTML elements to identify regions of a page: http://localhost:3000/techniques/html/H101
- ARIA12: Using role=heading to identify headings: http://localhost:3000/techniques/aria/ARIA12
- ARIA13: Using aria-labelledby to name regions and landmarks: http://localhost:3000/techniques/aria/ARIA13
- ARIA16: Using aria-labelledby to provide a name for user interface controls: http://localhost:3000/techniques/aria/ARIA16
- ARIA17: Using grouping roles to identify related form controls: http://localhost:3000/techniques/aria/ARIA17
- ARIA20: Using the region role to identify a region of the page: http://localhost:3000/techniques/aria/ARIA20
- G115: Using semantic elements to mark up structure: http://localhost:3000/techniques/general/G115
- H49: Using semantic markup to mark emphasized or special text: http://localhost:3000/techniques/html/H49
- G117: Using text to convey information that is conveyed by variations in presentation of text: http://localhost:3000/techniques/general/G117
- G140: Separating information and structure from presentation to enable different presentations: http://localhost:3000/techniques/general/G140
- ARIA24: Semantically identifying a font icon with role="img": http://localhost:3000/techniques/aria/ARIA24
- G138: Using semantic markup whenever color cues are used: http://localhost:3000/techniques/general/G138
- H51: Using table markup to present tabular information: http://localhost:3000/techniques/html/H51
- PDF6: Using table elements for table markup in PDF Documents: http://localhost:3000/techniques/pdf/PDF6
- PDF20: Using Adobe Acrobat Pro's Table Editor to repair mistagged tables: http://localhost:3000/techniques/pdf/PDF20
- H39: Using caption elements to associate data table captions with data tables: http://localhost:3000/techniques/html/H39
- H63: Using the scope attribute to associate header cells with data cells in data tables: http://localhost:3000/techniques/html/H63
- H43: Using id and headers attributes to associate data cells with header cells in data tables: http://localhost:3000/techniques/html/H43
- H44: Using label elements to associate text labels with form controls: http://localhost:3000/techniques/html/H44
- H65: Using the title attribute to identify form controls when the label element cannot be used: http://localhost:3000/techniques/html/H65
- PDF10: Providing labels for interactive form controls in PDF documents: http://localhost:3000/techniques/pdf/PDF10
- PDF12: Providing name, role, value information for form fields in PDF documents: http://localhost:3000/techniques/pdf/PDF12
- H71: Providing a description for groups of form controls using fieldset and legend elements: http://localhost:3000/techniques/html/H71
- H85: Using optgroup to group option elements inside a select: http://localhost:3000/techniques/html/H85
- H48: Using ol, ul and dl for lists or groups of links: http://localhost:3000/techniques/html/H48
- H42: Using h1-h6 to identify headings: http://localhost:3000/techniques/html/H42
- PDF9: Providing headings by marking content with heading tags in PDF documents: http://localhost:3000/techniques/pdf/PDF9
- PDF11: Providing links and link text using the Link annotation and the /Link structure element in PDF documents: http://localhost:3000/techniques/pdf/PDF11
- PDF17: Specifying consistent page numbering for PDF documents: http://localhost:3000/techniques/pdf/PDF17
- PDF21: Using List tags for lists in PDF documents: http://localhost:3000/techniques/pdf/PDF21
- H97: Grouping related links using the nav element: http://localhost:3000/techniques/html/H97
- G117: Using text to convey information that is conveyed by variations in presentation of text: http://localhost:3000/techniques/general/G117
- T1: Using standard text formatting conventions for paragraphs: http://localhost:3000/techniques/text/T1
- T2: Using standard text formatting conventions for lists: http://localhost:3000/techniques/text/T2
- T3: Using standard text formatting conventions for headings: http://localhost:3000/techniques/text/T3
- C22: Using CSS to control visual presentation of text: http://localhost:3000/techniques/css/C22
- G162: Positioning labels to maximize predictability of relationships: http://localhost:3000/techniques/general/G162
- ARIA1: Using the aria-describedby property to provide a descriptive label for user interface controls: http://localhost:3000/techniques/aria/ARIA1
- ARIA2: Identifying a required field with the aria-required property: http://localhost:3000/techniques/aria/ARIA2
- G141: Organizing a page using headings: http://localhost:3000/techniques/general/G141
- F2: Failure of Success Criterion 1.3.1 due to using changes in text presentation to convey information without using the appropriate markup or text: http://localhost:3000/techniques/failures/F2
- F33: Failure of Success Criterion 1.3.1 and 1.3.2 due to using white space characters to create multiple columns in plain text content: http://localhost:3000/techniques/failures/F33
- F34: Failure of Success Criterion 1.3.1 and 1.3.2 due to using white space characters to format tables in plain text content: http://localhost:3000/techniques/failures/F34
- F42: Failure of Success Criteria 1.3.1, 2.1.1, 2.1.3, or 4.1.2 when emulating links: http://localhost:3000/techniques/failures/F42
- F43: Failure of Success Criterion 1.3.1 due to using structural markup in a way that does not represent relationships in the content: http://localhost:3000/techniques/failures/F43
- F46: Failure of Success Criterion 1.3.1 due to using th elements, … layout tables: http://localhost:3000/techniques/failures/F46
- F48: Failure of Success Criterion 1.3.1 due to using the pre element to markup tabular information: http://localhost:3000/techniques/failures/F48
- F90: Failure of Success Criterion 1.3.1 for incorrectly associating table headers and content via the headers and id attributes: http://localhost:3000/techniques/failures/F90
- F91: Failure of Success Criterion 1.3.1 for not correctly marking up table headers: http://localhost:3000/techniques/failures/F91
- F92: Failure of Success Criterion 1.3.1 due to the use of role presentation on content which conveys semantic information: http://localhost:3000/techniques/failures/F92
- F111: Failure of Success Criteria 1.3.1, 2.5.3, and 4.1.2 due to a control with visible label text but no accessible name: http://localhost:3000/techniques/failures/F111



--------------------------------------------------

Section 12: meaningful_sequence
==================================================

In Brief
	- Goal
	- The order of content can be understood by more people.
	- What to do
	- Use code to preserve meaningful content order.
	- Why it's important
	- Assistive technology can present content to users in the proper order.

Success Criterion (SC): When the sequence in which content is presented affects its meaning, a correct reading sequence can be programmatically determined.

Intent: The intent of this Success Criterion is to enable a user agent to provide an alternative presentation of content while preserving the reading order needed to understand the meaning. It is important that it be possible to programmatically determine at least one sequence of the content that makes sense. Content that does not meet this Success Criterion may confuse or disorient users when assistive technology reads the content in the wrong order, or when alternate style sheets or other formatting changes are applied.: A sequence is meaningful if the order of content in the sequence cannot be changed without affecting its meaning. For example, if a page contains two independent articles, the relative order of the articles may not affect their meaning, as long as they are not interleaved. In such a situation, the articles themselves may have meaningful sequence, but the container that contains the articles may not have a meaningful sequence.: The semantics of some elements define whether or not their content is a meaningful sequence. For instance, in HTML, text is always a meaningful sequence. Tables and ordered lists are meaningful sequences, but unordered lists are not.: The order of content in a sequence is not always meaningful. For example, the relative order of the main section of a Web page and a navigation section does not affect their meaning. They could occur in either order in the programmatically determined reading sequence. As another example, a magazine article contains several callout sidebars. The order of the article and the sidebars does not affect their meaning. In these cases there are a number of different reading orders for a Web page that can satisfy the Success Criterion.: For clarity:: Providing a particular linear order is only required where it affects meaning.
	- There may be more than one order that is "correct" (according to the WCAG 2.0 definition).
	- Only one correct order needs to be provided.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G57: Ordering the content in a meaningful sequence for all the content in the Web page: Marking sequences in the content as meaningful using one of the following techniques AND G57: Ordering the content in a meaningful sequence for those sequences: H34: Using a Unicode right-to-left mark (RLM) or left-to-right mark (LRM) to mix text direction inline
	- H56: Using the dir attribute on an inline element to resolve problems with nested directional runs
	- C6: Positioning content based on structural markup
	- C8: Using CSS letter-spacing to control spacing within a word
	- C27: Making the DOM order match the visual order
	- PDF3: Ensuring correct tab and reading order in PDF documents
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F34: Failure of Success Criterion 1.3.1 and 1.3.2 due to using white space characters to format tables in plain text content
	- F33: Failure of Success Criterion 1.3.1 and 1.3.2 due to using white space characters to create multiple columns in plain text content
	- F32: Failure of Success Criterion 1.3.2 due to using white space characters to control spacing within a word
	- F49: Failure of Success Criterion 1.3.2 due to using an HTML layout table that does not make sense when linearized
	- F1: Failure of Success Criterion 1.3.2 due to changing the meaning of content by positioning information with CSS

- G57: Ordering the content in a meaningful sequence: http://localhost:3000/techniques/general/G57
- G57: Ordering the content in a meaningful sequence: http://localhost:3000/techniques/general/G57
- H34: Using a Unicode right-to-left mark (RLM) or left-to-right mark (LRM) to mix text direction inline: http://localhost:3000/techniques/html/H34
- H56: Using the dir attribute on an inline element to resolve problems with nested directional runs: http://localhost:3000/techniques/html/H56
- C6: Positioning content based on structural markup: http://localhost:3000/techniques/css/C6
- C8: Using CSS letter-spacing to control spacing within a word: http://localhost:3000/techniques/css/C8
- C27: Making the DOM order match the visual order: http://localhost:3000/techniques/css/C27
- PDF3: Ensuring correct tab and reading order in PDF documents: http://localhost:3000/techniques/pdf/PDF3
- F34: Failure of Success Criterion 1.3.1 and 1.3.2 due to using white space characters to format tables in plain text content: http://localhost:3000/techniques/failures/F34
- F33: Failure of Success Criterion 1.3.1 and 1.3.2 due to using white space characters to create multiple columns in plain text content: http://localhost:3000/techniques/failures/F33
- F32: Failure of Success Criterion 1.3.2 due to using white space characters to control spacing within a word: http://localhost:3000/techniques/failures/F32
- F49: Failure of Success Criterion 1.3.2 due to using an HTML layout table that does not make sense when linearized: http://localhost:3000/techniques/failures/F49
- F1: Failure of Success Criterion 1.3.2 due to changing the meaning of content by positioning information with CSS: http://localhost:3000/techniques/failures/F1



--------------------------------------------------

Section 13: sensory_characteristics
==================================================

In Brief
	- Goal
	- Instructions are understandable by more people.
	- What to do
	- Describe controls by name, not just by appearance or location.
	- Why it's important
	- People who are blind or have low vision need non-visual instructions.

Success Criterion (SC): Instructions provided for understanding and operating content do not rely solely on sensory characteristics of components such as shape, color, size, visual location, orientation, or sound.: Note: For requirements related to color, refer to Guideline 1.4.

Intent: The intent of this Success Criterion is to ensure that all users can access instructions for using the content, even when they cannot perceive shape or size or use information about spatial location or orientation. Some content relies on knowledge of the shape or position of objects that are not available from the structure of the content (for example, "round button" or "button to the right"). Some users with disabilities are not able to perceive shape or position due to the nature of the assistive technologies they use. This Success Criterion requires that additional information be provided to clarify instructions that are dependent on this kind of information.: Providing information using shape and/or location, however, is an effective method for many users including those with cognitive limitations. This provision should not discourage those types of cues as long as the information is also provided in other ways.: In some languages, it is commonly understood that "above" refers to the content previous to that point in the content and "below" refers to the content after that point. In such languages, if the content being referenced is in the appropriate place in the reading order and the references are unambiguous, statements such as "choose one of the links below" or "all of the above" would conform to this Success Criterion.: WCAG was designed to apply only to controls that were displayed on a web page. The intent was to avoid describing controls solely via references to visual or auditory cues. When applying this to instructions for operating physical hardware controls (e.g. a web kiosk with dedicated content), tactile cues on the hardware might be described (e.g. the arrow shaped key, the round key on the right side). This success criterion is not intended to prevent the use of tactile cues in instructions.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G96: Providing textual identification of items that otherwise rely only on sensory information to be understood
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F14: Failure of Success Criterion 1.3.3 due to identifying content only by its shape or location
	- F26: Failure of Success Criterion 1.3.3 due to using a graphical symbol alone to convey information

- G96: Providing textual identification of items that otherwise rely only on sensory information to be understood: http://localhost:3000/techniques/general/G96
- F14: Failure of Success Criterion 1.3.3 due to identifying content only by its shape or location: http://localhost:3000/techniques/failures/F14
- F26: Failure of Success Criterion 1.3.3 due to using a graphical symbol alone to convey information: http://localhost:3000/techniques/failures/F26



--------------------------------------------------

Section 14: orientation
==================================================

In Brief
	- Goal
	- Devices can be used in any orientation.
	- What to do
	- Don't lock content to either portrait or landscape presentation.
	- Why it's important
	- Wheelchair users and others may have devices mounted in a fixed orientation.

Success Criterion (SC): Content does not restrict its view and operation to a single display orientation, such as portrait or landscape, unless a specific display orientation is essential.: Note: Examples where a particular display orientation may be essential are a bank check, a piano application, slides for a projector or television, or virtual reality content where content is not necessarily restricted to landscape or portrait display orientation.

Intent: The intent of this Success Criterion is to ensure that content displays in the orientation (portrait or landscape) preferred by the user. Some websites and applications automatically set and restrict the screen to a particular display orientation and expect that users will respond by rotating their device to match, but this can create problems. Some users have their devices mounted in a fixed orientation (e.g. on the arm of a power wheelchair). Therefore, websites and applications need to support both orientations by not restricting the orientation. Changes in content or functionality due to the size of display are not covered by this criterion which is focused on restrictions of orientation.: Historically, devices tended to have a fixed-orientation display, and all content was created to match that display orientation. Today, most handhelds and many other devices (e.g., monitors) have a hardware-level ability to dynamically adjust default display orientation based on sensor information. The goal of this Success Criterion is that authors should never restrict content's orientation, thus ensuring that it always match the device display orientation.: Locking a device to an orientation: It is important to distinguish between an author's responsibility not to restrict content to a specific orientation, and device-specific settings governing the locking of display orientation.: Many hand-held devices offer a mechanical switch or a system setting (or both) to allow the user to lock the device display to a specific orientation. Where a user decides to lock their entire device to an orientation, all applications are expected to pick up that setting and to display content accordingly.: This Success Criterion complements device "lock orientation" settings. A web page that does not restrict its display orientation will always support the system-level orientation setting, since the system setting is picked up by the user agent. Alternatively, where a device-level orientation lock is not in place, the user agent should display the page according to the orientation of the device (either its default, or the current orientation determined by any device sensors).: The exception for things considered essential is aimed at situations where the content would only be understood in a particular orientation, or where the technology restricts the possible orientations. If content is aimed at a specific environment which is only available in one orientation (such as a television) then the content can restrict the orientation. Technologies such as virtual reality use screens within goggles that cannot change orientation relative to the user's eyes.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G214: Using a control to allow access to content in different orientations which is otherwise restricted
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F97: Failure due to locking the orientation to landscape or portrait view
	- F100: Failure of Success Criterion 1.3.4 due to showing a message asking to reorient device

- G214: Using a control to allow access to content in different orientations which is otherwise restricted: http://localhost:3000/techniques/general/G214
- F97: Failure due to locking the orientation to landscape or portrait view: http://localhost:3000/techniques/failures/F97
- F100: Failure of Success Criterion 1.3.4 due to showing a message asking to reorient device: http://localhost:3000/techniques/failures/F100



--------------------------------------------------

Section 15: identify_input_purpose
==================================================

In Brief
	- Goal
	- It is easier to fill out forms.
	- What to do
	- Use code to indicate the purpose of common inputs, where technology allows.
	- Why it's important
	- Some people with cognitive disabilities may not understand the input's purpose from the label alone.

Success Criterion (SC): The purpose of each input field collecting information about the user can be programmatically determined when:: The input field serves a purpose identified in the Input Purposes for user interface components section; and
	- The content is implemented using technologies with support for identifying the expected meaning for form input data.

Intent: The intent of this Success Criterion is to ensure that the purpose of a form input collecting information about the user can be programmatically determined, so that user agents can extract and present this purpose to users using different modalities. The ability to programmatically declare the specific kind of data expected in a particular field makes filling out forms easier, especially for people with certain cognitive disabilities.: Appropriate visible labels and instruction can help users understand the purpose of form input fields, but users may benefit from having fields that collect specific types of information be rendered in an unambiguous, consistent, and possibly customized way for different modalities - either through defaults in their user agent, or through the aid of assistive technologies.: For some input fields, the type attribute already offers a way to broadly specify the intention of the input field, for example, <input type="tel">, <input type="email">, or <input type="password">. However, these are only very broad categories, describing the type of input, but not necessarily its purpose, especially as it relates to user-specific input fields. As an example, type="email" indicates that the field is for an e-mail address but does not clarify if the purpose is for entering the user's e-mail address or some other person's e-mail.: This success criterion defines the types of user interface component input purposes, found in Section 7 of the WCAG 2.1 Recommendation, that must be programmatically identifiable. When these user input purposes are present, and if the technology supports doing so, the field purpose must be programmatically identifiable.: The HTML autocomplete attribute only accepts a certain number of specific well-defined fixed values. This allows a more fine-grained definition or identification of purpose than the type attribute, for example, by allowing the author to specify a specific type of name: Name (autocomplete="name"), Given Name (autocomplete="given-name"), Family Name (autocomplete="family-name"), as well as Username (autocomplete="username"), and Nickname (autocomplete="nickname").: By adopting and repurposing this predefined taxonomy of definitions, user agents and assistive technologies can now present the purpose of the inputs to users in different modalities. For example, assistive technologies may display familiar icons next to input fields to help users who have difficulties reading. An icon of a birthday cake may be shown in front of an input field with autocomplete="bday", or the icon of a telephone in front of an input field with autocomplete="tel".: In addition to repurposing this taxonomy, when the autocomplete attribute technique is used to meet this Success Criterion, browsers and other user-agents can suggest and 'autofill' the right content by autocompleting these fields based on past user input stored in the browser. By defining more granular definitions of common input purposes, for example “Birthday” (autocomplete="bday"), browsers can store personalized values for each of these fields (the user's birthday date). The user is relieved of having to type the information and can instead confirm or, if needed, change the value of the field, a significant benefit for users with memory issues, dyslexia, and other disabilities. Because the autocomplete values are independent of language, users that may not be familiar with the text used to visually identify user input fields (the label) can still have that purpose consistently identified to them due to the fixed taxonomy of terms.: If an input field accepts two different types of input purpose (as in combined user name/user email fields) and the technology used does not allow multiple purpose values to be defined, it is valid to provide either one or the other value or leave out the designation of input purpose altogether.: When the user agent and assistive technology support for other metadata formats matures, metadata schemes like the WAI-Adapt: Symbols Module may be used in addition or instead of the HTML autocomplete attribute to identify the purpose of input fields. They can also support automated adaptations that identify and match author-provided input labels to defined vocabularies or symbols that are used instead for labelling inputs.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- H98: Using HTML 5.2 autocomplete attributes
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F107: Failure of Success Criterion 1.3.5 due to incorrect autocomplete attribute values

- H98: Using HTML 5.2 autocomplete attributes: http://localhost:3000/techniques/html/H98
- F107: Failure of Success Criterion 1.3.5 due to incorrect autocomplete attribute values: http://localhost:3000/techniques/failures/F107



--------------------------------------------------

Section 16: identify_purpose
==================================================

In Brief
	- Goal
	- It is easier to operate and navigate content.
	- What to do
	- Use code to indicate the meaning of all controls and other key information, where available.
	- Why it's important
	- Some people with cognitive disabilities may not understand a control's purpose from the name alone.

Success Criterion (SC): In content implemented using markup languages, the purpose of user interface components, icons, and regions can be programmatically determined.

Intent: The intent of this Success Criterion is to ensure that the purpose of many elements on a page can be programmatically determined, so that user agents can extract and present that purpose to users using different modalities.: Many users with limited vocabularies rely on familiar terms or symbols in order to use the web. However, what is familiar to one user may not be familiar to another. When authors indicate the purpose, users can take advantage of personalization and user preferences to load a set of symbols or vocabulary familiar to them.: This Success Criterion requires the author to programmatically associate the purpose of icons, regions and components (such as buttons, links, and fields) so that user agents can determine the purpose of each and adapt indicators or terminology to make them understandable for the user. It is achieved by adding semantics or metadata that provide this context. It is similar to adding role information (as required by 4.1.2) but instead of providing information about what the UI component is (such as an image) it provides information about what the component represents (such as a link to the home page).: Identifying regions of the page allows people to remove or highlight regions with their user agent.: Products for people who are non-vocal often use symbols to help users communicate. These symbols are in fact people's language. Unfortunately, many of these symbols are both subject to copyright and not interoperable. That means end users can only use one device, and cannot use content, apps, or assistive technologies that have not been made by a single company.: This Success Criterion enables symbols to be interoperable so that symbol users can understand different content that was not just made by one company. When users' symbols are mapped to the same nodes, then user agents can load the user-understandable symbol. People can then buy the symbols and use them across different devices or applications. (Note that the symbols would still be proprietary, but they could then be interoperable.)

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- Programmatically indicating the purpose of icons, regions and user interface components
	- ARIA11: Using ARIA landmarks to identify regions of a page AND
	- Using microdata to markup user interface components (future link)
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: Enabling user agents to find the version of the content that best fits their needs
	- Using semantics to identify important features (e.g., coga-simplification="simplest")
	- Using aria-invalid and aria-required

- ARIA11: Using ARIA landmarks to identify regions of a page: http://localhost:3000/techniques/aria/ARIA11



--------------------------------------------------

Section 17: use_of_color
==================================================

In Brief
	- Goal
	- Color is not the only way of distinguishing information.
	- What to do
	- Use information in addition to color, such as shape or text, to convey meaning.
	- Why it's important
	- Not everyone sees colors or sees them the same way.

Success Criterion (SC): Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element.: Note: This success criterion addresses color perception specifically. Other forms of perception are covered in Guideline 1.3 including programmatic access to color and other visual presentation coding.

Intent: The intent of this Success Criterion is to ensure that all sighted users can access information that is conveyed by color differences, that is, by the use of color where each color has a meaning assigned to it. If the information is conveyed through color differences in an image (or other non-text format), the color may not be seen by users with color deficiencies. In this case, providing the information conveyed with color through another visual means ensures users who cannot see color can still perceive the information.: Color is an important asset in the design of Web content, enhancing its aesthetic appeal, its usability, and its accessibility. However, some users have difficulty perceiving color. People with partial sight often experience limited color vision, and many older users do not see color well. In addition, people using limited-color or monochrome displays and browsers will be unable to access information that is presented only in color.: Examples of information conveyed by color differences: “required fields are red", “error is shown in red", and “Mary's sales are in red, Tom's are in blue". Examples of indications of an action include: using color to indicate that a link will open in a new window or that a database entry has been updated successfully. An example of prompting a response would be: using highlighting on form fields to indicate that a required field had been left blank.: Note: This should not in any way discourage the use of color on a page, or even color coding if it is complemented by other visual indication.: Note: If content is conveyed through the use of colors that differ not only in their hue, but that also have a significant difference in lightness, then this counts as an additional visual distinction, as long as the difference in relative luminance between the colors leads to a contrast ratio of 3:1 or greater. For example, a light green and a dark red differ both by color (hue) and by lightness, so they would pass if the contrast ratio is at least 3:1. Similarly, if content is distinguished by inverting an element's foreground and background colors, this would pass (again, assuming that the foreground and background colors have a sufficient contrast).: However, if content relies on the user's ability to accurately perceive or differentiate a particular color an additional visual indicator will be required regardless of the contrast ratio between those colors. For example, knowing whether an outline is green for valid or red for invalid.: Note: This criterion does not apply to situations where color has not been used to convey information, indicate an action, prompt a response or distinguish a visual element. For instance, a hyperlink which has been styled to appear no different than neighboring static text would not fail this success criterion, as there would be no color differentiation between the actionable hyperlink text and the adjacent static text. Such lack of styling differentiation could result in poor usability for anyone looking at the interface, regardless of disability.: Note: This criterion does not directly address the needs of users with assistive technologies. It aims to ensure that sighted users who cannot distinguish between some colors can still understand content. How information is conveyed to assistive technology users is covered separately in other criteria, including (but not limited to) 1.1.1 Non-text Content, 1.3.1 Info and Relationships, and 4.1.2 Name, Role, Value.: Conversely, even if information that is conveyed by color differences is appropriately conveyed to assistive technologies, it does not necessarily pass this criterion, as sighted users who cannot distinguish between certain color may not necessarily be using any assistive technologies. This criterion requires a visible alternative to color.: Note: Most user agents provide users with a color-only cue that a link has been previously activated by them ("visited"). However, several technical constraints result in authors having very limited control over these color-only indications of visited links. The technical constraints are as follows:: User agents constrain the exposure of a link's visited state due to privacy concerns. Author queries to user agents will indicate all links have not been visited.
	- Any available information on the visited state of a link would be inaccurate since it is both user and browser-dependent. Even if an author could accurately get information on previously activated links by a certain user, the author would be constrained to the current browser's preserved history, and would be unable to determine if the user had visited the page using a different browser (or if the history was not preserved, either from cache clearing or use of private sessions).
	- Authors can only use color to modify the :visited CSS pseudoclass style. The technology constrains any non-color styling. Due to palette limitations, an author cannot use color alone to achieve 3:1 contrast between link and non-link text as well as between visited and unvisited links while also achieving 4.5:1 contrast for all link and non-link text.
	- Authors also cannot set the visited state of links. The anchor element does not include a "visited" attribute; therefore the author has no ability to alter the state through an attribute setting. As such, authors cannot achieve 1.3.1 Info and Relationships or 4.1.2 Name, Role, Value in regard to visited links.: For these reasons, setting or conveying a link's visited status is not an author responsibility. Where color alone distinguishes between visited and unvisited links, it does not result in a failure of this Success Criterion, even where the contrast between the two link colors is below 3:1. Note that authors must continue to ensure that all text links meet contrast minimums against the page background (SC 1.4.3).

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: Select the situation below that matches your content. Each situation includes techniques or combinations of techniques that are known and documented to be sufficient for that situation.: Situation A: If the color of particular words, backgrounds, or other content is used to indicate information:
	- G14: Ensuring that information conveyed by color differences is also available in text
	- G205: Including a text cue for colored form control labels
	- G182: Ensuring that additional visual cues are available when text color differences are used to convey information
	- G183: Using a contrast ratio of 3:1 with surrounding text and providing additional visual cues on hover for links or controls where color alone is used to identify them
	- Situation B: If color is used within an image to convey information:
	- G111: Using color and pattern
	- G14: Ensuring that information conveyed by color differences is also available in text
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: C15: Using CSS to change the presentation of a user interface component when it receives focus
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F13: Failure of Success Criterion 1.1.1 and 1.4.1 due to having a text alternative that does not include information that is conveyed by color differences in the image
	- F73: Failure of Success Criterion 1.4.1 due to creating links that are not visually evident without color vision
	- F81: Failure of Success Criterion 1.4.1 due to identifying required or error fields using color differences only

- G14: Ensuring that information conveyed by color differences is also available in text: http://localhost:3000/techniques/general/G14
- G205: Including a text cue for colored form control labels: http://localhost:3000/techniques/general/G205
- G182: Ensuring that additional visual cues are available when text color differences are used to convey information: http://localhost:3000/techniques/general/G182
- G183: Using a contrast ratio of 3:1 with surrounding text and providing additional visual cues on hover for links or controls where color alone is used to identify them: http://localhost:3000/techniques/general/G183
- G111: Using color and pattern: http://localhost:3000/techniques/general/G111
- G14: Ensuring that information conveyed by color differences is also available in text: http://localhost:3000/techniques/general/G14
- C15: Using CSS to change the presentation of a user interface component when it receives focus: http://localhost:3000/techniques/css/C15
- F13: Failure of Success Criterion 1.1.1 and 1.4.1 due to having a text alternative that does not include information that is conveyed by color differences in the image: http://localhost:3000/techniques/failures/F13
- F73: Failure of Success Criterion 1.4.1 due to creating links that are not visually evident without color vision: http://localhost:3000/techniques/failures/F73
- F81: Failure of Success Criterion 1.4.1 due to identifying required or error fields using color differences only: http://localhost:3000/techniques/failures/F81



--------------------------------------------------

Section 18: audio_control
==================================================

In Brief
	- Goal
	- A page that plays music or sounds doesn't disrupt people.
	- What to do
	- If you play audio content automatically, let people turn it down or off.
	- Why it's important
	- Sound distracts some people, and also interferes with screen readers.

Success Criterion (SC): If any audio on a web page plays automatically for more than 3 seconds, either a mechanism is available to pause or stop the audio, or a mechanism is available to control audio volume independently from the overall system volume level.: Note: Since any content that does not meet this success criterion can interfere with a user's ability to use the whole page, all content on the web page (whether or not it is used to meet other success criteria) must meet this success criterion. See Conformance Requirement 5: Non-Interference.

Intent: Individuals who use screen reading software can find it hard to hear the speech output if there is other audio playing at the same time. This difficulty is exacerbated when the screen reader's speech output is software based (as most are today) and is controlled via the same volume control as the sound. Therefore, it is important that the user be able to turn off the background sound.: Having control of the volume includes being able to reduce its volume to zero. Muting the system volume is not "pausing or stopping" the autoplay audio. Both the "pause or stop" and control of audio volume need to be independent of the overall system volume.: Note: Playing audio automatically when landing on a page may affect a screen reader user's ability to find the mechanism to stop it because they navigate by listening and automatically started sounds might interfere with that navigation. Therefore, we discourage the practice of automatically starting sounds (especially if they last more than 3 seconds), and encourage that the sound be started by an action initiated by the user after they reach the page, rather than requiring that the sound be stopped by an action of the user after they land on the page.: See also 1.4.7 Low or No Background Audio.: In the context of this Success Criterion, "plays automatically" broadly refers to audio that is not started/played as a direct result of a user's intentional activation. For example, not selecting a link or button.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G60: Playing a sound that turns off automatically within three seconds
	- G170: Providing a control near the beginning of the Web page that turns off sounds that play automatically
	- G171: Playing sounds only on user request
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F23: Failure of 1.4.2 due to playing a sound longer than 3 seconds where there is no mechanism to turn it off
	- F93: Failure of Success Criterion 1.4.2 for absence of a way to pause or stop an HTML5 media element that autoplays

- G60: Playing a sound that turns off automatically within three seconds: http://localhost:3000/techniques/general/G60
- G170: Providing a control near the beginning of the Web page that turns off sounds that play automatically: http://localhost:3000/techniques/general/G170
- G171: Playing sounds only on user request: http://localhost:3000/techniques/general/G171
- F23: Failure of 1.4.2 due to playing a sound longer than 3 seconds where there is no mechanism to turn it off: http://localhost:3000/techniques/failures/F23
- F93: Failure of Success Criterion 1.4.2 for absence of a way to pause or stop an HTML5 media element that autoplays: http://localhost:3000/techniques/failures/F93



--------------------------------------------------

Section 19: contrast_minimum
==================================================

In Brief
	- Goal
	- Text can be seen by more people.
	- What to do
	- Provide sufficient contrast between text and its background.
	- Why it's important
	- Some people cannot read faint text.

Success Criterion (SC): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1, except for the following:: Large Text: Large-scale text and images of large-scale text have a contrast ratio of at least 3:1;: Incidental: Text or images of text that are part of an inactive user interface component, that are pure decoration, that are not visible to anyone, or that are part of a picture that contains significant other visual content, have no contrast requirement.: Logotypes: Text that is part of a logo or brand name has no contrast requirement.

Intent: The intent of this Success Criterion is to provide enough contrast between text and its background, so that it can be read by people with moderately low vision or impaired contrast perception, without the use of contrast-enhancing assistive technology.: For all consumers of visual content, adequate light-dark contrast is needed between the relative luminance of text and its background for good readability. Many different visual impairments can substantially impact contrast sensitivity, requiring more light-dark contrast, regardless of color (hue). For people who are not able to distinguish certain shades of color (often referred to as color blindness) hue and saturation have minimal or no effect on legibility as assessed by reading performance. Further, the inability to distinguish certain shades of color does not negatively affect light-dark contrast perception. Therefore, in the recommendation, contrast is calculated in such a way that color (hue) is not a key factor.: Text that is decorative and conveys no information is excluded. For example, if random words are used to create a background and the words could be rearranged or substituted without changing meaning, then it would be decorative and would not need to meet this criterion.: Text that is larger and has wider character strokes is easier to read at lower contrast. The contrast requirement for larger text is therefore lower. This allows authors to use a wider range of color choices for large text, which is helpful for design of pages, particularly titles. 18 point text or 14 point bold text is judged to be large enough to require a lower contrast ratio. (See The American Printing House for the Blind Guidelines for Large Printing and The Library of Congress Guidelines for Large Print under Resources). "18 point" and "bold" can both have different meanings in different fonts but, except for very thin or unusual fonts, they should be sufficient. Since there are so many different fonts, the general measures are used and a note regarding thin or unusual fonts is included in the definition for large-scale text.: Note: When evaluating this Success Criterion, the font size in points should be obtained from the user agent or calculated on font metrics in the way that user agents do. Point sizes are based on the CSS pt size as defined in CSS3 Values. The ratio between sizes in points and CSS pixels is 1pt = 1.333px, therefore 14pt and 18pt are equivalent to approximately 18.5px and 24px.: Because different image editing applications default to different pixel densities (e.g., 72ppi or 96ppi), specifying point sizes for fonts from within an image editing application can be unreliable when it comes to presenting text at a specific size. When creating images of large-scale text, authors should ensure that the text in the resulting image is roughly equivalent to 1.2 and 1.5 em or to 120% or 150% of the default size for body text. For example, for a 72ppi image, an author would need to use approximately 19pt and 24pt font sizes in order to successfully present images of large-scale text to a user.: The 3:1 and 4.5:1 contrast ratios referenced in this Success Criterion are intended to be treated as threshold values. When comparing the computed contrast ratio to the Success Criterion ratio, the computed values should not be rounded (e.g., 4.499:1 would not meet the 4.5:1 threshold).: Note: Because authors do not have control over user settings for font smoothing/anti-aliasing, when evaluating this Success Criterion, refer to the foreground and background colors obtained from the user agent, or the underlying markup and stylesheets, rather than the text as presented on screen.: Due to anti-aliasing, particularly thin or unusual fonts may be rendered by user agents with a much fainter color than the actual text color defined in the underlying CSS. This can lead to situations where text has a contrast ratio that nominally passes the Success Criterion, but has a much lower contrast in practice. In these cases, best practice would be for authors to choose a font with stronger/thicker lines, or to aim for a foreground/background color combination that exceeds the normative requirements of this Success Criterion.: The contrast requirements for text also apply to images of text (text that has been rendered into pixels and then stored in an image format) - see Success Criterion 1.4.5: Images of Text.: This requirement applies to situations in which images of text were intended to be understood as text. Incidental text, such as in photographs that happen to include a street sign, are not included. Nor is text that for some reason is designed to be invisible to all viewers. Stylized text, such as in corporate logos, should be treated in terms of its function on the page, which may or may not warrant including the content in the text alternative. Corporate visual guidelines beyond logo and logotype are not included in the exception.: In this provision there is an exception that reads "that are part of a picture that contains significant other visual content,". This exception is intended to separate pictures that have text in them from images of text that are done to replace text in order to get a particular look.: Note: Images of text do not scale as well as text because they tend to pixelate. It is also harder to change foreground and background contrast and color combinations for images of text, which is necessary for some users. Therefore, we suggest using text wherever possible, and when not, consider supplying an image of higher resolution.: This Success Criterion applies to text in the page, including placeholder text and text that is shown when a pointer is hovering over an object or when an object has keyboard focus. If any of these are used in a page, the text needs to provide sufficient contrast.: Although this Success Criterion only applies to text, similar issues occur for content presented in charts, graphs, diagrams, and other non-text-based information, which is covered by Success Criterion 1.4.11 Non-Text Contrast.: See also 1.4.6: Contrast (Enhanced).: Rationale for the Ratios Chosen: A contrast ratio of 3:1 is the minimum level recommended by [ISO-9241-3] and [ANSI-HFES-100-1988] for standard text and vision. The 4.5:1 ratio is used in this Success Criterion to account for the loss in contrast that results from moderately low visual acuity, congenital or acquired color deficiencies, or the loss of contrast sensitivity that typically accompanies aging.: The rationale is based on a) adoption of the 3:1 contrast ratio for minimum acceptable contrast for normal observers, in the ANSI standard, and b) the empirical finding that in the population, visual acuity of 20/40 is associated with a contrast sensitivity loss of roughly 1.5 [ARDITI-FAYE]. A user with 20/40 would thus require a contrast ratio of 3 * 1.5 = 4.5 to 1. Following analogous empirical findings and the same logic, the user with 20/80 visual acuity would require contrast of about 7:1. This ratio is used in Success Criterion 1.4.6.: Hues are perceived differently by users with color vision deficiencies (both congenital and acquired) resulting in different colors and relative luminance contrasts than for normally sighted users. Because of this, effective contrast and readability are different for this population. However, color deficiencies are so diverse that prescribing effective general use color pairs (for contrast) based on quantitative data is not feasible. Requiring good luminance contrast accommodates this by requiring contrast that is independent of color perception. Fortunately, most of the luminance contribution is from the mid and long wave receptors which largely overlap in their spectral responses. The result is that effective luminance contrast can generally be computed without regard to specific color deficiency, except for the use of predominantly long wavelength colors against darker colors (generally appearing black) for those who have protanopia. (We provide an advisory technique on avoiding red on black for that reason). For more information see [ARDITI-KNOBLAUCH-1994] [ARDITI-KNOBLAUCH-1996] [ARDITI].: Note: Some people with cognitive disabilities require color combinations or hues that have low contrast, and therefore we allow and encourage authors to provide mechanisms to adjust the foreground and background colors of the content. Some of the combinations that could be chosen may have contrast levels that will be lower than those those specified here. This is not a violation of this Success Criterion, provided there is a mechanism that will return to the required values set out here.: The contrast ratio of 4.5:1 was chosen for level AA because it compensated for the loss in contrast sensitivity usually experienced by users with vision loss equivalent to approximately 20/40 vision. (20/40 calculates to approximately 4.5:1.) 20/40 is commonly reported as typical visual acuity of elders at roughly age 80. [GITTINGS-FOZARD]: The contrast ratio of 7:1 was chosen for level AAA because it compensated for the loss in contrast sensitivity usually experienced by users with vision loss equivalent to approximately 20/80 vision. People with more than this degree of vision loss usually use assistive technologies to access their content (and the assistive technologies usually have contrast enhancing, as well as magnification capability built into them). The 7:1 level therefore generally provides compensation for the loss in contrast sensitivity experienced by users with low vision who do not use assistive technology and provides contrast enhancement for color deficiency as well.: Note: Calculations in [ISO-9241-3] and [ANSI-HFES-100-1988] are for body text. A relaxed contrast ratio is provided for text that is much larger.: Notes on formula: Conversion from nonlinear to linear RGB values is based on IEC/4WD 61966-2-1 [IEC-4WD].: The formula (L1/L2) for contrast is based on [ISO-9241-3] and [ANSI-HFES-100-1988] standards.: The ANSI/HFS 100-1988 standard calls for the contribution from ambient light to be included in the calculation of L1 and L2. The .05 value used is based on Typical Viewing Flare from [IEC-4WD].: This Success Criterion and its definitions use the terms "contrast ratio" and "relative luminance" rather than "luminance" to reflect the fact that Web content does not emit light itself. The contrast ratio gives a measure of the relative luminance that would result when displayed. (Because it is a ratio, it is dimensionless.): Note: Refer to related resources for a list of tools that utilize the contrast ratio to analyze the contrast of Web content.: See also 2.4.7: Focus Visible for techniques for indicating keyboard focus.: Inactive User Interface Components: User Interface Components that are not available for user interaction (e.g., a disabled control in HTML) are not required to meet contrast requirements. An inactive user interface component is visible but not currently operable. An example would be a submit button at the bottom of a form that is visible but cannot be activated until all the required fields in the form are completed.: Figure 1: An inactive button using default browser styles

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: Select the situation below that matches your content. Each situation includes techniques or combinations of techniques that are known and documented to be sufficient for that situation.: Situation A: text is less than 18 point if not bold and less than 14 point if bold
	- G18: Ensuring that a contrast ratio of at least 4.5:1 exists between text (and images of text) and background behind the text
	- G148: Not specifying background color, not specifying text color, and not using technology features that change those defaults
	- G174: Providing a control with a sufficient contrast ratio that allows users to switch to a presentation that uses sufficient contrast
	- Situation B: text is at least 18 point if not bold and at least 14 point if bold
	- G145: Ensuring that a contrast ratio of at least 3:1 exists between text (and images of text) and background behind the text
	- G148: Not specifying background color, not specifying text color, and not using technology features that change those defaults
	- G174: Providing a control with a sufficient contrast ratio that allows users to switch to a presentation that uses sufficient contrast
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: G156: Using a technology that has commonly-available user agents that can change the foreground and background of blocks of text
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F24: Failure of Success Criterion 1.4.3, 1.4.6 and 1.4.8 due to specifying foreground colors without specifying background colors or vice versa
	- F83: Failure of Success Criterion 1.4.3 and 1.4.6 due to using background images that do not provide sufficient contrast with foreground text (or images of text)

- G18: Ensuring that a contrast ratio of at least 4.5:1 exists between text (and images of text) and background behind the text: http://localhost:3000/techniques/general/G18
- G148: Not specifying background color, not specifying text color, and not using technology features that change those defaults: http://localhost:3000/techniques/general/G148
- G174: Providing a control with a sufficient contrast ratio that allows users to switch to a presentation that uses sufficient contrast: http://localhost:3000/techniques/general/G174
- G145: Ensuring that a contrast ratio of at least 3:1 exists between text (and images of text) and background behind the text: http://localhost:3000/techniques/general/G145
- G148: Not specifying background color, not specifying text color, and not using technology features that change those defaults: http://localhost:3000/techniques/general/G148
- G174: Providing a control with a sufficient contrast ratio that allows users to switch to a presentation that uses sufficient contrast: http://localhost:3000/techniques/general/G174
- G156: Using a technology that has commonly-available user agents that can change the foreground and background of blocks of text: http://localhost:3000/techniques/general/G156
- F24: Failure of Success Criterion 1.4.3, 1.4.6 and 1.4.8 due to specifying foreground colors without specifying background colors or vice versa: http://localhost:3000/techniques/failures/F24
- F83: Failure of Success Criterion 1.4.3 and 1.4.6 due to using background images that do not provide sufficient contrast with foreground text (or images of text): http://localhost:3000/techniques/failures/F83



--------------------------------------------------

Section 20: resize_text
==================================================

In Brief
	- Goal
	- Text can be enlarged.
	- What to do
	- Ensure text can be doubled in size.
	- Why it's important
	- Some people can only read text when it is bigger.

Success Criterion (SC): Except for captions and images of text, text can be resized without assistive technology up to 200 percent without loss of content or functionality.

Intent: The intent of this Success Criterion is to ensure that visually rendered text, including controls and labels using text, can be made larger so that it can be read more easily by people with milder visual impairments, without requiring the use of assistive technology (such as a screen magnifier). Users may benefit from scaling all content on the Web page, but text is most critical.: The scaling of content is primarily a user agent responsibility. User agents that satisfy UAAG 1.0 Checkpoint 4.1 allow users to configure text scale through a number of mechanisms - including zoom (of the entire page's content), magnification, text-only resizing, and allowing the user to configure a size for rendered text. The author's responsibility is to create Web content that does not prevent the user agent from scaling the content effectively. Authors may satisfy this Success Criterion by verifying that content does not interfere with user agent support for resizing text, including text-based controls, or by providing direct support for resizing text or changing the layout. An example of direct support might be via server-side script that can be used to assign different style sheets.: Content satisfies the Success Criterion if it can be scaled up to 200% using at least one text scaling mechanism supported by user agents.: If the author is using a technology whose user agents do not provide support for specific text scaling mechanisms, the author is responsible for providing this type of functionality directly, or providing content that works with the type of functionality provided by the user agent. For instance, if the user agent doesn't provide full-page zoom functionality, but does let the the user change the text size, the author is responsible for ensuring that the content remains usable when the text is resized.: Some user interface components that function as a label and require activation by the user to access content are not wide enough to accommodate the label's content. For example, in Web mail applications the subject column may not be wide enough to accommodate every possible subject header, but activating the subject header takes the user to the full message with the full subject header. In Web-based spreadsheets, cell content that is too long to be displayed in a column can be truncated, and the full content of the cell is available to the user when the cell receives focus. The content of a user interface component may also become too wide in user interfaces where the user can resize the column width. In this type of user interface component, line wrapping is not required; truncation is acceptable if the component's full content is available on focus or after user activation and an indication that this information can be accessed, is provided to the user in some way besides the fact that it is truncated.: Content satisfies the Success Criterion if it can be scaled up to 200% - that is, up to twice the width and height. Authors may support scaling beyond that limit, however, as scaling becomes more extreme, adaptive layouts may introduce usability problems. For example, words may be too wide to fit into the horizontal space available to them, causing them to be truncated; layout constraints may cause text to overlap with other content when it is scaled larger; or only one word of a sentence may fit on each line, causing the sentence to be displayed as a vertical column of text that is difficult to read.: The working group feels that 200% is a reasonable accommodation that can support a wide range of designs and layouts, and complements older screen magnifiers that provide a minimum magnification of 200%. Above 200%, zoom (which resizes text, images, and layout regions and creates a larger canvas that may require both horizontal and vertical scrolling) may be more effective than text resizing. Assistive technology dedicated to zoom support would usually be used in such a situation, and may provide better accessibility than attempts by the author to support the user directly.: Note: Images of text do not scale as well as text because they tend to pixelate, and therefore we suggest using text wherever possible. It is also harder to change foreground and background contrast and color combinations for images of text, which are necessary for some users.: Note: As with most other Success Criteria, this criterion applies to each variation of the page that is automatically presented for various screen sizes (e.g. media query variations in a responsive site). In an implementation where text does not consistently increase its size as people zoom in (such as when it is transformed based on a media query to adapt to small-screen usage), it must still be possible to get to 200% enlargement in order to satisfy the criterion.: For example, if at the default browser setting of 100% zoom, text is set at 20px when the window is 1280 CSS pixels wide, at 200% zoom it will visually appear at twice the size. After zooming by 400% the page reflows to fit within the 320 CSS pixel viewport, the author may decide to set the page's text size to 10px. The text is now half the original size in CSS pixels, but as it has been enlarged to 400%, it is still displayed at twice the size compared to the default browser setting at 100% zoom. It is not required to achieve 200% text enlargement while remaining inside a specific breakpoint (as zooming may result in the variation for a new breakpoint becoming active), but it should still be possible to get 200% text enlargement in some way compared to the default 100% zoom.: See also 1.4.3: Visual Presentation.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G142: Using a technology that has commonly-available user agents that support zoom: Ensuring that text containers resize when the text resizes AND using measurements that are relative to other measurements in the content by using one or more of the following techniques:: C28: Specifying the size of text containers using em units: Techniques for relative measurements: C12: Using percent for font sizes
	- C13: Using named font sizes
	- C14: Using em units for font sizes: Techniques for text container resizing: SCR34: Calculating size and position in a way that scales with text size
	- G146: Using liquid layout
	- G178: Providing controls on the Web page that allow users to incrementally change the size of all text on the page up to 200 percent
	- G179: Ensuring that there is no loss of content or functionality when the text resizes and text containers do not change their width
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: C17: Scaling form elements which contain text
	- C20: Using relative measurements to set column widths so that lines can average 80 characters or less when the browser is resized
	- C22: Using CSS to control visual presentation of text
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F69: Failure of Success Criterion 1.4.4 when resizing visually rendered text up to 200 percent causes the text, image or controls to be clipped, truncated or obscured
	- F80: Failure of Success Criterion 1.4.4 when text-based form controls do not resize when visually rendered text is resized up to 200%
	- F94: Failure of Success Criterion 1.4.4 due to incorrect use of viewport units to resize text

- G142: Using a technology that has commonly-available user agents that support zoom: http://localhost:3000/techniques/general/G142
- C28: Specifying the size of text containers using em units: http://localhost:3000/techniques/css/C28
- C12: Using percent for font sizes: http://localhost:3000/techniques/css/C12
- C13: Using named font sizes: http://localhost:3000/techniques/css/C13
- C14: Using em units for font sizes: http://localhost:3000/techniques/css/C14
- SCR34: Calculating size and position in a way that scales with text size: http://localhost:3000/techniques/client-side-script/SCR34
- G146: Using liquid layout: http://localhost:3000/techniques/general/G146
- G178: Providing controls on the Web page that allow users to incrementally change the size of all text on the page up to 200 percent: http://localhost:3000/techniques/general/G178
- G179: Ensuring that there is no loss of content or functionality when the text resizes and text containers do not change their width: http://localhost:3000/techniques/general/G179
- C17: Scaling form elements which contain text: http://localhost:3000/techniques/css/C17
- C20: Using relative measurements to set column widths so that lines can average 80 characters or less when the browser is resized: http://localhost:3000/techniques/css/C20
- C22: Using CSS to control visual presentation of text: http://localhost:3000/techniques/css/C22
- F69: Failure of Success Criterion 1.4.4 when resizing visually rendered text up to 200 percent causes the text, image or controls to be clipped, truncated or obscured: http://localhost:3000/techniques/failures/F69
- F80: Failure of Success Criterion 1.4.4 when text-based form controls do not resize when visually rendered text is resized up to 200%: http://localhost:3000/techniques/failures/F80
- F94: Failure of Success Criterion 1.4.4 due to incorrect use of viewport units to resize text: http://localhost:3000/techniques/failures/F94



--------------------------------------------------

Section 21: images_of_text
==================================================

In Brief
	- Goal
	- Users can adjust how text is presented.
	- What to do
	- Use text instead of pictures of text.
	- Why it's important
	- People cannot alter how text looks in images.

Success Criterion (SC): If the technologies being used can achieve the visual presentation, text is used to convey information rather than images of text except for the following:: Customizable: The image of text can be visually customized to the user's requirements;: Essential: A particular presentation of text is essential to the information being conveyed.: Note: Logotypes (text that is part of a logo or brand name) are considered essential.

Intent: The intent of this Success Criterion is to encourage authors, who are using technologies which are capable of achieving their desired default visual presentation, to enable people who require a particular visual presentation of text to be able to adjust the text presentation as needed. This includes people who require the text in a particular font size, foreground and background color, font family, line spacing or alignment.: If authors can use text to achieve the same visual effect, they should present the information as text rather than using an image. If for any reason, the author cannot format the text to get the same effect, the effect won't be reliably presented on the commonly available user agents, or using a technology to meet this criterion would interfere with meeting other criteria such as 1.4.4, then an image of text can be used. This includes instances where a particular presentation of text is essential to the information being conveyed, such as type samples, logotypes, branding, etc. Images of text may also be used in order to use a particular font that is either not widely deployed or which the author doesn't have the right to redistribute, or to ensure that the text would be anti-aliased on all user agents.: Images of text can also be used where it is possible for users to customize the image of text to match their requirements.: The definition of images of text contains the note: This does not include text that is part of a picture that contains significant other visual content. Examples of such pictures include graphs, screenshots, and diagrams which visually convey important information through more than just text.: Note: The Success Criterion is intended to address situations where images of text are used rather than text. Where images of text are used in addition to text to convey the same information, and where both are presented to the user, this Success Criterion is met. This allows authors to convey content using any styling they desire, while also presenting the information in text, which can then be manipulated by users to make it more distinguishable. This is in contrast to 1.4.9 Images of Text (No Exception), which applies to all images of text, regardless of whether or not they are used in addition to text.: Techniques for satisfying this Success Criterion are the same as those for Success Criterion 1.4.9, except that they only need to apply if the visual presentation can be achieved with the technologies that the author is using. For Success Criterion 1.4.9, the sufficient techniques would be applied only when the user can customize the output.: See also 1.4.9 Images of Text (No Exception).

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- C22: Using CSS to control visual presentation of text
	- C30: Using CSS to replace text with images of text and providing user interface controls to switch
	- G140: Separating information and structure from presentation to enable different presentations
	- PDF7: Performing OCR on a scanned PDF document to provide actual text
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: CSS Techniques
	- C12: Using percent for font sizes
	- C13: Using named font sizes
	- C14: Using em units for font sizes
	- C8: Using CSS letter-spacing to control spacing within a word
	- C6: Positioning content based on structural markup

- C22: Using CSS to control visual presentation of text: http://localhost:3000/techniques/css/C22
- C30: Using CSS to replace text with images of text and providing user interface controls to switch: http://localhost:3000/techniques/css/C30
- G140: Separating information and structure from presentation to enable different presentations: http://localhost:3000/techniques/general/G140
- PDF7: Performing OCR on a scanned PDF document to provide actual text: http://localhost:3000/techniques/pdf/PDF7
- C12: Using percent for font sizes: http://localhost:3000/techniques/css/C12
- C13: Using named font sizes: http://localhost:3000/techniques/css/C13
- C14: Using em units for font sizes: http://localhost:3000/techniques/css/C14
- C8: Using CSS letter-spacing to control spacing within a word: http://localhost:3000/techniques/css/C8
- C6: Positioning content based on structural markup: http://localhost:3000/techniques/css/C6



--------------------------------------------------

Section 22: contrast_enhanced
==================================================

In Brief
	- Goal
	- Text can be seen by people who need strong contrast.
	- What to do
	- Strongly contrast text against its background.
	- Why it's important
	- Some people cannot read text with minimum contrast.

Success Criterion (SC): The visual presentation of text and images of text has a contrast ratio of at least 7:1, except for the following:: Large Text: Large-scale text and images of large-scale text have a contrast ratio of at least 4.5:1;: Incidental: Text or images of text that are part of an inactive user interface component, that are pure decoration, that are not visible to anyone, or that are part of a picture that contains significant other visual content, have no contrast requirement.: Logotypes: Text that is part of a logo or brand name has no contrast requirement.

Intent: The intent of this Success Criterion is to provide enough contrast between text and its background so that it can be read by people with moderately low vision (who do not use contrast-enhancing assistive technology). For people without color deficiencies, hue and saturation have minimal or no effect on legibility as assessed by reading performance (Knoblauch et al., 1991). Color deficiencies can affect luminance contrast somewhat. Therefore, in the recommendation, the contrast is calculated in such a way that color is not a key factor so that people who have a color vision deficit will also have adequate contrast between the text and the background.: Text that is decorative and conveys no information is excluded. For example, if random words are used to create a background and the words could be rearranged or substituted without changing meaning, then it would be decorative and would not need to meet this criterion.: Text that is larger and has wider character strokes is easier to read at lower contrast. The contrast requirement for larger text is therefore lower. This allows authors to use a wider range of color choices for large text, which is helpful for design of pages, particularly titles. 18 point text or 14 point bold text is judged to be large enough to require a lower contrast ratio. (See The American Printing House for the Blind Guidelines for Large Printing and The Library of Congress Guidelines for Large Print under Resources). "18 point" and "bold" can both have different meanings in different fonts but, except for very thin or unusual fonts, they should be sufficient. Since there are so many different fonts, the general measures are used and a note regarding thin or unusual fonts is included in the definition for large-scale text.: Note: When evaluating this Success Criterion, the font size in points should be obtained from the user agent or calculated on font metrics in the way that user agents do. Point sizes are based on the CSS pt size as defined in CSS3 Values. The ratio between sizes in points and CSS pixels is 1pt = 1.333px, therefore 14pt and 18pt are equivalent to approximately 18.5px and 24px.: Because different image editing applications default to different pixel densities (e.g., 72ppi or 96ppi), specifying point sizes for fonts from within an image editing application can be unreliable when it comes to presenting text at a specific size. When creating images of large-scale text, authors should ensure that the text in the resulting image is roughly equivalent to 1.2 and 1.5 em or to 120% or 150% of the default size for body text. For example, for a 72ppi image, an author would need to use approximately 19pt and 24pt font sizes in order to successfully present images of large-scale text to a user.: The 7:1 and 4.5:1 contrast ratios referenced in this Success Criterion are intended to be treated as threshold values. When comparing the computed contrast ratio to the Success Criterion ratio, the computed values should not be rounded (e.g., 4.499:1 would not meet the 4.5:1 threshold).: Note: Because authors do not have control over user settings for font smoothing/anti-aliasing, when evaluating this Success Criterion, refer to the foreground and background colors obtained from the user agent, or the underlying markup and stylesheets, rather than the text as presented on screen.: Due to anti-aliasing, particularly thin or unusual fonts may be rendered by user agents with a much fainter color than the actual text color defined in the underlying CSS. This can lead to situations where text has a contrast ratio that nominally passes the Success Criterion, but has a much lower contrast in practice. In these cases, best practice would be for authors to choose a font with stronger/thicker lines, or to aim for a foreground/background color combination that exceeds the normative requirements of this Success Criterion.: The contrast requirements for text also apply to images of text (text that has been rendered into pixels and then stored in an image format) - see Success Criterion 1.4.5: Images of Text.: This requirement applies to situations in which images of text were intended to be understood as text. Incidental text, such as in photographs that happen to include a street sign, are not included. Nor is text that for some reason is designed to be invisible to all viewers. Stylized text, such as in corporate logos, should be treated in terms of its function on the page, which may or may not warrant including the content in the text alternative. Corporate visual guidelines beyond logo and logotype are not included in the exception.: In this provision there is an exception that reads "that are part of a picture that contains significant other visual content,". This exception is intended to separate pictures that have text in them from images of text that are done to replace text in order to get a particular look.: Note: Images of text do not scale as well as text because they tend to pixelate. It is also harder to change foreground and background contrast and color combinations for images of text, which is necessary for some users. See 1.4.5: Images of Text.: This Success Criterion applies to text in the page, including placeholder text and text that is shown when a pointer is hovering over an object or when an object has keyboard focus. If any of these are used in a page, the text needs to provide sufficient contrast.: Although this Success Criterion only applies to text, similar issues occur for content presented in charts, graphs, diagrams, and other non-text-based information, which is covered by Success Criterion 1.4.11 Non-Text Contrast.: Rationale for the Ratios Chosen: A contrast ratio of 3:1 is the minimum level recommended by [ISO-9241-3] and [ANSI-HFES-100-1988] for standard text and vision. The 4.5:1 ratio is used in Success Criterion 1.4.3 to account for the loss in contrast that results from moderately low visual acuity, congenital or acquired color deficiencies, or the loss of contrast sensitivity that typically accompanies aging.: The rationale is based on a) adoption of the 3:1 contrast ratio for minimum acceptable contrast for normal observers, in the ANSI standard, and b) the empirical finding that in the population, visual acuity of 20/40 is associated with a contrast sensitivity loss of roughly 1.5 [ARDITI-FAYE]. A user with 20/40 would thus require a contrast ratio of 3 * 1.5 = 4.5 to 1. Following analogous empirical findings and the same logic, the user with 20/80 visual acuity would require contrast of about 7:1. This ratio is used in this Success Criterion.: Hues are perceived differently by users with color vision deficiencies (both congenital and acquired) resulting in different colors and relative luminance contrasts than for normally sighted users. Because of this, effective contrast and readability are different for this population. However, color deficiencies are so diverse that prescribing effective general use color pairs (for contrast) based on quantitative data is not feasible. Requiring good luminance contrast accommodates this by requiring contrast that is independent of color perception. Fortunately, most of the luminance contribution is from the mid and long wave receptors which largely overlap in their spectral responses. The result is that effective luminance contrast can generally be computed without regard to specific color deficiency, except for the use of predominantly long wavelength colors against darker colors (generally appearing black) for those who have protanopia. (We provide an advisory technique on avoiding red on black for that reason). For more information see [ARDITI-KNOBLAUCH-1994] [ARDITI-KNOBLAUCH-1996] [ARDITI].: Note: Some people with cognitive disabilities require color combinations or hues that have low contrast, and therefore we allow and encourage authors to provide mechanisms to adjust the foreground and background colors of the content. Some of the combinations that could be chosen may have contrast levels that will be lower than those specified here. This is not a violation of this Success Criterion, provided there is a mechanism that will return to the required values set out here.: The contrast ratio of 4.5:1 was chosen for level AA because it compensated for the loss in contrast sensitivity usually experienced by users with vision loss equivalent to approximately 20/40 vision. (20/40 calculates to approximately 4.5:1.) 20/40 is commonly reported as typical visual acuity of elders at roughly age 80. [GITTINGS-FOZARD]: The contrast ratio of 7:1 was chosen for level AAA because it compensated for the loss in contrast sensitivity usually experienced by users with vision loss equivalent to approximately 20/80 vision. People with more than this degree of vision loss usually use assistive technologies to access their content (and the assistive technologies usually have contrast enhancing, as well as magnification capability built into them). The 7:1 level therefore generally provides compensation for the loss in contrast sensitivity experienced by users with low vision who do not use assistive technology and provides contrast enhancement for color deficiency as well.: Note: Calculations in [ISO-9241-3] and [ANSI-HFES-100-1988] are for body text. A relaxed contrast ratio is provided for text that is much larger.: Notes on formula: Conversion from nonlinear to linear RGB values is based on IEC/4WD 61966-2-1 [IEC-4WD].: The formula (L1/L2) for contrast is based on [ISO-9241-3] and [ANSI-HFES-100-1988] standards.: The ANSI/HFS 100-1988 standard calls for the contribution from ambient light to be included in the calculation of L1 and L2. The .05 value used is based on Typical Viewing Flare from [IEC-4WD].: This Success Criterion and its definitions use the terms "contrast ratio" and "relative luminance" rather than "luminance" to reflect the fact that Web content does not emit light itself. The contrast ratio gives a measure of the relative luminance that would result when displayed. (Because it is a ratio, it is dimensionless.): Note: Refer to related resources for a list of tools that utilize the contrast ratio to analyze the contrast of Web content.: See also 2.4.7: Focus Visible for techniques for indicating keyboard focus.: Inactive User Interface Components: User Interface Components that are not available for user interaction (e.g., a disabled control in HTML) are not required to meet contrast requirements. An inactive user interface component is visible but not currently operable. An example would be a submit button at the bottom of a form that is visible but cannot be activated until all the required fields in the form are completed.: Figure 1: An inactive button using default browser styles

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: Select the situation below that matches your content. Each situation includes techniques or combinations of techniques that are known and documented to be sufficient for that situation.: Situation A: text is less than 18 point if not bold and less than 14 point if bold
	- G17: Ensuring that a contrast ratio of at least 7:1 exists between text (and images of text) and background behind the text
	- G148: Not specifying background color, not specifying text color, and not using technology features that change those defaults
	- G174: Providing a control with a sufficient contrast ratio that allows users to switch to a presentation that uses sufficient contrast
	- Situation B: text is as least 18 point if not bold and at least 14 point if bold
	- G18: Ensuring that a contrast ratio of at least 4.5:1 exists between text (and images of text) and background behind the text
	- G148: Not specifying background color, not specifying text color, and not using technology features that change those defaults
	- G174: Providing a control with a sufficient contrast ratio that allows users to switch to a presentation that uses sufficient contrast
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: G156: Using a technology that has commonly-available user agents that can change the foreground and background of blocks of text
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F24: Failure of Success Criterion 1.4.3, 1.4.6 and 1.4.8 due to specifying foreground colors without specifying background colors or vice versa
	- F83: Failure of Success Criterion 1.4.3 and 1.4.6 due to using background images that do not provide sufficient contrast with foreground text (or images of text)

- G17: Ensuring that a contrast ratio of at least 7:1 exists between text (and images of text) and background behind the text: http://localhost:3000/techniques/general/G17
- G148: Not specifying background color, not specifying text color, and not using technology features that change those defaults: http://localhost:3000/techniques/general/G148
- G174: Providing a control with a sufficient contrast ratio that allows users to switch to a presentation that uses sufficient contrast: http://localhost:3000/techniques/general/G174
- G18: Ensuring that a contrast ratio of at least 4.5:1 exists between text (and images of text) and background behind the text: http://localhost:3000/techniques/general/G18
- G148: Not specifying background color, not specifying text color, and not using technology features that change those defaults: http://localhost:3000/techniques/general/G148
- G174: Providing a control with a sufficient contrast ratio that allows users to switch to a presentation that uses sufficient contrast: http://localhost:3000/techniques/general/G174
- G156: Using a technology that has commonly-available user agents that can change the foreground and background of blocks of text: http://localhost:3000/techniques/general/G156
- F24: Failure of Success Criterion 1.4.3, 1.4.6 and 1.4.8 due to specifying foreground colors without specifying background colors or vice versa: http://localhost:3000/techniques/failures/F24
- F83: Failure of Success Criterion 1.4.3 and 1.4.6 due to using background images that do not provide sufficient contrast with foreground text (or images of text): http://localhost:3000/techniques/failures/F83



--------------------------------------------------

Section 23: low_or_no_background_audio
==================================================

In Brief
	- Goal
	- Prerecorded speech is not disrupted by background sound.
	- What to do
	- Avoid or lessen background sound, or let users turn it off.
	- Why it's important
	- People who are hard of hearing may have difficulty distinguishing speech from music and other sounds.

Success Criterion (SC): For prerecorded audio-only content that (1) contains primarily speech in the foreground, (2) is not an audio CAPTCHA or audio logo, and (3) is not vocalization intended to be primarily musical expression such as singing or rapping, at least one of the following is true:: No Background: The audio does not contain background sounds.: Turn Off: The background sounds can be turned off.: 20 dB: The background sounds are at least 20 decibels lower than the foreground speech content, with the exception of occasional sounds that last for only one or two seconds.: Note: Per the definition of "decibel," background sound that meets this requirement will be approximately four times quieter than the foreground speech content.

Intent: The intent of this Success Criterion is to ensure that any non-speech sounds are low enough that a user who is hard of hearing can separate the speech from background sounds or other noise foreground speech content.: The value of 20 dB was chosen based on Large area assistive listening systems (ALS): Review and recommendations [LAALS] and In-the-ear measurements of interference in hearing aids from digital wireless telephones [HEARING-AID-INT]

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G56: Mixing audio files so that non-speech sounds are at least 20 decibels lower than the speech audio content

- G56: Mixing audio files so that non-speech sounds are at least 20 decibels lower than the speech audio content: http://localhost:3000/techniques/general/G56



--------------------------------------------------

Section 24: visual_presentation
==================================================

In Brief
	- Goal
	- Text appearance can be altered by users to meet preferences.
	- What to do
	- Meet text display requirements or allow users to adjust them.
	- Why it's important
	- Some text formats are more readable for people with cognitive disabilities and low vision.

Success Criterion (SC): For the visual presentation of blocks of text, a mechanism is available to achieve the following:: Foreground and background colors can be selected by the user.
	- Width is no more than 80 characters or glyphs (40 if CJK).
	- Text is not justified (aligned to both the left and the right margins).
	- Line spacing (leading) is at least space-and-a-half within paragraphs, and paragraph spacing is at least 1.5 times larger than the line spacing.
	- Text can be resized without assistive technology up to 200 percent in a way that does not require the user to scroll horizontally to read a line of text on a full-screen window.: Note 1: Content is not required to use these values. The requirement is that a mechanism is available for users to change these presentation aspects. The mechanism can be provided by the browser or other user agent. Content is not required to provide the mechanism.: Note 2: Writing systems for some languages use different presentation aspects to improve readability and legibility. If a presentation aspect in this success criterion is not used in a writing system, content in that writing system does not need to use that presentation setting and can conform without it. Authors are encouraged to follow guidance for improving readability and legibility of text in their writing system.

Intent: The intent of this Success Criterion is to ensure that visually rendered text is presented in such a manner that it can be perceived without its layout interfering with its readability. People with some cognitive, language and learning disabilities and some low vision users cannot perceive the text and/or lose their reading place if the text is presented in a manner that is difficult for them to read.: People with some visual or cognitive disabilities need to be able to select the color of text and the color of the background. They sometimes choose combinations that seem unintuitive to someone without that disability. Sometimes these combinations have very low contrast. Sometimes only very specific color combinations work for them. Control of color or other aspects of text presentation makes a huge difference to their comprehension.: For people with some reading or vision disabilities, long lines of text can become a significant barrier. They have trouble keeping their place and following the flow of text. Having a narrow block of text makes it easier for them to continue on to the next line in a block. Lines should not exceed 80 characters or glyphs (40 if CJK), where glyphs are the element of writing in the writing system for the text. Studies have shown that Chinese, Japanese and Korean (CJK) characters are approximately twice as wide as non-CJK characters when both types of characters are displayed with characteristics that achieve the same readability, so the maximum line width for CJK characters is half that of non-CJK characters.: People with some cognitive disabilities find it difficult to track text where the lines are close together. Providing extra space between lines and paragraphs allows them to better track the next line and to recognize when they have reached the end of a paragraph. It is best if there are several different options, for instance, space-and-a-half and double spacing for line spacing. By space and a half within paragraphs we mean that top of one line is 150% further from the top of the line below it than would be true when the text is 'single spaced' (the default spacing for the font). By Paragraph spacing that is 1.5 times larger than the line spacing we mean that the spacing from the top of the last line of 1 paragraph is 250% farther from the Top of the first line of the next paragraph (i.e., that there is a blank line between the two paragraphs that is 150% of the single space blank line).: People with certain cognitive disabilities have problems reading text that is both left and right justified. The uneven spacing between words in fully justified text can cause "rivers of white" space to run down the page making reading difficult and in some cases impossible. Text justification can also cause words to be spaced closely together, so that it is difficult for them to locate word boundaries.: The resizing provision ensures that visually rendered text, including controls and labels using text, can be made larger without requiring the user to then scroll left and right to see all of the content. When the content has been authored so that this is possible, the content is said to reflow. This permits people with low vision and people with cognitive disabilities to increase the size of the text without becoming disoriented.: The scaling of content is primarily a user agent responsibility. User agents that satisfy UAAG 1.0 Checkpoint 4.1 allow users to configure text scale. The author's responsibility is to create Web content that does not prevent the user agent from scaling the content and that allows the reflow of the content within the current width of the viewport. See 1.4.4: Resize Text for additional discussion of resizing text.: The horizontal scrolling requirement is not intended to apply to small-screen devices where long words may be displayed on a single line and require users to scroll horizontally. For the purposes of this requirement, authors should ensure that content meets this requirement on standard desktop/laptop displays with the browser window maximized. Since people generally keep their computers for several years, it is best not to rely on the latest desktop/laptop display resolutions but to consider the common desktop/laptop display resolutions over the course of several years when making this evaluation.: Wrapping should always be possible as long as words are not so long that a single word is more than half the width of a full screen. Very long URIs may run off the side of an enlarged screen, but they would not be considered text for "reading" and, therefore, would not violate this provision.: This provision does not mean that a user would never need to use horizontal scrolling. It only means that they would not need to use horizontal scrolling back and forth to read a line of text. For example, if a page consisted of two equal sized columns of text, it would automatically meet this provision. Enlarging the page would mean that the first column was completely on screen and the user could just scroll vertically down the page to read it. To read the second column, they would horizontally scroll to the right, where the right hand column would then fit entirely within the width of the screen, and read that column without further horizontal scrolling.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: Instructions: Since this is a multi-part success criterion, you must satisfy one of the numbered items for each of the requirements below.: C23: Specifying text and background colors of secondary content such as banners, features and navigation in CSS while not specifying text and background colors of the main content OR
	- C25: Specifying borders and layout in CSS to delineate areas of a Web page while not specifying text and text-background colors OR
	- G156: Using a technology that has commonly-available user agents that can change the foreground and background of blocks of text OR
	- G148: Not specifying background color, not specifying text color, and not using technology features that change those defaults OR
	- G175: Providing a multi color selection tool on the page for foreground and background colors
	- G204: Not interfering with the user agent's reflow of text as the viewing window is narrowed OR
	- C20: Using relative measurements to set column widths so that lines can average 80 characters or less when the browser is resized
	- C19: Specifying alignment either to the left or right in CSS OR
	- G172: Providing a mechanism to remove full justification of text OR
	- G169: Aligning text on only one side
	- G188: Providing a button on the page to increase line spaces and paragraph spaces OR
	- C21: Specifying line spacing in CSS
	- G204: Not interfering with the user agent's reflow of text as the viewing window is narrowed OR: G146: Using liquid layout AND using measurements that are relative to other measurements in the content by using one or more of the following techniques:: C12: Using percent for font sizes OR
	- C13: Using named font sizes OR
	- C14: Using em units for font sizes OR
	- C24: Using percentage values in CSS for container sizes OR
	- SCR34: Calculating size and position in a way that scales with text size OR
	- G206: Providing options within the content to switch to a layout that does not require the user to scroll horizontally to read a line of text
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F24: Failure of Success Criterion 1.4.3, 1.4.6 and 1.4.8 due to specifying foreground colors without specifying background colors or vice versa
	- F88: Failure of Success Criterion 1.4.8 due to using text that is justified (aligned to both the left and the right margins)

- C23: Specifying text and background colors of secondary content such as banners, features and navigation in CSS while not specifying text and background colors of the main content: http://localhost:3000/techniques/css/C23
- C25: Specifying borders and layout in CSS to delineate areas of a Web page while not specifying text and text-background colors: http://localhost:3000/techniques/css/C25
- G156: Using a technology that has commonly-available user agents that can change the foreground and background of blocks of text: http://localhost:3000/techniques/general/G156
- G148: Not specifying background color, not specifying text color, and not using technology features that change those defaults: http://localhost:3000/techniques/general/G148
- G175: Providing a multi color selection tool on the page for foreground and background colors: http://localhost:3000/techniques/general/G175
- G204: Not interfering with the user agent's reflow of text as the viewing window is narrowed: http://localhost:3000/techniques/general/G204
- C20: Using relative measurements to set column widths so that lines can average 80 characters or less when the browser is resized: http://localhost:3000/techniques/css/C20
- C19: Specifying alignment either to the left or right in CSS: http://localhost:3000/techniques/css/C19
- G172: Providing a mechanism to remove full justification of text: http://localhost:3000/techniques/general/G172
- G169: Aligning text on only one side: http://localhost:3000/techniques/general/G169
- G188: Providing a button on the page to increase line spaces and paragraph spaces: http://localhost:3000/techniques/general/G188
- C21: Specifying line spacing in CSS: http://localhost:3000/techniques/css/C21
- G204: Not interfering with the user agent's reflow of text as the viewing window is narrowed: http://localhost:3000/techniques/general/G204
- G146: Using liquid layout: http://localhost:3000/techniques/general/G146
- C12: Using percent for font sizes: http://localhost:3000/techniques/css/C12
- C13: Using named font sizes: http://localhost:3000/techniques/css/C13
- C14: Using em units for font sizes: http://localhost:3000/techniques/css/C14
- C24: Using percentage values in CSS for container sizes: http://localhost:3000/techniques/css/C24
- SCR34: Calculating size and position in a way that scales with text size: http://localhost:3000/techniques/client-side-script/SCR34
- G206: Providing options within the content to switch to a layout that does not require the user to scroll horizontally to read a line of text: http://localhost:3000/techniques/general/G206
- F24: Failure of Success Criterion 1.4.3, 1.4.6 and 1.4.8 due to specifying foreground colors without specifying background colors or vice versa: http://localhost:3000/techniques/failures/F24
- F88: Failure of Success Criterion 1.4.8 due to using text that is justified (aligned to both the left and the right margins): http://localhost:3000/techniques/failures/F88



--------------------------------------------------

Section 25: images_of_text_no_exception
==================================================

In Brief
	- Goal
	- Users can always adjust how text is presented.
	- What to do
	- Do not use pictures of text unless there is no other way to present information.
	- Why it's important
	- People cannot alter how text looks in images.

Success Criterion (SC): Images of text are only used for pure decoration or where a particular presentation of text is essential to the information being conveyed.: Note: Logotypes (text that is part of a logo or brand name) are considered essential.

Intent: The intent of this Success Criterion is to enable people who require a particular visual presentation of text to be able to adjust the text presentation as required. This includes people who require the text in a particular font size, foreground and background color, font family, line spacing or alignment.: This means implementing the text in a manner that allows its presentation to be changed or providing a mechanism by which users can select an alternate presentation. Using images of text is an example of an implementation that does not allow users to alter the presentation of the text within it.: In some situations, a particular visual presentation of the text is essential to the information being conveyed. This means that information would be lost without that particular visual presentation. In this case implementing the text in a manner that allows its presentation to be changed is not required. This includes text that demonstrates a particular visual aspect of the text, such as a particular font family, or text that conveys an identity, such as text within a company logo.: Text that is decorative does not require implementing the text in a manner that allows its presentation to be changed.: The definition of image of text contains the note: Note: This does not include text that is part of a picture that contains significant other visual content. Examples of such pictures include graphs, screenshots, and diagrams which visually convey important information through more than just text.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- C22: Using CSS to control visual presentation of text
	- C30: Using CSS to replace text with images of text and providing user interface controls to switch
	- G140: Separating information and structure from presentation to enable different presentations
	- PDF7: Performing OCR on a scanned PDF document to provide actual text
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: CSS Techniques
	- C12: Using percent for font sizes
	- C13: Using named font sizes
	- C14: Using em units for font sizes
	- C8: Using CSS letter-spacing to control spacing within a word
	- C6: Positioning content based on structural markup

- C22: Using CSS to control visual presentation of text: http://localhost:3000/techniques/css/C22
- C30: Using CSS to replace text with images of text and providing user interface controls to switch: http://localhost:3000/techniques/css/C30
- G140: Separating information and structure from presentation to enable different presentations: http://localhost:3000/techniques/general/G140
- PDF7: Performing OCR on a scanned PDF document to provide actual text: http://localhost:3000/techniques/pdf/PDF7
- C12: Using percent for font sizes: http://localhost:3000/techniques/css/C12
- C13: Using named font sizes: http://localhost:3000/techniques/css/C13
- C14: Using em units for font sizes: http://localhost:3000/techniques/css/C14
- C8: Using CSS letter-spacing to control spacing within a word: http://localhost:3000/techniques/css/C8
- C6: Positioning content based on structural markup: http://localhost:3000/techniques/css/C6



--------------------------------------------------

Section 26: reflow
==================================================

In Brief
	- Goal
	- Content can be enlarged without increasing line length.
	- What to do
	- Make lines of text reflow within the viewport.
	- Why it's important
	- People who need bigger text find it difficult if they must scroll to read long lines.

Success Criterion (SC): Content can be presented without loss of information or functionality, and without requiring scrolling in two dimensions for:: Vertical scrolling content at a width equivalent to 320 CSS pixels;
	- Horizontal scrolling content at a height equivalent to 256 CSS pixels.: Except for parts of the content which require two-dimensional layout for usage or meaning.: Note 1: 320 CSS pixels is equivalent to a starting viewport width of 1280 CSS pixels wide at 400% zoom. For web content which is designed to scroll horizontally (e.g., with vertical text), 256 CSS pixels is equivalent to a starting viewport height of 1024 CSS pixels at 400% zoom.: Note 2: Examples of content which requires two-dimensional layout are images required for understanding (such as maps and diagrams), video, games, presentations, data tables (not individual cells), and interfaces where it is necessary to keep toolbars in view while manipulating content. It is acceptable to provide two-dimensional scrolling for such parts of the content.

Intent: The intent of this Success Criterion is to support people with low vision who need to enlarge text and read it in a single column. When the browser zoom is used to scale content to 400%, it reflows - i.e., it is presented in one column so that scrolling in more than one direction is not necessary.: For people with low vision, both enlarging and reflowing text are critical to reading. Enlarging text enables the perception of characters. Reflowing text enables users to track from the end of one line to the beginning of the next line.: Avoiding the need to scroll in the direction of reading in order to reveal lines that are cut off by the viewport is important, because such scrolling significantly increases the effort required to read. It is also important that content is not hidden off-screen. For example, zooming into a vertically scrolling page should not cause content to be hidden to one side.: How reflow works: User agents for technologies such as HTML/CSS, PDF, and ePub have methods for reflowing content to fit the width of the window (viewport). When appropriately authored, page content can reflow (wrap) to stay within the window's boundaries (viewport) when users zoom in to enlarge the size of content. Spatial relationships of content may change when users zoom, but all information and functionality should continue to be available.: Supporting the reflow of content is also known as 'Responsive Web Design'. It is enabled by CSS media queries which reformat the web content for different viewport widths (at particular break points) in order to provide optimised layouts for mobile devices such as tablets or smartphones. Importantly, these breakpoints are not only triggered by narrower viewports, but also when users employ the browser zoom function to zoom into the page.: In a desktop browser at 100% (default) scale, typical web pages that support reflow display content in two, three or more columns. Zooming in will at some point trigger a change of layout, so content will now be displayed in fewer columns. At a higher magnification scale of 200% or more, content will usually be rendered in a single column. Parts of content that were in the marginal columns, like a navigation menu or supplementary content, will now typically appear on top of or below the main content.: Viewing distance and display resolution: The value of 320 CSS pixels was chosen as a reasonable minimum size that authors can achieve. This value lines up with the reported viewport width of small displays of common mobile devices. The width of 320 CSS pixels exactly corresponds to a desktop browser window set to a width of 1280px and zoomed in to 400%. It should be noted that 400% applies to the dimension, not the area. It means four times the default width and four times the default height.: Figure 1: A letter of the same CSS pixel size on different displays with different resolutions: When we read, the size of the print is not as important as the image it projects on the retina of our eye. Phones are designed for close viewing while desktops are designed for viewing farther away. As a consequence 16px print on a phone is physically smaller than 16px print on a desktop. This is not a problem because both print sizes cast the same image on our retina if they are viewed at their intended distance.: Visibility and availability of content: How much of the content is visible may change at different scales. For example, navigation menus that are fully visible in the desktop layout are often collapsed into fewer items, or even into a single menu button (the 'hamburger' icon pattern) so they take up less screen space.: The Success Criterion is met as long as all content and functionality are still fully available - either directly, or revealed via accessible controls, or accessible via direct links.: Content exceptions for reflow: Content which requires two-dimensional layout for usage or meaning cannot reflow without loss of meaning, and is therefore excepted from the need to be presented without two-dimensional scrolling. For example, graphics and video are by their nature two-dimensional. Cutting up an image and stacking the blocks would render the content unusable. However, it is possible to have these elements stay within the bounds of viewport even as other content zooms to 400% (see advisory techniques).: Data tables have a two-dimensional relationship between the headings and data cells. This relationship is essential to convey the content. This Success Criterion therefore exempts data tables from needing to display without scrolling in the direction of text (e.g., horizontally in a vertically scrolling page). However, cells within data tables are not excepted unless the cell contains types of content that also requires two-dimensional layout for usage or meaning.: Interfaces which provide toolbars to edit content need to show both the content and the toolbar in the viewport. Depending on the number of toolbar buttons, the toolbar may need to scroll in the direction of text.: Responsive web design and other ways to meet this Success Criterion: Using the responsive web design approach is the most effective method of achieving the goal of allowing people to zoom in to 400%. Each variation (CSS break point) of the page at the same URL should conform (compare Conformance for WCAG 2.1).: For organisations which are using legacy systems or are not able to update their layout methods for some reason, an alternative conforming version could be a mobile site which has a fixed 320px wide layout. The user should be able to find that version from the default website.: Avoiding scrolling in horizontally and vertically written languages: The success Criterion applies to both horizontally and vertically written languages. Zooming the page for horizontally written languages where pages scroll vertically by default (e.g. English) should not require horizontal scrolling. Zooming the page for vertically written languages which scroll horizontally by default should not require vertical scrolling.: The relation of Reflow to the Success Criterion 1.4.4 Resize Text: The focus of the Reflow Success Criterion is to enable users to zoom in without having to scroll in two directions. Success Criterion 1.4.4 Resize Text also applies, so it should be possible to increase the size of all text up to 200% while simultaneously meeting the reflow requirement. For most implementations, the text is expected to continue to enlarge as the magnification increases, so that users can magnify text up to (and beyond) 400%. In an implementation where text does not consistently increase its size as people zoom in (such as when it is transformed based on a media query to adapt to small-screen usage), it must still be possible to get to 200% enlargement in order to satisfy the Resize Text criterion.: For example, if at the default browser setting of 100% zoom, text is set at 20px when the window is 1280 CSS pixels wide, at 200% zoom it will visually appear at twice the size. After zooming by 400% the page reflows to fit within the 320 CSS pixel viewport, the author may decide to set the page's text size to 10px. The text is now half the original size in CSS pixels, but as it has been enlarged to 400%, it is still displayed at twice the size compared to the default browser setting at 100% zoom. It is not required to achieve 200% text enlargement while remaining inside a specific breakpoint (as zooming may result in the variation for a new breakpoint becoming active), but it should still be possible to get 200% text enlargement in some way compared to the default 100% zoom.: Browsers on mobile operating systems: Most browsers on mobile operating systems do not combine reflow and zoom in the same way as on desktop browsers. These mobile browsers normally support reflow when changing the orientation of the device -- content will be adjusted to the new viewport width. However, these mobile browsers can only magnify content to achieve 1.4.4. Resize Text in manners which do not constrain reflow to a single dimension, for example by using a pinch gesture to scale up content or a double tap on a particular column to make it fill the viewport width. This means that zoomed content in most mobile browsers involves two-dimensional scrolling regardless of what an author does.: Mobile user agents can offer reflow when users zoom into content, as evidenced by the Dolphin browser for Android. The lack of magnified reflow support in browsers on mobile operating systems can therefore be regarded as a user agent support issue.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- C32: Using media queries and grid CSS to reflow columns
	- C31: Using CSS Flexbox to reflow content
	- C33: Allowing for Reflow with Long URLs and Strings of Text
	- C38: Using CSS width, max-width and flexbox to fit labels and inputs
	- SCR34: Calculating size and position in a way that scales with text size
	- G206: Providing options within the content to switch to a layout that does not require the user to scroll horizontally to read a line of text
	- Using PDF/UA when creating PDFs (Potential future technique)
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: C34: Using media queries to un-fixing sticky headers / footers
	- C37: Using CSS max-width and height to fit images
	- CSS, Reflowing simple data tables (Potential future technique)
	- CSS, Fitting data cells within the width of the viewport (Potential future technique)
	- Mechanism to allow mobile view at any time (Potential future technique)
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F102: Failure of Success Criterion 1.4.10 due to content disappearing and not being available when content has reflowed

- C32: Using media queries and grid CSS to reflow columns: http://localhost:3000/techniques/css/C32
- C31: Using CSS Flexbox to reflow content: http://localhost:3000/techniques/css/C31
- C33: Allowing for Reflow with Long URLs and Strings of Text: http://localhost:3000/techniques/css/C33
- C38: Using CSS width, max-width and flexbox to fit labels and inputs: http://localhost:3000/techniques/css/C38
- SCR34: Calculating size and position in a way that scales with text size: http://localhost:3000/techniques/client-side-script/SCR34
- G206: Providing options within the content to switch to a layout that does not require the user to scroll horizontally to read a line of text: http://localhost:3000/techniques/general/G206
- C34: Using media queries to un-fixing sticky headers / footers: http://localhost:3000/techniques/css/C34
- C37: Using CSS max-width and height to fit images: http://localhost:3000/techniques/css/C37
- F102: Failure of Success Criterion 1.4.10 due to content disappearing and not being available when content has reflowed: http://localhost:3000/techniques/failures/F102



--------------------------------------------------

Section 27: non_text_contrast
==================================================

In Brief
	- Goal
	- Important visual information meets the same minimum contrast required for larger text.
	- What to do
	- Ensure meaningful visual cues achieve 3:1 against the background.
	- Why it's important
	- Some people cannot see elements with low contrast.

Success Criterion (SC): The visual presentation of the following have a contrast ratio of at least 3:1 against adjacent color(s):: User Interface Components
	- Visual information required to identify user interface components and states, except for inactive components or where the appearance of the component is determined by the user agent and not modified by the author;
	- Graphical Objects
	- Parts of graphics required to understand the content, except when a particular presentation of graphics is essential to the information being conveyed.

Intent: The intent of this Success Criterion is to ensure that user interface components (i.e., controls) and meaningful graphics are distinguishable by people with moderately low vision. The requirements and rationale are similar to those for large text in 1.4.3 Contrast (Minimum). Note that this requirement does not apply to inactive user interface components.: Low contrast controls are more difficult to perceive, and may be completely missed by people with a visual impairment. Similarly, if a graphic is needed to understand the content or functionality of the webpage then it should be perceivable by people with low vision or other impairments without the need for contrast-enhancing assistive technology.: Note: The 3:1 contrast ratios referenced in this Success Criterion is intended to be treated as threshold values. When comparing the computed contrast ratio to the Success Criterion ratio, the computed values should not be rounded (e.g. 2.999:1 would not meet the 3:1 threshold).: Note: Because authors do not have control over user settings for font smoothing and anti-aliasing, when evaluating this Success Criterion, refer to the colors obtained from the user agent, or the underlying markup and stylesheets, rather than the non-text elements as presented on screen.: Due to anti-aliasing, particularly thin lines and shapes of non-text elements may be rendered by user agents with a much fainter color than the actual color defined in the underlying CSS. This can lead to situations where non-text elements have a contrast ratio that nominally passes the Success Criterion, but have a much lower contrast in practice. In these cases, best practice would be for authors to avoid particularly thin lines and shapes, or to use a combination of colors that exceeds the normative requirements of this Success Criterion.: User Interface Components: Unless the control is inactive, any visual information provided that is necessary for a user to identify that a control is present and how to operate it must have a minimum 3:1 contrast ratio with the adjacent colors. Also, any visual information necessary to indicate state, such as whether a component is selected or focused must also ensure that the information used to identify the control in that state has a minimum 3:1 contrast ratio.: This Success Criterion does not require that changes in color that differentiate between states of an individual component meet the 3:1 contrast ratio when they do not appear next to each other. For example, there is not a new requirement that visited links contrast with the default color, or that mouse hover indicators contrast with the default state. However, the component must not lose contrast with the adjacent colors, and non-text indicators such as the check in a checkbox, or an arrow graphic indicating a menu is selected or open must have sufficient contrast to the adjacent colors.: Boundaries: This success criterion does not require that controls have a visual boundary indicating the hit area, but if the visual indicator of the control is the only way to identify the control, then that indicator must have sufficient contrast. If text (or an icon) within a button or placeholder text inside a text input is visible and there is no visual indication of the hit area then the Success Criterion is passed. If a button with text also has a colored border, since the border does not provide the only indication there is no contrast requirement beyond the text contrast (1.4.3 Contrast (Minimum)). Note that for people with cognitive disabilities it is recommended to delineate the boundary of controls to aid in the recognition of controls and therefore the completion of activities.: Figure 1: Pass: A button without a visual boundary, and the same button with a focus indicator that is a defined visual boundary of grey (#949494) adjacent to white.: Adjacent colors: For user interface components 'adjacent colors' means the colors adjacent to the component. For example, if an input has a white internal background, dark border, and white external background the 'adjacent color' to the component would be the white external background.: Figure 2: Pass: A standard text input with a grey border (#767676) and white adjacent color outside the component: If components use several colors, any color which does not interfere with identifying the component can be ignored for the purpose of measuring contrast ratio. For example, a 3D drop-shadow on an input, or a dark border line between contrasting backgrounds is considered to be subsumed into the color closest in brightness (perceived luminance).: The following example shows an input that has a light background on the inside and a dark background around it. The input also has a dark grey border which is considered to be subsumed into the dark background. The border does not interfere with identifying the component, so the contrast ratio is taken between the white background and dark blue background.: Figure 3: Pass: The contrast of the input background (white) and color adjacent to the control (dark blue #003366) is sufficient. There is also a border (silver) on the component that is not required to contrast with either.: For visual information required to identify a state, such as the check in a checkbox or the thumb of a slider, that part might be within the component so the adjacent color might be another part of the component.: Figure 4: Pass: A customized checkbox with light grey check (#E5E5E5), which has a contrast ratio of 5.6:1 with the purple box (#6221EA).: It is possible to use a flat design where the status indicator fills the component and does not contrast with the component, but does contrast with the colors adjacent to the component.: Figure 5: Pass: The first radio button shows the default state with a grey (#949494) circle. The second and third show the radio button selected and filled with a color that contrasts with the color adjacent to the component. The last example shows the state indicator contrasting with the component colors.: Relationship with Use of Color: The Use of Color success criterion addresses changing only the color (hue) of an object or text without otherwise altering the object's form. The principle is that contrast ratio (the difference in brightness) can be used to distinguish text or graphics. For example, G183: Using a contrast ratio of 3:1 with surrounding text and providing additional visual cues on hover for links or controls where color alone is used to identify them is a technique to use a contrast ratio of 3:1 with surrounding text to distinguish links and controls. In that case the Working Group regards a link color that meets the 3:1 contrast ratio relative to the non-linked text color as satisfying the Success Criterion 1.4.1 Use of color since it is relying on contrast ratio as well as color (hue) to convey that the text is a link.: Non-text information within controls that uses a change of hue alone to convey the value or state of an input, such as a 1-5 star indicator with a black outline for each star filled with either yellow (full) or white (empty) is likely to fail the Use of color criterion rather than this one.: Figure 6: Pass: Two examples which pass this success criterion, using either a solid fill to indicate a checked-state that has contrast, or a thicker border as well as yellow fill.: Figure 7: Fail: The first example fails the Use of color criterion due to relying on yellow and white hues. The second example fails the Non-text contrast criterion due to the yellow (#FFF000) to white contrast ratio of 1.2:1.: Using a change of contrast for focus and other states is a technique to differentiate the states. This is the basis for G195: Using an author-supplied, visible focus indicator, and more techniques are being added.: Relationship with Focus Visible: In combination with 2.4.7 Focus Visible, the visual focus indicator for a component must have sufficient contrast against the adjacent background when the component is focused, except where the appearance of the component is determined by the user agent and not modified by the author.: Most focus indicators appear outside the component - in that case it needs to contrast with the background that the component is on. Other cases include focus indicators which are:: only inside the component and need to contrast with the adjacent color(s) within the component.
	- the border of the component (inside the component and adjacent to the outside) and need to contrast with both adjacent colours.
	- partly inside and partly outside, where either part of the focus indicator can contrast with the adjacent colors.
	- Figure 8: Pass: The internal yellow indicator (#FFFF00) contrasts with the blue button background (#4189B9).: Figure 9: Fail: The external yellow indicator (#FFFF00) does not contrast with the white background (#FFF) which the component is on.: Figure 10: Pass: The external green indicator (#008000) does contrast with the white background (#FFF) which the component is on. It does not need to contrast with both the component background and the component, as visually the effect is that the button is noticeably larger, and it's not necessary for a user to be able to discern this extra border in isolation. Although this passes non-text contrast, it is not a good indicator unless it is very thick. New in WCAG 2.2: There is a AAA criterion in WCAG 2.2 that addresses this aspect, Focus Appearance.: If an indicator is partly inside and partly outside the component, either part of the indicator could provide contrast.: Figure 11: Pass: The focus indicator is partially inside, partially outside the button. The internal part of the yellow indicator (#FFFF00) contrasts with the blue button background (#4189B9).: If the focus indicator changes the border of the component within the visible boundary it must contrast with the component. Typically an outline goes around (outside) the visible boundary of the component, in this case changing the border is just inside the visible edge of the component.: Figure 12: Fail: The border of the control changes from blue (#4189B9) to green (#4B933A). This is within the component and does not contrast with the inside background of the component.: Figure 13: Fail: An inner border of dark green (#008000) does contrast with the black border, but does not contrast with the blue component background.: Figure 14: Pass: An inner border of white contrasts with the black border and the blue component background.: Note that this Success Criterion does not directly compare the focused and unfocused states of a control - if the focus state relies on a change of color (e.g., changing only the background color of a button), this Success Criterion does not define any requirement for the difference in contrast between the two states.: Figure 15: Not in scope: The change of background within the component is not in scope of non-text contrast. However, this would not pass Use of color.: Hover states: The language of Non-text Contrast specifically calls out "visual information required to identify...states." When users talk about a hover state, they are normally referring to a visual effect that takes place when the pointer is positioned over a control. However, there are a number of HTML components (such as buttons, checkboxes, radio buttons, and selects) which do not by default display any additional visual effects when the user moves a pointer control over them. The pointer itself, via its location, is the indicator of whether the user is hovering on a component. Therefore, additional author-supplied visual treatments for hover are not "required to identify" the hover state. Those treatments can be considered supplemental and do not themselves need to contrast 3:1 against the background.: This is not to say that other hover effects are discouraged. For instance, some native components alter the shape of the pointer when it is hovering over a control; the pointer becomes an I-beam when it hovers over text inputs and text areas. There will be cases where some users may benefit from additional visual hover effects, such as bolding text or use of drop shadows. However, other users may find strong hover effects distracting. The key consideration for any hover effect is that it does not cause a component itself to lose sufficient contrast against adjacent colors, or cause the visual indicators for other states, such as focus or selection, to lose sufficient contrast.: User Interface Component Examples: For designing focus indicators, selection indicators and user interface components that need to be perceived clearly, the following are examples that have sufficient contrast.: Passing User Interface Component Examples
	- Type	Description	Examples
	- Link text	The browser's default link text color is covered by 1.4.3 Contrast (Minimum). Since the underline is the same color as the text, which must meet at least 3:1 to pass, the default underline will always pass the requirements of Non-text Contrast.	
	- Default focus style	Links are required to have a visible focus indicator by 2.4.7 Focus Visible. Where the focus style of the user-agent is not adjusted on interactive controls (such as links, form fields or buttons) by the website (author), the default focus style is exempt from contrast requirements (but must still be visible).	
	- Buttons	A button which has a distinguishing indicator such as position, text style, or context does not need a contrasting visual indicator to show that it is a button, although some users are likely to identify a button with an outline that meets contrast requirements more easily.	
	- Text input (minimal)	Where a text-input has a visual indicator to show it is an input, such as a bottom border (#767676), that indicator must meet 3:1 contrast ratio.	
	- Text input	Where a text-input has an indicator such as a complete border (#767676), that indicator must meet 3:1 contrast ratio.	
	- Text input focus style	A focus indicator is required. While in this case the additional gray (#CCC) outline has an insufficient contrast of 1.6:1 against the white (#FFF) background, the cursor/caret which is displayed when the input receives focus does provide a sufficiently strong visual indication.	
	- Text input using background color	Text inputs that have no border and are differentiated only by a background color must have a 3:1 contrast ratio to the adjacent background (#043464).	
	- Toggle button	The toggle button's internal background (#070CD5) has a good contrast with the external white background. Also, the round toggle within (#7AC2FF) contrasts with the internal background.	
	- Dropdown indicator	The down-arrow is required to understand that there is drop-down functionality, it has a contrast of 4.7:1 for the white icon on dark gray (#6E747B).	
	- Dropdown indicator	The down-arrow is required to understand that there is drop-down functionality, it has a contrast of 21:1 for the black icon on white.	
	- Checkbox - empty	A black border on a white background indicates the checkbox.	
	- Checkbox - checked	A black border on a white background indicates the checkbox, the black tick shape indicates the state of checked.	
	- Checkbox - Subtle hover style	A checkbox is visually identified by its black border against a white background, but when the mouse pointer hovers on the checkbox, a subtle grey background is added (#DEDEDE). The black border has a 15:1 contrast ratio with the grey background, so the checkbox continues to have good contrast. Note that the grey hover effect does not itself need to contrast 3:1 with the page background, since the pointer position is the primary indicator of the hover state.	: The following are examples that have insufficient contrast.: Failing User Interface Component Examples
	- Type	Description	Examples
	- Colored underline is the only indicator of a link	Link and non-link text are both white on an almost-black (#0D0F13) background. The link's custom underline (#B1262B) is the only way to identify the link. The red underline contrasts less than 3:1 with the background color.	
	- Checkbox - border color	The grey border color of the checkbox (#9D9D9D) has a contrast ratio of 2.7:1 with the white background, which is not sufficient for the visual information required to identify the checkbox.	
	- Checkbox - subtle focus style	A focus indicator is required. If the focus indicator is styled by the author, it must meet the 3:1 contrast ratio with adjacent colors. In this case, the gray (#AAA) indicator has an insufficient ratio of 2.3:1 with the white (#FFF) adjacent background.	
	- Inactive User Interface Components: User Interface Components that are not available for user interaction (e.g., a disabled control in HTML) are not required to meet contrast requirements. An inactive user interface component is visible but not currently operable. An example would be a submit button at the bottom of a form that is visible but cannot be activated until all the required fields in the form are completed.: Figure 16: An inactive button using default browser styles: Inactive components, such as disabled controls in HTML, are not available for user interaction. The decision to exempt inactive controls from the contrast requirements was based on a number of considerations. Although it would be beneficial to some people to discern inactive controls, a one-size-fits-all solution has been very difficult to establish. A method of varying the presentation of disabled controls, such as adding an icon for disabled controls, based on user preferences is anticipated as an advancement in the future.: Graphical Objects: The term "graphical object" applies to stand-alone icons such as a print icon (with no text), and the important parts of a more complex diagram such as each line in a graph. For simple graphics such as single-color icons the entire image is a graphical object. Images made up of multiple lines, colors and shapes will be made of multiple graphical objects, some of which are required for understanding.: Not every graphical object needs to contrast with its surroundings - only those that are required for a user to understand what the graphic is conveying. Gestalt principles such as the "law of continuity" can be used to ignore minor overlaps with other graphical objects or colors.: Image	Notes
	- 	: The phone icon is a simple shape within the orange (#E3660E) circle. The meaning can be understood from that icon alone, the background behind the circle is irrelevant. The orange background and the white icon have a contrast ratio greater than 3:1, which passes.: The graphical object is the white phone icon.: 
	- 	: A magnet can be understood by the "U" shape with lighter colored tips. Therefore to understand this graphic you should be able to discern the overall shape (against the background) and the lighter colored tips (against the rest of the U shape and the background).: The graphical objects are the "U" shape (by outline or by the solid red color #D0021B), and each tip of the magnet.: 
	- 	: The symbol to show a currency (the £) going down can be understood with recognition of the shape (down arrow) and the currency symbol (pound icon with the shape which is part of the graphic). To understand this graphic you need to discern the arrow shape against the white background, and the pound icon against the yellow background (#F5A623).: The graphical objects are the shape and the currency symbol.: 
	- 	: In order to understand the graph you need to discern the lines and shapes for each condition. To perceive the values of each line along the chart you need to discern the grey lines marking the graduated 100 value increments.: The graphical objects are the lines in the graph, including the background lines for the values, and the colored lines with shapes.: The lines should have 3:1 contrast against their background, but as there is little overlap with other lines they do not need to contrast with each other or the graduated lines. (See the testing principles below.): 
	- 	: To understand the pie chart you have to discern each slice of the pie chart from the others.: The graphical objects are the slices of the pie (chart).: Note: If the values of the pie chart slices were also presented in a conforming manner (see the Pie Charts example for details), the slices would not be required for understanding.: Taking the magnet image above as an example, the process for establishing the graphical object(s) is to:: Assess what part of each image is needed to understand what it represents.
	- The magnet's "U" shape can be conveyed by the outline or by the red background (either is acceptable). The white tips are also important (otherwise it would be a horseshoe), which needs to contrast with the red background.
	- Assume that the user could only see those aspects. Do they contrast with the adjacent colors?
	- The outline of the magnet contrasts with the surrounding text (black/white), and the red and white between the tips also has sufficient contrast.: Due to the strong contrast of the red and white, it would also be possible to only put the outline around the white tips of the magnet and it would still conform.: Required for Understanding: The term "required for understanding" is used in the Success Criterion as many graphics do not need to meet the contrast requirements. If a person needs to perceive a graphic, or part of a graphic (a graphical object) in order to understand the content it should have sufficient contrast. However, that is not a requirement when:: A graphic with text embedded or overlayed conveys the same information, such as labels and values on a chart.: Note: Text within a graphic must meet 1.4.3 Contrast (Minimum).: The graphic is for aesthetic purposes that does not require the user to see or understand it to understand the content or use the functionality.
	- The information is available in another form, such as in a table that follows the graph, which becomes visible when a "Long Description" button is pressed.
	- The graphic is part of a logo or brand name (which is considered "essential" to its presentation).
	- Gradients: Gradients can reduce the apparent contrast between areas, and make it more difficult to test. The general principles is to identify the graphical object(s) required for understanding, and take the central color of that area. If you remove the adjacent color which does not have sufficient contrast, can you still identify and understand the graphical object?: Figure 17: Removing the background which does not have sufficient contrast highlights that the graphical object (the "i") is not then understandable.: Dynamic Examples: Some graphics may have interactions that either vary the contrast, or display the information as text when you mouseover/tap/focus each graphical object. In order for someone to discern the graphics exist at all, the unfocused default version must already have sufficiently contrasting colors or text. For the area that receives focus, information can then be made available dynamically as pop-up text, or be foregrounded dynamically by increasing the contrast.: Figure 18: A dynamic chart where the current 'slice' is hovered or focused, which activates the associated text display of the values and highlights the series: Infographics: Infographics can mean any graphic conveying data, such as a chart or diagram. On the web it is often used to indicate a large graphic with lots of statements, pictures, charts or other ways of conveying data. In the context of graphics contrast, each item within such an infographic should be treated as a set of graphical objects, regardless of whether it is in one file or separate files.: Infographics often fail to meet several WCAG level AA criteria including:: 1.1.1 Non-text Content
	- 1.4.1 Use of Color
	- 1.4.3 Contrast (Minimum)
	- 1.4.5 Images of Text: An infographic can use text which meets the other criteria to minimise the number of graphical objects required for understanding. For example, using text with sufficient contrast to provide the values in a chart. A long description would also be sufficient because then the infographic is not relied upon for understanding.: Symbolic text characters: When text characters are used as symbols – used for their visual appearance, rather than expressing something in human language – they fall under the definition of non-text content.: Figure 19: Even though the two buttons use text characters — an uppercase X, often used for "Close" buttons, and a > character, to act as a right-pointing arrow — they count as non-text characters/symbols. Their contrast ratio of just above 3:1 passes this Success Criterion.: Essential Exception: Graphical objects do not have to meet the contrast requirements when "a particular presentation of graphics is essential to the information being conveyed". The Essential exception is intended to apply when there is no way of presenting the graphic with sufficient contrast without undermining the meaning. For example:: Logotypes and flags: The brand logo of an organization or product is the representation of that organization and therefore exempt. Flags may not be identifiable if the colors are changed to have sufficient contrast.
	- Sensory: There is no requirement to change pictures of real life scenes such as photos of people or scenery.
	- Representing other things: If you cannot represent the graphic in any other way, it is essential. Examples include:
	- Screenshots to demonstrate how a website appeared.
	- Diagrams of medical information that use the colors found in biology (example medical schematic from Wikipedia).
	- color gradients that represent a measurement, such as heat maps (example heatmap from Wikipedia).
	- Testing Principles: A summary of the high-level process for finding and assessing non-text content on a web page:: Identify each user-interface component (link, button, form control) on the page and:
	- Identify the visual (non-text) indicators of the component that are required to identify that a control exists, and indicate the current state. In the default (on page load) state, test the contrast ratio against the adjacent colors.
	- Test those contrast indicators in each state.
	- Identify each graphic on the page that includes information required for understanding the content (i.e., excluding graphics which have visible text for the same information, or are decorative) and:
	- Check the contrast of the graphical object against its adjacent colors;
	- If there are multiple colors and/or a gradient, choose the least contrasting area to test;
	- If it passes, move to the next graphical object;
	- If the least-contrasting area is less than 3:1, assume that area is invisible, is the graphical object still understandable?
	- If there is enough of the graphical object to understand, it passes, else fail.: The techniques below each have testing criteria, and the related criteria for Focus visible (2.4.7), Use of color (1.4.1), and Contrast minimum also have techniques.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: Select the situation below that matches your content. Each situation includes techniques or combinations of techniques that are known and documented to be sufficient for that situation.: Situation A: Color is used to identify user interface components or used to identify user interface component states
	- G195: Using an author-supplied, visible focus indicator
	- G174: Providing a control with a sufficient contrast ratio that allows users to switch to a presentation that uses sufficient contrast
	- Situation B: Color is required to understand graphical content
	- G207: Ensuring that a contrast ratio of 3:1 is provided for icons
	- G209: Provide sufficient contrast at the boundaries between adjoining colors
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F78: Failure of Success Criterion 1.4.11, 2.4.7 and 2.4.13 due to styling element outlines and borders in a way that removes or renders non-visible the visual focus indicator

- G195: Using an author-supplied, visible focus indicator: http://localhost:3000/techniques/general/G195
- G174: Providing a control with a sufficient contrast ratio that allows users to switch to a presentation that uses sufficient contrast: http://localhost:3000/techniques/general/G174
- G207: Ensuring that a contrast ratio of 3:1 is provided for icons: http://localhost:3000/techniques/general/G207
- G209: Provide sufficient contrast at the boundaries between adjoining colors: http://localhost:3000/techniques/general/G209
- F78: Failure of Success Criterion 1.4.11, 2.4.7 and 2.4.13 due to styling element outlines and borders in a way that removes or renders non-visible the visual focus indicator: http://localhost:3000/techniques/failures/F78



--------------------------------------------------

Section 28: text_spacing
==================================================

In Brief
	- Goal
	- Users can adjust text spacing to make it easier to read.
	- Author task
	- Ensure content adapts to user-defined text settings.
	- Why it's important
	- Some people need text with different spacing or font characteristics.

Success Criterion (SC): In content implemented using markup languages that support the following text style properties, no loss of content or functionality occurs by setting all of the following and by changing no other style property:: Line height (line spacing) to at least 1.5 times the font size;
	- Spacing following paragraphs to at least 2 times the font size;
	- Letter spacing (tracking) to at least 0.12 times the font size;
	- Word spacing to at least 0.16 times the font size.: Exception: Human languages and scripts that do not make use of one or more of these text style properties in written text can conform using only the properties that exist for that combination of language and script.: Note 1: Content is not required to use these text spacing values. The requirement is to ensure that when a user overrides the authored text spacing, content or functionality is not lost.: Note 2: Writing systems for some languages use different text spacing settings, such as paragraph start indent. Authors are encouraged to follow locally available guidance for improving readability and legibility of text in their writing system.

Intent: The intent of this Success Criterion (SC) is to ensure that when people override author-specified text spacing to improve their reading experience, content is still readable and operable. Each of the requirements stipulated in the SC's four bullets helps ensure text styling can be adapted by the user to suit their needs.: The metrics set a target for a minimum for text spacing that must be met. Starting from the author's presentation, changing these four style properties to the specified values should not result in a loss of content or functionality.: This SC focuses on the adaptability of content to a change in spacing between lines, words, letters, and paragraphs. Any combination of these may assist a user with effectively reading text. As well, ensuring that content correctly adapts when users override author settings for spacing also significantly increases the likelihood other style preferences can be set by the user. For example, a user may need to change to a wider font family than the author has set in order to effectively read text.: Author Responsibility: This SC does not dictate that authors must set all their content to the specified metrics, or provide a mechanism to do so. Rather, it specifies that an author's content has the ability to be set to those metrics without loss of content or functionality. The author requirement is both to not interfere with a user's ability to override the author settings, and to ensure that content thus modified does not break content in the manners shown in figures 1 through 3 in Effects of Not Allowing for Spacing Override. The values in the SC are a baseline. Authors are encouraged to allow spacing to surpass the values specified, not see them as a ceiling.: It is beneficial for users if authors use any locally available guidance for improving readability in the local language or writing system. Conversely, in some human languages and scripts, some of the metrics specified by the SC are inapplicable. For example, languages such as Japanese do not use spacing following paragraphs, meaning that users are unlikely to make any paragraph spacing changes in practice. The exception in this SC allows authors to ignore text style properties which are inapplicable to the combination of language and script being used.: User Responsibility: The user may choose to exceed the spacing adjustments in the SC. The ability to read and derive meaning from the overridden spacing rests with the user. If large changes in spacing reduce readability, or cause loss of content or functionality, the user can adjust or return to spacing within the bounds of the SC. How such changes are achieved is up to the user, who may choose a user stylesheet, bookmarklet, extension, or application. Regardless, the user needs the flexibility to adjust spacing – and within the bounds set in the SC, without loss of content or functionality.: Further, this SC does not require that content implement its own mechanisms to allow users to do this. It is not a failure of the content if a user agent or platform does not provide a way for users to do this. Content does not fail this SC if the method chosen by the user - for instance, the use of an extension or bookmarklet - fails to correctly set the line height and spacing text properties on the content (provided that the content is not actively and purposely preventing the properties from being added).: Applicability: If the markup-based technologies being used are capable of overriding text to the Success Criterion's metrics, then this SC is applicable. For instance Cascading Style Sheet/HTML technologies are quite able to allow for the specified spacing metrics. Plugin technologies would need to have a built-in ability to modify styles to the specified metrics. Currently, this SC does not apply to PDF, as the portable document format is not implemented using markup.: Examples of text typically not affected by style properties and not expected to adapt are:: Video captions embedded directly into the video frames and not provided as an associated caption file
	- Images of text: For this SC, canvas implementations of text are considered to be images of text.: Use of ellipses: There may be regions of a page where text containers cannot expand due to design constraints (such as a maximum width for the left navigation or table column headers). A common convention if text exceeds its space is to replace truncated text with an ellipsis. Where ellipses appear as a result of modifying text style properties, the page can still meet the Text Spacing requirements, so long as the content is still available. For example:: a mechanism is provided to reveal the truncated text on the page (for instance, the text appears on focus or on activation)
	- where the ellipsis is part of a section of content which includes a link, the truncated text is revealed on the linked page: Where text is not truncated but it is when text is spaced, if there is no mechanism to show the truncated text, it fails this Success Criterion.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- C36: Allowing for text spacing override
	- C35: Allowing for text spacing without wrapping
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: C8: Using CSS letter-spacing to control spacing within a word
	- C21: Specifying line spacing in CSS
	- C28: Specifying the size of text containers using em units
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F104: Failure of Success Criterion 1.4.12 due to clipped or overlapped content when text spacing is adjusted

- C36: Allowing for text spacing override: http://localhost:3000/techniques/css/C36
- C35: Allowing for text spacing without wrapping: http://localhost:3000/techniques/css/C35
- C8: Using CSS letter-spacing to control spacing within a word: http://localhost:3000/techniques/css/C8
- C21: Specifying line spacing in CSS: http://localhost:3000/techniques/css/C21
- C28: Specifying the size of text containers using em units: http://localhost:3000/techniques/css/C28
- F104: Failure of Success Criterion 1.4.12 due to clipped or overlapped content when text spacing is adjusted: http://localhost:3000/techniques/failures/F104



--------------------------------------------------

Section 29: content_on_hover_or_focus
==================================================

In Brief
	- Goal
	- More users can perceive and dismiss non-persistent content.
	- What to do
	- If hover or focus causes content changes, ensure interaction is predictable.
	- Why it's important
	- Unpredictable temporary content can be hard for some to consume and may disrupt others.

Success Criterion (SC): Where receiving and then removing pointer hover or keyboard focus triggers additional content to become visible and then hidden, the following are true:: Dismissible
	- A mechanism is available to dismiss the additional content without moving pointer hover or keyboard focus, unless the additional content communicates an input error or does not obscure or replace other content;
	- Hoverable
	- If pointer hover can trigger the additional content, then the pointer can be moved over the additional content without the additional content disappearing;
	- Persistent
	- The additional content remains visible until the hover or focus trigger is removed, the user dismisses it, or its information is no longer valid.: Exception: The visual presentation of the additional content is controlled by the user agent and is not modified by the author.: Note 1: Examples of additional content controlled by the user agent include browser tooltips created through use of the HTML title attribute [HTML].: Note 2: Custom tooltips, sub-menus, and other nonmodal popups that display on hover and focus are examples of additional content covered by this criterion.: Note 3: This criterion applies to content that appears in addition to the triggering component itself. Since hidden components that are made visible on keyboard focus (such as links used to skip to another part of a page) do not present additional content they are not covered by this criterion.

Intent: Additional content that appears and disappears in coordination with keyboard focus or pointer hover often leads to accessibility issues. Reasons for such issues include:: the user may not have intended to trigger the interaction
	- the user may not know new content has appeared
	- the new content may intefere with a user's ability to do a task: Examples of such interactions can include custom tooltips, sub-menus and other nonmodal popups which display on hover and focus. The intent of this success criterion is to ensure that authors who cause additional content to appear and disappear in this manner must design the interaction in such a way that users can:: perceive the additional content AND
	- dismiss it without disrupting their page experience.: There are usually more predictable and accessible means of adding content to the page, which authors are recommended to employ. If an author does choose to make additional content appear and disappear in coordination with hover and keyboard focus, this success criterion specifies three conditions that must be met:: dismissable
	- hoverable
	- persistent: Each of these is discussed in a separate section.: Dismissable: The intent of this condition is to ensure that the additional content does not interfere with viewing or operating the page's original content. When magnified, the portion of the page visible in the viewport can be significantly reduced. Mouse users frequently move the pointer to pan the magnified viewport and display another portion of the screen. However, almost the entire portion of the page visible in this restricted viewport may trigger the additional content, making it difficult for a user to pan without re-triggering the content. A keyboard means of dismissing the additional content provides a workaround.: Alternatively, low vision users who can only navigate via the keyboard do not want the small area of their magnified viewport cluttered with hover text. They need a keyboard method of dismissing something that is obscuring the current focal area.: Two methods may be used to satisfy this condition and prevent such interference:: Position the additional content so that it does not obscure any other content including the trigger, with the exception of white space and purely decorative content, such as a background graphic which provides no information.
	- Provide a mechanism to easily dismiss the additional content, such as by pressing Escape.: For most triggers of relatively small size, it is desirable for both methods to be implemented. If the trigger is large, noticing the additional content may be of concern if it appears away from the trigger. In those cases, only the second method may be appropriate.: The success criterion allows for input error messages to persist as there are cases that require attention, explicit confirmation or remedial action.: Hoverable: The intent of this condition is to ensure that additional content which may appear on hover of a target may also be hovered itself. Content which appears on hover can be difficult or impossible to perceive if a user is required to keep their mouse pointer over the trigger. When the added content is large, magnified views may mean that the user needs to scroll or pan to completely view it, which is impossible unless the user is able to move their pointer off the trigger without the additional content disappearing.: Another common situation is when large pointers have been selected via platform settings or assistive technology. Here, the pointer can obscure a significant area of the additional content. A technique to view the content fully in both situations is to move the mouse pointer directly from the trigger onto the new content. This capability also offers significant advantages for users who utilize screen reader feedback on mouse interactions. This condition generally implies that the additional content overlaps or is positioned adjacent to the target.: Persistent: The intent of this condition is to ensure users have adequate time to perceive the additional content after it becomes visible. Users with disabilities may require more time for many reasons, such as to change magnification, move the pointer, or simply to bring the new content into their visual field. Once it appears, the content should remain visible until:: The user removes hover or focus from the trigger and the additional content, consistent with the typical user experience;
	- The user dismisses the additional content via the mechanism provided to satisfy the Dismissable condition; or
	- The information conveyed by the additional content becomes invalid, such as a 'busy' message that is no longer valid.
	- Additional Notes
	- This criterion does not attempt to solve such issues when the appearance of the additional content is completely controlled by the user agent. A prominent example is the common behavior of browsers to display the title  attribute in HTML as a small tooltip.
	- Modal dialogs are out of scope for this criterion because they must take keyboard focus and thus should not appear on hover or focus. Refer to Success Criterion 3.2.1, On Focus.
	- Content which can be triggered via pointer hover should also be able to be triggered by keyboard focus. Refer to Success Criterion 2.1.1, Keyboard.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- SCR39: Making content on focus or hover hoverable, dismissible, and persistent
	- ARIA: Using role="tooltip" (Potential future technique)
	- CSS: Using hover and focus pseudo classes (Potential future technique)
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F95: Failure of Success Criterion 1.4.13 due to content shown on hover not being hoverable
	- Failure to make content dismissable without moving pointer hover or keyboard focus (Potential future technique)
	- Failure to meet by content on hover or focus not remaining visible until dismissed or invalid (Potential future technique)

- SCR39: Making content on focus or hover hoverable, dismissible, and persistent: http://localhost:3000/techniques/client-side-script/SCR39
- F95: Failure of Success Criterion 1.4.13 due to content shown on hover not being hoverable: http://localhost:3000/techniques/failures/F95



--------------------------------------------------

Section 30: keyboard
==================================================

In Brief
	- Goal
	- Everything can be done with a keyboard except freehand movements.
	- What to do
	- Ensure pointer actions have a keyboard equivalent.
	- Why it's important
	- Many people rely on the keyboard interface, including blind and some mobility impaired people.

Success Criterion (SC): All functionality of the content is operable through a keyboard interface without requiring specific timings for individual keystrokes, except where the underlying function requires input that depends on the path of the user's movement and not just the endpoints.: Note 1: This exception relates to the underlying function, not the input technique. For example, if using handwriting to enter text, the input technique (handwriting) requires path-dependent input but the underlying function (text input) does not.: Note 2: This does not forbid and should not discourage providing mouse input or other input methods in addition to keyboard operation.

Intent: The intent of this Success Criterion is to ensure that, wherever possible, content can be operated through a keyboard or keyboard interface (so an alternate keyboard can be used). When content can be operated through a keyboard or alternate keyboard, it is operable by people with no vision (who cannot use devices such as mice that require eye-hand coordination) as well as by people who must use alternate keyboards or input devices that act as keyboard emulators. Keyboard emulators include speech input software, sip-and-puff software, on-screen keyboards, scanning software and a variety of assistive technologies and alternate keyboards. Individuals with low vision also may have trouble tracking a pointer and find the use of software much easier (or only possible) if they can control it from the keyboard.: Examples of "specific timings for individual keystrokes" include situations where a user would be required to repeat or execute multiple keystrokes within a short period of time or where a key must be held down for an extended period before the keystroke is registered.: The phrase "except where the underlying function requires input that depends on the path of the user's movement and not just the endpoints" is included to separate those things that cannot reasonably be controlled from a keyboard.: Most actions carried out by a pointing device can also be done from the keyboard (for example, clicking, selecting, moving, sizing). However, there is a small class of input that is done with a pointing device that cannot be done from the keyboard in any known fashion without requiring an inordinate number of keystrokes. Free hand drawing, or watercolor painting require path dependent input. Drawing straight lines, regular geometric shapes, re-sizing windows and dragging objects to a location (when the path to that location is not relevant) do not require path dependent input.: The use of MouseKeys would not satisfy this Success Criterion because it is not a keyboard equivalent to the application; it is a mouse equivalent (i.e., it looks like a mouse to the application).: It is assumed that the design of user input features takes into account that operating system keyboard accessibility features may be in use. For example, modifier key locking may be turned on. Content continues to function in such an environment, not sending events that would collide with the modifier key lock to produce unexpected results.: Note: Platforms and user agents usually have conventions for how web content or applications are controlled with a keyboard interface. If content does not follow the platform/user agent conventions it may be difficult to use, as users will need to learn different interaction methods. As a best practice, content should follow the platform/user agent conventions. However, deviating from these conventions does not fail the normative requirement of this Success Criterion.: For instance, buttons that have focus can generally be activated using both the Enter key and the Space bar. If a custom button control in a web application instead only reacts to Enter (or even a completely custom key or key combination), this still satisfies the requirements of this Success Criterion.: Note: This Success Criterion does not require that every visible control that can be activated using a mouse or touch screen must also be focusable and actionable using the keyboard. The normative requirement is only that there must be a way for keyboard interface users to perform the same, or comparable, actions and to operate the content. Generally, the easiest way to achieve this is to provide controls that can be operated with all possible input devices; however, if a web application implements a separate mode of operation for keyboard interface users, it will not fail the Success Criterion.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G202: Ensuring keyboard control for all functionality: Ensuring keyboard control by using one of the following techniques.: H91: Using HTML form controls and links
	- PDF3: Ensuring correct tab and reading order in PDF documents
	- PDF11: Providing links and link text using the Link annotation and the /Link structure element in PDF documents
	- PDF23: Providing interactive form controls in PDF documents: G90: Providing keyboard-triggered event handlers using one of the following techniques:: SCR20: Using both keyboard and other device-specific functions
	- SCR35: Making actions keyboard accessible by using the onclick event of anchors and buttons
	- SCR2: Using redundant keyboard and mouse event handlers
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: Using WAi-ARIA role, state, and value attributes if repurposing static elements as interactive user interface components (future link) AND SCR29: Adding keyboard-accessible actions to static HTML elements
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F54: Failure of Success Criterion 2.1.1 due to using only pointing-device-specific event handlers (including gesture) for a function
	- F55: Failure of Success Criteria 2.1.1, 2.4.7, 2.4.13, and 3.2.1 due to using script to remove focus when focus is received
	- F42: Failure of Success Criteria 1.3.1, 2.1.1, 2.1.3, or 4.1.2 when emulating links

- G202: Ensuring keyboard control for all functionality: http://localhost:3000/techniques/general/G202
- H91: Using HTML form controls and links: http://localhost:3000/techniques/html/H91
- PDF3: Ensuring correct tab and reading order in PDF documents: http://localhost:3000/techniques/pdf/PDF3
- PDF11: Providing links and link text using the Link annotation and the /Link structure element in PDF documents: http://localhost:3000/techniques/pdf/PDF11
- PDF23: Providing interactive form controls in PDF documents: http://localhost:3000/techniques/pdf/PDF23
- G90: Providing keyboard-triggered event handlers: http://localhost:3000/techniques/general/G90
- SCR20: Using both keyboard and other device-specific functions: http://localhost:3000/techniques/client-side-script/SCR20
- SCR35: Making actions keyboard accessible by using the onclick event of anchors and buttons: http://localhost:3000/techniques/client-side-script/SCR35
- SCR2: Using redundant keyboard and mouse event handlers: http://localhost:3000/techniques/client-side-script/SCR2
- SCR29: Adding keyboard-accessible actions to static HTML elements: http://localhost:3000/techniques/client-side-script/SCR29
- F54: Failure of Success Criterion 2.1.1 due to using only pointing-device-specific event handlers (including gesture) for a function: http://localhost:3000/techniques/failures/F54
- F55: Failure of Success Criteria 2.1.1, 2.4.7, 2.4.13, and 3.2.1 due to using script to remove focus when focus is received: http://localhost:3000/techniques/failures/F55
- F42: Failure of Success Criteria 1.3.1, 2.1.1, 2.1.3, or 4.1.2 when emulating links: http://localhost:3000/techniques/failures/F42



--------------------------------------------------

Section 31: no_keyboard_trap
==================================================

In Brief
	- Goal
	- Keyboard users don't get stuck.
	- What to do
	- Ensure users always know how to navigate away from components.
	- Why it's important
	- People who rely on the keyboard often have no other means to navigate.

Success Criterion (SC): If keyboard focus can be moved to a component of the page using a keyboard interface, then focus can be moved away from that component using only a keyboard interface, and, if it requires more than unmodified arrow or tab keys or other standard exit methods, the user is advised of the method for moving focus away.: Note: Since any content that does not meet this success criterion can interfere with a user's ability to use the whole page, all content on the web page (whether it is used to meet other success criteria or not) must meet this success criterion. See Conformance Requirement 5: Non-Interference.

Intent: The intent of this Success Criterion is to ensure that that content does not "trap" keyboard focus within subsections of content on a Web page. This is a common problem when multiple formats are combined within a page and rendered using plug-ins or embedded applications.: There may be times when the functionality of the Web page restricts the focus to a subsection of the content, as long as the user knows how to leave that state and "untrap" the focus.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G21: Ensuring that users are not trapped in content
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F10: Failure of Success Criterion 2.1.2 and Conformance Requirement 5 due to combining multiple content formats in a way that traps users inside one format type

- G21: Ensuring that users are not trapped in content: http://localhost:3000/techniques/general/G21
- F10: Failure of Success Criterion 2.1.2 and Conformance Requirement 5 due to combining multiple content formats in a way that traps users inside one format type: http://localhost:3000/techniques/failures/F10



--------------------------------------------------

Section 32: keyboard_no_exception
==================================================

In Brief
	- Goal
	- Everything can be done with a keyboard.
	- What to do
	- Ensure all pointer actions have a keyboard equivalent.
	- Why it's important
	- People who can only use the keyboard interface need to be able to accomplish everything.

Success Criterion (SC): All functionality of the content is operable through a keyboard interface without requiring specific timings for individual keystrokes.

Intent: The intent of this Success Criterion is to ensure that all content is operable from the keyboard. This is the same as Success Criterion 2.1.1, except that no exceptions are allowed. This does not mean that content where the underlying function requires input that depends on the path of the user's movement and not just the endpoints (excluded from the requirements of 2.1.1) must be made keyboard accessible. Rather, it means that content that uses path-dependent input cannot conform to this Success Criterion and therefore cannot meet Guideline 2.1 at Level AAA.: Note: Platforms and user agents usually have conventions for how web content or applications are controlled with a keyboard interface. If content does not follow the platform/user agent conventions it may be difficult to use, as users will need to learn different interaction methods. As a best practice, content should follow the platform/user agent conventions. However, deviating from these conventions does not fail the normative requirement of this Success Criterion.: For instance, buttons that have focus can generally be activated using both the Enter key and the Space bar. If a custom button control in a web application instead only reacts to Enter (or even a completely custom key or key combination), this still satisfies the requirements of this Success Criterion.: Note: This Success Criterion does not require that every visible control that can be activated using a pointer (such as a mouse or touch screen input) must also be focusable and actionable using the keyboard. The normative requirement is only that there must be a way for keyboard interface users to perform the same, or comparable, actions and to operate the content. Generally, the easiest way to achieve this is to provide controls that can be operated with all possible input devices; however, if a web application implements a separate mode of operation for keyboard interface users, it will not fail the Success Criterion.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: No additional techniques exist for this Success Criterion. Follow techniques for Success Criterion 2.1.1. If that is not possible because there is a requirement for path-dependent input, then it is not possible to meet this Level AAA Success Criterion.




--------------------------------------------------

Section 33: character_key_shortcuts
==================================================

In Brief
	- Goal
	- Reduce accidental activation of keyboard shortcuts.
	- What to do
	- Ensure character-only shortcut keys can be turned off or modified.
	- Why it's important
	- Character-key shortcuts are easy to accidentally trigger, especially with speech input.

Success Criterion (SC): If a keyboard shortcut is implemented in content using only letter (including upper- and lower-case letters), punctuation, number, or symbol characters, then at least one of the following is true:: Turn off
	- A mechanism is available to turn the shortcut off;
	- Remap
	- A mechanism is available to remap the shortcut to include one or more non-printable keyboard keys (e.g., Ctrl, Alt);
	- Active only on focus
	- The keyboard shortcut for a user interface component is only active when that component has focus.

Intent: The intent of this Success Criterion is to reduce accidental activation of keyboard shortcuts. Character key shortcuts work well for many keyboard users. However, they can be inappropriate and frustrating for speech input users, whose dictation is interpreted as strings of letters, and for keyboard users who are prone to accidentally hit keys. To rectify this issue, authors need to allow users to turn off or reconfigure shortcuts that are made up of only character keys.: Note: Even though this Success Criterion refers to character keys, note that it's not relevant whether a shortcut can be activated using a single physical key on a keyboard, or if it requires a combination of keys to be pressed. For instance, on most full-size US and UK keyboard, the ? (question mark) symbol is accessed using Shift+/ (forward slash key next to the right-hand Shift key). On a UK keyboard, in Windows, the é (lowercase "e" with an acute accent) requires the use of AltGr+e. The specific key combination required for certain characters will also vary depending on the user's keyboard layout. However, shortcuts that use these characters still fall under the requirements of this Success Criterion. What matters is that a shortcut relies on a printable character (letters, punctuation, numbers, symbol characters), and not the number of physical keyboard keys that users need to press to trigger it.: Note: The Success Criterion also applies to situations where a shortcut is based on a sequence of character keys – for example, pressing G and then A in quick succession to trigger an action. While the individual character key presses don't immediately trigger the action, overall these types of shortcuts still rely on a series of character keys.: This success criterion doesn't affect components such as listboxes and drop-down menus. Although these components contain values (words) that may be selected by one or more character keys, the shortcuts are only active when the components have focus. Other components such as menus may be accessed or opened with a single non-character shortcut (e.g., Alt or Alt+F) before pressing a single character key to select an item. This makes the full path to invoking a menu a two-step shortcut that includes a non-printable key. Accesskeys are also not affected because they are generally (depending on the user agent) activated using modifier keys.: Background on the mechanics of speech input: Speech input users generally work in a single mode where they can use a mix of dictation and speech commands. This works well because the user knows to pause before and after commands, and commands are usually at least two words long. So, for instance, a user might say a bit of dictation, such as "the small boat", then pause, and say a command to delete that dictation, such as "Delete Line". In contrast, if the user were to say the two phrases together without a pause, the whole phrase would come out as dictation (i.e., "the small boat delete line"). Although speech input programs often include modes that listen only for dictation or only for commands, most speech users use the all-encompassing mode all the time because it is a much more efficient workflow. It could decrease command efficiency significantly if users were to change to command mode and back before and after issuing each command.: Speech users can also speak most keyboard commands (e.g., "press Control Foxtrot") without any problems. If the website or app is keyboard enabled, the speech user can also write a native speech macro that calls the keyboard command, such as "This Print" to carry out Ctrl+P.: Single-key shortcuts are the exception. While using single letter keys as controls might be appropriate and efficient for many keyboard users, single-key shortcuts are disastrous for speech users. The reason for this is that when only a single key is used to trip a command, a spoken word can become a barrage of single-key commands if the cursor focus happens to be in the wrong place.: For example, a speech-input user named Kim has her cursor focus in the main window of a web mail application that uses common keyboard shortcuts to navigate (k), archive (y) and mute messages (m). A coworker named Mike enters her office and says "Hey Kim" and her microphone picks that up. The Y of "hey" archives the current message. K in "Kim" moves down one conversation and M mutes a message or thread. And, if Kim looks up and says "Hey Mike" without remembering to turn off the microphone, the same three things happen in a different sequence.: A user interacting with a webpage or web app that doesn't use single-character shortcuts doesn't have this problem. Inadvertent strings of characters from the speech application are not interpreted as shortcuts if a modifier key is required. A speech user filling in a text input form may find that a phrase that is accidentally picked up by the speech microphone results in stray text being entered into the field, but that is easily seen and undone. The Resources section of this page contains links to videos demonstrating these types of issues.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G217: Providing a mechanism to allow users to remap or turn off character key shortcuts
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F99: Failure of Success Criterion 2.1.4 due to implementing character key shortcuts that cannot be turned off or remapped

- G217: Providing a mechanism to allow users to remap or turn off character key shortcuts: http://localhost:3000/techniques/general/G217
- F99: Failure of Success Criterion 2.1.4 due to implementing character key shortcuts that cannot be turned off or remapped: http://localhost:3000/techniques/failures/F99



--------------------------------------------------

Section 34: timing_adjustable
==================================================

In Brief
	- Goal
	- Users have adequate time to complete tasks.
	- What to do
	- Let users turn off, adjust, or extend time limits.
	- Why it's important
	- People with disabilities may need more time to complete activities.

Success Criterion (SC): For each time limit that is set by the content, at least one of the following is true:: Turn off: The user is allowed to turn off the time limit before encountering it; or: Adjust: The user is allowed to adjust the time limit before encountering it over a wide range that is at least ten times the length of the default setting; or: Extend: The user is warned before time expires and given at least 20 seconds to extend the time limit with a simple action (for example, "press the space bar"), and the user is allowed to extend the time limit at least ten times; or: Real-time Exception: The time limit is a required part of a real-time event (for example, an auction), and no alternative to the time limit is possible; or: Essential Exception: The time limit is essential and extending it would invalidate the activity; or: 20 Hour Exception: The time limit is longer than 20 hours.: Note: This success criterion helps ensure that users can complete tasks without unexpected changes in content or context that are a result of a time limit. This success criterion should be considered in conjunction with Success Criterion 3.2.1, which puts limits on changes of content or context as a result of user action.

Intent: The intent of this Success Criterion is to ensure that users with disabilities are given adequate time to interact with Web content whenever possible. People with disabilities such as blindness, low vision, dexterity impairments, and cognitive limitations may require more time to read content or to perform functions such as filling out on-line forms. If Web functions are time-dependent, it will be difficult for some users to perform the required action before a time limit occurs. This may render the service inaccessible to them. Designing functions that are not time-dependent will help people with disabilities succeed at completing these functions. Providing options to disable time limits, customize the length of time limits, or request more time before a time limit occurs helps those users who require more time than expected to successfully complete tasks. These options are listed in the order that will be most helpful for the user. Disabling time limits is better than customizing the length of time limits, which is better than requesting more time before a time limit occurs.: Any process that happens without user initiation after a set time or on a periodic basis is a time limit. This includes partial or full updates of content (for example, page refresh), changes to content, or the expiration of a window of opportunity for a user to react to a request for input.: It also includes content that is advancing or updating at a rate beyond the user's ability to read and/or understand it. In other words, animated, moving or scrolling content introduces a time limit on a users ability to read content.: This success criterion is generally not applicable when the content repeats or is synchronized with other content, so long as the information and data is adjustable or otherwise under the control of the end user. Examples of time limits for which this success criterion is not applicable include scrolling text that repeats, captioning, and carousels. These are situations which do include time limits, but the content is still available to the user because it has controls for accessing it, as specified in 2.2.2 Pause, Stop, Hide.: In some cases, however, it is not possible to change the time limit (for example, for an auction or other real-time event) and exceptions are therefore provided for those cases.: Content that operates on a timer does not need to be time adjustable if there is an alternative that does not rely on a timer. For example, a web application such as an email client provides notification of new email arriving with a temporary message (such as a 'toast' message) in the lower right-hand side of the interface, and the message disappears after 5 seconds. Users are able to identify the arrival of email through other means, such as viewing the Inbox, so the disappearance of the message does not set a time limit on the their ability to determine if new mail has arrived. If the user has no other means of discovering the same information (or performing the same function), then each message would need to meet this Success Criterion in order to provide users with sufficient time to access the information.: Notes regarding server time limits: Timed server redirects can be found below under Common Failures.
	- Non-timed server redirects (e.g., 3xx response codes) are not applicable because there is no time limit: they work instantly.
	- This Success Criterion applies only to time limits that are set by the content itself. For example, if a time limit is included in order to address security concerns, it would be considered to have been set by the content because it is designed to be part of the presentation and interaction experience for that content. Time limits set externally to content, such as by the user agent or by factors intrinsic to the Internet are not under the author's control and not subject to WCAG conformance requirements. Time limits set by Web servers should be under the author's/organization's control and are covered. (Success Criteria 2.2.3, 2.2.4 and 2.2.5 may also apply.)
	- Ten times the default was chosen based on clinical experience and other guidelines. For example, if 15 seconds is allowed for a user to respond and hit a switch, 150 seconds would be sufficient to allow almost all users to hit a switch even if they had trouble.
	- 20 seconds was also based on clinical experience and other guidelines. 20 seconds to hit 'any switch' is sufficient for almost all users including those with spasticity. Some would fail, but some would fail all lengths of time. A reasonable period for requesting more time is required since an arbitrarily long time can provide security risks to all users, including those with disabilities, for some applications. For example, with kiosks or terminals that are used for financial transactions, it is quite common for people to walk away without signing off. This leaves them vulnerable to those walking up behind them. Providing a long period of inactivity before asking, and then providing a long period for the person to indicate that they are present can leave terminals open for abuse. If there is no activity the system should ask if the user is there. It should then ask for an indication that a person is there ('hit any key') and then wait long enough for almost anyone to respond. For "hit any key," 20 seconds would meet this. If the person indicates that they are still present, the device should return the user to the exact condition that existed before it asked the question.
	- 20 hours was chosen as an upper limit because it is longer than a full waking day.: In cases where timing is not an intrinsic requirement but giving users control over timed events would invalidate the outcome, a third party can control the time limits for the user (for example, granting double time on a test).: See also 2.2.3: No Timing.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: Select the situation below that matches your content. Each situation includes techniques or combinations of techniques that are known and documented to be sufficient for that situation.: Situation A: If there are session time limits:
	- G133: Providing a checkbox on the first page of a multipart form that allows users to ask for longer session time limit or no session time limit
	- G198: Providing a way for the user to turn the time limit off
	- Situation B: If a time limit is controlled by a script on the page:
	- G198: Providing a way for the user to turn the time limit off
	- G180: Providing the user with a means to set the time limit to 10 times the default time limit
	- SCR16: Providing a script that warns the user a time limit is about to expire AND SCR1: Allowing the user to extend the default time limit
	- Situation C: If there are time limits on reading:
	- G4: Allowing the content to be paused and restarted from where it was paused
	- G198: Providing a way for the user to turn the time limit off
	- SCR33: Using script to scroll content, and providing a mechanism to pause it
	- SCR36: Providing a mechanism to allow users to display moving, scrolling, or auto-updating text in a static window or area
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F40: Failure due to using meta redirect with a time limit
	- F41: Failure of Success Criterion 2.2.1, 2.2.4, and 3.2.5 due to using meta refresh to reload the page
	- F58: Failure of Success Criterion 2.2.1 due to using server-side techniques to automatically redirect pages after a time-out

- G133: Providing a checkbox on the first page of a multipart form that allows users to ask for longer session time limit or no session time limit: http://localhost:3000/techniques/general/G133
- G198: Providing a way for the user to turn the time limit off: http://localhost:3000/techniques/general/G198
- G198: Providing a way for the user to turn the time limit off: http://localhost:3000/techniques/general/G198
- G180: Providing the user with a means to set the time limit to 10 times the default time limit: http://localhost:3000/techniques/general/G180
- SCR16: Providing a script that warns the user a time limit is about to expire: http://localhost:3000/techniques/client-side-script/SCR16
- SCR1: Allowing the user to extend the default time limit: http://localhost:3000/techniques/client-side-script/SCR1
- G4: Allowing the content to be paused and restarted from where it was paused: http://localhost:3000/techniques/general/G4
- G198: Providing a way for the user to turn the time limit off: http://localhost:3000/techniques/general/G198
- SCR33: Using script to scroll content, and providing a mechanism to pause it: http://localhost:3000/techniques/client-side-script/SCR33
- SCR36: Providing a mechanism to allow users to display moving, scrolling, or auto-updating text in a static window or area: http://localhost:3000/techniques/client-side-script/SCR36
- F40: Failure due to using meta redirect with a time limit: http://localhost:3000/techniques/failures/F40
- F41: Failure of Success Criterion 2.2.1, 2.2.4, and 3.2.5 due to using meta refresh to reload the page: http://localhost:3000/techniques/failures/F41
- F58: Failure of Success Criterion 2.2.1 due to using server-side techniques to automatically redirect pages after a time-out: http://localhost:3000/techniques/failures/F58



--------------------------------------------------

Section 35: pause,_stop,_hide
==================================================

In Brief
	- Goal
	- Fewer users are distracted by content that updates or moves.
	- What to do
	- Let users control content changes that occur in parallel with other content.
	- Why it's important
	- Some people with cognitive disabilities and attention deficits are distracted by continuous movement.

Success Criterion (SC): For moving, blinking, scrolling, or auto-updating information, all of the following are true:: Moving, blinking, scrolling: For any moving, blinking or scrolling information that (1) starts automatically, (2) lasts more than five seconds, and (3) is presented in parallel with other content, there is a mechanism for the user to pause, stop, or hide it unless the movement, blinking, or scrolling is part of an activity where it is essential; and: Auto-updating: For any auto-updating information that (1) starts automatically and (2) is presented in parallel with other content, there is a mechanism for the user to pause, stop, or hide it or to control the frequency of the update unless the auto-updating is part of an activity where it is essential.: Note 1: For requirements related to flickering or flashing content, refer to Guideline 2.3.: Note 2: Since any content that does not meet this success criterion can interfere with a user's ability to use the whole page, all content on the web page (whether it is used to meet other success criteria or not) must meet this success criterion. See Conformance Requirement 5: Non-Interference.: Note 3: Content that is updated periodically by software or that is streamed to the user agent is not required to preserve or present information that is generated or received between the initiation of the pause and resuming presentation, as this may not be technically possible, and in many situations could be misleading to do so.: Note 4: An animation that occurs as part of a preload phase or similar situation can be considered essential if interaction cannot occur during that phase for all users and if not indicating progress could confuse users or cause them to think that content was frozen or broken.

Intent: The intent of this Success Criterion is to avoid distracting users during their interaction with a Web page.: In the context of this Success Criterion, "starts automatically" broadly refers to animations/updates that are not the direct result of a user's intentional activation, for example, selecting a link or button.: "Moving, blinking and scrolling" refers to content in which the visible content conveys a sense of motion. Common examples include motion pictures, synchronized media presentations, animations, real-time games, and scrolling stock tickers. "Auto-updating" refers to content that updates or disappears based on a preset time interval. Common time-based content includes automatically updated weather information, news, stock price updates, and auto-advancing presentations and messages. The requirements for moving, blinking and scrolling content and for auto-updating content are the same except that:: authors have the option of providing the user with a means to control the frequency of updates when content is auto-updating and
	- there is no five second exception for auto-updating since it makes little sense to auto-update for a few seconds and then stop: Content that moves or auto-updates can be a barrier to anyone who has trouble reading stationary text quickly as well as anyone who has trouble tracking moving objects. It can also cause problems for screen readers.: Moving content can also be a severe distraction for some people. Certain groups, particularly those with attention deficit disorders, find blinking content distracting, making it difficult for them to concentrate on other parts of the Web page. Five seconds was chosen because it is long enough to get a user's attention, but not so long that a user cannot wait out the distraction if necessary to use the page.: Content that is paused can either resume in real-time or continue playing from the point in the presentation where the user left off.: Pausing and resuming where the user left off is best for users who want to pause to read content and works best when the content is not associated with a real-time event or status.: Note: See 2.2.1: Timing Adjustable for additional requirements related to time-limits for reading and interactions.: Pausing and jumping to current display (when pause is released) is better for information that is real-time or "status" in nature. For example, weather radar, a stock ticker, a traffic camera, or an auction timer, would present misleading information if a pause caused it to display old information when the content was restarted.: Note: Hiding content would have the same result as pausing and jumping to current display (when pause is released).: For a mechanism to be considered "a mechanism for the user to pause," it must provide the user with a means to pause that does not tie up the user or the focus so that the page cannot be used. The word "pause" here is meant in the sense of a "pause button" although other mechanisms than a button can be used. Having an animation stop only so long as a user has focus on it (where it restarts as soon as the user moves the focus away) would not be considered a "mechanism for the user to pause" because it makes the page unusable in the process and would not meet this SC.: Note: This Success Criterion is specifically concerned with moving, blinking, scrolling, and auto-updating visual content. For audio content that starts automatically, refer to 1.4.2 Audio Control.: Moving, blinking, scrolling content that starts automatically because of a general user interaction (such as focusing/hovering over an element, or scrolling the page), rather than as a result of an intentional activation (such as activating a button), and which doesn't provide provide a way to Pause, Stop, or Hide, will fail this Criterion, and potentially 2.3.3 Animation from Interaction.: It is important to note that the terms "blinking" and "flashing" can sometimes refer to the same content.: "Blinking" refers to content that causes a distraction problem. Blinking can be allowed for a short time as long as it stops (or can be stopped)
	- "Flashing" refers to content that can trigger a seizure (if it is more than 3 per second and large and bright enough). This cannot be allowed even for a second or it could cause a seizure. And turning the flash off is also not an option since the seizure could occur faster than most users could turn it off.
	- Blinking usually does not occur at speeds of 3 per second or more, but it can. If blinking occurs faster than 3 per second, it would also be considered a flash.: Note: "Flashing" content that starts automatically will need to be evaluated against 2.3.2 Three Flashes and 2.3.1 Three Flashes or Below Threshold.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G4: Allowing the content to be paused and restarted from where it was paused
	- SCR33: Using script to scroll content, and providing a mechanism to pause it
	- G11: Creating content that blinks for less than 5 seconds
	- G152: Setting animated gif images to stop blinking after n cycles (within 5 seconds)
	- SCR22: Using scripts to control blinking and stop it in five seconds or less
	- G186: Using a control in the Web page that stops moving, blinking, or auto-updating content
	- G191: Providing a link, button, or other mechanism that reloads the page without any blinking content
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F16: Failure of Success Criterion 2.2.2 due to including scrolling content where movement is not essential to the activity without also including a mechanism to pause and restart the content
	- F47: Failure of Success Criterion 2.2.2 due to using the blink element
	- F4: Failure of Success Criterion 2.2.2 due to using text-decoration:blink without a mechanism to stop it in less than five seconds
	- F50: Failure of Success Criterion 2.2.2 due to a script that causes a blink effect without a mechanism to stop the blinking at 5 seconds or less
	- F7: Failure of Success Criterion 2.2.2 due to an object or applet … for more than five seconds

- G4: Allowing the content to be paused and restarted from where it was paused: http://localhost:3000/techniques/general/G4
- SCR33: Using script to scroll content, and providing a mechanism to pause it: http://localhost:3000/techniques/client-side-script/SCR33
- G11: Creating content that blinks for less than 5 seconds: http://localhost:3000/techniques/general/G11
- G152: Setting animated gif images to stop blinking after n cycles (within 5 seconds): http://localhost:3000/techniques/general/G152
- SCR22: Using scripts to control blinking and stop it in five seconds or less: http://localhost:3000/techniques/client-side-script/SCR22
- G186: Using a control in the Web page that stops moving, blinking, or auto-updating content: http://localhost:3000/techniques/general/G186
- G191: Providing a link, button, or other mechanism that reloads the page without any blinking content: http://localhost:3000/techniques/general/G191
- F16: Failure of Success Criterion 2.2.2 due to including scrolling content where movement is not essential to the activity without also including a mechanism to pause and restart the content: http://localhost:3000/techniques/failures/F16
- F47: Failure of Success Criterion 2.2.2 due to using the blink element: http://localhost:3000/techniques/failures/F47
- F4: Failure of Success Criterion 2.2.2 due to using text-decoration:blink without a mechanism to stop it in less than five seconds: http://localhost:3000/techniques/failures/F4
- F50: Failure of Success Criterion 2.2.2 due to a script that causes a blink effect without a mechanism to stop the blinking at 5 seconds or less: http://localhost:3000/techniques/failures/F50
- F7: Failure of Success Criterion 2.2.2 due to an object or applet … for more than five seconds: http://localhost:3000/techniques/failures/F7



--------------------------------------------------

Section 36: no_timing
==================================================

In Brief
	- Goal
	- Users do not face time limits.
	- What to do
	- Do not use time limits, except for video and live events.
	- Why it's important
	- People with disabilities often need more time to complete actions.

Success Criterion (SC): Timing is not an essential part of the event or activity presented by the content, except for non-interactive synchronized media and real-time events.

Intent: The intent of this Success Criterion is to minimize the occurrence of content that requires timed interaction. This enables people with blindness, low vision, cognitive limitations, or motor impairments to interact with content. This differs from the Level A Success Criterion in that the only exception is for real-time events.: Note: Video only, such as sign language, is covered in Guideline 1.1.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G5: Allowing users to complete an activity without any time limit

- G5: Allowing users to complete an activity without any time limit: http://localhost:3000/techniques/general/G5



--------------------------------------------------

Section 37: interruptions
==================================================

In Brief
	- Goal
	- Users are not interrupted.
	- What to do
	- Let people delay or turn off updates, except in emergencies.
	- Why it's important
	- Updates distract and disrupt assistive technology users and people with attention deficits.

Success Criterion (SC): Interruptions can be postponed or suppressed by the user, except interruptions involving an emergency.

Intent: The intent of this Success Criterion is to allow users to turn off updates from the author/server except in emergencies. Emergencies would include civil emergency alert messages or any other messages that warn of danger to health, safety, or property, including data loss, loss of connection, etcetera.: This allows access by people with cognitive limitations or attention disorders by enabling them to focus on the content. It also allows users who are blind or have low vision to keep their "viewing" focus on the content they are currently reading.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G75: Providing a mechanism to postpone any updating of content
	- G76: Providing a mechanism to request an update of the content instead of updating automatically
	- SCR14: Using scripts to make nonessential alerts optional
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F40: Failure due to using meta redirect with a time limit
	- F41: Failure of Success Criterion 2.2.1, 2.2.4, and 3.2.5 due to using meta refresh to reload the page

- G75: Providing a mechanism to postpone any updating of content: http://localhost:3000/techniques/general/G75
- G76: Providing a mechanism to request an update of the content instead of updating automatically: http://localhost:3000/techniques/general/G76
- SCR14: Using scripts to make nonessential alerts optional: http://localhost:3000/techniques/client-side-script/SCR14
- F40: Failure due to using meta redirect with a time limit: http://localhost:3000/techniques/failures/F40
- F41: Failure of Success Criterion 2.2.1, 2.2.4, and 3.2.5 due to using meta refresh to reload the page: http://localhost:3000/techniques/failures/F41



--------------------------------------------------

Section 38: re_authenticating
==================================================

In Brief
	- Goal
	- Users do not lose information or context due to reauthentication.
	- What to do
	- Preserve users' prior activity and data through reauthentication.
	- Why it's important
	- Some people may require additional time to complete an activity.

Success Criterion (SC): When an authenticated session expires, the user can continue the activity without loss of data after re-authenticating.

Intent: The intent of this Success Criterion is to allow all users to complete authenticated transactions that have inactivity time limits or other circumstances that would cause a user to be logged out while in the midst of completing the transaction.: For security reasons, many sites implement an authentication time limit after a certain period of inactivity. These time limits may cause problems for persons with disabilities because it may take longer for them to complete the activity.: Other sites will log a person out of a session if a person logs in on the Web site from another computer or if other activities arise that make the site suspicious of whether the person is still the same legitimate person who logged in originally. When users are logged out while still in the midst of a transaction - it is important that they be given the ability to re-authenticate and continue with the transaction without the loss of any data already entered.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: Providing options to continue without loss of data using one of the following techniques:: G105: Saving data so that it can be used after a user re-authenticates
	- G181: Encoding user data as hidden or encrypted data in a re-authorization page: Note: Refer to Techniques for Addressing Success Criterion 2.2.1 for techniques related to providing notifications about time limits.: Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F12: Failure of Success Criterion 2.2.5 due to having a session time limit without a mechanism … re-authentication

- G105: Saving data so that it can be used after a user re-authenticates: http://localhost:3000/techniques/general/G105
- G181: Encoding user data as hidden or encrypted data in a re-authorization page: http://localhost:3000/techniques/general/G181
- F12: Failure of Success Criterion 2.2.5 due to having a session time limit without a mechanism … re-authentication: http://localhost:3000/techniques/failures/F12



--------------------------------------------------

Section 39: timeouts
==================================================

In Brief
	- Goal
	- Users do not lose data due to unknown timeouts.
	- Author task
	- Tell users how long their session can be inactive before they may lose information.
	- Why it's important
	- People with disabilities may need more time to complete actions.

Success Criterion (SC): Users are warned of the duration of any user inactivity that could cause data loss, unless the data is preserved for more than 20 hours when the user does not take any actions.: Note: Privacy regulations may require explicit user consent before user identification has been authenticated and before user data is preserved. In cases where the user is a minor, explicit consent may not be solicited in most jurisdictions, countries or regions. Consultation with privacy professionals and legal counsel is advised when considering data preservation as an approach to satisfy this success criterion.

Intent: The intent of this Success Criterion is to ensure that when a timeout is used, users know what duration of inactivity will cause the page to time out and result in lost data. The use of timed events can present significant barriers for users with cognitive disabilities, as these users may require more time to read content or to perform functions, such as completing an online form.: During the completion of an online process, such as to reserve a hotel room or purchase a plane ticket, a user with a cognitive impairment may become overwhelmed with lengthy instructions and data input required to complete the process. The user may not be able to complete the process in one sitting and may need to take a break. Users should be able to leave a process without losing their current place within the process, and without losing information that has already been entered. If users cannot take a break and check their work, many will often be unable to complete a task correctly.: This Success Criterion works in tandem with Success Criterion 2.2.1 Timing Adjustable, but is specifically focused on notification of timeouts related to user inactivity.: The best way to conform to this success criterion is to keep the user data for at least 20 hours. This enables the user with disabilities and the aging community to start and finish a task, taking breaks as needed. However, when it is not practical to save the user data the author must warn the user about the duration of inactivity which will result in a timeout. Timeouts should be displayed to the user once at the beginning of the related task or process and not at each step.: This success criterion only applies to timeouts that are within the content provider's knowledge or control. For example, if the user closes a web browser or device and loses content in an open page that has not yet been submitted, the success criterion has not been violated.: Examples of privacy regulations mentioned in the Success Criterion note, and related compliance standards, are PCI DSS (Payment Card Industry Data Security Standard) and HIPAA (Health Insurance Portability and Accountability Act of 1996).

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- Setting a session timeout to occur following at least 20 hours of inactivity.
	- Store user data for more than 20 hours.
	- Provide a warning of the duration of user inactivity at the start of a process.




--------------------------------------------------

Section 40: three_flashes_or_below_threshold
==================================================

In Brief
	- Goal
	- Content does not trigger seizures.
	- What to do
	- Avoid content that flashes, or keep it under thresholds.
	- Why it's important
	- Flashing content can cause migraines, dizziness, nausea, and seizures.

Success Criterion (SC): Web pages do not contain anything that flashes more than three times in any one second period, or the flash is below the general flash and red flash thresholds.: Note: Since any content that does not meet this success criterion can interfere with a user's ability to use the whole page, all content on the web page (whether it is used to meet other success criteria or not) must meet this success criterion. See Conformance Requirement 5: Non-Interference.

Intent: The intent of this Success Criterion is to allow users to access the full content of a site without inducing seizures due to photosensitivity.: Individuals who have photosensitive seizure disorders can have a seizure triggered by content that flashes at certain frequencies for more than a few flashes. People are even more sensitive to red flashing than to other colors, so a special test is provided for saturated red flashing. These guidelines were originally based on guidelines for the broadcasting industry as adapted for desktop monitors, where content is viewed from a closer distance (using a larger angle of vision).: Flashing can be caused by the display, the computer rendering the image or by the content being rendered. The author has no control of the first two. They can be addressed by the design and speed of the display and computer. The intent of this criterion is to ensure that flicker that violates the flash thresholds is not caused by the content itself. For example, the content could contain a video clip or animated image of a series of strobe flashes, or close-ups of rapid-fire explosions.: This Success Criterion replaces a much more restrictive criterion in WCAG 1.0 that did not allow any flashing (even of a single pixel) within a broad frequency range (3 to 50 Hz). This Success Criterion is based on existing specifications in use in the UK and by others for television broadcast and has been adapted for computer display viewing. In WCAG 2.0, a 1024 x 768 screen was used as the reference screen resolution for the evaluation. The 341 x 256 pixel block represents a 10 degree viewport at a typical viewing distance. (The 10 degree field is taken from the original specifications and represents the central vision portion of the eye, where people are most susceptible to photo stimuli.): With the proliferation of devices of varying screen sizes (from small hand-helds to large living room displays), as well as the adoption of CSS pixels as a density-independent unit of measurement, the prior assessment criteria may seem outdated. However, an image of a consistent size uses up relatively the same percentage of a user's visual field on any device. On a large screen, the image takes up less size, but the large screen takes up a larger part of the visual field. On a mobile screen, the image may take up most or all of the screen; however, the mobile screen itself takes up a smaller portion of the user's visual field. So the same dimension of the flashing content, represented in CSS pixels can still provide a consistent means of assessment. Substituting CSS pixels for the original pixel block means that the combined area of flashing becomes 341 x 256 CSS pixels, or a flashing area of 87,296 CSS pixels.: Content should be analyzed at the largest scale at which a user may view the content, and at the standard zoom level of the user agent. For example, with a video that may play in an area of a web page and also at full screen, the video should be analyzed for risks at full screen.: Where video content is provided in color spaces other than sRGB, the version provided with the highest dynamic range should be tested. In such cases the industry standard definition of a general flash is a change in luminance of 20 cd/m2 or more where the darker image is below 160 cd/m2. (ITU-R BT.1702.) This is applicable for standard dynamic range (SDR) and high dynamic range (HDR) content. For HDR content when the darker state is 160 cd/m2 or more, a general flash is one where the Michelson contrast is 1/17 or greater — where the Michelson contrast is calculated as (LHigh - LLow) / (LHigh + LLow), and where LHigh and LLow are the luminance of the high and low luminance states, respectively.: For short clips that might be looped (such as GIF animations), the content should be analyzed while looping.: Note: The specification cannot account for the actual viewing distance that a person chooses. Users that are closer to their screens than the idealized viewing distance will be affected by flashing areas that normatively pass. The same problem applies to users who rely on zoom or screen magnification. Conversely, users who are further away from the screen than the idealized distance should be able to tolerate flashing areas that are larger than the threshold.: The combined area of flashes occurring concurrently and contiguously means the total area that is actually flashing at the same time. It is calculated by adding up the contiguous area that is flashing simultaneously within any 10 degree angle of view.: Note: The terms "blinking" and "flashing" can sometimes refer to the same content.: "Blinking" refers to content that causes a distraction problem. Blinking can be allowed for a short time as long as it stops (or can be stopped)
	- "Flashing" refers to content that can trigger a seizure (if it is more than 3 per second and large and bright enough). This cannot be allowed even for a second or it could cause a seizure. And turning the flash off is also not an option since the seizure could occur faster than most users could turn it off.
	- Blinking usually does not occur at speeds of 3 per second or more, but it can. If blinking occurs faster than 3 per second, it would also be considered a flash.: Note (new in WCAG 2.2): The new working definition in the field for "pair of opposing transitions involving a saturated red" is a pair of opposing transitions where, one transition is either to or from a state with a value R/(R + G + B) that is greater than or equal to 0.8, and the difference between states is more than 0.2 (unitless) in the CIE 1976 UCS chromaticity diagram. [ISO 9241-391]: The chromaticity difference is calculated as:: SQRT( (u'1 - u'2)^2 + (v'1 - v'2)^2 ): where u'1 and v'1 are chromaticity coordinates of State 1 and u'2 and v'2 are chromaticity coordinates of State 2. The 1976 UCS chromaticity coordinates of u' and v' are calculated as:: u' = 4 * X / (X + 15 * Y + 3 * Z)
	- v' = 9 * Y / (X + 15 * Y + 3 * Z): where X, Y, and Z are the tristimulus values of a color in the CIE XYZ colorspace, which can be calculated as:: X = 0.4124564 * R + 0.3575761 * G + 0.1804375 * B
	- Y = 0.2126729 * R + 0.7151522 * G + 0.0721750 * B
	- Z = 0.0193339 * R + 0.1191920 * G + 0.9503041 * B: where R, G, & B are values that range from 0-1 as specified in “relative luminance” definition.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G19: Ensuring that no component of the content flashes more than three times in any 1-second period
	- G176: Keeping the flashing area small enough
	- G15: Using a tool to ensure that content does not violate the general flash threshold or red flash threshold

- G19: Ensuring that no component of the content flashes more than three times in any 1-second period: http://localhost:3000/techniques/general/G19
- G176: Keeping the flashing area small enough: http://localhost:3000/techniques/general/G176
- G15: Using a tool to ensure that content does not violate the general flash threshold or red flash threshold: http://localhost:3000/techniques/general/G15



--------------------------------------------------

Section 41: three_flashes
==================================================

In Brief
	- Goal
	- Content does not trigger seizures.
	- What to do
	- Do not flash content more than 3 times a second.
	- Why it's important
	- Flashing content can cause migraines, dizziness, nausea, and seizures.

Success Criterion (SC): Web pages do not contain anything that flashes more than three times in any one second period.

Intent: The purpose of this Success Criterion is to further reduce the chance of seizures. Seizures cannot be completely eliminated since some people are so sensitive. However, by eliminating all 3-per-second flashing over any area of the screen, the chances of a person having a seizure are further reduced than when just meeting the measures ordinarily used today in standards internationally, as we do at Level A.: Whereas Success Criterion 2.3.1 allows flashing if it is dim enough or has a small enough area, Success Criterion 2.3.2 does not allow flashing greater than 3 per second, regardless of brightness or size. As a result, even a single flashing pixel would violate this criterion. The intent is to guard against flashing larger than a single pixel, but since an unknown amount of magnification or high contrast setting may be applied, the prohibition is against any flashing.: Note: In some cases, what we refer to as "blinking" and what we refer to as "flashing" may overlap slightly. We are using different terms for the two because "blinking" causes a distraction problem which you can allow for a short time as long as it stops (or can be stopped) whereas "flashing" is a seizure trigger and cannot be allowed or it will cause a seizure. The seizure would occur faster than most users could turn it off. "Blink" therefore refers to slow repeating changes that would distract. "Flash" refers to changes that could cause a seizure if they were bright enough or persisted long enough. Blinking usually doesn't occur at speeds of 3 per second or more so blink and flash do not overlap. However, blinking can occur faster than 3 per second so there could be an overlap. See 2.2.2: Pause, Stop, Hide for more information on blink.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G19: Ensuring that no component of the content flashes more than three times in any 1-second period

- G19: Ensuring that no component of the content flashes more than three times in any 1-second period: http://localhost:3000/techniques/general/G19



--------------------------------------------------

Section 42: animation_from_interactions
==================================================

In Brief
	- Goal
	- Users are not harmed or distracted by motion.
	- What to do
	- Support user preferences for motion, and eliminate unnecessary motion effects.
	- Why it's important
	- People can get sick from motion effects.

Success Criterion (SC): Motion animation triggered by interaction can be disabled, unless the animation is essential to the functionality or the information being conveyed.

Intent: The intent of this Success Criterion is to allow users to prevent animation from being displayed on Web pages. Some users experience distraction or nausea from animated content. For example, if scrolling a page causes elements to move (other than the essential movement associated with scrolling) it can trigger vestibular disorders. Vestibular (inner ear) disorder reactions include dizziness, nausea and headaches. Another animation that is often non-essential is parallax scrolling. Parallax scrolling occurs when backgrounds move at a different rate to foregrounds. Animation that is essential to the functionality or information of a web page is allowed by this Success Criterion.: "Animation from interactions" applies when a user’s interaction initiates non-essential animation. In contrast, 2.2.2 Pause, Stop, Hide applies when the web page initiates animation "automatically" that is not in response to an intentional user activation. There may be situations where a particular animation may fail both Success Criteria.: Note: The impact of animation on people with vestibular disorders can be quite severe. Triggered reactions include nausea, migraine headaches, and potentially needing bed rest to recover.: How can a website reduce the chances of triggering a vestibular disorder? Choose any one of the following solutions. Avoid using unnecessary animation. Provide a control for users to turn off non-essential animations from user interaction. Take advantage of the reduce motion feature in the user agent or operating system.: What about movement caused by a user scrolling a page? Moving new content into the viewport is essential for scrolling. The user controls the essential scrolling movement so it is allowed. Only add non-essential animation to the scrolling interaction in a responsible way. Always give users the ability to turn off unnecessary movement.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- C39: Using the CSS reduce-motion query to prevent motion
	- Gx: Allowing users to set a preference that prevents animation.

- C39: Using the CSS reduce-motion query to prevent motion: http://localhost:3000/techniques/css/C39



--------------------------------------------------

Section 43: bypass_blocks
==================================================

In Brief
	- Goal
	- Users can more easily navigate by keyboard.
	- What to do
	- Provide a means of skipping repeating content.
	- Why it's important
	- Users reliant on the keyboard interface can move around pages efficiently.

Success Criterion (SC): A mechanism is available to bypass blocks of content that are repeated on multiple web pages.

Intent: The intent of this Success Criterion is to allow people who navigate sequentially through content more direct access to the primary content of the Web page. Web pages and applications often have content that appears on other pages or screens. Examples of repeated blocks of content include but are not limited to navigation links, header content, and advertising frames. Small repeated sections such as individual words, phrases or single links are not considered blocks for the purposes of this provision.: Users who navigate sequentially through content will generally have to navigate through repeated content on each page. This is in contrast to a sighted user's ability to ignore the repeated material either by focusing on the center of the screen (where main content usually appears) or a mouse user's ability to select a link with a single mouse click rather than encountering every link or form control that comes before the item they want.: It is not the intent of this Success Criterion to require authors to provide methods that are redundant to functionality provided by the user agent. Most web browsers provide keyboard shortcuts to move the user focus to the top of the page, so if a set of navigation links is provided at the bottom of a web page providing a "skip" link may be unnecessary.: Note: Although this Success Criterion deals with blocks of content that are repeated on multiple pages, we also strongly promote structural markup on individual pages as per Success Criteria 1.3.1.: Although the success criterion does not specifically use the term “within a set of web pages”, the concept of the pages belonging to a set is implied. An author would not be expected to avoid any possible duplication of content in any two pages that are not in some way related to each other, and are not "Web pages that share a common purpose and that are created by the same author, group or organization” (the definition of set of web pages).: Note: Even for web pages that are not in a set, if a web page has blocks of text that are repeated within the page it may be helpful (but not required) to provide a means to skip over them.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: Creating links to skip blocks of repeated material using one of the following techniques:: G1: Adding a link at the top of each page that goes directly to the main content area
	- G123: Adding a link at the beginning of a block of repeated content to go to the end of the block
	- G124: Adding links at the top of the page to each area of the content: Grouping blocks of repeated material in a way that can be skipped, using one of the following techniques:: ARIA11: Using ARIA landmarks to identify regions of a page
	- H69: Providing heading elements at the beginning of each section of content
	- PDF9: Providing headings by marking content with heading tags in PDF documents
	- H64: Using the title attribute of the iframe element
	- SCR28: Using an expandable and collapsible menu to bypass block of content
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: C6: Positioning content based on structural markup
	- H97: Grouping related links using the nav element

- G1: Adding a link at the top of each page that goes directly to the main content area: http://localhost:3000/techniques/general/G1
- G123: Adding a link at the beginning of a block of repeated content to go to the end of the block: http://localhost:3000/techniques/general/G123
- G124: Adding links at the top of the page to each area of the content: http://localhost:3000/techniques/general/G124
- ARIA11: Using ARIA landmarks to identify regions of a page: http://localhost:3000/techniques/aria/ARIA11
- H69: Providing heading elements at the beginning of each section of content: http://localhost:3000/techniques/html/H69
- PDF9: Providing headings by marking content with heading tags in PDF documents: http://localhost:3000/techniques/pdf/PDF9
- H64: Using the title attribute of the iframe element: http://localhost:3000/techniques/html/H64
- SCR28: Using an expandable and collapsible menu to bypass block of content: http://localhost:3000/techniques/client-side-script/SCR28
- C6: Positioning content based on structural markup: http://localhost:3000/techniques/css/C6
- H97: Grouping related links using the nav element: http://localhost:3000/techniques/html/H97



--------------------------------------------------

Section 44: page_titled
==================================================

In Brief
	- Goal
	- Each web page has a meaningful title.
	- What to do
	- Provide a descriptive page title using appropriate technology.
	- Why it's important
	- Page titles help users identify and distinguish different pages.

Success Criterion (SC): Web pages have titles that describe topic or purpose.

Intent: The intent of this Success Criterion is to help users find content and orient themselves within it by ensuring that each Web page has a descriptive title. Titles identify the current location without requiring users to read or interpret page content. When titles appear in site maps or lists of search results, users can more quickly identify the content they need. User agents make the title of the page easily available to the user for identifying the page. For instance, a user agent may display the page title in the window title bar or as the name of the tab containing the page.: In cases where the page is a document or a web application, the name of the document or web application would be sufficient to describe the purpose of the page. Note that it is not required to use the name of the document or web application; other things may also describe the purpose or the topic of the page.: In cases such as Single Page Applications (SPAs), where various distinct pages/views are all nominally served from the same URI and the content of the page is changed dynamically, the title of the page should also be changed dynamically to reflect the content or topic of the current view.: Success Criteria 2.4.4 and 2.4.9 deal with the purpose of links, many of which are links to web pages. Here also, the name of a document or web application being linked to would be sufficient to describe the purpose of the link. Having the link and the title agree, or be very similar, is good practice and provides continuity between the link 'clicked on' and the web page that the user lands on.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: G88: Providing descriptive titles for Web pages AND associating a title with a Web page using one of the following techniques:: H25: Providing a title using the title element
	- PDF18: Specifying the document title using the Title entry in the document information dictionary of a PDF document
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: G127: Identifying a Web page's relationship to a larger collection of Web pages
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F25: Failure of Success Criterion 2.4.2 due to the title of a Web page not identifying the contents

- G88: Providing descriptive titles for Web pages: http://localhost:3000/techniques/general/G88
- H25: Providing a title using the title element: http://localhost:3000/techniques/html/H25
- PDF18: Specifying the document title using the Title entry in the document information dictionary of a PDF document: http://localhost:3000/techniques/pdf/PDF18
- G127: Identifying a Web page's relationship to a larger collection of Web pages: http://localhost:3000/techniques/general/G127
- F25: Failure of Success Criterion 2.4.2 due to the title of a Web page not identifying the contents: http://localhost:3000/techniques/failures/F25



--------------------------------------------------

Section 45: focus_order
==================================================

In Brief
	- Goal
	- Keyboard users navigate content in a correct order.
	- What to do
	- Elements receive focus in an order that preserves meaning.
	- Why it's important
	- Navigating a site or application with only the keyboard will make sense.

Success Criterion (SC): If a web page can be navigated sequentially and the navigation sequences affect meaning or operation, focusable components receive focus in an order that preserves meaning and operability.

Intent: The intent of this Success Criterion is to ensure that when users navigate sequentially through content, they encounter information in an order that is consistent with the meaning of the content and can be operated from the keyboard. This reduces confusion by letting users form a consistent mental model of the content. There may be different orders that reflect logical relationships in the content. For example, moving through components in a table one row at a time or one column at a time both reflect the logical relationships in the content. Either order may satisfy this Success Criterion.: The way that sequential navigation order is determined in Web content is defined by the technology of the content. For example, simple HTML defines sequential navigation via the notion of tabbing order. Dynamic HTML may modify the navigation sequence using scripting along with the addition of a tabindex attribute to allow focus to additional elements. If no scripting or tabindex attributes are used, the navigation order is the order that components appear in the content stream. (See Focus in the HTML Living Standard).: An example of keyboard navigation that is not the sequential navigation addressed by this Success Criterion is using arrow key navigation to traverse a tree component. The user can use the up and down arrow keys to move from tree node to tree node. Pressing the right arrow key may expand a node, then using the down arrow key, will move into the newly expanded nodes. This navigation sequence follows the expected sequence for a tree control - as additional items get expanded or collapsed, they are added or removed from the navigation sequence.: The focus order may not be identical to the programmatically determined reading order (see Success Criterion 1.3.2) as long as the user can still understand and operate the Web page. Since there may be several possible logical reading orders for the content, the focus order may match any of them. However, when the order of a particular presentation differs from the programmatically determined reading order, users of one of these presentations may find it difficult to understand or operate the Web page. Authors should carefully consider all these users as they design their Web pages.: For example, a screen reader user interacts with the programmatically determined reading order, while a sighted keyboard user interacts with the visual presentation of the Web page. Care should be taken so that the focus order makes sense to both of these sets of users and does not appear to either of them to jump around randomly.: For clarity:: Focusable components need to receive focus in an order that preserves meaning and operability only when navigation sequences affect meaning and operability.
	- In those cases where it is required, there may be more than one order that will preserve meaning and operability.
	- If there is more than one order that preserves meaning and operability, only one of them needs to be provided.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G59: Placing the interactive elements in an order that follows sequences and relationships within the content: Giving focus to elements in an order that follows sequences and relationships within the content using one of the following techniques:: C27: Making the DOM order match the visual order
	- PDF3: Ensuring correct tab and reading order in PDF documents: Changing a Web page dynamically using one of the following techniques:: SCR26: Inserting dynamic content into the Document Object Model immediately following its trigger element
	- H102: Creating modal dialogs with the HTML dialog element
	- SCR27: Reordering page sections using the Document Object Model
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F44: Failure of Success Criterion 2.4.3 due to using tabindex to create a tab order that does not preserve meaning and operability
	- F85: Failure of Success Criterion 2.4.3 due to using dialogs or menus that are not adjacent to their trigger control in the sequential navigation order

- G59: Placing the interactive elements in an order that follows sequences and relationships within the content: http://localhost:3000/techniques/general/G59
- C27: Making the DOM order match the visual order: http://localhost:3000/techniques/css/C27
- PDF3: Ensuring correct tab and reading order in PDF documents: http://localhost:3000/techniques/pdf/PDF3
- SCR26: Inserting dynamic content into the Document Object Model immediately following its trigger element: http://localhost:3000/techniques/client-side-script/SCR26
- H102: Creating modal dialogs with the HTML dialog element: http://localhost:3000/techniques/html/H102
- SCR27: Reordering page sections using the Document Object Model: http://localhost:3000/techniques/client-side-script/SCR27
- F44: Failure of Success Criterion 2.4.3 due to using tabindex to create a tab order that does not preserve meaning and operability: http://localhost:3000/techniques/failures/F44
- F85: Failure of Success Criterion 2.4.3 due to using dialogs or menus that are not adjacent to their trigger control in the sequential navigation order: http://localhost:3000/techniques/failures/F85



--------------------------------------------------

Section 46: link_purpose_in_context
==================================================

In Brief
	- Goal
	- Users understand what each link will do.
	- What to do
	- Provide descriptive names or context for all links.
	- Why it's important
	- People with visual and cognitive disabilities can navigate more easily.

Success Criterion (SC): The purpose of each link can be determined from the link text alone or from the link text together with its programmatically determined link context, except where the purpose of the link would be ambiguous to users in general.

Intent: The intent of this Success Criterion is to help users understand the purpose of each link so they can decide whether they want to follow the link. Whenever possible, provide link text that identifies the purpose of the link without needing additional context. Assistive technology has the ability to provide users with a list of links that are on the Web page. Link text that is as meaningful as possible will aid users who want to choose from this list of links. Meaningful link text also helps those who wish to tab from link to link. Meaningful links help users choose which links to follow without requiring complicated strategies to understand the page.: The text of, or associated with, the link is intended to describe the purpose of the link. In cases where the link takes one to a document or a web application, the name of the document or web application would be sufficient to describe the purpose of the link (which is to take you to the document or web application). Note that it is not required to use the name of the document or web application; other things may also describe the purpose of the link.: Success Criterion 2.4.2 deals with the titles of pages. Here also, the name of a document or web application being presented on the page would be sufficient to describe the purpose of the page. Having the link and the title agree, or be very similar, is good practice and provides continuity between the link 'clicked on' and the web page that the user lands on.: In some situations, authors may want to provide part of the description of the link in logically related text that provides the context for the link. In this case the user should be able to identify the purpose of the link without moving focus from the link. In other words, they can arrive on a link and find out more about it without losing their place. This can be achieved by putting the description of the link in the same sentence, paragraph, list item, or table cell as the link, or in the table header cell for a link in a data table, because these are directly associated with the link itself. Alternatively, authors may choose to use an ARIA technique to associate additional text on the page with the link.: This context will be most usable if it precedes the link. (For instance, if you must use ambiguous link text, it is better to put it at the end of the sentence that describes its destination, rather than putting the ambiguous phrase at the beginning of the sentence.) If the description follows the link, there can be confusion and difficulty for screen reader users who are reading through the page in order (top to bottom).: It is a best practice for links with the same destination to have consistent text (and this is a requirement per Success Criterion 3.2.4 for pages in a set). It is also a best practice for links with different purposes and destinations to have different link text.: A best practice for links to conforming alternate versions is to ensure that the link text to the conforming alternate version indicates in link text that the page it leads to represents the more accessible version. This information may also be provided in text - the goal is to ensure that the end user knows what the purpose of the link is.: The Success Criterion includes an exception for links for which the purpose of the link cannot be determined from the information on the Web page. In this situation, the person with the disability is not at a disadvantage; there is no additional context available to understand the link purpose. However, whatever amount of context is available on the Web page that can be used to interpret the purpose of the link must be made available in the link text or programmatically associated with the link to satisfy the Success Criterion.: Note: There may be situations where the purpose of the link is is supposed to be unknown or obscured. For instance, a game may have links identified only as door #1, door #2, and door #3. This link text would be sufficient because the purpose of the links is to create suspense for all users.: See also 2.4.9: Link Purpose (Link Only).

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G91: Providing link text that describes the purpose of a link
	- H30: Providing link text that describes the purpose of a link for anchor elements
	- H24: Providing text alternatives for the area elements of image maps: Allowing the user to choose short or long link text using one of the techniques below:: G189: Providing a control near the beginning of the Web page that changes the link text
	- SCR30: Using scripts to change the link text
	- G53: Identifying the purpose of a link using link text combined with the text of the enclosing sentence: Providing a supplemental description of the purpose of a link using one of the following techniques:: H33: Supplementing link text with the title attribute
	- C7: Using CSS to hide a portion of the link text: Identifying the purpose of a link using link text combined with programmatically determined link context using one of the following techniques:: ARIA7: Using aria-labelledby for link purpose
	- ARIA8: Using aria-label for link purpose
	- H77: Identifying the purpose of a link using link text combined with its enclosing list item
	- H78: Identifying the purpose of a link using link text combined with its enclosing paragraph
	- H79: Identifying the purpose of a link in a data table using the link text combined with its enclosing table cell and associated table header cells
	- H81: Identifying the purpose of a link in a nested list using link text combined with the parent list item under which the list is nested: G91: Providing link text that describes the purpose of a link AND Semantically indicating links using one of the following techniques:: PDF11: Providing links and link text using the Link annotation and the /Link structure element in PDF documents
	- PDF13: Providing replacement text using the /Alt entry for links in PDF documents
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: H2: Combining adjacent image and text links for the same resource
	- H80: Identifying the purpose of a link using link text combined with the preceding heading element
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F63: Failure of Success Criterion 2.4.4 due to providing link context only in content that is not related to the link
	- F89: Failure of Success Criteria 2.4.4, 2.4.9 and 4.1.2 due to not providing an accessible name for an image which is the only content in a link

- G91: Providing link text that describes the purpose of a link: http://localhost:3000/techniques/general/G91
- H30: Providing link text that describes the purpose of a link for anchor elements: http://localhost:3000/techniques/html/H30
- H24: Providing text alternatives for the area elements of image maps: http://localhost:3000/techniques/html/H24
- G189: Providing a control near the beginning of the Web page that changes the link text: http://localhost:3000/techniques/general/G189
- SCR30: Using scripts to change the link text: http://localhost:3000/techniques/client-side-script/SCR30
- G53: Identifying the purpose of a link using link text combined with the text of the enclosing sentence: http://localhost:3000/techniques/general/G53
- H33: Supplementing link text with the title attribute: http://localhost:3000/techniques/html/H33
- C7: Using CSS to hide a portion of the link text: http://localhost:3000/techniques/css/C7
- ARIA7: Using aria-labelledby for link purpose: http://localhost:3000/techniques/aria/ARIA7
- ARIA8: Using aria-label for link purpose: http://localhost:3000/techniques/aria/ARIA8
- H77: Identifying the purpose of a link using link text combined with its enclosing list item: http://localhost:3000/techniques/html/H77
- H78: Identifying the purpose of a link using link text combined with its enclosing paragraph: http://localhost:3000/techniques/html/H78
- H79: Identifying the purpose of a link in a data table using the link text combined with its enclosing table cell and associated table header cells: http://localhost:3000/techniques/html/H79
- H81: Identifying the purpose of a link in a nested list using link text combined with the parent list item under which the list is nested: http://localhost:3000/techniques/html/H81
- G91: Providing link text that describes the purpose of a link: http://localhost:3000/techniques/general/G91
- PDF11: Providing links and link text using the Link annotation and the /Link structure element in PDF documents: http://localhost:3000/techniques/pdf/PDF11
- PDF13: Providing replacement text using the /Alt entry for links in PDF documents: http://localhost:3000/techniques/pdf/PDF13
- H2: Combining adjacent image and text links for the same resource: http://localhost:3000/techniques/html/H2
- H80: Identifying the purpose of a link using link text combined with the preceding heading element: http://localhost:3000/techniques/html/H80
- F63: Failure of Success Criterion 2.4.4 due to providing link context only in content that is not related to the link: http://localhost:3000/techniques/failures/F63
- F89: Failure of Success Criteria 2.4.4, 2.4.9 and 4.1.2 due to not providing an accessible name for an image which is the only content in a link: http://localhost:3000/techniques/failures/F89



--------------------------------------------------

Section 47: multiple_ways
==================================================

In Brief
	- Goal
	- Users can get to content in multiple ways.
	- What to do
	- Provide at least two options for reaching the same content.
	- Why it's important
	- Not everyone can navigate content in the same way.

Success Criterion (SC): More than one way is available to locate a web page within a set of web pages except where the web page is the result of, or a step in, a process.

Intent: The intent of this Success Criterion is to make it possible for users to locate content in a manner that best meets their needs. Users may find one technique easier or more comprehensible to use than another.: Even small sites should provide users some means of orientation. For a three or four page site, with all pages linked from the home page, it may be sufficient simply to provide links from and to the home page where the links on the home page can also serve as a site map.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: Using two or more of the following techniques:: G125: Providing links to navigate to related Web pages
	- G64: Providing a Table of Contents
	- G63: Providing a site map
	- G161: Providing a search function to help users find content
	- G126: Providing a list of links to all other Web pages
	- G185: Linking to all of the pages on the site from the home page
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: PDF2: Creating bookmarks in PDF documents

- G125: Providing links to navigate to related Web pages: http://localhost:3000/techniques/general/G125
- G64: Providing a Table of Contents: http://localhost:3000/techniques/general/G64
- G63: Providing a site map: http://localhost:3000/techniques/general/G63
- G161: Providing a search function to help users find content: http://localhost:3000/techniques/general/G161
- G126: Providing a list of links to all other Web pages: http://localhost:3000/techniques/general/G126
- G185: Linking to all of the pages on the site from the home page: http://localhost:3000/techniques/general/G185
- PDF2: Creating bookmarks in PDF documents: http://localhost:3000/techniques/pdf/PDF2



--------------------------------------------------

Section 48: headings_and_labels
==================================================

In Brief
	- Goal
	- A page's content is described in headings and labels
	- What to do
	- Provide descriptive headings and labels
	- Why it's important
	- People can orient themselves, especially those with cognitive or visual disabilities.

Success Criterion (SC): Headings and labels describe topic or purpose.

Intent: The intent of this Success Criterion is to help users understand what information is contained in Web pages and how that information is organized. When headings are clear and descriptive, users can find the information they seek more easily, and they can understand the relationships between different parts of the content more easily. Descriptive labels help users identify specific components within the content.: Labels and headings do not need to be lengthy. A word, or even a single character, may suffice if it provides an appropriate cue to finding and navigating content.: This Success Criterion does not require headings or labels. This Success Criterion requires that if headings or labels are provided, they be descriptive. This Success Criterion also does not require that content acting as a heading or label be correctly marked up or identified – this aspect is covered separately by 1.3.1: Info and Relationships. It is possible for content to pass this Success Criterion (providing descriptive content that acts as headings or labels) while failing Success Criterion 1.3.1 (if the headings or labels aren't correctly marked up/identified). Conversely, it is also possible for content to pass Success Criterion 1.3.1 (with headings or labels correctly marked up or identified), while failing this Success Criterion (if those headings or labels are not sufficiently clear or descriptive).: Further, in the case of labels, this Success Criterion does not take into consideration whether or not alternative methods of providing an accessible name for form controls and inputs has been used – this aspect is covered separately by 4.1.2: Name, Role and Value. It is possible for controls and inputs to have an appropriate accessible name (e.g. using aria-label="…") and therefore pass Success Criterion 4.1.2, but to still fail this Success Criterion (if the label is not sufficiently clear or descriptive).: This success criterion does not require the use of labels; however, it does require that if labels are present, they must be sufficiently clear or descriptive. Please see 3.3.2: Labels or Instructions for more information on the use of labels.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G130: Providing descriptive headings
	- G131: Providing descriptive labels: Note: Headings and labels must be programmatically determined, per Success Criterion 1.3.1.

- G130: Providing descriptive headings: http://localhost:3000/techniques/general/G130
- G131: Providing descriptive labels: http://localhost:3000/techniques/general/G131



--------------------------------------------------

Section 49: focus_visible
==================================================

In Brief
	- Goal
	- Users know which element has keyboard focus.
	- What to do
	- Ensure each item receiving focus has a visible indicator.
	- Why it's important
	- Without a focus indicator, sighted keyboard users cannot operate the page.

Success Criterion (SC): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible.

Intent: The purpose of this success criterion is to help a person know which element has the keyboard focus.: “Mode of operation” accounts for user agents which may not always show a focus indicator, or only show the focus indicator when the keyboard is used. User agents may optimise when the focus indicator is shown, such as only showing it when a keyboard is used. Authors are responsible for providing at least one mode of operation where the focus is visible. In most cases there is only one mode of operation so this success criterion applies. The focus indicator must not be time limited, when the keyboard focus is shown it must remain.: Note: There may be situations where mouse/pointer users could also benefit from having a visible focus indicator, even though they did not set focus to an element using the keyboard. As a best practice, consider still providing an explicit focus indicator for these cases.: Note that a keyboard focus indicator can take different forms. New in WCAG 2.2: While Focus Visible does not specify what that form is, 2.4.13 Focus Appearance (Level AAA) provides guidance on creating a consistent, visible indicator.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G149: Using user interface components that are highlighted by the user agent when they receive focus
	- C15: Using CSS to change the presentation of a user interface component when it receives focus
	- G165: Using the default focus indicator for the platform so that high visibility default focus indicators will carry over
	- G195: Using an author-supplied, visible focus indicator
	- C40: Creating a two-color focus indicator to ensure sufficient contrast with all components
	- C45: Using CSS :focus-visible to provide keyboard focus indication
	- SCR31: Using script to change the background color or border of the element with focus
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F55: Failure of Success Criteria 2.1.1, 2.4.7, 2.4.13, and 3.2.1 due to using script to remove focus when focus is received
	- F78: Failure of Success Criterion 1.4.11, 2.4.7 and 2.4.13 due to styling element outlines and borders in a way that removes or renders non-visible the visual focus indicator

- G149: Using user interface components that are highlighted by the user agent when they receive focus: http://localhost:3000/techniques/general/G149
- C15: Using CSS to change the presentation of a user interface component when it receives focus: http://localhost:3000/techniques/css/C15
- G165: Using the default focus indicator for the platform so that high visibility default focus indicators will carry over: http://localhost:3000/techniques/general/G165
- G195: Using an author-supplied, visible focus indicator: http://localhost:3000/techniques/general/G195
- C40: Creating a two-color focus indicator to ensure sufficient contrast with all components: http://localhost:3000/techniques/css/C40
- C45: Using CSS :focus-visible to provide keyboard focus indication: http://localhost:3000/techniques/css/C45
- SCR31: Using script to change the background color or border of the element with focus: http://localhost:3000/techniques/client-side-script/SCR31
- F55: Failure of Success Criteria 2.1.1, 2.4.7, 2.4.13, and 3.2.1 due to using script to remove focus when focus is received: http://localhost:3000/techniques/failures/F55
- F78: Failure of Success Criterion 1.4.11, 2.4.7 and 2.4.13 due to styling element outlines and borders in a way that removes or renders non-visible the visual focus indicator: http://localhost:3000/techniques/failures/F78



--------------------------------------------------

Section 50: location
==================================================

In Brief
	- Goal
	- Users know where they are in a set of pages.
	- What to do
	- Use breadcrumbs, site maps, or other indicators to give context.
	- Why it's important
	- Location indicators reduce confusion for people with cognitive disabilities.

Success Criterion (SC): Information about the user's location within a set of web pages is available.

Intent: The intent of this Success Criterion is to provide a way for the user to orient herself within a set of Web pages, a Web site, or a Web application and find related information.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G65: Providing a breadcrumb trail
	- G63: Providing a site map
	- G128: Indicating current location within navigation bars
	- G127: Identifying a Web page's relationship to a larger collection of Web pages
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: PDF14: Providing running headers and footers in PDF documents
	- PDF17: Specifying consistent page numbering for PDF documents

- G65: Providing a breadcrumb trail: http://localhost:3000/techniques/general/G65
- G63: Providing a site map: http://localhost:3000/techniques/general/G63
- G128: Indicating current location within navigation bars: http://localhost:3000/techniques/general/G128
- G127: Identifying a Web page's relationship to a larger collection of Web pages: http://localhost:3000/techniques/general/G127
- PDF14: Providing running headers and footers in PDF documents: http://localhost:3000/techniques/pdf/PDF14
- PDF17: Specifying consistent page numbering for PDF documents: http://localhost:3000/techniques/pdf/PDF17



--------------------------------------------------

Section 51: link_purpose_link_only
==================================================

In Brief
	- Goal
	- Users understand what each link will do.
	- What to do
	- Provide descriptive names for all links.
	- Why it's important
	- Descriptive link text is more understandable for all users, especially when using assistive technology.

Success Criterion (SC): A mechanism is available to allow the purpose of each link to be identified from link text alone, except where the purpose of the link would be ambiguous to users in general.

Intent: The intent of this Success Criterion is to help users understand the purpose of each link in the content, so they can decide whether they want to follow it. Best practice is that links with the same destination would have the same descriptions, but links with different purposes and destinations would have different descriptions (see also Success Criterion 3.2.4 which calls for consistency in identifying components that have the same functionality). Because the purpose of a link can be identified from its link text, links can be understood when they are out of context, such as when the user agent provides a list of all the links on a page.: The text in the link is intended to describe the purpose of the link. In cases where the link takes one to a document or a web application, the name of the document or web application would be sufficient to describe the purpose of the link (which is to take you to the document or web application). Note that it is not required to use the name of the document or web application; other things may also describe the purpose of the link.: Success Criterion 2.4.2 deals with the titles of pages. Here also, the name of a document or web application being presented on the page would be sufficient to describe the purpose of the page. Having the link and the title agree, or be very similar, is good practice and provides continuity between the link 'clicked on' and the web page that the user lands on.: The Success Criterion includes an exception for links for which the purpose of the link cannot be determined from the information on the Web page. In this situation, the person with the disability is not at a disadvantage; there is no additional context available to understand the link purpose. However, whatever amount of context is available on the Web page that can be used to interpret the purpose of the link must be made available in the link text to satisfy the Success Criterion.: The word "mechanism" is used to allow authors to either make all links fully understandable out of context by default or to provide a way to make them this way. This is done because for some pages, making the links all unambiguous by themselves makes the pages easier for some users and harder for others. Providing the ability to make the links unambiguous (by them selves) or not provides both users with disabilities with the ability to use the page in the format that best meets their needs.: For example: A page listing 100 book titles along with links to download the books in HTML, PDF, DOC, TXT, MP3, or AAC might ordinarily be viewed as the title of the book as a link with the words "in HTML" after it. then the sentence "Also available in: " followed by a series of short links with text of "HTML", "PDF", "DOC", "TXT", "MP3", and "AAC". At Level 3, some users could opt to view the page this way - because they would find the page harder to understand or slower to use if the full title of the book were included in each of the links. Others could opt to view the page with the full title as part of each of the links so that each link was understandable in itself. Both the former and the latter groups could include people with visual or cognitive disabilities that used different techniques to browse or that had different types or severities of disability.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- ARIA8: Using aria-label for link purpose
	- G91: Providing link text that describes the purpose of a link
	- H30: Providing link text that describes the purpose of a link for anchor elements
	- H24: Providing text alternatives for the area elements of image maps: Allowing the user to choose short or long link text using one of the techniques below:: G189: Providing a control near the beginning of the Web page that changes the link text
	- SCR30: Using scripts to change the link text: Providing a supplemental description of the purpose of a link using one of the following techniques:: C7: Using CSS to hide a portion of the link text: Semantically indicating links using one of the following techniques:: PDF11: Providing links and link text using the Link annotation and the /Link structure element in PDF documents
	- PDF13: Providing replacement text using the /Alt entry for links in PDF documents
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: H2: Combining adjacent image and text links for the same resource
	- H33: Supplementing link text with the title attribute
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F84: Failure of Success Criterion 2.4.9 due to using a non-specific link such as "click here" or "more" without a mechanism to change the link text to specific text.
	- F89: Failure of Success Criteria 2.4.4, 2.4.9 and 4.1.2 due to not providing an accessible name for an image which is the only content in a link

- ARIA8: Using aria-label for link purpose: http://localhost:3000/techniques/aria/ARIA8
- G91: Providing link text that describes the purpose of a link: http://localhost:3000/techniques/general/G91
- H30: Providing link text that describes the purpose of a link for anchor elements: http://localhost:3000/techniques/html/H30
- H24: Providing text alternatives for the area elements of image maps: http://localhost:3000/techniques/html/H24
- G189: Providing a control near the beginning of the Web page that changes the link text: http://localhost:3000/techniques/general/G189
- SCR30: Using scripts to change the link text: http://localhost:3000/techniques/client-side-script/SCR30
- C7: Using CSS to hide a portion of the link text: http://localhost:3000/techniques/css/C7
- PDF11: Providing links and link text using the Link annotation and the /Link structure element in PDF documents: http://localhost:3000/techniques/pdf/PDF11
- PDF13: Providing replacement text using the /Alt entry for links in PDF documents: http://localhost:3000/techniques/pdf/PDF13
- H2: Combining adjacent image and text links for the same resource: http://localhost:3000/techniques/html/H2
- H33: Supplementing link text with the title attribute: http://localhost:3000/techniques/html/H33
- F84: Failure of Success Criterion 2.4.9 due to using a non-specific link such as "click here" or "more" without a mechanism to change the link text to specific text.: http://localhost:3000/techniques/failures/F84
- F89: Failure of Success Criteria 2.4.4, 2.4.9 and 4.1.2 due to not providing an accessible name for an image which is the only content in a link: http://localhost:3000/techniques/failures/F89



--------------------------------------------------

Section 52: section_headings
==================================================

In Brief
	- Goal
	- Users understand how content is organized in sections.
	- What to do
	- Where content is organized in sections, provide section headings.
	- Why it's important
	- People can orient themselves, especially those with cognitive or visual disabilities.

Success Criterion (SC): Section headings are used to organize the content.: Note 1: "Heading" is used in its general sense and includes titles and other ways to add a heading to different types of content.: Note 2: This success criterion covers sections within writing, not user interface components. User interface components are covered under Success Criterion 4.1.2.

Intent: The intent of this Success Criterion is to provide headings for sections of a Web page, when the page is organized into sections. For instance, long documents are often divided into a variety of chapters, chapters have subtopics, etc. When such sections exist, they need to have headings that introduce them. This clearly indicates the organization of the content, facilitates navigation within the content, and provides mental "handles" that aid in comprehension of the content. Other page elements may complement headings to improve presentation (e.g., horizontal rules and boxes), but visual presentation is not sufficient to identify document sections.: This provision is included at Level AAA because it cannot be applied to all types of content and it may not always be possible to insert headings. For example, when posting a pre-existing document to the Web, headings that an author did not include in the original document cannot be inserted. Or, a long letter would often cover different topics, but putting headings into a letter would be very strange. However, if a document can be broken up into sections with headings, it facilitates both understanding and navigation.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G141: Organizing a page using headings
	- H69: Providing heading elements at the beginning of each section of content

- G141: Organizing a page using headings: http://localhost:3000/techniques/general/G141
- H69: Providing heading elements at the beginning of each section of content: http://localhost:3000/techniques/html/H69



--------------------------------------------------

Section 53: focus_not_obscured_minimum
==================================================

In Brief
	- Goal
	- Keep the focused item visible.
	- What to do
	- Ensure when an item gets keyboard focus, it is at least partially visible.
	- Why it's important
	- People who can't use a mouse need to see what has keyboard focus.

Success Criterion (SC): When a user interface component receives keyboard focus, the component is not entirely hidden due to author-created content.: Note 1: Where content in a configurable interface can be repositioned by the user, then only the initial positions of user-movable content are considered for testing and conformance of this success criterion.: Note 2: Content opened by the user may obscure the component receiving focus. If the user can reveal the focused component without advancing the keyboard focus, the component with focus is not considered visually hidden due to author-created content.

Intent: The intent of this Success Criterion is to ensure that the item receiving keyboard focus is always partially visible in the user's viewport. For sighted people who rely on a keyboard (or on a device that operates through the keyboard interface, such as a switch or voice input), knowing the current point of focus is critical. The component with focus signals the interaction point on the page. Where users cannot see the item with focus, they may not know how to proceed, or may even think the system has become unresponsive.: In recognition of the complex responsive designs common today, this AA criterion allows for the component receiving focus to be partially obscured by other author-created content. A partly obscured component can still be very visible, although the more of it that is obscured, the less easy it is to see. For that reason, authors should attempt to design interactions to reduce the degree and frequency with which the item receiving focus is partly obscured. For best visibility, none of the component receiving focus should be obscured. This preferred outcome is covered by the AAA criterion Focus Not Obscured (Enhanced).: Typical types of content that can overlap focused items are sticky footers, sticky headers, and non-modal dialogs. As a user tabs through the page, these layers of content can obscure the item receiving focus, along with its focus indicator.: A notification implemented as sticky content, such as a cookie banner, will fail this Success Criterion if it entirely obscures a component receiving focus. Ways of passing include making the banner modal so the user has to dismiss the banner before navigating through the page, or using scroll padding so the banner does not overlap other content. Notifications that do not require user action could also meet this criterion by closing on loss of focus.: Another form of obscuring can occur where light boxes or other semi-opaque effects overlap the item with focus. While less than 100 percent opacity is not causing the component to be entirely obscured, such semi-opaque overlaps may cause a failure of 1.4.11 Non-text Contrast. When a focus indicator can be covered by a semi-opaque component, the ability of the focus indicator to pass 1.4.11 should be evaluated (and pass) while the focus indicator is under the semi-opaque component. The intention in both situations is that the component receiving focus should never be obscured to the point a user cannot tell which item has focus.: Note: This criterion evaluates the focused component, rather than the focus indicator. The component itself does not include the focus indicator when checking that "the component is not entirely hidden" - unless the focus indicator is inside the component, or focus is indicated by a change to the component itself. Although users benefit from both the component and the focus indicator (if external to the component) not being obscured when tracking the focus, for the purposes of this criterion only checking the component provides a clearer metric. However, if the focus indicator is obscured, it would likely fail 2.4.7 Focus Visible.: User-movable content: This SC contains a note regarding content that can be repositioned. If users can move content regions, then they can potentially position the movable content such that it obscures other content that may receive focus. In such a case, the author is only responsible for ensuring that the movable content in its initial position does not obscure the item receiving focus.: This note is intended to accommodate a common interaction in complex applications such as authoring tools, where the main editing region (also called a canvas) can be enhanced by displaying toolbars or other panels, which can be repositioned around the canvas. It is possible to design such toolbars so they do not obscure focus. Authors are encouraged to do so, as well as pursue techniques which ensure equitable keyboard use of such toolbars. However, in recognition of the complexities involved in responsive design as well as in supporting the ability to transform the text size and spacing of content, only the starting position of such movable panels is assessed.: User-opened content: This SC contains a note regarding content that is opened or disclosed by the user. One example of such content is a menu button opened by a user that opens a list of choices over pre-existing content on the screen. Such content can obscure other information on the screen, but it does not obscure an item receiving keyboard focus, because the new content doesn't stay open through a change of focus. However, authors may create user-opened content that is intentionally designed to persist until closed by the user, such as a chat window. Such persistent content has the potential to fail Focus Not Obscured (Minimum). Various types are described in this section. All can be designed so that they pass this Success Criterion.: This section only applies to content that the user actively discloses. Content pre-positioned by the author (such as a sticky footer), or content that appears without direct user initiation, such as system warnings, must not prevent the item receiving focus from being immediately visible in the viewport. Also, this note is not intended to apply to disclosures that are by convention non-persistent. As discussed in the following sub-section, an open dropdown that does not close when no longer focused is not following this convention.: Non-persistent opened information: A number of components on the web open (or disclose) additional content (on activation or on focus) intended for immediate user interaction or information. This new content is often on top of other content, obscuring it. Examples of such components are menu items, select element items, combobox lists (and other dropdown items), date picker calendars, and tooltips. The common trait of all these components is that they are not expected to persist after being acted on or once they are no longer the primary point of user interaction. Such non-persistent disclosures do not fail this SC since they do not obscure the item with focus. However, if an author allows such components to persist after the user has 1) activated one of the opened items or 2) moved the focus away from the triggering item and the additional content, it is at risk of failing this criterion by obscuring the item with focus.: User openable, persistent disclosures: Some disclosure patterns provide a mechanism for the user to open additional content that remains open until intentionally closed by the user. Accordions are a simple example of such a pattern. Chatbots and expandable side navigation are more complex examples. All of these patterns can be implemented so they are not at risk of failing this SC. Some possible approaches are:: When the additional content appears, it displaces existing content. An accordion is an example of this. When an accordion is opened, the disclosed content shifts existing content further down the page. Since the new content does not obscure existing content, it cannot obscure the item with focus.
	- When the additional content appears, existing content reflows. The popout sidebar on the WCAG standard is an example of this pattern. When the side menu is activated, it opens a new section of information along the left side of the page. The main content area is reduced horizontally to accommodate the new content, and the existing content reflows to fit in the thinner space. As a result, there is no overlapping content between the two sections; the item receiving focus, whether in the left navigation or in the main content, will not be obscured by the other section.
	- When the additional content is opened, it takes focus and the tab ring is constrained to the new content until it is dismissed. This modality is somewhat like a dialog, in that a user cannot navigate beyond the opened content by keyboard without dismissing it first (typically by pressing Esc). However, unlike in a modal dialog, in some implementations a pointer user may be able to interact with content outside the opened section without dismissing it. Since this pattern potentially creates an inequitable experience between keyboard and pointer users, it should be used cautiously. That said, it does prevent the opened content from obscuring the keyboard focus in the main content, and thus should pass this SC. This is described and demonstrated in a short video in the Knowbility article in the reference section, under the section heading Keep keyboard focus in the slide-out navigation until it's closed.
	- The disclosure expands into an area of the page containing no other content. Many pages are designed with wide margins, providing significant white space into which new content can be opened. Many chatbots and toast notifications are designed to 'slide up' into the right unpopulated side of a page. Where authors are careful to ensure content is not obscured at each breakpoint in a responsive design, no obscuring of other operable content need occur.
	- When focus leaves the additional content, the additional content is automatically hidden or collapsed, or the content can be hidden or collapsed by use of a dedicated keyboard command (for example, the Escape key.) This is very similar to patterns discussed previously under Non-persistent opened information. A distinguishing factor can be that the user's last point of interaction in the disclosure is preserved (it persists) even though it may be hidden until a user returns. Some trees and side navigation patterns behave this way.: In recognition of more complex interfaces and user needs there is a note: Content opened by the user may obscure the component receiving focus. If the user can bring the item with focus into view using a method without having to navigate back to the user-opened content to dismiss it, this criterion would be passed. For example, keyboard actions that may allow the item with focus to be revealed include:: using the Escape key to dismiss the obscuring content;
	- using keys to scroll the content in the viewport to reveal the item with focus;
	- issuing a key to move between overlays.: For example:: A user opens a chat interface, which is a popover non-modal dialog. This results in some content of the underlying page being fully obscured. The user navigates away from the chat interface by use of the tab key, focusing onto a link that has been fully obscured by the dialog. The user presses the Escape key to close the chat interface, which un-obscures the link.
	- A user expands a fixed-position page feedback component at the bottom of a Web page. They then use their keyboard to navigate to a link that's fully obscured by the expanded component and press the down arrow or space key on their keyboard to scroll the content on the page, un-obscuring the link.
	- A user opens a web-based multi-user authoring application. An overlay appears displaying a list of people who have contributed to the document. The user tabs through the list of contributors and activates one of them. The application displays a new overlay, which obscures the first one, that displays that person's recent contributions. The user presses the F6 key to toggle the stacking order of the two overlays.
	- Modal dialogs: A properly constructed modal dialog will always pass this SC. Even if it appears directly on top of an item with focus, the dialog takes focus on appearance, and thus the item receiving focus -- the dialog or one of its components -- is visible. A properly constructed modal maintains that focus and prevents interaction outside the modal until it is dismissed.: A dialog-like overlay that does not take focus on appearance and does not either constrain interaction to the overlay or dismiss itself on loss of focus (thus allowing focus to exit into the content behind it) will be at risk of failing this SC, where it is positioned such that it can obscure other focusable items.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- C43: Using CSS scroll-padding to un-obscure content
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F110: Failure of Success Criterion 2.4.11 Focus Not Obscured (Minimum) due to a sticky footer or header completely hiding focused elements

- C43: Using CSS scroll-padding to un-obscure content: http://localhost:3000/techniques/css/C43
- F110: Failure of Success Criterion 2.4.11 Focus Not Obscured (Minimum) due to a sticky footer or header completely hiding focused elements: http://localhost:3000/techniques/failures/F110



--------------------------------------------------

Section 54: focus_not_obscured_enhanced
==================================================

In Brief
	- Goal
	- Don't cover any part of the item with focus.
	- What to do
	- Ensure when an item gets keyboard focus, it is fully visible.
	- Why it's important
	- People who can't use a mouse need to see what has keyboard focus.

Success Criterion (SC): When a user interface component receives keyboard focus, no part of the component is hidden by author-created content.

Intent: The intent of this Success Criterion is to ensure that the item receiving keyboard focus is always visible in the user's viewport. For sighted people who rely on a keyboard (or on a device that operates through the keyboard interface, such as a switch or voice input), knowing the current point of focus is critical. The component with focus signals the interaction point on the page. Where users cannot see the item with focus, they may not know how to proceed, or may even think the system has become unresponsive.: Typical types of content that can overlap focused items are sticky footers, sticky headers, and non-modal dialogs. As a user tabs through the page, these layers of content can hide the item receiving focus, along with its focus indicator.: A notification implemented as sticky content, such as a cookie banner, will fail this Success Criterion if it partially covers a component receiving focus. Ways of passing include making the banner modal so the user has to dismiss the banner before navigating through the page, or using scroll padding so the banner does not overlap other content. Notifications that do not require user action could also meet this criterion by closing on loss of focus.: Another form of obscuring can occur where light boxes or other semi-opaque effects overlap the item with focus. This form of obscuring is not in scope for this Success Criterion. While less than 100 percent opacity is not causing the component to be visually hidden, such semi-opaque overlaps may cause a failure of 1.4.11 Non-text Contrast and/or 2.4.13 Focus Appearance. When a focus indicator can be covered by a semi-opaque component, the focus indicator should be assessed against 1.4.11 and 2.4.13. The intention in both situations is that the component receiving focus should never be obscured to the point a user cannot tell which item has focus.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- C43: Using CSS scroll-padding to un-obscure content
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: An interaction that causes content to appear over the component with keyboard focus, visually covering part of the focus indicator. This behavior might be encountered with advertising or promotional material meant to provide more information about a product as the user navigates through a catalogue.
	- A page has a sticky footer (attached to the bottom of the viewport). When tabbing down the page, a focused item is partially obscured by the footer because content in the viewport scrolls without sufficient scroll padding.

- C43: Using CSS scroll-padding to un-obscure content: http://localhost:3000/techniques/css/C43



--------------------------------------------------

Section 55: focus_appearance
==================================================

In Brief
	- Goal
	- Make it easier to spot the keyboard focus.
	- What to do
	- Use a focus indicator of sufficient size and contrast.
	- Why it's important
	- Many people can't see small changes in visual appearance, including older people.

Success Criterion (SC): When the keyboard focus indicator is visible, an area of the focus indicator meets all the following:: is at least as large as the area of a 2 CSS pixel thick perimeter of the unfocused component or sub-component, and
	- has a contrast ratio of at least 3:1 between the same pixels in the focused and unfocused states.: Exceptions:: The focus indicator is determined by the user agent and cannot be adjusted by the author, or
	- The focus indicator and the indicator's background color are not modified by the author.: Note 1: What is perceived as the user interface component or sub-component (to determine the perimeter) depends on its visual presentation. The visual presentation includes the component's visible content, border, and component-specific background. It does not include shadow and glow effects outside the component's content, background, or border.: Note 2: Examples of sub-components that may receive a focus indicator are menu items in an opened drop-down menu, or focusable cells in a grid.: Note 3: Contrast calculations can be based on colors defined within the technology (such as HTML, CSS, and SVG). Pixels modified by user agent resolution enhancements and anti-aliasing can be ignored.

Intent: The purpose of this Success Criterion is to ensure a keyboard focus indicator is clearly visible and discernible. Focus Appearance is closely related to 2.4.7 Focus Visible and 1.4.11 Non-text Contrast. Focus Visible requires that a visible focus indicator exists while a component has keyboard focus; Focus Appearance defines a minimum level of visibility. Where Non-text Contrast requires a component to have adequate contrast against the background in each of its states, Focus Appearance requires sufficient contrast for the focus indicator itself.: For sighted people with mobility impairments who use a keyboard or a device that utilizes the keyboard interface (such as a switch or voice input), knowing the current point of focus is very important. Visible focus must also meet the needs of users with low vision, who may also rely on the keyboard.: A keyboard focus indicator can take different forms. This Success Criterion encourages the use of a solid outline around the focused user interface component, but allows other types of indicators that are at least as large.: This Understanding document will elaborate on the minimum area requirement, color contrast requirements, and finally list some user agent exceptions.: Minimum area: The first part of the Success Criterion specifies a minimum area for the focus indicator:: is at least as large as the area of a 2 CSS pixel thick perimeter of the unfocused component or sub-component: This only specifies a minimum area for the focus indicator. It does not require that the focus indicator literally be a 2 CSS pixel thick outline, only that the indicator be at least that large.: However, the simplest way to meet the size requirement is to use a focus indicator which is a solid 2 CSS pixel thick perimeter.: Note: A CSS pixel is what developers use in CSS declarations like “width: 200px”. It is device-independent and not to be confused with device pixels which vary depending on the physical pixel density.
	- The rest of this document notates CSS pixels as “px”.: Using a solid outline: The easiest and most common way to meet this requirement is to use a solid outline around the component. The outline must be at least 2px thick. The following illustration shows a minimally thick focus indicator, where a 2px thick band of white pixels making up the page background around an example button have been altered to black.: Figure 1: Passes: The focus indicator is a solid 2px thick outline.: For non-rectangular components, the "perimeter" definition allows authors to use either of the following types of outline:: a line which solidly encloses a shape, or
	- a line which solidly encloses the minimum bounding box of a shape: For example, a star-shaped button may use either a focus indicator that follows the shape of the star or a focus indicator that follows the bounding box of the star. In the following examples, the same three stars have already been selected, and focus is on the third star. The first example uses a focus indicator which matches the star shape of the focused star. The second uses a rectangular indicator.: Figure 2: Passes: a solid outline indicator surrounds the third of five stars.: Figure 3: Passes: a solidly bound focus rectangle encloses the third of five stars.: Offsetting indicators slightly from the focused component, as in the examples above, is not required to meet the minimum area requirement of the success criterion, but it can help make indicators more visible. In CSS, the outline and outline-offset properties are commonly used to achieve this.: The smallest possible 2 CSS pixel thick indicator that is still a "perimeter" is a solid line that appears inside the component against the component's outer edge, for example by using a CSS border property. Indicators that are inset further within the component (not directly against the component's outer edge) need to be thicker than 2 CSS pixels to meet the minimum size requirement.: Figure 4: All four of these example focus indicators are 2px solid lines. The "outset", "outline", and "border" indicators pass. The "inset" indicator does not meet the minimum area requirement and fails; it would need to be at least 3px thick to pass.: Note that different Non-text Contrast requirements may apply depending on whether the focus indicator is offset from, inset into, or against the edge of the component. See the Relationship with Non-text Contrast section below.: Other indicator shapes: This Success Criterion does not require that focus indicators be solid outlines. Other shapes may be used so long as they meet the minimum area requirement.: The minimum area of the focus indicator for a control is the area of a 2 CSS pixel thick perimeter of the control (or its minimum bounding box) in the control's unfocused state. For example, if a control is a rectangle 90px wide and 30px tall, the area of a 2 CSS pixel thick perimeter is difference between the areas of:: A 92px by 32px rectangle (1px larger on all sides), and
	- A 88px by 28px rectangle (1px smaller on all sides): This results in a minimum area of (92px * 32px) - (88px * 28px) = 480px2.: Some general formulas for 2 CSS pixel thick perimeters of common shapes are:: Rectangle with width w and height h
	- 4h + 4w
	- Circle with radius r
	- 4𝜋r
	- Rounded rectangle with width w, height h, and border radius r
	- 4h + 4w - (16 - 4𝜋)r: Note: If you need to use complex mathematics to work out if a focus indicator is large enough, it is probably a sign that you should use a larger indicator instead. The bigger the visible change when an item receives focus, the easier it is for someone to see.: The following 2 examples use a 90px wide by 30px tall button, with a minimum area requirement of 480px2:: Figure 5: Passes: the inner outline is inset slightly from the outer edge of the component, but compensates for this by being 3px thick. It has an area of 612px2, which exceeds the 480px2 minimum.: Figure 6: Passes: the indicator rectangles on either side of the focused button are each 9px wide by 28px tall. In total, they are 504px2, which just barely meets the 480px2 minimum.: Note: Prefer using focus indicator techniques that scale with both the width and height of the focused control. Otherwise, if controls change size across different variations of a page (for example, in a responsive design), the indicator might meet the area requirement in some variations but not others. For example, in the above figure, if the width of the two highlight rectangles did not scale as the button grew wider, it would stop meeting the minimum area requirement if the button needed to grow any wider to accomodate a longer button label.: Another way of achieving the area requirement is to alter the appearance of the entire component, for instance by changing its color – provided that the new color has a contrast ratio of at least 3:1 against the original color. This can be effective in a set of closely placed buttons. The following example demonstrates this with 5 rating stars; the center star is filled in with a darker color to indicate focus. However, it is much more difficult to detect such a focus indicator when components are not near each other and so cannot be easily compared. For users using magnification, even components relatively close together may be difficult to compare, so it is not considered a best practice.: Figure 7: Passes: a color change applies to the whole third star to indicate focus.: Inline links: If an inline link is broken over multiple lines, some methods of creating a focus indicator create different results by browsers. CSS outline separately surrounds each part of a link that breaks across multiple lines. It is by far the most common CSS technique for focus indication, and produces a result that satisfies the minimum bounding box definition since each part is solidly bound. CSS border will split the perimeter across the parts of the link, which results in an unenclosed border for each line of the link. The minimum bounding box definition states that link focus can be assessed as if the link was all on one line, so a 2px thick border is also considered to meet the minimum area requirement. Therefore, where the contrast requirements are met, each of these methods can produce a sufficient focus indicator.: Figure 8: Passes: the CSS outline property solidly bounds each part of the link completely, so it meets the definition of a perimeter.: Figure 9: Passes: Although the CSS border on a multi-line link does not enclose the separate parts of the link, the minimum bounding box definition allows it to be assessed as if it was on a single line, so it also qualifies as a perimeter.: Change of contrast: The second part of the Success Criterion's indicator requirements states that an area of the indicator:: has a contrast ratio of at least 3:1 between the same pixels in the focused and unfocused states: This requirement measures the change of contrast between the same pixels in different states. This is different from the Text Contrast and Non-text Contrast Success Criteria, which measure the contrast between different adjacent pixels in a single state at a time.: 3:1 is the minimum allowable change-of-contrast ratio, but the greater the change of contrast between states, the easier it is for users to see the focus indicator. Authors are encouraged to make the change-of-contrast ratio as great as possible.: The following illustration shows a minimally contrasting focus indicator, where some of the white pixels making up the page background have been altered to a mid-grey that has a 3:1 contrast ratio with the original white. Authors are encouraged to exceed the minimum focus appearance. For instance, the dark blue lines in figures 2 and 3 are much more visible.: Figure 10: Passes: Two buttons in the shape of a star, with the second surrounded by a focus indicator whose pixels contrast 3:1 between focused (light grey) and unfocused (white) states.: When a component changes to include a focus indicator, that change can be measured as a change of color contrast. For example, if a yellow outline is added to a button on a blue background, the change of color is from blue to yellow. This change can be measured whether the focus indicator is on the background around the component, or the background within the component.: Figure 11: Passes: adding a yellow outline to a link is a change of color from blue to yellow. That change has a contrast ratio of 12:1.: If a control receiving focus changes its background (fill color) to a color that contrasts less than 3:1 with the original background, that would not pass the change of contrast.: Figure 12: Fails: the second link has a dark-grey (#555) which fails this Success Criterion because the change from black-background to dark-grey background does not meet 3:1.: If the background change is sufficient, it is a method of passing the criterion.: Figure 13: Passes: the second link has a white background (#fff) which passes this Success Criterion because the change from black-background to white-background meets 3:1.: Partially contrasting indicators: It is not necessary for the entire focus indicator to have a 3:1 change of contrast. It is sufficient for just a part of the indicator to meet the change of contrast requirement, so long as the contrasting part of the indicator meets the minimum area requirement.: Figure 14: Passes: The black part of the indicator meets 3:1 contrast with the white background, but the gray part does not. The black part is 2px thick, so it meets the minimum area requirement on its own and the gray part can be ignored.: Figure 15: Fails: The indicator as a whole is 2px thick, but the part of it that has sufficient change-of-contrast is only 1px thick. The part of the indicator with sufficient change-of-contrast does not meet the minimum area requirement.: When calculating whether a focus indicator meets the minimum area requirement, only the part of the indicator which meets the change-of-contrast requirement should be included in the calculation.: Gradients: If a focus indicator has a gradient, the principle is to measure the contrast of the changed area, and ignore any part of the gradient which has less than a 3:1 change-of-contrast ratio.: Figure 16: When a gradient is used on a focus indicator, the measure of surface area should only include the area that has changed enough to meet the 3:1 contrast ratio.: If you eliminate the area which has less than 3:1 change-of-contrast, you can calculate the area of the remaining parts of the indicator to determine whether the indicator meets the minimum area requirement.: Figure 17: Passes: the same focused button with the non-contrasting areas removed. The contrasting area is 6px thick along most of the bottom edge and 3-4px thick on the left and right edges, which is enough to meet the minimum area requirement.: Note: Some of the examples in this document are screen-captured images of elements. Due to loss of resolution in these images, the actual pixel color may not match the original. As such, they are intended to be used for illustrative purposes, and should not be inspected on a pixel-by-pixel basis for sufficient contrast.: Some designs have pages with a non-solid background image covering the whole (or part) of the page or make use of parallax scrolling effects which result in a near-infinite number of color combinations if a page is scrolled and/or changes are made to the viewport size.: If the contrast of background colors that change are close enough to need to be tested for each combination then they would likely not meet the user need of people with low vision in certain scroll combinations and would likely fail in certain combinations as well. In these cases it would be an easy solution to use a C40: Creating a two-color focus indicator to ensure sufficient contrast with all components or some other mechanism to indicate focus such as a solid box with a border to guarantee there is sufficient contrast across variations of background images or background gradients.: It is possible to use visual patterns such as strips switching places to disguise a change of focus indicator. However, this is not considered a visible indicator.: Relationship with Non-text Contrast: Focus indicators are visual information required to identify a state of a user interface component. That means that they are subject to 1.4.11 Non-text Contrast, in addition to 2.4.13 Focus Appearance.: In combination with 2.4.7 Focus Visible, 1.4.11 Non-text Contrast requires that the visual focus indicator for a component must have sufficient contrast against the adjacent colors when the component is focused, except where the appearance of the component is determined by the user agent and not modified by the author.: The difference between the contrast requirements in Focus Appearance and Non-text Contrast is:: Focus Appearance requires that focus indicators have a change of contrast between focused and non-focused states.
	- Non-text Contrast requires that focus indicators have adjacent contrast between the indicator (in the focused state) and adjacent non-indicator colors.
	- Figure 18: This example passes Focus Appearance but fails Non-text Contrast; there is insufficient adjacent contrast between the focus indicator and the adjacent colors.: Figure 19: This example passes Non-text Contrast but fails Focus Appearance; there is insufficient change of contrast between the focused and unfocused states.: Additionally, Non-text Contrast does not establish any size requirement and has slightly different rules for when exceptions are allowed.: See the Relationship with Focus Visible section of Understanding 1.4.11 Non-text Contrast for more details and examples.: Component keyboard focus: The preamble to this Success Criterion is "When a user interface component has keyboard focus..." The keyboard focus is the point of interaction for someone using a keyboard. For environments with a keyboard-operable interface, the keyboard focus can be moved around the interface in order to interact with different components. Whichever component is being interacted with has focus.: WCAG defines user interface component as "a part of the content that is perceived by users as a single control for a distinct function." Because different users may perceive controls differently, there is a potential for some variation when interpreting what constitutes both a single control and a distinct function. This is particularly the case when something visually presents in a way that may differ from how it is programmatically created under the covers. Where there is not a native HTML component upon which to base designs, there can be great variations in how the components and their focus indicators are portrayed. Further, some components have sub-components that can take focus, such as the menu items on a menu.: Nonetheless, consistent results from different testers were obtained for this Success Criterion by using the focus indicator itself as the gauge of what constitutes the component being interacted with. For complex components, the three typical focus indicators are as follows:: Focus indicator around only the whole component
	- Focus indicators around both the component and subcomponent
	- Focus indicator around only the subcomponent: Each of these will be discussed, using a tablist as a familiar complex component.: Focus indicator around only the whole component
	- Figure 20: A tablist with a focus indicator around only the whole.: When the focus indicator is shown only around the whole tablist, the user is guided to considering the tablist as a single user component. The tab items within it are visually distinguished between selected and unselected states (and visual indicators of selection state must meet the criteria given in 1.4.11 Non-text Contrast).: Having a focus indicator only around the whole is possible where there is no need to have a selected sub-component while another sub-component has focus. For a tablist which synchronizes its tab panel content with whatever tab is active, only one tab item can be selected at a time, and since whatever tab is selected is considered active, a separate focus indicator is redundant.: Result: the group focus indicator must meet the requirements of this Success Criterion.: A radio button group and a star-rating widget, which each use only a whole-component focus indicator, provide working examples of different complex components that pass the primary requirements of this Success Criterion. In the star ratings example, users can increment the rating by 1/2 stars. Not only is a focus indicator for each 1/2 star unnecessary, but it would actually be difficult to achieve without making the interaction confusing.: Focus indicators around both the component and subcomponent: 
	- Figure 21: The same tablist in two states. In the first, focus is around both the tablist and the currently selected tab; in the second, focus is around both the tablist and an unselected tab.: For a tablist which does not keep its tab panel content synchronized with whatever tab is selected, there needs to be a focus indicator for the tab item subcomponent. This is because the tab item with focus may be different than the selected item.: The user can navigate to the tablist, which in this implementation has a focus rectangle around the whole tablist as well as one around a tab item (conventionally the item that is currently selected). The focus around the whole is helpful in cueing a keyboard user that this is a complex component that has its own interaction. The user can then move focus between the unselected and selected tab items -- each of which in turn has its own focus indicator -- before activating one, which then makes it selected as well as focused, and updates the tab panel to match.: In this scenario, either the group focus indicator or the sub-component indicator must meet the requirements of this Success Criterion. To avoid being overly prescriptive, the Success Criterion allows authors to choose which makes the most sense. Generally, if a sub-component focus is necessary, it should be assessed instead of the group indicator.: Result: the focus indicator for the tab item meets the requirements of this Success Criterion. The tablist focus indicator does not need to meet the requirements.: A slider to pick colors provides a working example of a different complex component that predominantly shows focus for the subcomponent. In this case, the thumb slider sub-component has a focus indicator of sufficient size and contrast to pass the sufficient area calculation. There is also a subtle focus around the whole slider component, but it does not need to be assessed to pass this Success Criterion.: Focus indicator around only the subcomponent
	- Figure 22: The same tabs as in the prior set, but the focus indicator around the whole is removed.: The same unsynchronized tablist can also be implemented as something which only shows focus on the tab items and not on the whole. The behaviour is the same as in the prior example, but there is never a focus indicator placed around the tablist. This interaction is acceptable, but it is not best practice since it demands more understanding from the user with less information. For example, some visual cues for the tablist and tab items (and tab panel) may not be clear. As well, keyboard users may not initially understand the expected keyboard interaction.: Result: the focus indicator for the tab item must meet the requirements of this Success Criterion, judging focus with both selected and unselected tab items.: A functional example of sub-component-only tab focus has an indicator that is large enough (at least four times the shortest side) with sufficient contrast to pass the focus area language of this Success Criterion.: Where something with focus is not a user interface component: Some pages contain very large editing regions, such as web implementations of word processors and code editors. Unlike a textarea element, which is a user interface component, these large editing regions do not typically meet the definition of user interface components; they are not "perceived by users as a single control for a distinct function." Providing focus indicators around such editing regions may still be beneficial to some; however, where the region is not perceived as a single control, it is not covered by this Success Criterion. The web page will still need to provide a insertion point (caret indicator) in such editing regions in order to meet the requirements of 2.4.7 Focus Visible.: Some non-operable elements can take focus (such as a heading element that is the target of a skip link). However, the preamble of this Success Criterion refers to user interface components; it is only when the element with focus is operable by keyboard that this Success Criterion applies.: Exceptions: There are two situations where the focus appearance does not need to be assessed:: the focus indicator cannot be adjusted by the author
	- the author has not modified the effects of the user agent default
	- First exception: the focus indicator cannot be adjusted by the author: The focus indicator is determined by the user agent and cannot be adjusted by the author: Some components or technologies may not allow the author to adjust the focus indicator. This is the case with HTML select elements (both single and multi-select), where the visual treatments for selection and focus cannot be adjusted by the author. In this case the Success Criterion does not apply.: Figure 23: Passes: The user agent's default select element presentation cannot be modified by the author, so it passes regardless of the quality of the focus indicator: Second exception: the default indicator and background are not modified: The focus indicator and the indicator's background color are not modified by the author: If the focus indicator and the background behind the focus indicator are not modified by the author, the Success Criterion does not apply.: The intent of this exception is to reduce burden on authors by allowing them to rely on the default indicators provided by user agents (browsers). If all user agents provided good focus indicators, authors would be able to concentrate efforts on other accessibility considerations. Unfortunately, browser default focus indicators vary by component, browser, and across devices and operating systems, and the default focus indicators in some browsers can be difficult to see (such as a 1px dotted outline). For this reason, most authors override browser defaults in order to overcome these deficiencies and create a more uniform user experience, regardless of browser.: Some browser makers are improving their default focus indicators to make them more visible. As more browsers adopt defaults that meet the primary bullets of this Success Criterion, authors will be able to achieve improved focus indicators without customization.: Modifying the focus indicator background: Browser default focus indicators can be made more difficult to see if the author modifies the pixels directly adjacent to the indicator (commonly referred to as its background), such as by positioning a component on top of an image or gradient background, or altering the page's default white background color, for instance using a blue background in combination with a browser's blue default indicator. For this reason, where the author alters the pixels directly adjacent to the default focus indicator, the user agent exception does not apply, and the author will need to verify they meet the size and contrast requirements of this Success Criterion.: Note: Altering the body element's background-color attribute is one way of altering the pixels directly adjacent to the indicator in most implementations. However, specifying a value of white (#FFFFFF) does not nullify this exception since, as established in the third note of the contrast ratio definition, the default ("unspecified") color is assumed to be white.: As well, if the browser provides an indicator within a component by default, then authors can potentially reduce the visibility by changing the component color (which in such a scenario is the background color for the focus indicator). For example, if the default indicator on a button uses a colored inner border, authors can negatively affect the focus appearance by making the button or its unfocused border color a similar-luminosity color. For this reason, this user agent exception can only be met if the author both does not modify the default focus indicator and does not modify its background.: Figure 24: Fails: The middle button is focused using a browser's default focus indicator, but it is very difficult to tell which button is focused because the custom blue border on the unfocused button uses a similar color.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G195: Using an author-supplied, visible focus indicator
	- C40: Creating a two-color focus indicator to ensure sufficient contrast with all components
	- C41: Creating a strong focus indicator within the component
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F55: Failure of Success Criteria 2.1.1, 2.4.7, 2.4.13, and 3.2.1 due to using script to remove focus when focus is received
	- F78: Failure of Success Criterion 1.4.11, 2.4.7 and 2.4.13 due to styling element outlines and borders in a way that removes or renders non-visible the visual focus indicator

- G195: Using an author-supplied, visible focus indicator: http://localhost:3000/techniques/general/G195
- C40: Creating a two-color focus indicator to ensure sufficient contrast with all components: http://localhost:3000/techniques/css/C40
- C41: Creating a strong focus indicator within the component: http://localhost:3000/techniques/css/C41
- F55: Failure of Success Criteria 2.1.1, 2.4.7, 2.4.13, and 3.2.1 due to using script to remove focus when focus is received: http://localhost:3000/techniques/failures/F55
- F78: Failure of Success Criterion 1.4.11, 2.4.7 and 2.4.13 due to styling element outlines and borders in a way that removes or renders non-visible the visual focus indicator: http://localhost:3000/techniques/failures/F78



--------------------------------------------------

Section 56: pointer_gestures
==================================================

In Brief
	- Goal
	- Let users operate touchscreens with one finger and reduced gestures.
	- What to do
	- Provide single-point operation for all functions.
	- Why it's important
	- Not everyone can perform complex and multi-touch gestures.

Success Criterion (SC): All functionality that uses multipoint or path-based gestures for operation can be operated with a single pointer without a path-based gesture, unless a multipoint or path-based gesture is essential.: Note: This requirement applies to web content that interprets pointer actions (i.e., this does not apply to actions that are required to operate the user agent or assistive technology).

Intent: The intent of this Success Criterion is to ensure that content can be controlled with a range of pointing devices, abilities, and assistive technologies. Some people cannot perform gestures in a precise manner, or they may use a specialized or adapted input device such as a head pointer, eye-gaze system, or speech-controlled mouse emulator. Some pointing methods lack the capability or accuracy to perform multipoint or path-based gestures.: A path-based gesture involves an interaction where not just the endpoints matter, but how the pointer moves between these points.: If the gesture is only recognised if the user moves in a (mostly) straight line from the start point to the end point, it is an example of a path-based gesture.: Figure 1: A path-based gesture where pointer movement is only allowed in a straight line from the start-point to the end-point. If the user strays from the straight directional path, the gesture is not recognised, has no effect, or is aborted.: If going through an intermediate point (usually near the start of the gesture) affects its meaning, then it is a path-based gesture. The user engages a pointer (starting point), carries out a movement that goes through at least one intermediate-point before disengaging the pointer (end point). The intermediate point defines the gesture as requiring a specific path, even if the complete path is not defined.: Figure 2: A path-based gesture involves starting a pointer movement that goes through at least one intermediate point before the end-point. The end-point may be a continuation, or allow for various movements.: Examples of path-based gestures include swiping, sliders and carousels dependent on the direction of interaction, and other gestures which trace a prescribed path such as drawing a specific shape. Such paths may be drawn with a finger or stylus on a touchscreen, graphics tablet, or trackpad, or with a mouse, joystick, or similar pointer device.: The difference between Pointer Gestures and Dragging: Dragging is a movement where the user picks up an object with a pointer (such as mouse cursor or a finger) and moves it to some other position. This movement from start point to end point does not require the user to follow any particular path or direction. Dragging is therefore not path-based. In contrast, a path-based pointer gesture requires the traversal of an intermediate point, which is a technical way of expressing that the directionality and possibly speed of the gesture communicates a particular command to the system. New in WCAG 2.2: Dragging motions are covered in Success Criterion 2.5.7: Dragging Movements.: Figure 3: A free-form gesture does not require any particular path before the end-point, only the start and (optionally) the end point matter. This is not path-based: Challenges for people with disabilities: Note: Any movement of a pointer could be difficult or impossible to use for someone who cannot perform precise movements, therefore alternative forms of interaction are always recommended. This success criterion is scoped to path-based gestures as it may be difficult or impossible to provide an alternative for free-form gestures.: Examples of multipoint gestures include a two-finger pinch zoom, a split tap where one finger rests on the screen and a second finger taps, or a two- or three-finger tap or swipe. Users may find it difficult or impossible to accomplish these if they type and point with a single finger or stick.: Authors must ensure that their content can be operated without multipoint or path-based gestures. Multipoint or path-based gestures can be used so long as the functionality can also be operated by another method, such as a tap, click, double tap, double click, long press, or click & hold.: This Success Criterion applies to gestures in the author-provided content, not gestures defined by the operating system, user agent, or assistive technology. Examples of operating system gestures would be swiping down to see system notifications and gestures for built-in assistive technologies (AT). Examples of user agent-implemented gestures would be horizontal swiping implemented by browsers for navigating within the page history, or vertical swiping to scroll page content.: There are times when a component requires a path-based gesture for touch screen devices but not with a mouse. Taking an example of a generic slider:: Using a mouse: If the user clicks on the thumb control of the slider and moves vertically, the slider will respond by moving to the right or left, even if the movement is mostly upwards. There will be no page scrolling as a result of the vertical movement as long as they drag with focus on the slider. Therefore, the slider does not require a path-based gesture with mouse pointer.
	- Using a touch-screen: If the user puts their finger on the thumb control of the slider and moves upwards more than sideways, the slider may not respond because the browser takes control of the swipe and interprets it as a scroll, and will move the page up and down. Moving left or right on the slider thumb engages the slider and then the user can vary their vertical movement. This implementation has the 3-point requirement to work with a finger on a touch screen device so is a path-based gesture.: As touch screen devices can apply default gestures it is important to test with them if you are unsure whether a particular component does require a path-based gesture.: Browsers on a touch screen device generally provide some default gestures that impact whether a path-based gesture is needed. For example, a web browser on a touch-screen devices might detect a vertical gesture and scroll the page. If a user places their finger on a slider thumb and moves up (to scroll down) that might not activate the slider (depending on implementation). If the user moves horizontally first then the slider could capture that gesture and ignore vertical movement, resulting in a path-based gesture. If you include touch-screen devices as accessibility supported then these types of interaction need testing with a touch screen as using a mouse in a similar way would not trigger the same browser behavior.: This Success Criterion does not require all functionality to be available through pointing devices, but if it is available to pointer devices then it should not require path-based gestures. While content authors generally need to provide keyboard commands or other non-pointer mechanisms that perform actions equivalent to complex gestures (see Success Criterion 2.1.1 Keyboard), this is not sufficient to conform to this Success Criterion. That is because some users rely entirely on pointing devices, or find simple pointer inputs much easier to perform and understand than alternatives. For example, a user relying on a head-pointer would find clicking a control to be much more convenient than activating an on-screen keyboard to emulate a keyboard shortcut, and a person who has difficulty memorizing a series of keys (or gestures) may find it much easier to simply click on a labeled control. Therefore, if one or more pointer-based mechanisms are supported, then their benefits should be afforded to users through simple, single-point actions alone.: Single pointer operations include taps and clicks, double-taps and double-clicks, long presses, swiping, dragging, and path-based gestures. Gestures such as "pinch to zoom" or two-finger swipes are multipoint gestures, as they require two or more pointer inputs - in this case, two fingers on a touchscreen.: An exception is made for functionality that is inherently and necessarily based on complex paths or multipoint gestures. For example, entering your signature may be inherently path-based (although acknowledging something or confirming your identity need not be).: This Success Criterion does not apply to gestures that involve dragging in any direction because only the start and end points matter in a dragging operation. However, such gestures do require fine motor control. Authors are encouraged to provide non-dragging methods, for instance, a drag and drop operation could also be achieved by selecting an item (with a tap or keyboard interaction) and then selecting its destination as a second step.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G215: Providing controls to achieve the same result as path based or multipoint gestures
	- G216: Providing single point activation for a control slider
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F105: Failure of Success Criterion 2.5.1 due to providing functionality via a path-based gesture without simple pointer alternative

- G215: Providing controls to achieve the same result as path based or multipoint gestures: http://localhost:3000/techniques/general/G215
- G216: Providing single point activation for a control slider: http://localhost:3000/techniques/general/G216
- F105: Failure of Success Criterion 2.5.1 due to providing functionality via a path-based gesture without simple pointer alternative: http://localhost:3000/techniques/failures/F105



--------------------------------------------------

Section 57: pointer_cancellation
==================================================

In Brief
	- Goal
	- Reduce accidental activation of controls by mouse or touch.
	- What to do
	- Make pointer cancellation predictable and consistent.
	- Why it's important
	- Make it easier for anyone to recover from something they didn’t mean to do.

Success Criterion (SC): For functionality that can be operated using a single pointer, at least one of the following is true:: No Down-Event
	- The down-event of the pointer is not used to execute any part of the function;
	- Abort or Undo
	- Completion of the function is on the up-event, and a mechanism is available to abort the function before completion or to undo the function after completion;
	- Up Reversal
	- The up-event reverses any outcome of the preceding down-event;
	- Essential
	- Completing the function on the down-event is essential.: Note 1: Functions that emulate a keyboard or numeric keypad key press are considered essential.: Note 2: This requirement applies to web content that interprets pointer actions (i.e., this does not apply to actions that are required to operate the user agent or assistive technology).

Intent: The intent of this success criterion is to make it easier for users to prevent accidental or erroneous pointer input. People with various disabilities can inadvertently initiate touch or mouse events with unwanted results. Each of the following subsections roughly aligns with the bullets of this Success Criterion, and outlines a means of allowing users to cancel pointer operations.: Up-Event activation or completion: The most accessible way to incorporate pointer cancellation is to make activation occur on the up-event.: Up-event activation refers to the activation of a target when the pointer is released. In a touchscreen interaction, when the finger touches a target, the up-event activation only occurs when the finger is lifted while still being within the target boundary. Similarly in mouse interaction, the up-event occurs when the mouse button is released while the cursor is still within the boundary of the initial target set when the mouse button was pressed.: Authors can reduce the problem of users inadvertently triggering an action by using generic platform activation/click events that activate functionality on the up-event. For example, the click event in JavaScript triggers on release of the primary mouse button, and is an example of an implicit up-event. Despite its name, the click event is device-independent and also works for touch and keyboard interaction.: The preference for up-events is implicit in the Success Criterion wording of the first bullet: The down-event of the pointer is not used to execute any part of the function. Authors meet the first bullet by using only the up-event.: Up-Event Abort or Undo: Where the interaction is equivalent to a simple "click", up-event activation has a built-in ability to cancel. There is a distinction between when someone touches a screen and when they remove their finger. Similarly, in mouse interaction, there is a difference between pressing and releasing the mouse button. When activation occurs only as the pointer is released, users have the opportunity to Abort (cancel) the activation. Users who have difficulty accurately using a mouse or touchscreen benefit greatly from this basic behaviour. They normally receive visual feedback when an item is pressed. If they discover they have selected the wrong item, they can cancel the action by moving their pointer or finger away from the target before releasing.: For more complex interactions, such as drag and drop, the down- and up-events may initiate and end a series of actions to complete a process. For example, with drag and drop, the item may be:: selected with a press (down-event),
	- moved to a new location, while still being depressed, and
	- released (up-event) to conclude the drop action.: In such a complex action, the need for an Abort or Undo function increases. Designers may elect to confirm the move through something like a confirmation dialog or an undo button, giving the user the ability to Undo the process just completed. Alternatively, the ability to Abort the action can be achieved if, before completing step 3, the user returns the selected item to its original location and concludes the process there. If other parts of the screen disallow a move, the user can conclude the drag and drop there, effectively nullifying the operation.: Up Reversal: In other interactions, the down-event may trigger a behaviour which can be reversed when the up-event concludes. Examples of this include press-and-hold actions such as where a transient popup appears (or a video plays) when the user presses on an object (down-event), but the popup (or video) disappears as soon as the user releases the pointer (up-event). Since the up-event reverses the preceding down event, the user is returned to their prior point, and has effectively cancelled the operation.: Down-Event: Completing the function on the down-event is only permitted when it is essential that the up-event not be used.: The most prevalent essential down-event activation occurs in keyboard emulation. On a physical keyboard, keys by default activate on the down-event -- a letter appears when the key is pressed. If a software keyboard emulator tried to override this expected behaviour by making letters appear when the key is released, the behaviour would be unexpected and would adversely affect expected interaction.: Note that a keyboard has a built-in Backspace or Delete button, which effectively provides an Undo option. Undo is not a requirement of the down-event Essential exception; however, providing an easy way for users to undo any action is a recommended practice (and may be a functional necessity), even where it is not a requirement of this Success Criterion.: Other examples where the timing of an activation is essential and requires the down-event would be:: An activity that emulates a physical on-press trigger, such as when playing an on-screen piano keyboard. Activation on the up-event would significantly alter the desired behaviour.
	- A program for shooting skeets where waiting for the "up" event would invalidate the precise timing necessary for the activation.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G210: Ensuring that drag-and-drop actions can be cancelled
	- G212: Using native controls to ensure functionality is triggered on the up-event.
	- Touch events are only triggered when touch is removed from a control (Potential future technique)
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F101: Failure of Success Criterion 2.5.2 due to activating a control on the down-event

- G210: Ensuring that drag-and-drop actions can be cancelled: http://localhost:3000/techniques/general/G210
- G212: Using native controls to ensure functionality is triggered on the up-event.: http://localhost:3000/techniques/general/G212
- F101: Failure of Success Criterion 2.5.2 due to activating a control on the down-event: http://localhost:3000/techniques/failures/F101



--------------------------------------------------

Section 58: label_in_name
==================================================

In Brief
	- Goal
	- The visual label for controls is a trigger for speech activation.
	- What to do
	- Where practical, make the control’s text label and name match.
	- Why it's important
	- People who operate with voice interaction use the visible labels in their commands.

Success Criterion (SC): For user interface components with labels that include text or images of text, the name contains the text that is presented visually.: Note: A best practice is to have the text of the label at the start of the name.

Intent: The intent of this Success Criterion is to ensure that the words which visually label a component are also the words associated with the component programmatically. This helps ensure that people with disabilities can rely on visible labels as a means to interact with the components.: Most controls are accompanied by a visible text label. Those same controls have a programmatic name, also known as the accessible name. Users typically have a much better experience if the words and characters in the visible label of a control match or are contained within the accessible name. When these match, speech-input users (i.e., users of speech recognition applications) can navigate by speaking the visible text labels of components, such as menus, links, and buttons, that appear on the screen. Sighted users who use text-to-speech (e.g., screen readers) will also have a better experience if the text they hear matches the text they see on the screen.: Note that where a visible text label does not exist for a component, this Success Criterion does not apply to that component.: Where text labels exist and are properly linked to the user interface components through established authoring practices, the label and name will normally match. When they don't match, speech-input users who attempt to use the visible text label as a means of navigation or selection (e.g., "move to Password") will be unsuccessful. The speech-based navigation fails because the visible label spoken by the users does not match (or is not part of) the accessible name that is enabled as a speech-input command. In addition, when the accessible name is different from the visible label, it may function as a hidden command that can be accidentally activated by speech-input users.: Mismatches between visible labels and programmatic names for controls are even more of an issue for speech-input and text-to-speech users who also have cognitive challenges. Mismatches create an extra cognitive load for speech-input users, who must remember to say a speech command that is different from the visible label they see on a control. It also creates extra cognitive load for a text-to-speech user to absorb and understand speech output that does not match the visible label.: Note that when a user interface component lacks an accessible name — a failure of 4.1.2 Name, Role, Value — and has a visible text label, then it also fails this Success Criterion.: Identifying label text for components: In order for the label text and accessible name to be matched, it is first necessary to determine which text on the screen should be considered a label for any given control. There are often multiple text strings in a user interface that may be relevant to a control. However, there are reasons why it is best to conservatively interpret the label as being only the text in close proximity.: Conventionally the label for user interface components is the adjacent text string. The typical positioning for left to right languages is:: immediately to the left of comboboxes, dropdown lists, text inputs, and other widgets (or in the absence of left-side labels, immediately above and aligned with the left edge of each input)
	- immediately to the right of checkboxes and radio buttons
	- inside buttons and tabs or immediately below icons serving as buttons: The rationale for some of these conventions is explained in G162: Positioning labels to maximize predictability of relationships.: It is important to bias towards treating only the adjacent text as a label because liberal interpretations of what constitutes a text label can jeopardize the value of this Success Criterion (SC) by lessening predictability. Isolating the label to the single string in close proximity to the component makes it easier for developers, testers, and end users to identify the label targeted for evaluation in this SC. Predictable interpretation of labeling allows users of speech recognition technologies to interact with the element via its conventionally positioned label, and allows users of screen reading technologies to enjoy consistency between the nearby visible label and the announced name of the component.: Note that placeholder text within an input field is not considered an appropriate means of providing a label. The HTML5 specification states The placeholder attribute should not be used as an alternative to a <label>. However, it is worth noting that "label" in that HTML5 statement is in code brackets and links to the label element. For the purposes of this Label in Name Success Criterion, "label" is not used in such a programmatic sense but is simply referring to a text string in close visual proximity to a component. As such, in the absence of any other nearby text string (as described in the preceding list), if an input contains placeholder text, such text may be a candidate for Label in Name. This is supported both through the accessible name calculation (discussed later) and from the practical sense that where a visible label is not otherwise provided, it is likely that a speech-input user may attempt to use the placeholder text value as a means of interacting with the input.: Text labels "express something in human language"
	- Symbolic text characters: For the purposes of this SC, text should not be considered a visible label if it is used in a symbolic manner, rather than directly expressing something in human language as per the definition of text in WCAG. For example, 1.4.5 Images of Text describes considerations for "symbolic text characters." In the images of text example "B", "I", and "ABC" appear on icons in a text editor, where they are meant to symbolize the functions for Bold, Italics, and Spelling, respectively. In such a case, the accessible name should be the function the button serves (e.g., "Spell check" or "Check spelling"), not the visible symbolic characters. A similar text editor is shown in the figure below.: Figure 1: A detail of the rich text editor in Github, showing a variety of unlabeled icons, including icons resembling text characters.: Likewise, where an author has used a greater-than symbol (">") to mimic the appearance of the right-facing arrow, the text does not convey something in human language. It is a symbol, in this scenario likely meant to mimic the icons used for a "Play" button or a "Next" arrow.: Punctuation and capitalization: The use of punctuation and capitalization in labels may also be considered optional for the same reason. For example, the colon conventionally added at the end of input labels does not express something in human language, and capitals on the first letter of each word in a label do not normally alter the words' meaning. This is particularly relevant in the context of this SC, since it is primarily aimed at users of speech recognition; capitals and most punctuation are frequently ignored when a user speaks a label as a means of interacting with a control.: While it is certainly not an error to include the colon and capitalization in the accessible name, a computed name of "First name" should not be considered a failure of "First Name:".
	- First Name: 
	- Likewise, "Next…" visibly shown on a button could have "Next" as the accessible name.
	- . When in doubt, where a meaningful visible label exists, match the string exactly for the accessible name.: Mathematical expressions and formulae: Mathematical expressions are an exception to the previous subsection about symbolic characters. Math symbols can be used as labels; for example "11×3=33" and "A>B" convey meaning.
	- A>B 11×3=33: The label should not be overwritten in the accessible name, and substitutions of words where a formula is used should be avoided since there are multiple ways to express the same equation. For example, making the name "eleven multiplied by three is equivalent to thirty-three" might mean a user who said "eleven times three equals thirty-three" may not match. It is best to leave the formulas as used in the label and count on the user's familiarity with their speech software to achieve a match. Further, converting a mathematical formula label into an accessible name that is a spelled-out equivalent may create issues for translation. The name should match the label's formula text. Note that a consideration for authors is to use the proper symbol in the formula. For instance 11x3 (with a lower or upper case letter X), 11*3 (with the asterisk symbol), and 11×3 (with the &times; symbol) are all easy for sighted users to interpret as meaning the same formula, but may not all be matched to "11 times 3" by the speech recognition software. The proper operator symbol (in this case the times symbol) should be used.: Accessible Name and Description Computation specification: It is important to understand how the accessible name is derived. The Accessible Name and Description Computation 1.1 and the HTML Accessibility API Mappings 1.0 describe how the accessible name is computed, including which attributes are considered in its calculation, and in what order of preference. If a component has multiple possible attribute values that could be used for its accessible name, only the most preferred of those values will be computed. None of the other, less preferred values will be part of the name. For the most part, existing established programmatic relationships between labels and controls are reinforced by the specification.: Other text displayed on the screen that is correctly coded to meet 1.3.1: Info and Relationships is not normally factored into the calculation for the accessible name of a UI component without author intervention (via ARIA labeling techniques). The most common of these are:: headings and instructions
	- group labels for sets of components (i.e., used with legend/fieldset or with role of group or radiogroup): Such textual information may constitute part of the component's description. So from both a programmatic viewpoint, and from the conservative tactic of only considering a label to be "adjacent text," neither headings, instructions, nor group 'labels' should normally be considered labels for the purpose of this Success Criterion.: It is important to note that the specification allows authors to override the name calculated through native semantics. Both aria-label and aria-labelledby take precedence in the name calculation, overriding the visible text as the accessible name even when the visible text label is programmatically associated with the control. For this reason, when a visible label already exists, aria-label should be avoided or used carefully, and aria-labelledby should be used as a supplement with care.: Finally, aria-describedby is not included in the Accessible Name computation (instead it is part of the Accessible Description computation). By convention, text associated with a control through aria-describedby is announced immediately after the accessible name by screen readers. Therefore, the context of headings, instructions, and group labels can be provided through the accessible description to assist users of screen readers without affecting the experience of those who navigate using speech recognition software.: Text in parentheses: Note: The term "parenthetical" in this section is describing text that literally appears within a set of round brackets (). It is not used in the more abstract sense of "information related to".: It is important to mention parenthetical text in labels in the context of accessible name versus description. In common usage, text in parentheses is considered secondary but relevant to meaning. Users of speech recognition would not typically announce text in parentheses as part of the input name. For that reason, parenthetical text may be optionally considered a description and left out of the accessible name.: However, where parenthetical information provides important context, such as indication of a required field or limitations on what is allowed for input, this information must be provided programmatically in some other way to the user if that information is not included as part of the accessible name. For example, "Name (required)" and "Date (YYYY-MM-DD)" could accept "Name" and "Date" as the accessible names. However, in order to pass 1.3.1 Info & Relationships, authors would need to programmatically surface both the required state and the limit on the allowed data formatting (in this example, eight integers fitting the YYYY-MM-DD pattern). The "required" state could be surfaced through the HTML required attribute or by using aria-required="true". The allowed data formatting could be surfaced by being referenced using the aria-describedby) attribute.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G208: Including the text of the visible label as part of the accessible name
	- G211: Matching the accessible name to the visible label
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: G162: Positioning labels to maximize predictability of relationships
	- If an icon has no accompanying text, consider using its hover text as its accessible name (Potential future technique)
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F96: Failure due to the accessible name not containing the visible label text
	- F111: Failure of Success Criteria 1.3.1, 2.5.3, and 4.1.2 due to a control with visible label text but no accessible name
	- Accessible name contains the visible label text, but the words of the visible label are not in the same order as they are in the visible label text (Potential future technique)
	- Accessible name contains the visible label text, but one or more other words are interspersed in the label (Potential future technique)

- G208: Including the text of the visible label as part of the accessible name: http://localhost:3000/techniques/general/G208
- G211: Matching the accessible name to the visible label: http://localhost:3000/techniques/general/G211
- G162: Positioning labels to maximize predictability of relationships: http://localhost:3000/techniques/general/G162
- F96: Failure due to the accessible name not containing the visible label text: http://localhost:3000/techniques/failures/F96
- F111: Failure of Success Criteria 1.3.1, 2.5.3, and 4.1.2 due to a control with visible label text but no accessible name: http://localhost:3000/techniques/failures/F111



--------------------------------------------------

Section 59: motion_actuation
==================================================

In Brief
	- Goal
	- Content is not dependent on a user's ability to move a device.
	- What to do
	- Don't rely solely on device motion to control page content.
	- Why it's important
	- Some people cannot hold or move a device steadily.

Success Criterion (SC): Functionality that can be operated by device motion or user motion can also be operated by user interface components and responding to the motion can be disabled to prevent accidental actuation, except when:: Supported Interface
	- The motion is used to operate functionality through an accessibility supported interface;
	- Essential
	- The motion is essential for the function and doing so would invalidate the activity.

Intent: The intent of this success criterion is to ensure that functions triggered by moving a device (for example, shaking or tilting) or by gesturing towards the device (so that sensors like a camera can pick up and interpret the gesturing), can also be operated by more conventional user interface components.: Note: This criterion concerns input through sensors which respond directly to motions such as gesturing towards, tilting or shaking a device. It does not cover the movement of users through space as registered by geolocation sensors or beacons, or events observed by the device other than intentional gesturing by the user. It also does not cover incidental motion associated with operating a keyboard, pointer, or assistive technology.: Devices often have sensors that can act as inputs, such as accelerometer and gyroscope sensors on a phone or tablet device. These sensors can allow the user to control something by simply changing the orientation or moving the device in particular ways. In other situations, web content can interpret user gestures via the camera or other sensors to actuate functions. For example, shaking the device might issue an "Undo" command, or a gentle hand wave might be used to move forward or backward in a sequence of pages. Some users with disabilities are not able to operate these device sensors (either not at all, or not precisely enough) because the device is on a fixed mount (perhaps a wheelchair) or due to motor impairments. Therefore, functionality offered through motion must also be available by another mechanism.: In addition, some users may accidentally activate sensors due to tremors or other motor impairments. The user must have the ability to turn off motion actuation to prevent such accidental triggering of functions. Applications may be able to meet this requirement by supporting operating system settings which allow the user to disable motion detection at the system level.: There is an exception where motion is essential for the function or not using motions or gestures would invalidate the activity. Some applications are specifically created to use device sensor data. Examples of content that are exempt from this requirement include a pedometer that relies on device motion to count steps.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G213: Provide conventional controls and an application setting for motion activated input
	- GXXX: Supporting system level features which allow the user to disable motion actuation
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F106: Failure due to inability to deactivate motion actuation
	- FXXX: Failure of Success Criterion 2.5.4 due to disrupting or disabling system level features which allow the user to disable motion actuation

- G213: Provide conventional controls and an application setting for motion activated input: http://localhost:3000/techniques/general/G213
- F106: Failure due to inability to deactivate motion actuation: http://localhost:3000/techniques/failures/F106



--------------------------------------------------

Section 60: target_size_enhanced
==================================================

In Brief
	- Goal
	- Controls can be operated more easily, especially on touch screens.
	- What to do
	- Make custom targets at least 44 by 44 pixels.
	- Why it's important
	- Some people cannot tap small objects.

Success Criterion (SC): The size of the target for pointer inputs is at least 44 by 44 CSS pixels except when:: Equivalent
	- The target is available through an equivalent link or control on the same page that is at least 44 by 44 CSS pixels;
	- Inline
	- The target is in a sentence or block of text;
	- User Agent Control
	- The size of the target is determined by the user agent and is not modified by the author;
	- Essential
	- A particular presentation of the target is essential to the information being conveyed.

Intent: The intent of this success criterion is to help users who may have trouble activating a small target because of hand tremors, limited dexterity or other reasons. If the target is too small, it may be difficult to aim at the target. Mice and similar pointing devices can be hard to use for these users, and a larger target will help them greatly in having positive outcomes on the web page.: Touch is particularly problematic as it is an input mechanism with coarse precision. Users lack the same level of fine control as on inputs such as a mouse or stylus. A finger is larger than a mouse pointer, and generally obstructs the user's view of the precise location on the screen that is being touched/activated.: The issue can be further complicated for responsive/mobile sites which need to accommodate different types of fine and coarse inputs (e.g. a site that can be accessed both on a traditional desktop/laptop with a mouse, as well as on a tablet or mobile phone with a touch screen).: While this criterion defines a minimum target size, it is recommended that larger sizes are used to reduce the possibility of unintentional actions. This is particularly relevant if any of the following are true:: the control is used frequently;
	- the result of the interaction cannot be easily undone;
	- the control is positioned where it will be difficult to reach, or is near the edge of the screen;
	- the control is part of a sequential task.: The targets on a screen can have different purposes and uses, and this Success Criterion specifies how each is to be handled.: Equivalent targets: If there is more than one target on a screen that performs the same action, only one of the targets need to meet the target size of 44 by 44 CSS pixels.: Inline: Content displayed can often be reflowed based on the screen width available. This is known as responsive design and makes it easier to read since you do not need to scroll both horizontally and vertically. In reflowed content, the targets can appear anywhere on a line and can change position based on the width of the available screen. Since targets can appear anywhere on the line, the size cannot be larger than the available text and spacing between the sentences or paragraphs, otherwise the targets could overlap. It is for this reason targets which are contained within one or more sentences are excluded from the target size requirements.: Note: If the target is the full sentence and the sentence is not in a block of text, then the target needs to be at least 44 by 44 CSS pixels.: Note: A footnote or an icon within or at the end of a sentence is considered to be part of a sentence and therefore are excluded from the minimum target size.: User Agent Control: If the size of the target is not modified by the author through CSS or other size properties, then the target does not need to meet the target size of 44 by 44 CSS pixels.: Essential: If the target is required to be a particular target size and cannot be provided in another way, while changing it would essentially change the information or functionality of the content, then the target does not need to meet the target size of 44 by 44 CSS pixels.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: Select the situation below that matches your content. Each situation includes techniques or combinations of techniques that are known and documented to be sufficient for that situation.: Ensuring that targets are at least 44 by 44 CSS pixels.
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: Ensuring inline links provide sufficiently large activation target.
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: Failure of Success Criterion 2.5.5 due to target being less than 44 by 44 CSS pixels.




--------------------------------------------------

Section 61: concurrent_input_mechanisms
==================================================

In Brief
	- Goal
	- Users can choose different ways of inputting content.
	- What to do
	- Do not prevent users from switching their mode of input.
	- Why it's important
	- People may not be able to work using just one input method.

Success Criterion (SC): Web content does not restrict use of input modalities available on a platform except where the restriction is essential, required to ensure the security of the content, or required to respect user settings.

Intent: The intent of this Success Criterion is to ensure that people can use and switch between different modes of input when interacting with web content. Users may employ a variety of input mechanisms when interacting with web content. These may be a combination of mechanisms such as a keyboard or keyboard-like interfaces and pointer devices like a mouse, stylus or touchscreen.: Even though a device may have a primary input mechanism, the user may choose to employ alternative input mechanisms when interacting with the device. For example, the primary mechanism for mobile phones and tablets is the touchscreen. The user of these devices may choose to use a paired mouse or external keyboard as an alternative to using the touchscreen.: Users should be able to switch input mechanisms at any point should the user determine that certain tasks and interactions are more easily accomplished by using an alternative input mechanism. Content must not limit the user's interaction to any particular input mechanism unless the restriction is essential, or is required to ensure the security of the content or to respect user settings.: Note: A touch-typing web application, which teaches users how to touch-type on a keyboard and/or measures their proficiency and speed, would be an example of an essential limitation to a particular input mechanism.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- Only using high-level, input-agnostic event handlers, such as focus, blur, click, in Javascript (Potential future technique).
	- Registering event handlers for keyboard/keyboard-like and pointer inputs simultaneously in Javascript; see Example 1 in Pointer Events Level 2 (Potential future technique)
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F98: Failure due to interactions being limited to touch-only on touchscreen devices

- F98: Failure due to interactions being limited to touch-only on touchscreen devices: http://localhost:3000/techniques/failures/F98



--------------------------------------------------

Section 62: dragging_movements
==================================================

In Brief
	- Goal
	- Don’t rely on dragging for user actions.
	- What to do
	- For any action that involves dragging, provide a simple pointer alternative.
	- Why it's important
	- Some people cannot use a mouse to drag items.

Success Criterion (SC): All functionality that uses a dragging movement for operation can be achieved by a single pointer without dragging, unless dragging is essential or the functionality is determined by the user agent and not modified by the author.: Note: This requirement applies to web content that interprets pointer actions (i.e., this does not apply to actions that are required to operate the user agent or assistive technology).

Intent: The intent of this Success Criterion is to ensure functionality that uses a dragging movement has another single pointer mode of operation without the need for the dexterity required to drag elements.: Some people cannot perform dragging movements in a precise manner. Others use a specialized or adapted input device, such as a trackball, head pointer, eye-gaze system, or speech-controlled mouse emulator, which may make dragging cumbersome and error-prone.: When an interface implements functionality that uses dragging movements, users perform four discrete actions:: tap or click to establish a starting point, then
	- press and hold that contact while...
	- performing a repositioning of the pointer, before...
	- releasing the pointer at the end point.: Not all users can accurately press and hold that contact while also repositioning the pointer. An alternative method must be provided so that users with mobility impairments who use a pointer (mouse, pen, or touch contact) can use the functionality.: This requirement is separate from keyboard accessibility because people using a touch screen device may not use a physical keyboard. Keyboard specific interactions such as tabbing or arrow keys may not be possible when encountering a drag and drop control. Note, however, that providing a text input can be an acceptable single-pointer alternative to dragging. For example, an input beside a slider could allow any user to enter a precise value for the slider. In such a situation, the on-screen keyboard that appears for touch users offers a single-pointer means of entering an alphanumeric value.: This criterion does not apply to scrolling enabled by the user-agent. Scrolling a page is not in scope, nor is using a technique such as CSS overflow to make a section of content scrollable.: Relationship to other requirements: Success Criteria 2.1.1 Keyboard and 2.1.3 Keyboard (No Exception) require dragging features to be keyboard accessible. However, achieving keyboard equivalence for a dragging operation does not automatically meet this Success Criterion. It is possible to create an interface that works with dragging and keyboard controls that does not work using only clicks or taps. While many designs can be created for a dragging alternative which address both keyboard accessibility and operability by single pointer operation, the two requirements should be assessed independently.: This Success Criterion applies to dragging movements as opposed to pointer gestures, which are covered in Success Criterion 2.5.1 Pointer Gestures. Pointer gestures include directional path-based as well as multi-point gestures. In contrast, for dragging movements, only the start and end point of the movement matters, not the actual path.: Additional examples are selection rectangles that set the first x/y rectangle coordinate at the pointer position via a pointer down-event, and the second x/y coordinate, after a dragging movement, at the next up-event. A similar example is a connecting line drawn between two different items on the screen, as in an allocation test where users are required to draw a line between questions and corresponding answers. In these cases, the dragging movement requires an alternative way to accomplish the same action that does not rely on the dragging movement. For example, two separate single tap or click actions may define the rectangle coordinates or the start and end points of a connecting line.: Alternatives for dragging movements on the same page: Where functionality can be executed via dragging movements and an equivalent option exists that allows for single-pointer access without dragging, this Success Criterion is passed. It does not have to be the same component, so long as the functionality is equivalent. An example is a color wheel where a color can be changed by dragging an indicator. In addition, text fields for the numerical input of color values allow the definition of a color without requiring dragging movements. (Note that a text input is considered device agnostic; although the purpose is to enter characters, text entry can take place through voice, pointer or keyboard.): Distinguishing dragging movements from path-based pointer gestures: Dragging movements covered in this Success Criterion are pointer interactions where only the start- and endpoints matter. Once the pointer engages with a target, the direction of the dragging movement does not factor into the interaction until the pointer disengages the target. Since the dragging movement does not have an intermediate point, the dragging movement can go in any direction. Path-based gestures are covered in Success Criterion 2.5.1 Pointer Gestures.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G219: Ensuring that an alternative is available for dragging movements that operate on content
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F108: Failure of Success Criterion 2.5.7 Dragging Movements due to not providing a single pointer method for the user to operate a function that does not require a dragging movement

- G219: Ensuring that an alternative is available for dragging movements that operate on content: http://localhost:3000/techniques/general/G219
- F108: Failure of Success Criterion 2.5.7 Dragging Movements due to not providing a single pointer method for the user to operate a function that does not require a dragging movement: http://localhost:3000/techniques/failures/F108



--------------------------------------------------

Section 63: target_size_minimum
==================================================

In Brief
	- Goal
	- Make controls easier to activate.
	- What to do
	- Ensure targets meet a minimum size or have sufficient spacing around them.
	- Why it's important
	- Some people with physical impairments cannot click small buttons that are close together.

Success Criterion (SC): The size of the target for pointer inputs is at least 24 by 24 CSS pixels, except when:: Spacing
	- Undersized targets (those less than 24 by 24 CSS pixels) are positioned so that if a 24 CSS pixel diameter circle is centered on the bounding box of each, the circles do not intersect another target or the circle for another undersized target;
	- Equivalent
	- The function can be achieved through a different control on the same page that meets this criterion;
	- Inline
	- The target is in a sentence or its size is otherwise constrained by the line-height of non-target text;
	- User Agent Control
	- The size of the target is determined by the user agent and is not modified by the author;
	- Essential
	- A particular presentation of the target is essential or is legally required for the information being conveyed.: Note 1: Targets that allow for values to be selected spatially based on position within the target are considered one target for the purpose of the success criterion. Examples include sliders, color pickers displaying a gradient of colors, or editable areas where you position the cursor.: Note 2: For inline targets the line-height should be interpreted as perpendicular to the flow of text. For example, in a language displayed vertically, the line-height would be horizontal.

Intent: The intent of this Success Criterion is to help ensure targets can be easily activated without accidentally activating an adjacent target. Users with dexterity limitations and those who have difficulty with fine motor movement find it difficult to accurately activate small targets when there are other targets that are too close. Providing sufficient size, or sufficient spacing between targets, will reduce the likelihood of accidentally activating the wrong control.: Disabilities addressed by this requirement include hand tremors, spasticity, and quadriplegia. Some people with disabilities use specialized input devices instead of a computer mouse or trackpad. Typically these types of input device do not provide as much accuracy as mainstream pointing devices. Meeting this requirement also ensures that touchscreen interfaces are easier to use.: Note: This Success Criterion defines a minimum size and, if this can't be met, a minimum spacing. It is still possible to have very small, and difficult to activate, targets and meet the requirements of this Success Criterion, provided that the targets don't have any adjacent targets that are too close. However, using larger target sizes will help many people use targets more easily. As a best practice it is recommended to at least meet the minimum size requirement of the Success Criterion, regardless of spacing. For important links/controls, consider aiming for the stricter 2.5.5 Target Size (Enhanced).: Exceptions: The requirement is for targets to be at least 24 by 24 CSS pixels in size. There are five exceptions:: Spacing: Undersized targets (those less than 24 by 24 CSS pixels) are positioned so that if a 24 CSS pixel diameter circle is centered on the bounding box of each, the circles do not intersect another target or the circle for another undersized target.
	- Equivalent: In cases where a target does not have a size equivalent to 24 by 24 CSS pixels, but there is another control that can achieve the underlying function that does meet the requirements of this success criterion, the target can be excepted based on the "Equivalent" exception.
	- Inline: The success criterion does not apply to inline targets in sentences, or where the size of the target is constrained by the line-height of non-target text. This exception is allowed because text reflow based on viewport size makes it impossible for authors to anticipate where links may be positioned relative to one another. Applying this success criterion when multiple links are embedded in blocks of smaller text often results in an undesirable design. It is more important to set the line height to a value that improves readability.
	- User agent control: Browsers have default renderings of some controls, such as the days of the month calendar in an <input type="date">. As long as the author has not modified the user agent default size, the target size for a User agent control is excepted.
	- Essential: If the size and spacing of the targets is fundamental to the information being conveyed, the Essential exception applies. For example, in digital maps, the position of pins is analogous to the position of places shown on the map. If there are many pins close together, the spacing between pins and neighboring pins will often be below 24 CSS pixels. It is essential to show the pins at the correct map location, therefore the Essential exception applies. A similar example is an interactive data visualization where targets are necessarily dense. Another example is where jurisdictions legally require online forms to replicate paper forms, which can impose constraints on the size of targets. In such jurisdictions, any legal requirement to replicate small targets can be considered essential. When the "Essential" exception is applicable, authors are strongly encouraged to provide equivalent functionality through alternative means to the extent practical.
	- Size requirement: For a target to be "at least 24 by 24 CSS pixels", it must be conceptually possible to draw a solid 24 by 24 CSS pixel square, aligned to the horizontal and vertical axis such that the square is completely within the target (does not extend outside the target's area).: Figure 1: Where targets are a 24 by 24px square (and larger is better), they meet the size requirement of the criterion and pass (image shown to scale - see the scalable original version): The 24 by 24px square has to be aligned with the page, although the target itself could be skewed.: Figure 2: So long as there is a solid 24 by 24px square within the target, it meets the size requirement of the criterion and passes (image shown to scale - see the scalable original version): If a target is not large enough to allow for a 24 by 24px square to be drawn inside it, it is considered undersized, and does not pass the size requirement of the Success Criterion. However, if it has sufficient space around it without adjacent targets, it may still pass the criterion thanks to the spacing exception (below).: Figure 3: The rounded corners do not leave sufficient space to draw a 24 by 24px square inside the target, making the target undersized. Depending on the spacing to other targets, it may still pass if it has sufficient clearance (image shown at 1:1 and 2:1 scale - see the scalable original version): The requirement is independent of the zoom factor of the page; when users zoom in, the CSS pixel size of elements does not change. This means that authors cannot meet it by claiming that the target will have enough spacing or sufficient size if the user zooms into the page.: The requirement does not apply to targets while they are obscured by content displayed as a result of a user interaction or scripted behavior of content, for example:: interacting with a combobox shows a dropdown list of suggestions
	- activating a button displays a modal dialog
	- content displays a cookie banner after page load
	- content displays a "Take a survey" dialog after some period of user inactivity: The requirement does however apply to targets in any new content that appears on top of other content.: While the Success Criterion primarily helps touch users by providing target sizing to prevent accidental triggering of adjacent targets, it is also useful for mouse or pen users. It reduces the chances of erroneous activation due to either a tremor or reduced precision, whether because of reduced fine motor control or input imprecision.: Spacing: When the minimum size for a target is not met, spacing can at least improve the user experience. There is less chance of accidentally activating a neighboring target if a target is not immediately adjacent to another. Touchscreen devices and user agents generally have internal heuristics to identify which link or control is closest to a user's touch interaction - this means that sufficient spacing between targets can work as effectively as a larger target size itself.: When a target is smaller than 24 by 24 CSS pixels, it is undersized. In this case, we check if it at least has sufficient spacing by drawing an imaginary 24 CSS pixel diameter circle over the undersized target, centered on the target's bounding box. For rectangular targets, the bounding box coincides with the target itself – thus, the circle is placed on the center of the target. If the target is not rectangular – for instance, if the target is clipped, has rounded corners, or if it's a more complex clickable SVG shape – we need to first determine the bounding box, and then find the box's center. Note that for concave shapes, the center of the bounding box may be outside of the target itself. Now, we center the circle on the center of the bounding box.: Figure 4: For a square/rectangular target, the 24 CSS pixel diameter circle is centered on the target itself. For convex and concave targets, it is centered on the bounding box of the shape. Note the concave target, where in this case the center of the bounding box is outside of the actual target (image shown to scale - see the scalable original version): We repeat this process for all adjacent undersized targets. To determine if an undersized target has sufficient spacing (to pass this Success Criterion's spacing exception), we check that the 24 CSS pixel diameter circle of the target does not intersect another target or the circle of any other adjacent undersized targets.: The following example shows three versions of a horizontal row of six icon-based buttons:: In the top row, the dimensions of each target are 24 by 24 CSS pixels, passing this Success Criterion.
	- In the second row, the same targets are only 20 by 20 CSS pixels, but have a 4 CSS pixel space between them – as the target size is below 24 by 24 CSS pixels, these need to be evaluated against the Success Criterion's spacing exception, and they pass.
	- In the last row, the targets are again 20 by 20 CSS pixels, but have no space between them – these fail the spacing exception. This is because the imaginary 24 CSS pixel diameter circles over the targets would intersect.
	- Figure 5: Three rows of targets, illustrating two ways of meeting this Success Criterion and one way of failing it (image shown to scale - see the scalable original version): The next two illustrations show sets of buttons which are only 16 CSS pixels tall. In the first set, there are no targets immediately above or below the buttons, so they pass. In the second illustration, there are further buttons, and they have been stacked on top of one another, resulting in a fail.: Figure 6: While the height of the targets is only 16 CSS pixels, the lack of adjacent targets above and below means that the targets pass this Success Criterion (image shown to scale - see the scalable original version): Figure 7: Two rows of buttons, both with a height of only 16 CSS pixels. The rows are close, with only a 1 CSS pixel gap between them. This means that the 24 CSS pixel spacing circles of the targets in one row will intersect the targets (and their circles, depending on their respective widths) in the other line, thus failing the Success Criterion. Image shown to scale - see the scalable original version.: The following two illustrations show how menu items can be adjusted to properly meet this requirement. In the first illustration, the About us menu has been activated, showing that each of the menu item targets has a 24 CSS pixel height (text and padding), and so passes. In the second illustration, the same menu is expanded, but the menu items only achieve 18 CSS pixels in height, and so fail.: Figure 8: The menu items with a height of 24 CSS pixels pass. For the menu items that are only 18 CSS pixels high, the 24 CSS pixel spacing circles of the targets in one row will intersect the adjacent menu item targets and circles, and fail (image shown to scale - see the scalable original version): The following example has one large target (an image that links to a new page related to that image) and a very small second target (a control with a magnifier icon to open a zoomed-in preview, possibly in a modal, of the image).: In the top row, the small target overlaps - or, to be more technically accurate, clips - the large target. The small target itself has a size of 24 by 24 CSS pixels, so passes. In the second row, we see that if the second target is any smaller – in this case 16 by 16 CSS pixels – it fails the criterion, as the imaginary circle with a 24 CSS pixel diameter we draw over the small target will intersect the large target itself.: Figure 9: The 24 by 24 CSS pixel small target passes, while the 16 by 16 CSS pixel small target fails, since the 24 CSS pixel diameter circle used for undersized targets intersect the large target (image shown to scale - see the scalable original version): In the following example, we have the same two targets – a large target and a small target. This time, the small target touches/abuts the large target. If the small target is smaller than 24 by 24 CSS pixels, the imaginary circle with a 24 CSS pixel diameter we draw over the small target will intersect the large target itself, failing the requirement. The undersized target must be spaced further away from the large target until its circle doesn't intersect the large target.: Figure 10: In the first row, the 16 by 16 CSS pixel target touching/abutting the large target fails, as its 24 CSS pixel diameter circle used for undersized targets intersects the large target. In the second row we see that the only way the undersized target can pass is by adding a 4 CSS pixel spacing gap between the targets (image shown to scale - see the scalable original version): Note: Users with different disabilities have different needs for control sizes. It can be beneficial to provide an option to increase the active target area without increasing the visible target size. Another option is to provide a mechanism to control the density of layout and thereby change target size or spacing, or both. This can be beneficial for a wide range of users. For example, users with visual field loss may prefer a more condensed layout with smaller sized controls while users with other forms of low vision may prefer large controls.: User agent control: This Success Criterion has an exception for the size of targets determined by a user agent and not modified by the author. An example of this kind of target is a browser's scrollbars. If a scrollbar's dimensions have been modified by the author then there must be a passing amount of spacing between the scrollbar and the content of the page. The following example shows a passing and a failing design.: Figure 11: The passing example has enough space between the link and the scrollbar for a 24 CSS pixel diameter circle, placed over the scrollbar, to not overlap the link. The failing example has no space between the link and the scrollbar, which fails the criterion because the 24 CSS pixel diameter circle overlaps the link. (Image shown to scale - see the scalable original version)

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- C42: Using min-height and min-width to ensure sufficient target spacing

- C42: Using min-height and min-width to ensure sufficient target spacing: http://localhost:3000/techniques/css/C42



--------------------------------------------------

Section 64: language_of_page
==================================================

In Brief
	- Goal
	- Assistive technology can determine the language of a page.
	- What to do
	- Indicate the predominant language on a page.
	- Why it's important
	- People using assistive technology get information in the correct language.

Success Criterion (SC): The default human language of each web page can be programmatically determined.

Intent: The intent of this Success Criterion is to ensure that content developers provide information in the Web page that user agents need to present text and other linguistic content correctly. Both assistive technologies and conventional user agents can render text more accurately when the language of the Web page is identified. Screen readers can load the correct pronunciation rules. Visual browsers can display characters and scripts correctly. Media players can show captions correctly. As a result, users with disabilities will be better able to understand the content.: The default human language of the Web page is the default text-processing language as discussed in Internationalization Best Practices: Specifying Language in XHTML & HTML Content. When a Web page uses several languages, the default text-processing language is the language which is used most. (If several languages are used equally, the first language used should be chosen as the default human language.): Note: For multilingual sites targeting Conformance Level A, the Working Group strongly encourages developers to follow Success Criterion 3.1.2 as well even though that is a Level AA Success Criterion.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- H57: Using the language attribute on the HTML element
	- PDF16: Setting the default language using the /Lang entry in the document catalog of a PDF document
	- PDF19: Specifying the language for a passage or phrase with the Lang entry in PDF documents
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: SVR5: Specifying the default language in the HTTP header

- H57: Using the language attribute on the HTML element: http://localhost:3000/techniques/html/H57
- PDF16: Setting the default language using the /Lang entry in the document catalog of a PDF document: http://localhost:3000/techniques/pdf/PDF16
- PDF19: Specifying the language for a passage or phrase with the Lang entry in PDF documents: http://localhost:3000/techniques/pdf/PDF19
- SVR5: Specifying the default language in the HTTP header: http://localhost:3000/techniques/server-side-script/SVR5



--------------------------------------------------

Section 65: language_of_parts
==================================================

In Brief
	- Goal
	- Assistive technology can identify the languages used within a page.
	- What to do
	- Indicate when words are in a different language.
	- Why it's important
	- People using assistive technology get information in the correct language.

Success Criterion (SC): The human language of each passage or phrase in the content can be programmatically determined except for proper names, technical terms, words of indeterminate language, and words or phrases that have become part of the vernacular of the immediately surrounding text.

Intent: The intent of this Success Criterion is to ensure that user agents can correctly present phrases, passages, and in some cases words written in multiple languages. This makes it possible for user agents and assistive technologies to present content according to the presentation and pronunciation rules for that language. This applies to graphical browsers as well as screen readers, braille displays, and other voice browsers.: Both assistive technologies and conventional user agents can render text more accurately if the language of each passage of text is identified. Screen readers can use the pronunciation rules of the language of the text. Visual browsers can display characters and scripts in appropriate ways. This is especially important when switching between languages that read from left to right and languages that read from right to left, or when text is rendered in a language that uses a different alphabet. Users with disabilities who know all the languages used in the Web page will be better able to understand the content when each passage is rendered appropriately.: When no other language has been specified for a phrase or passage of text, its human language is the default human language of the Web page (see Success Criterion 3.1.1). So the human language of all content in single language documents can be programmatically determined.: Individual words or phrases in one language can become part of another language. For example, "rendezvous" is a French word that has been adopted in English, appears in English dictionaries, and is properly pronounced by English screen readers. Hence a passage of English text may contain the word "rendezvous" without specifying that its human language is French and still satisfy this Success Criterion. Frequently, when the human language of text appears to be changing for a single word, that word has become part of the language of the surrounding text. Because this is so common in some languages, single words should be considered part of the language of the surrounding text unless it is clear that a change in language was intended. If there is doubt whether a change in language is intended, consider whether the word would be pronounced the same (except for accent or intonation) in the language of the immediately surrounding text.: Most professions require frequent use of technical terms which may originate from a foreign language. Such terms are usually not translated to all languages. The universal nature of technical terms also facilitate communication between professionals.: Some common examples of technical terms include: Homo sapiens, Alpha Centauri, hertz, and habeas corpus.: Identifying changes in language is important for a number of reasons:: It allows braille translation software to follow changes in language, e.g., substitute control codes for accented characters, and insert control codes necessary to prevent erroneous creation of Grade 2 braille contractions.
	- Speech synthesizers that support multiple languages will be able to speak the text in the appropriate accent with proper pronunciation. If changes are not marked, the synthesizer will try its best to speak the words in the default language it works in. Thus, the French word for car, "voiture" would be pronounced "voyture" by a speech synthesizer that uses English as its default language.
	- Marking changes in language can benefit future developments in technology, for example users who are unable to translate between languages themselves will be able to use machines to translate unfamiliar languages.
	- Marking changes in language can also assist user agents in providing definitions using a dictionary.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- H58: Using language attributes to identify changes in the human language.
	- PDF19: Specifying the language for a passage or phrase with the Lang entry in PDF documents.

- H58: Using language attributes to identify changes in the human language: http://localhost:3000/techniques/html/H58
- PDF19: Specifying the language for a passage or phrase with the Lang entry in PDF documents: http://localhost:3000/techniques/pdf/PDF19



--------------------------------------------------

Section 66: unusual_words
==================================================

In Brief
	- Goal
	- Users can identify and learn what unusual words mean.
	- What to do
	- Provide definitions for technical jargon and unusual terms.
	- Why it's important
	- More people, especially those with cognitive disabilities, can understand the meaning of content.

Success Criterion (SC): A mechanism is available for identifying specific definitions of words or phrases used in an unusual or restricted way, including idioms and jargon.

Intent: Certain disabilities make it difficult to understand nonliteral word usage and specialized words or usage. Certain disabilities make it difficult to understand figurative language or specialized usage. Providing such mechanisms is vital for these audiences. Specialized information intended for non-specialist readers is encouraged to satisfy this Success Criterion, even when claiming only Single-A or Double-A conformance.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: Select the situation below that matches your content. Each situation includes techniques or combinations of techniques that are known and documented to be sufficient for that situation.: Situation A: If the word or phrase has a unique meaning within the Web page:: G101: Providing the definition of a word or phrase used in an unusual or restricted way for the first occurrence of the word or phrase in a Web page using one of the following techniques:: G55: Linking to definitions: H40: Using description lists: G112: Using inline definitions: H54: Using the dfn element to identify the defining instance of a word: G101: Providing the definition of a word or phrase used in an unusual or restricted way for each occurrence of the word or phrase in a Web page using one of the following techniques:: G55: Linking to definitions: H40: Using description lists
	- G62: Providing a glossary
	- G70: Providing a function to search an online dictionary
	- Situation B: If the word or phrase means different things within the same Web page:: G101: Providing the definition of a word or phrase used in an unusual or restricted way for each occurrence of the word or phrase in a Web page using one of the following techniques:: G55: Linking to definitions: H40: Using description lists: G112: Using inline definitions: H54: Using the dfn element to identify the defining instance of a word

- G101: Providing the definition of a word or phrase used in an unusual or restricted way: http://localhost:3000/techniques/general/G101
- G55: Linking to definitions: http://localhost:3000/techniques/general/G55
- H40: Using description lists: http://localhost:3000/techniques/html/H40
- G112: Using inline definitions: http://localhost:3000/techniques/general/G112
- H54: Using the dfn element to identify the defining instance of a word: http://localhost:3000/techniques/html/H54
- G101: Providing the definition of a word or phrase used in an unusual or restricted way: http://localhost:3000/techniques/general/G101
- G55: Linking to definitions: http://localhost:3000/techniques/general/G55
- H40: Using description lists: http://localhost:3000/techniques/html/H40
- G62: Providing a glossary: http://localhost:3000/techniques/general/G62
- G70: Providing a function to search an online dictionary: http://localhost:3000/techniques/general/G70
- G101: Providing the definition of a word or phrase used in an unusual or restricted way: http://localhost:3000/techniques/general/G101
- G55: Linking to definitions: http://localhost:3000/techniques/general/G55
- H40: Using description lists: http://localhost:3000/techniques/html/H40
- G112: Using inline definitions: http://localhost:3000/techniques/general/G112
- H54: Using the dfn element to identify the defining instance of a word: http://localhost:3000/techniques/html/H54



--------------------------------------------------

Section 67: abbreviations
==================================================

In Brief
	- Goal
	- Users can identify and learn what abbreviations mean.
	- What to do
	- Provide the expanded form of abbreviations to users.
	- Why it's important
	- Some people, including those with cognitive disabilities, may not understand the shortened form of words.

Success Criterion (SC): A mechanism for identifying the expanded form or meaning of abbreviations is available.

Intent: The intent of this Success Criterion is to ensure that users can access the expanded form of abbreviations.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: Select the situation below that matches your content. Each situation includes techniques or combinations of techniques that are known and documented to be sufficient for that situation.: Situation A: If the abbreviation has only one meaning within the Web page:: G102: Providing the expansion or explanation of an abbreviation for the first occurrence of the abbreviation in a Web page using one of the following techniques:: G97: Providing the first use of an abbreviation immediately before or after the expanded form
	- G55: Linking to definitions
	- H28: Providing definitions for abbreviations by using the abbr element
	- PDF8: Providing definitions for abbreviations via an E entry for a structure element: G102: Providing the expansion or explanation of an abbreviation for all occurrences of the abbreviation in a Web page using one of the following techniques:: G55: Linking to definitions
	- G62: Providing a glossary
	- G70: Providing a function to search an online dictionary
	- H28: Providing definitions for abbreviations by using the abbr element
	- PDF8: Providing definitions for abbreviations via an E entry for a structure element
	- Situation B: If the abbreviation means different things within the same Web page:: G102: Providing the expansion or explanation of an abbreviation for all occurrences of abbreviations in a Web page using one of the following techniques:: G55: Linking to definitions
	- H28: Providing definitions for abbreviations by using the abbr element
	- PDF8: Providing definitions for abbreviations via an E entry for a structure element

- G102: Providing the expansion or explanation of an abbreviation: http://localhost:3000/techniques/general/G102
- G97: Providing the first use of an abbreviation immediately before or after the expanded form: http://localhost:3000/techniques/general/G97
- G55: Linking to definitions: http://localhost:3000/techniques/general/G55
- H28: Providing definitions for abbreviations by using the abbr element: http://localhost:3000/techniques/html/H28
- PDF8: Providing definitions for abbreviations via an E entry for a structure element: http://localhost:3000/techniques/pdf/PDF8
- G102: Providing the expansion or explanation of an abbreviation: http://localhost:3000/techniques/general/G102
- G55: Linking to definitions: http://localhost:3000/techniques/general/G55
- G62: Providing a glossary: http://localhost:3000/techniques/general/G62
- G70: Providing a function to search an online dictionary: http://localhost:3000/techniques/general/G70
- H28: Providing definitions for abbreviations by using the abbr element: http://localhost:3000/techniques/html/H28
- PDF8: Providing definitions for abbreviations via an E entry for a structure element: http://localhost:3000/techniques/pdf/PDF8
- G102: Providing the expansion or explanation of an abbreviation: http://localhost:3000/techniques/general/G102
- G55: Linking to definitions: http://localhost:3000/techniques/general/G55
- H28: Providing definitions for abbreviations by using the abbr element: http://localhost:3000/techniques/html/H28
- PDF8: Providing definitions for abbreviations via an E entry for a structure element: http://localhost:3000/techniques/pdf/PDF8



--------------------------------------------------

Section 68: reading_level
==================================================

In Brief
	- Goal
	- Users can get a simplified version of complex information.
	- What to do
	- When text information becomes complex, create a more easily understood version.
	- Why it's important
	- More people, especially those with cognitive disabilities, can understand the meaning of content.

Success Criterion (SC): When text requires reading ability more advanced than the lower secondary education level after removal of proper names and titles, supplemental content, or a version that does not require reading ability more advanced than the lower secondary education level, is available.

Intent: Content should be written as clearly and simply as possible. The intent of this Success Criterion is:: to ensure that additional content is available to aid the understanding of difficult or complex text;
	- to establish a testable measure indicating when such additional content is required.: This Success Criterion helps people with reading disabilities while also allowing authors to publish difficult or complex Web content. Text difficulty is described in terms of the level of education required to read the text. Education levels are defined according to the International Standard Classification of Education [UNESCO], which was created to allow international comparison among systems of education.: Difficult or complex text may be appropriate for most members of the intended audience (that is, most of the people for whom the content has been created). But there are people with disabilities, including reading disabilities, even among highly educated users with specialized knowledge of the subject matter. It may be possible to accommodate these users by making the text more readable. If the text cannot be made more readable, then supplemental content is needed. Supplemental content is required when text demands reading ability more advanced than the lower secondary education level—that is, more than nine years of school. Such text presents severe obstacles to people with reading disabilities and is considered difficult even for people without disabilities who have completed upper secondary education.: Reading disabilities such as dyslexia make it difficult to recognize written or printed words and associate them with the correct sounds. This is called "decoding" the text. Decoding must be automatic in order for people to read fluently. The act of decoding text word by word consumes much of the mental energy that most people are able to use for understanding what they read. Text that uses short, common words and short sentences is easier to decode and usually requires less advanced reading ability than text that uses long sentences and long or unfamiliar words.: The education level required to read text content (also called "readability") is measured by analyzing selected passages of text from the Web page. If the Web page includes text written for different purposes or different styles are used, the selected passages include samples of the types of content in the Web page and the different styles in which the content is written. (In many cases, the Web page contains only one kind of text content—e.g., technical documentation, a legal notice, marketing material, etc.—and all the content uses the same style.): Educators can also measure the education level required to read text content. For example, qualified teachers can evaluate text according to local education standards to determine if it requires reading ability beyond what is expected for students in the last year of lower secondary education.: Because people's names, the names of cities or other proper names cannot be changed to shorter names with fewer syllables, and because doing so or just referring to everyone by pronouns can make sentences harder to understand, the success criterion specifies that proper names can be ignored or removed from the text before assessing whether it meets the reading ability requirement. Titles refer to the name of documents, books, movies, etc. Titles are removed or ignored for the analysis because changing the words in titles might make the titles easier to read but would make it impossible to understand the item to which the title refers. This would make it harder to read and understand the content. (e.g., a book, academic paper, article, etc.). Therefore, titles are also exempted specifically.: When a Web page contains multiple languages, a readability result should be calculated for each language that constitutes at least 5% of the content and that is used in full sentences or paragraphs (not just individual words or phrases). The overall readability of the page should be judged on the language that yields the worst readability results.: The readability of content may also be determined by applying a readability formula to the selected passage. Many (though not all) readability formulas base their calculations on passages of 100 words. Such formulas have been developed for many languages. The number of words in the passage is counted and the length of the words is determined by counting either the number of syllables or the number of characters. Most readability formulas also count the number and length of sentences. The average length of words and sentences in the content is then used to calculate a readability score. (Some languages, such as Japanese, may include multiple scripts within the same passage. Readability formulas for these languages may use the number and length of such "runs" in their calculations.) The result may be presented as a number (for example, on a scale from 0-100) or as a grade level. These results can then be interpreted using the education levels described in the International Standard Classification of Education. Readability formulas are available for at least some languages when running the spell checkers in popular software if you specify in the options of this engine that you want to have the statistics when it has finished checking your documents.: Levels of education
	- Primary education
	- First 6 years of school
	- Lower secondary education
	- 7-9 years of school
	- Upper secondary education
	- 10-12 years of school
	- Advanced education
	- More than 12 years of school: Adapted from International Standard Classification of Education (UNESCO).: Note: According to the Open Society Mental Health Initiative, the concept of Easy to Read cannot be universal, and it will not be possible to write a text that will suit the abilities of all people with literacy and comprehension problems. Using the clearest and simplest language appropriate is highly desirable, but the WCAG Working Group could not find a way to test whether this had been achieved. The use of reading level is a way to introduce testability into a Success Criterion that encourages clear writing. Supplementary content can be a powerful technique for people with some classes of cognitive disability.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G86: Providing a text summary that can be understood by people with lower secondary education level reading ability
	- G103: Providing visual illustrations, pictures, and symbols to help explain ideas, events, and processes
	- G79: Providing a spoken version of the text
	- G153: Making the text easier to read
	- G160: Providing sign language versions of information, ideas, and processes that must be understood in order to use the content: Note: Different sites may address this Success Criterion in different ways. An audio version of the content may be helpful to some users. For some people who are deaf, a sign language version of the page may be easier to understand than a written language version since sign language may be their first language. Some sites may decide to do both or other combinations. No technique will help all users who have difficulty. So different techniques are provided as sufficient techniques here for authors trying to make their sites more accessible. Any numbered technique or combination above can be used by a particular site and it is considered sufficient by the Working Group.

- G86: Providing a text summary that can be understood by people with lower secondary education level reading ability: http://localhost:3000/techniques/general/G86
- G103: Providing visual illustrations, pictures, and symbols to help explain ideas, events, and processes: http://localhost:3000/techniques/general/G103
- G79: Providing a spoken version of the text: http://localhost:3000/techniques/general/G79
- G153: Making the text easier to read: http://localhost:3000/techniques/general/G153
- G160: Providing sign language versions of information, ideas, and processes that must be understood in order to use the content: http://localhost:3000/techniques/general/G160



--------------------------------------------------

Section 69: pronunciation
==================================================

In Brief
	- Goal
	- Users can identify the pronunciation of ambiguous words.
	- What to do
	- Indicate how to pronounce a word, where its meaning is otherwise unclear.
	- Why it's important
	- Some people, including those with cognitive disabilities, may not understand the meaning of content.

Success Criterion (SC): A mechanism is available for identifying specific pronunciation of words where meaning of the words, in context, is ambiguous without knowing the pronunciation.

Intent: The intent of this Success Criterion is to help people who are blind, people who have low vision, and people with reading disabilities to understand content in cases where meaning depends on pronunciation. Often words or characters have different meanings, each with its own pronunciation. The meaning of such words or characters can usually be determined from the context of the sentence. However, for more complex or ambiguous sentences, or for some languages, the meaning of the word cannot be easily determined or determined at all without knowing the pronunciation. When the sentence is read aloud and the screen reader reads the word using the wrong pronunciation, it can be even more difficult to understand than when read visually. When words are ambiguous or indeterminate unless the pronunciation is known, then providing some means of determining the pronunciation is needed.: For example, in the English language heteronyms are words that are spelled the same but have different pronunciations and meanings, such as the words desert (abandon) and desert (arid region). If the proper pronunciation can be determined from the context of the sentence, then nothing is required. If it cannot then some mechanism for determining the proper pronunciation would be required. Additionally, in some languages certain characters can be pronounced in different ways. In Japanese, for example, there are characters like Han characters(Kanji) that have multiple pronunciations. Screen readers may speak the characters incorrectly without the information on pronunciation. When read incorrectly, the content will not make sense to users.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G120: Providing the pronunciation immediately following the word
	- G121: Linking to pronunciations
	- G62: Providing a glossary that includes pronunciation information for words that have a unique pronunciation in the content and have meaning that depends on pronunciation
	- G163: Using standard diacritical marks that can be turned off
	- H62: Using the ruby element

- G120: Providing the pronunciation immediately following the word: http://localhost:3000/techniques/general/G120
- G121: Linking to pronunciations: http://localhost:3000/techniques/general/G121
- G62: Providing a glossary: http://localhost:3000/techniques/general/G62
- G163: Using standard diacritical marks that can be turned off: http://localhost:3000/techniques/general/G163
- H62: Using the ruby element: http://localhost:3000/techniques/html/H62



--------------------------------------------------

Section 70: on_focus
==================================================

In Brief
	- Goal
	- Content can be navigated more predictably.
	- What to do
	- Do not change a user's context when items get focus.
	- Why it's important
	- Content that behaves predictably is especially important to people with disabilities.

Success Criterion (SC): When any user interface component receives focus, it does not initiate a change of context.

Intent: The intent of this Success Criterion is to ensure that functionality is predictable as visitors navigate their way through a document. Any component that is able to trigger an event when it receives focus must not change the context. Examples of changing context when a component receives focus include, but are not limited to:: forms submitted automatically when a component receives focus;
	- new windows launched when a component receives focus;
	- focus is changed to another component when that component receives focus;: Focus may be moved to a control either via the keyboard (e.g. tabbing to a control) or the mouse (e.g. clicking on a text field). Moving the mouse over a control does not move the focus unless scripting implements this behavior. Note that for some types of controls, clicking on a control may also activate the control (e.g. button), which may, in turn, initiate a change in context.: Note: What is meant by "component" here is also sometimes called "user interface element" or "user interface component".

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G107: Using "activate" rather than "focus" as a trigger for changes of context: Note: A change of content is not always a change of context. This success criterion is automatically met if changes in content are not also changes of context.: Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: G200: Opening new windows and tabs from a link only when necessary
	- G201: Giving users advanced warning when opening a new window
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F55: Failure of Success Criteria 2.1.1, 2.4.7, 2.4.13, and 3.2.1 due to using script to remove focus when focus is received

- G107: Using "activate" rather than "focus" as a trigger for changes of context: http://localhost:3000/techniques/general/G107
- G200: Opening new windows and tabs from a link only when necessary: http://localhost:3000/techniques/general/G200
- G201: Giving users advanced warning when opening a new window: http://localhost:3000/techniques/general/G201
- F55: Failure of Success Criteria 2.1.1, 2.4.7, 2.4.13, and 3.2.1 due to using script to remove focus when focus is received: http://localhost:3000/techniques/failures/F55



--------------------------------------------------

Section 71: on_input
==================================================

In Brief
	- Goal
	- Content can be operated more predictably.
	- What to do
	- Forewarn users if their context will change based on their input.
	- Why it's important
	- Content that behaves predictably is especially important to people with disabilities.

Success Criterion (SC): Changing the setting of any user interface component does not automatically cause a change of context unless the user has been advised of the behavior before using the component.

Intent: The intent of this Success Criterion is to ensure that entering data or selecting a form control has predictable effects. Changing the setting of any user interface component is changing some aspect in the control that will persist when the user is no longer interacting with it. So checking a checkbox, entering text into a text field, or changing the selected option in a list control changes its setting, but activating a link or a button does not. Changes in context can confuse users who do not easily perceive the change or are easily distracted by changes. Changes of context are appropriate only when it is clear that such a change will happen in response to the user's action.: Note: This Success Criterion covers changes in context due to changing the setting of a control. Clicking on links or buttons is activating a control, not changing the setting of that control.: Note: What is meant by "component" and "user interface component" here is also sometimes called "user interface element".

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: G80: Providing a submit button to initiate a change of context using a technology-specific technique listed below: H32: Providing submit buttons
	- H84: Using a button with a select element to perform an action
	- PDF15: Providing submit buttons with the submit-form action in PDF forms
	- G13: Describing what will happen before a change to a form control that causes a change of context to occur is made
	- SCR19: Using an onchange event on a select element without causing a change of context: Note: A change of content is not always a change of context. This success criterion is automatically met if changes in content are not also changes of context.: Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: G201: Giving users advanced warning when opening a new window
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F36: Failure of Success Criterion 3.2.2 due to automatically submitting a form and … given a value
	- F37: Failure of Success Criterion 3.2.2 due to launching a new window without prior warning when the selection of a radio button, check box or select list is changed

- G80: Providing a submit button to initiate a change of context: http://localhost:3000/techniques/general/G80
- H32: Providing submit buttons: http://localhost:3000/techniques/html/H32
- H84: Using a button with a select element to perform an action: http://localhost:3000/techniques/html/H84
- PDF15: Providing submit buttons with the submit-form action in PDF forms: http://localhost:3000/techniques/pdf/PDF15
- G13: Describing what will happen before a change to a form control that causes a change of context to occur is made: http://localhost:3000/techniques/general/G13
- SCR19: Using an onchange event on a select element without causing a change of context: http://localhost:3000/techniques/client-side-script/SCR19
- G201: Giving users advanced warning when opening a new window: http://localhost:3000/techniques/general/G201
- F36: Failure of Success Criterion 3.2.2 due to automatically submitting a form and … given a value: http://localhost:3000/techniques/failures/F36
- F37: Failure of Success Criterion 3.2.2 due to launching a new window without prior warning when the selection of a radio button, check box or select list is changed: http://localhost:3000/techniques/failures/F37



--------------------------------------------------

Section 72: consistent_navigation
==================================================

In Brief
	- Goal
	- Content can be navigated more predictably.
	- What to do
	- Consistently order navigation that repeats across multiple pages.
	- Why it's important
	- Content that behaves predictably is especially important to people with disabilities.

Success Criterion (SC): Navigational mechanisms that are repeated on multiple web pages within a set of web pages occur in the same relative order each time they are repeated, unless a change is initiated by the user.

Intent: The intent of this Success Criterion is to encourage the use of consistent presentation and layout for users who interact with repeated content within a set of Web pages and need to locate specific information or functionality more than once. Individuals with low vision who use screen magnification to display a small portion of the screen at a time often use visual cues and page boundaries to quickly locate repeated content. Presenting repeated content in the same order is also important for visual users who use spatial memory or visual cues within the design to locate repeated content.: It is important to note that the use of the phrase "same order" in this section is not meant to imply that subnavigation menus cannot be used or that blocks of secondary navigation or page structure cannot be used. Instead, this Success Criterion is intended to assist users who interact with repeated content across Web pages to be able to predict the location of the content they are looking for and find it more quickly when they encounter it again.: Users may initiate a change in the order by using adaptive user agents or by setting preferences so that the information is presented in a way that is most useful to them.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G61: Presenting repeated components in the same relative order each time they appear
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: PDF14: Providing running headers and footers in PDF documents
	- PDF17: Specifying consistent page numbering for PDF documents
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F66: Failure of Success Criterion 3.2.3 due to presenting navigation links in a different relative order on different pages

- G61: Presenting repeated components in the same relative order each time they appear: http://localhost:3000/techniques/general/G61
- PDF14: Providing running headers and footers in PDF documents: http://localhost:3000/techniques/pdf/PDF14
- PDF17: Specifying consistent page numbering for PDF documents: http://localhost:3000/techniques/pdf/PDF17
- F66: Failure of Success Criterion 3.2.3 due to presenting navigation links in a different relative order on different pages: http://localhost:3000/techniques/failures/F66



--------------------------------------------------

Section 73: consistent_identification
==================================================

In Brief
	- Goal
	- Actions are more predictable across pages.
	- What to do
	- Identify repeating functions consistently.
	- Why it's important
	- Consistently identified actions are especially important to people with disabilities.

Success Criterion (SC): Components that have the same functionality within a set of web pages are identified consistently.

Intent: The intent of this Success Criterion is to ensure consistent identification of functional components that appear repeatedly within a set of Web pages. A strategy that people who use screen readers use when operating a Web site is to rely heavily on their familiarity with functions that may appear on different Web pages. If identical functions have different labels (or, more generally, a different accessible name) on different Web pages, the site will be considerably more difficult to use. It may also be confusing and increase the cognitive load for people with cognitive limitations. Therefore, consistent labeling will help.: This consistency extends to the text alternatives. If icons or other non-text items have the same functionality, then their text alternatives should be consistent as well.: If there are two components on a web page that both have the same functionality as a component on another page in a set of web pages, then all 3 must be consistent. Hence the two on the same page will be consistent.: While it is desirable and best practice always to be consistent within a single web page, 3.2.4 only addresses consistency within a set of web pages where something is repeated on more than one page in the set.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G197: Using labels, names, and text alternatives consistently for content that has the same functionality AND following the sufficient techniques for Success Criterion 1.1.1 and sufficient techniques for Success Criterion 4.1.2 for providing labels, names, and text alternatives.: Note: Text alternatives that are "consistent" are not always "identical." For instance, you may have a graphical arrow at the bottom of a Web page that links to the next Web page. The text alternative may say "Go to page 4." Naturally, it would not be appropriate to repeat this exact text alternative on the next Web page. It would be more appropriate to say "Go to page 5". Although these text alternatives would not be identical, they would be consistent, and therefore would satisfy this Success Criterion.: A single non-text-content-item may be used to serve different functions. In such cases, different text alternatives are necessary and should be used. Examples can be commonly found with the use of icons such as check marks, cross marks, and traffic signs. Their functions can be different depending on the context of the Web page. A check mark icon may function as "approved", "completed", or "included", to name a few, depending on the situation. Using "check mark" as text alternative across all Web pages does not help users understand the function of the icon. Different text alternatives can be used when the same non-text content serves multiple functions.: Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F31: Failure of Success Criterion 3.2.4 due to using two different labels for the same function on different Web pages within a set of Web pages

- G197: Using labels, names, and text alternatives consistently for content that has the same functionality: http://localhost:3000/techniques/general/G197
- F31: Failure of Success Criterion 3.2.4 due to using two different labels for the same function on different Web pages within a set of Web pages: http://localhost:3000/techniques/failures/F31



--------------------------------------------------

Section 74: change_on_request
==================================================

In Brief
	- Goal
	- Users have full control of major content changes.
	- What to do
	- Provide ways for users to trigger or turn off changes of context.
	- Why it's important
	- Content that behaves predictably is especially important to people with disabilities.

Success Criterion (SC): Changes of context are initiated only by user request or a mechanism is available to turn off such changes.

Intent: The intent of this Success Criterion is to encourage design of Web content that gives users full control of changes of context. This Success Criterion aims to eliminate potential confusion that may be caused by unexpected changes of context such as automatic launching of new windows, automatic submission of forms after selecting an item from a list, etcetera. Such unexpected changes of context may cause difficulties for people with motor impairments, people with low vision, people who are blind, and people with certain cognitive limitations.: Some types of change of context are not disruptive to some users, or actively benefit some users. For example, single-switch users rely on context changes that are animated by the system, and the preferences of low-vision users may vary depending on how much of the content they can see at once and how much of the session structure they can retain in working memory. Some types of content, such as slide shows, require the ability to change context in order to provide the intended user experience. Content that initiates changes of context automatically only when user preferences allow can conform to this Success Criterion.: Note: It is possible for more than one change of context to occur simultaneously. For example, clicking on a link which automatically opens a new window is an example of two separate changes of context related to the change in content and to the change in the viewport (window). The change in the content in this case is initiated by user request when they click on the link, but unless the user can be aware that the link will open in a new window then that change of context cannot be regarded as user-initiated.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: Select the situation below that matches your content. Each situation includes techniques or combinations of techniques that are known and documented to be sufficient for that situation.: Situation A: If the Web page allows automatic updates:
	- G76: Providing a mechanism to request an update of the content instead of updating automatically
	- Situation B: If automatic redirects are possible:
	- SVR1: Implementing automatic redirects on the server side instead of on the client side: G110: Using an instant client-side redirect using one of the following techniques:: H76: Using meta refresh to create an instant client-side redirect
	- Situation C: If the Web page uses pop-up windows:: Including pop-up windows using one of the following techniques:: H83: Using the target attribute to open a new window on user request and indicating this in link text
	- SCR24: Using progressive enhancement to open new windows on user request
	- Situation D: If using an onchange event on a select element:
	- SCR19: Using an onchange event on a select element without causing a change of context
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: G200: Opening new windows and tabs from a link only when necessary
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F60: Failure of Success Criterion 3.2.5 due to launching a new window when a user enters text into an input field
	- F61: Failure of Success Criterion 3.2.5 due to complete change of main content through an automatic update that the user cannot disable from within the content
	- F9: Failure of Success Criterion 3.2.5 due to changing the context when the user removes focus from a form element
	- F22: Failure of Success Criterion 3.2.5 due to opening windows that are not requested by the user
	- F52: Failure of Success Criterion 3.2.5 due to opening a new window as soon as a new page is loaded
	- F40: Failure due to using meta redirect with a time limit
	- F41: Failure of Success Criterion 2.2.1, 2.2.4, and 3.2.5 due to using meta refresh to reload the page

- G76: Providing a mechanism to request an update of the content instead of updating automatically: http://localhost:3000/techniques/general/G76
- SVR1: Implementing automatic redirects on the server side instead of on the client side: http://localhost:3000/techniques/server-side-script/SVR1
- G110: Using an instant client-side redirect: http://localhost:3000/techniques/general/G110
- H76: Using meta refresh to create an instant client-side redirect: http://localhost:3000/techniques/html/H76
- H83: Using the target attribute to open a new window on user request and indicating this in link text: http://localhost:3000/techniques/html/H83
- SCR24: Using progressive enhancement to open new windows on user request: http://localhost:3000/techniques/client-side-script/SCR24
- SCR19: Using an onchange event on a select element without causing a change of context: http://localhost:3000/techniques/client-side-script/SCR19
- G200: Opening new windows and tabs from a link only when necessary: http://localhost:3000/techniques/general/G200
- F60: Failure of Success Criterion 3.2.5 due to launching a new window when a user enters text into an input field: http://localhost:3000/techniques/failures/F60
- F61: Failure of Success Criterion 3.2.5 due to complete change of main content through an automatic update that the user cannot disable from within the content: http://localhost:3000/techniques/failures/F61
- F9: Failure of Success Criterion 3.2.5 due to changing the context when the user removes focus from a form element: http://localhost:3000/techniques/failures/F9
- F22: Failure of Success Criterion 3.2.5 due to opening windows that are not requested by the user: http://localhost:3000/techniques/failures/F22
- F52: Failure of Success Criterion 3.2.5 due to opening a new window as soon as a new page is loaded: http://localhost:3000/techniques/failures/F52
- F40: Failure due to using meta redirect with a time limit: http://localhost:3000/techniques/failures/F40
- F41: Failure of Success Criterion 2.2.1, 2.2.4, and 3.2.5 due to using meta refresh to reload the page: http://localhost:3000/techniques/failures/F41



--------------------------------------------------

Section 75: consistent_help
==================================================

In Brief
	- Goal
	- Make it easier to find help and support.
	- What to do
	- Put help in the same place when it is on multiple pages.
	- Why it's important
	- People who need help can find it more easily if it's in the same place.

Success Criterion (SC): If a web page contains any of the following help mechanisms, and those mechanisms are repeated on multiple web pages within a set of web pages, they occur in the same order relative to other page content, unless a change is initiated by the user:: Human contact details;
	- Human contact mechanism;
	- Self-help option;
	- A fully automated contact mechanism.: Note 1: Help mechanisms may be provided directly on the page, or may be provided via a direct link to a different page containing the information.: Note 2: For this success criterion, "the same order relative to other page content" can be thought of as how the content is ordered when the page is serialized. The visual position of a help mechanism is likely to be consistent across pages for the same page variation (e.g., CSS break-point). The user can initiate a change, such as changing the page's zoom or orientation, which may trigger a different page variation. This criterion is concerned with relative order across pages displayed in the same page variation (e.g., same zoom level and orientation).

Intent: The intent of this Success Criterion is to ensure users can find help for completing tasks on a Web site, when it is available. When the placement of the help mechanism is kept consistent across a set of pages, users looking for help will find it easier to identify. This is distinct from interface-level help, such as contextual help, features like spell checkers, and instructional text in a form.: Locating the help mechanism in a consistent location across pages makes it easier for users to find it. For example, when a mechanism or link is located in the header of one Web page, it will be easier to find if it is in the header of other pages. The help mechanism, such as a contact phone number, may be provided directly on the page, or it may also be a direct link to a contact page. Regardless of which approach is used, the mechanism must be located in the same relative order on each page within the set of pages.: When testing this Success Criterion, it is the help item which is relative to the rest of the content. When testing a page, other content that is present across the set of web pages and is before the help item should be before the help item on this page. Items which are after the help item on other pages should be after the help item on this page.: If the help item is visually in a different location, but in the same serial order, that is not helpful from a user's point of view, but it would not fail this criterion.: When having problems completing a task on a Web site (or part of a Web site, what we call a set of Web pages), people with some types of disabilities may not be able to work through the issue without further help. Issues could include difficulty: completing a form, or finding a document or page which provides information required to complete a task.: Without help, some users may abandon the task. They may also fail to correctly complete a task, or they may require assistance from people who do not necessarily keep private information secure.: While it is recommended to consistently implement a help mechanism across a set of web pages, this criterion specifically pertains to pages that do include such a mechanism. Therefore, the absence of a help mechanism on certain pages within a set does not constitute a violation.: Limitations and Exceptions: It is not the intent of this Success Criterion to require authors to provide help or access to help. The Criterion only requires that when one of the listed forms of help is available across multiple pages that it be in a consistent location. It does not require authors to provide help information on PDFs or other static documents that may be available for viewing/download from the Web pages. PDFs and other static documents are not considered part of the "set of web pages" from which they are downloaded.: It is also not the intent of this Success Criterion to require a human be available at all times. Ideally, if the human contact is not available during certain hours or certain days then information would be provided so the user can tell when it will be available.: This Success Criterion only requires help mechanisms to be consistent within a particular set of web pages. Some complex Web sites consist of multiple different sets of web pages with different purposes. For example, a web-based spreadsheet application might have one set of pages for editing spreadsheets and a separate set of pages for marketing the application. This Success Criterion would allow the different sets of web pages to use different help mechanism locations. However, it is best if help mechanisms are located as consistently as possible even among different related sets of web pages.: This Success Criterion contains an exception when "a change is initiated by the user." This exception is intended to cover cases where a user performs an action with the intent of changing the display or layout of a page, such as changing the zoom level, orientation, or viewport size. Help mechanism locations may change in response to such a user-initiated change; as the criterion's second note clarifies, "this criterion is concerned with relative order across pages displayed in the same page variation (e.g., same zoom level and orientation).": This exception allows the location in a smaller viewport to be different than in a larger viewport. However, it is best if the mechanism or link is consistent across a set of web pages. A consistent location, both visually and programmatically, is the most usable.: This exception is not intended to treat every action that a user might initiate as a "change"; to qualify for the exception, the user must be initiating an action that would reasonably be expected to change the relative order of components within a page. For example, merely navigating between pages within a set of web pages is not a "change initiated by the user" for the purposes of this exception. Similarly, logging into or out of a page would not typically qualify, unless logging in would present the user with a distinct set of web pages.: Help Mechanisms: Typical help mechanisms include:: Human contact details such as a phone number, email address, hours of operation.
	- Human contact mechanism such as a messaging system, chat client, contact form, social media channel.
	- Self-help option such as an up-to-date Frequently Asked Questions, How Do I page, Support page.
	- A fully automated contact mechanism such as a chatbot.: The order of the types of help listed in the Success Criterion does not imply priority.: Support for people with cognitive and learning disabilities: This section is not required by the Consistent Help success criterion, but provides advice related to Making Content Usable for People with Cognitive and Learning Disabilities.: The human contact details enable users to connect with the organization or the part of the organization that can assist with the content. For example, an online jobs / recruitment portal may provide a contact method for the team that supports the recruitment portal and not a catch-all for the entire company. Each layer of contact added prolongs the time before the user will receive help.: The human contact mechanism enables a person to express what they are looking for using their own words. For some with cognitive disabilities, this may be the best way for them to find an answer to their problem.: For pages for which no human support is available it helps if a self-help option says that no human support is available. Self-help options can go beyond allowing the user to search within the site. Contextual help is still recommended (see Success Criterion 3.3.5 for more information), but a self-help option provides a single location that makes it easier for people with cognitive disabilities to understand what help is available without having to hunt for it. While some people may easily be able to identify that no support would be available for a particular type of Web site, this may not be apparent to some users with disabilities.: Chatbots can work for many people, and particularly for people with cognitive disabilities if they:: recognize misspelled words,
	- provide human contact details if the chatbot is unable to provide a satisfactory response after 3 attempts, and
	- can be dismissed with a single interaction, and recalled using a link or button.: This criterion does not require that a site provide a help mechanism. However, when help is available:: People who may have difficulty locating help are more likely to find it and complete their task.
	- Users that experience cognitive fatigue or cognitive shut down will be able to reserve their energy for the task, instead of using it to find support.
	- Enabling users (especially those with cognitive disabilities) to find solutions while expressing their question using their own words (for example by interacting with a chatbot) increases their chances of success for completing a task.: Self help methods beyond the site, such as using internet search to find the contact information for an organization, can be too difficult. Further, the user's disability may make it more difficult to find the help available (such as a "contact us" link, phone number, or support page) if the information is not consistently present within a few interactions (e.g., displayed in the header, or via a menu). In addition, for some users with disabilities, struggling to complete a task on a site may cause additional cognitive challenges when searching for help within the site.: When a user is quickly able to find help, they are able to complete the task even if they encounter challenges.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G220: Provide a contact-us link in a consistent location
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: Inconsistent Help Location

- G220: Provide a contact-us link in a consistent location: http://localhost:3000/techniques/general/G220



--------------------------------------------------

Section 76: error_identification
==================================================

In Brief
	- Goal
	- Users know an error exists and what is wrong.
	- What to do
	- Provide descriptive notification of errors.
	- Why it's important
	- Flagging errors helps people with reduced sight and cognitive disabilities resolve them.

Success Criterion (SC): If an input error is automatically detected, the item that is in error is identified and the error is described to the user in text.

Intent: The intent of this success criterion is to ensure that users are aware that an error has occurred and can determine what is wrong. In the case of an unsuccessful form submission, it is not sufficient to only re-display the form without providing any hint that the submission failed. The error must be indicated in text. Whether or not an error message provides users with sufficient information about the nature of the error, and what they should do to correct it, is covered more specifically by 3.3.3 Error Suggestion.: An "input error" is information provided by the user that is not accepted. This includes:: information that is required by the web page but omitted by the user, or
	- information that is provided by the user but that falls outside the required data format or allowed values.: For example:: the user fails to enter the proper abbreviation in a state, province, or region field;
	- the user enters a state abbreviation that is not a valid state;
	- the user enters a non existent zip or postal code;
	- the user enters a birth date 2 years in the future;
	- the user enters alphabetic characters or parentheses into their phone number field that only accepts numbers;
	- the user enters a bid that is below the previous bid or the minimum bid increment.: Note: If a user enters a value that is too high or too low, and the coding on the page automatically changes that value to fall within the allowed range, the user's error would still need to be described to them as required by the success criterion. Such an error description telling the person of the changed value would meet both this success criterion (Error Identification) and 3.3.3 Error Suggestion.: The identification and description of an error can be combined with programmatic information that user agents or assistive technologies can use to identify an error and provide error information to the user. For example, certain technologies can specify that the user's input must not fall outside a specific range, or that a form field is required. Currently, few technologies support this kind of programmatic information, but this success criterion does not require, nor prevent it.: It is perfectly acceptable to indicate the error in other ways such as through the use of an image, color, or other visual indicator, in addition to the text description.: Note: This criterion does not mandate any particular way in which errors should be displayed. Depending on the situation, it may be more suitable for all errors to be listed at the start or before a form. In other cases, it may be more appropriate to show errors inline, with error messages next to the specific fields that are in error. Errors could also be listed in an alert, or dialog. This criterion does not cover which of these methods should be used - the only requirement is for errors to be presented to users in text or a text alternative.: See also 3.3.3: Error Suggestion.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: Select the situation below that matches your content. Each situation includes techniques or combinations of techniques that are known and documented to be sufficient for that situation.: Situation A: If a form contains fields for which information from the user is mandatory.
	- G83: Providing text descriptions to identify required fields that were not completed
	- ARIA2: Identifying a required field with the aria-required property
	- ARIA21: Using aria-invalid to Indicate An Error Field
	- SCR18: Providing client-side validation and alert
	- PDF5: Indicating required form controls in PDF forms
	- Situation B: If information provided by the user is required to be in a specific data format or of certain values.
	- ARIA18: Using aria-alertdialog to Identify Errors
	- ARIA19: Using ARIA role=alert or Live Regions to Identify Errors
	- ARIA21: Using aria-invalid to Indicate An Error Field
	- G84: Providing a text description when the user provides information that is not in the list of allowed values
	- G85: Providing a text description when user input falls outside the required format or values
	- SCR18: Providing client-side validation and alert
	- SCR32: Providing client-side validation and adding error text via the DOM
	- PDF22: Indicating when user input falls outside the required format or values in PDF forms
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: G139: Creating a mechanism that allows users to jump to errors
	- G199: Providing success feedback when data is submitted successfully

- G83: Providing text descriptions to identify required fields that were not completed: http://localhost:3000/techniques/general/G83
- ARIA2: Identifying a required field with the aria-required property: http://localhost:3000/techniques/aria/ARIA2
- ARIA21: Using aria-invalid to Indicate An Error Field: http://localhost:3000/techniques/aria/ARIA21
- SCR18: Providing client-side validation and alert: http://localhost:3000/techniques/client-side-script/SCR18
- PDF5: Indicating required form controls in PDF forms: http://localhost:3000/techniques/pdf/PDF5
- ARIA18: Using aria-alertdialog to Identify Errors: http://localhost:3000/techniques/aria/ARIA18
- ARIA19: Using ARIA role=alert or Live Regions to Identify Errors: http://localhost:3000/techniques/aria/ARIA19
- ARIA21: Using aria-invalid to Indicate An Error Field: http://localhost:3000/techniques/aria/ARIA21
- G84: Providing a text description when the user provides information that is not in the list of allowed values: http://localhost:3000/techniques/general/G84
- G85: Providing a text description when user input falls outside the required format or values: http://localhost:3000/techniques/general/G85
- SCR18: Providing client-side validation and alert: http://localhost:3000/techniques/client-side-script/SCR18
- SCR32: Providing client-side validation and adding error text via the DOM: http://localhost:3000/techniques/client-side-script/SCR32
- PDF22: Indicating when user input falls outside the required format or values in PDF forms: http://localhost:3000/techniques/pdf/PDF22
- G139: Creating a mechanism that allows users to jump to errors: http://localhost:3000/techniques/general/G139
- G199: Providing success feedback when data is submitted successfully: http://localhost:3000/techniques/general/G199



--------------------------------------------------

Section 77: labels_or_instructions
==================================================

In Brief
	- Goal
	- Users know what information to enter.
	- What to do
	- Provide labels or instructions for inputs.
	- Why it's important
	- Everyone, especially those with cognitive disabilities, will know how to respond.

Success Criterion (SC): Labels or instructions are provided when content requires user input.

Intent: The intent of this Success Criterion is to have content authors present instructions or labels that identify the controls in a form so that users know what input data is expected. In the case of radio buttons, checkboxes, comboboxes, or similar controls that provide users with options, each option must have an appropriate label so that users know what they are actually selecting. Instructions or labels may also specify data formats for data entry fields, especially if they are out of the customary formats or if there are specific rules for correct input. Content authors may also choose to make such instructions available to users only when the individual control has focus especially when instructions are long and verbose.: The intent of this Success Criterion is not to clutter the page with unnecessary information but to provide important cues and instructions that will benefit people with disabilities. Too much information or instruction can be just as harmful as too little. The goal is to make certain that enough information is provided for the user to accomplish the task without undue confusion or navigation.: This Success Criterion does not require that labels or instructions be correctly marked up, identified, or associated with their respective controls - this aspect is covered separately by 1.3.1: Info and Relationships. It is possible for content to pass this Success Criterion (providing relevant labels and instructions) while failing Success Criterion 1.3.1 (if the labels or instructions aren't correctly marked up, identified, or associated).: Further, this Success Criterion does not take into consideration whether or not alternative methods of providing an accessible name or description for form controls and inputs has been used - this aspect is covered separately by 4.1.2: Name, Role and Value. It is possible for controls and inputs to have an appropriate accessible name or description (e.g. using aria-label="...") and therefore pass Success Criterion 4.1.2, but to still fail this Success Criterion (if the labels or instructions aren't presented to all users, not just those using assistive technologies).: This Success Criterion does not apply to links or other controls (such as an expand/collapse widget, or similar interactive components) that are not associated with data entry.: While this Success Criterion requires that controls and inputs have labels or instructions, whether or not labels (if used) are sufficiently clear or descriptive is covered separately by 2.4.6: Headings and Labels.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: G131: Providing descriptive labels AND one of the following:: ARIA1: Using the aria-describedby property to provide a descriptive label for user interface controls
	- ARIA9: Using aria-labelledby to concatenate a label from several text nodes
	- ARIA17: Using grouping roles to identify related form controls
	- G89: Providing expected data format and example
	- G184: Providing text instructions at the beginning of a form or set of fields that describes the necessary input
	- G162: Positioning labels to maximize predictability of relationships
	- G83: Providing text descriptions to identify required fields that were not completed
	- H90: Indicating required form controls using label or legend
	- PDF5: Indicating required form controls in PDF forms
	- H44: Using label elements to associate text labels with form controls
	- PDF10: Providing labels for interactive form controls in PDF documents
	- H71: Providing a description for groups of form controls using fieldset and legend elements
	- G167: Using an adjacent button to label the purpose of a field: Note: The techniques at the end of the above list should be considered "last resort" and only used when the other techniques cannot be applied to the page. The earlier techniques are preferred because they increase accessibility to a wider user group.: Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: G13: Describing what will happen before a change to a form control that causes a change of context to occur is made
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F82: Failure of Success Criterion 3.3.2 by visually formatting a set of phone number fields but not including a text label

- G131: Providing descriptive labels: http://localhost:3000/techniques/general/G131
- ARIA1: Using the aria-describedby property to provide a descriptive label for user interface controls: http://localhost:3000/techniques/aria/ARIA1
- ARIA9: Using aria-labelledby to concatenate a label from several text nodes: http://localhost:3000/techniques/aria/ARIA9
- ARIA17: Using grouping roles to identify related form controls: http://localhost:3000/techniques/aria/ARIA17
- G89: Providing expected data format and example: http://localhost:3000/techniques/general/G89
- G184: Providing text instructions at the beginning of a form or set of fields that describes the necessary input: http://localhost:3000/techniques/general/G184
- G162: Positioning labels to maximize predictability of relationships: http://localhost:3000/techniques/general/G162
- G83: Providing text descriptions to identify required fields that were not completed: http://localhost:3000/techniques/general/G83
- H90: Indicating required form controls using label or legend: http://localhost:3000/techniques/html/H90
- PDF5: Indicating required form controls in PDF forms: http://localhost:3000/techniques/pdf/PDF5
- H44: Using label elements to associate text labels with form controls: http://localhost:3000/techniques/html/H44
- PDF10: Providing labels for interactive form controls in PDF documents: http://localhost:3000/techniques/pdf/PDF10
- H71: Providing a description for groups of form controls using fieldset and legend elements: http://localhost:3000/techniques/html/H71
- G167: Using an adjacent button to label the purpose of a field: http://localhost:3000/techniques/general/G167
- G13: Describing what will happen before a change to a form control that causes a change of context to occur is made: http://localhost:3000/techniques/general/G13
- F82: Failure of Success Criterion 3.3.2 by visually formatting a set of phone number fields but not including a text label: http://localhost:3000/techniques/failures/F82



--------------------------------------------------

Section 78: error_suggestion
==================================================

In Brief
	- Goal
	- Users get suggestions on how to resolve errors.
	- What to do
	- Where errors are detected, suggest known ways to correct them.
	- Why it's important
	- People can address errors faster and with reduced effort.

Success Criterion (SC): If an input error is automatically detected and suggestions for correction are known, then the suggestions are provided to the user, unless it would jeopardize the security or purpose of the content.

Intent: The intent of this Success Criterion is to ensure that users receive appropriate suggestions for correction of an input error if it is possible. The definition of "input error" says that it is "information provided by the user that is not accepted" by the system. Some examples of information that is not accepted include information that is required but omitted by the user and information that is provided by the user but that falls outside the required data format or allowed values.: Success Criterion 3.3.1 provides for notification of errors. However, persons with cognitive limitations may find it difficult to understand how to correct the errors. People with visual disabilities may not be able to figure out exactly how to correct the error. In the case of an unsuccessful form submission, users may abandon the form because they may be unsure of how to correct the error even though they are aware that it has occurred.: The content author may provide the description of the error, or the user agent may provide the description of the error based on technology-specific, programmatically determined information.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Note: In some cases, more than one of these situations may apply. For example, when a mandatory field also requires the data to be in a specific format.: Sufficient Techniques: Select the situation below that matches your content. Each situation includes techniques or combinations of techniques that are known and documented to be sufficient for that situation.: Situation A: If information for a field is required to be in a specific data format:
	- ARIA18: Using aria-alertdialog to Identify Errors
	- G85: Providing a text description when user input falls outside the required format or values
	- G177: Providing suggested correction text
	- PDF22: Indicating when user input falls outside the required format or values in PDF forms
	- Situation B: Information provided by the user is required to be one of a limited set of values:
	- ARIA18: Using aria-alertdialog to Identify Errors
	- G84: Providing a text description when the user provides information that is not in the list of allowed values
	- G177: Providing suggested correction text
	- PDF22: Indicating when user input falls outside the required format or values in PDF forms
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: G139: Creating a mechanism that allows users to jump to errors
	- G199: Providing success feedback when data is submitted successfully
	- Client-Side Scripting Techniques (Advisory)
	- SCR18: Providing client-side validation and alert
	- SCR32: Providing client-side validation and adding error text via the DOM

- ARIA18: Using aria-alertdialog to Identify Errors: http://localhost:3000/techniques/aria/ARIA18
- G85: Providing a text description when user input falls outside the required format or values: http://localhost:3000/techniques/general/G85
- G177: Providing suggested correction text: http://localhost:3000/techniques/general/G177
- PDF22: Indicating when user input falls outside the required format or values in PDF forms: http://localhost:3000/techniques/pdf/PDF22
- ARIA18: Using aria-alertdialog to Identify Errors: http://localhost:3000/techniques/aria/ARIA18
- G84: Providing a text description when the user provides information that is not in the list of allowed values: http://localhost:3000/techniques/general/G84
- G177: Providing suggested correction text: http://localhost:3000/techniques/general/G177
- PDF22: Indicating when user input falls outside the required format or values in PDF forms: http://localhost:3000/techniques/pdf/PDF22
- G139: Creating a mechanism that allows users to jump to errors: http://localhost:3000/techniques/general/G139
- G199: Providing success feedback when data is submitted successfully: http://localhost:3000/techniques/general/G199
- SCR18: Providing client-side validation and alert: http://localhost:3000/techniques/client-side-script/SCR18
- SCR32: Providing client-side validation and adding error text via the DOM: http://localhost:3000/techniques/client-side-script/SCR32



--------------------------------------------------

Section 79: error_prevention_legal,_financial,_data
==================================================

In Brief
	- Goal
	- Users can avoid submitting incorrect important information.
	- What to do
	- Provide ways for users to confirm, correct, or reverse important submissions.
	- Why it's important
	- People with disabilities may be more likely to make mistakes, or not notice them.

Success Criterion (SC): For web pages that cause legal commitments or financial transactions for the user to occur, that modify or delete user-controllable data in data storage systems, or that submit user test responses, at least one of the following is true:: Reversible
	- Submissions are reversible.
	- Checked
	- Data entered by the user is checked for input errors and the user is provided an opportunity to correct them.
	- Confirmed
	- A mechanism is available for reviewing, confirming, and correcting information before finalizing the submission.

Intent: The intent of this Success Criterion is to help users with disabilities avoid serious consequences as the result of a mistake when performing an action that cannot be reversed. For example, purchasing non-refundable airline tickets or submitting an order to purchase stock in a brokerage account are financial transactions with serious consequences. If users have made a mistake on the date of air travel, they could end up with a ticket for the wrong day that cannot be exchanged. If users made a mistake on the number of stock shares to be purchased, they could end up purchasing more stock than intended. Both of these types of mistakes involve transactions that take place immediately and cannot be altered afterwards, and can be very costly. Likewise, it may be an unrecoverable error if users unintentionally modify or delete data stored in a database that they later need to access, such as their entire travel profile in a travel services web site. When referring to modification or deletion of 'user controllable' data, the intent is to prevent mass loss of data such as deleting a file or record. It is not the intent to require a confirmation for each save command or the simple creation or editing of documents, records or other data.: Users with disabilities may be more likely to make mistakes. People with reading disabilities may transpose numbers and letters, and those with motor disabilities may hit keys by mistake. Providing the ability to reverse actions allows users to correct a mistake that could result in serious consequences. Providing the ability to review and correct information gives the user an opportunity to detect a mistake before taking an action that has serious consequences.: User-controllable data is user-viewable data that the user can change and/or delete through an intentional action. Examples of the user controlling such data would be updating the phone number and address for the user's account, or deleting a record of past invoices from a website. It does not refer such things as internet logs and search engine monitoring data that the user can't view or interact with directly.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: Select the situation below that matches your content. Each situation includes techniques or combinations of techniques that are known and documented to be sufficient for that situation.: Situation A: If an application causes a legal transaction to occur, such as making a purchase or submitting an income tax return:
	- G164: Providing a stated time within which an online request (or transaction) may be amended or canceled by the user after making the request
	- G98: Providing the ability for the user to review and correct answers before submitting
	- G155: Providing a checkbox in addition to a submit button
	- Situation B: If an action causes information to be deleted:
	- G99: Providing the ability to recover deleted information
	- G168: Requesting confirmation to continue with selected action
	- G155: Providing a checkbox in addition to a submit button
	- Situation C: If the Web page includes a testing application:
	- G98: Providing the ability for the user to review and correct answers before submitting
	- G168: Requesting confirmation to continue with selected action
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: SCR18: Providing client-side validation and alert
	- G199: Providing success feedback when data is submitted successfully

- G164: Providing a stated time within which an online request (or transaction) may be amended or canceled by the user after making the request: http://localhost:3000/techniques/general/G164
- G98: Providing the ability for the user to review and correct answers before submitting: http://localhost:3000/techniques/general/G98
- G155: Providing a checkbox in addition to a submit button: http://localhost:3000/techniques/general/G155
- G99: Providing the ability to recover deleted information: http://localhost:3000/techniques/general/G99
- G168: Requesting confirmation to continue with selected action: http://localhost:3000/techniques/general/G168
- G155: Providing a checkbox in addition to a submit button: http://localhost:3000/techniques/general/G155
- G98: Providing the ability for the user to review and correct answers before submitting: http://localhost:3000/techniques/general/G98
- G168: Requesting confirmation to continue with selected action: http://localhost:3000/techniques/general/G168
- SCR18: Providing client-side validation and alert: http://localhost:3000/techniques/client-side-script/SCR18
- G199: Providing success feedback when data is submitted successfully: http://localhost:3000/techniques/general/G199



--------------------------------------------------

Section 80: help
==================================================

In Brief
	- Goal
	- Users can avoid making mistakes.
	- What to do
	- Provide help to users on the function currently being performed.
	- Why it's important
	- People with cognitive or other disabilities can complete their tasks more easily.

Success Criterion (SC): Context-sensitive help is available.

Intent: The intent of this Success Criterion is to help users avoid making mistakes. Some users with disabilities may be more likely to make mistakes than users without disabilities. Using context-sensitive help, users find out how to perform an operation without losing track of what they are doing.: Context-sensitive help only needs to be provided when the label is not sufficient to describe all functionality. The existence of context-sensitive help should be obvious to the user and they should be able to obtain it whenever they require it.: The content author may provide the help text, or the user agent may provide the help text based on technology-specific, programmatically determined information.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: Select the situation below that matches your content. Each situation includes techniques or combinations of techniques that are known and documented to be sufficient for that situation.: Situation A: If a form requires text input:
	- G71: Providing a help link on every Web page
	- G193: Providing help by an assistant in the Web page
	- G194: Providing spell checking and suggestions for text input
	- G184: Providing text instructions at the beginning of a form or set of fields that describes the necessary input
	- Situation B: If a form requires text input in an expected data format:
	- G89: Providing expected data format and example
	- G184: Providing text instructions at the beginning of a form or set of fields that describes the necessary input
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: H89: Using the title attribute to provide context-sensitive help

- G71: Providing a help link on every Web page: http://localhost:3000/techniques/general/G71
- G193: Providing help by an assistant in the Web page: http://localhost:3000/techniques/general/G193
- G194: Providing spell checking and suggestions for text input: http://localhost:3000/techniques/general/G194
- G184: Providing text instructions at the beginning of a form or set of fields that describes the necessary input: http://localhost:3000/techniques/general/G184
- G89: Providing expected data format and example: http://localhost:3000/techniques/general/G89
- G184: Providing text instructions at the beginning of a form or set of fields that describes the necessary input: http://localhost:3000/techniques/general/G184
- H89: Using the title attribute to provide context-sensitive help: http://localhost:3000/techniques/html/H89



--------------------------------------------------

Section 81: error_prevention_all
==================================================

In Brief
	- Goal
	- Users can avoid submitting incorrect information.
	- What to do
	- Provide ways for users to confirm, correct, or reverse any submissions.
	- Why it's important
	- People with disabilities may be more likely to make mistakes, or not notice them.

Success Criterion (SC): For web pages that require the user to submit information, at least one of the following is true:: Reversible
	- Submissions are reversible.
	- Checked
	- Data entered by the user is checked for input errors and the user is provided an opportunity to correct them.
	- Confirmed
	- A mechanism is available for reviewing, confirming, and correcting information before finalizing the submission.

Intent: The intent of this Success Criterion is to help users with disabilities avoid consequences that may result from making a mistake when submitting form data. This criterion builds on Success Criterion 3.3.4 in that it applies to all forms that require users to submit information.: Users with disabilities may be more likely to make mistakes and may have more difficulty detecting or recovering from mistakes. People with reading disabilities may transpose numbers and letters, and those with motor disabilities may hit keys by mistake. Providing the ability to reverse actions allows users to correct a mistake. Providing the ability to review and correct information gives the user an opportunity to detect a mistake before taking an action.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- Following the sufficient techniques for Success Criterion 3.3.4 for all forms that require the user to submit information.




--------------------------------------------------

Section 82: redundant_entry
==================================================

In Brief
	- Goal
	- Make it easier for users to complete multi-step processes.
	- What to do
	- Don't ask for the same information twice in the same session.
	- Why it's important
	- Some people with cognitive disabilities have difficulty remembering what they entered before.

Success Criterion (SC): Information previously entered by or provided to the user that is required to be entered again in the same process is either:: auto-populated, or
	- available for the user to select.: Except when:: re-entering the information is essential,
	- the information is required to ensure the security of the content, or
	- previously entered information is no longer valid.

Intent: The intent of this Success Criterion is to ensure that users can successfully complete multi-step processes. It reduces cognitive effort where information is asked for more than once during a process. It also reduces the need to recall information provided in a previous step.: Information that is required to be remembered for input can pose a significant barrier to users with cognitive or memory difficulties. All users experience a natural gradual mental fatigue as they proceed through steps in a process. This fatigue is accelerated by the stress of recalling information from short-term working memory. Users with learning, and cognitive disabilities are highly susceptible to mental fatigue.: Requiring people to recall information previously entered can cause them to give up or re-enter the same information incorrectly. The autocomplete feature of browsers is not considered sufficient because it is the content (the web site) that needs to provide the stored information for a redundant entry, or avoid asking for the same information again.: This Success Criterion does not add a requirement to store information between sessions. A process is defined on the basis of an activity and is not applicable when a user returns after closing a session or navigating away. However, a process can run across different domains, so if a check-out process includes a 3rd party payment provider, that would be in scope.: The term "available to select" is not prescriptive. The term allows authors to develop techniques where auto-population is not possible. It can include allowing the user to:: select and populate a field, including from a drop-down;
	- select text from the page and copy it into an input;
	- tick a checkbox to populate inputs with the same values as previously entered (e.g., my billing address is the same as my shipping address).: Data which is "available to select" would need to be on the same page. Ideally, it would be visible by default and closely associated with the input where the data is required. However, it could be elsewhere on a page, including within a show/hide component.: This Success Criterion does not apply if data is provided by the user with a different method, such as uploading a resume in a document format.: This Success Criterion does not impact Accessible Authentication (Minimum), for which allowing auto-filling of passwords is a sufficient technique. In that case the filling is performed by the user's browser. Redundant Entry is asking for the website content to make the previous entry available, but not between sessions or for essential purposes such as asking for a password.: This criterion does not include requirements or exceptions specific to privacy or personally identifiable information (PII), but when implementing techniques such as auto-population, authors should ensure data protection when storing information even temporarily during a process. It is possible to eliminate redundant entry in ways that do not introduce additional privacy risks, but it is also possible that a poor implementation (for meeting this criterion) could leak additional PII.: Exceptions: There are exceptions for:: Essential uses of input re-entry for things like memory games which would be invalidated if the previous answers were supplied.
	- Security measures such as preventing a password string from being shown or copied. When creating a password, it should be a unique and complex string and therefore cannot be validated by the author. If the system requires the user to manually create a password that is not displayed, having users re-validate their new string is allowed as an exception.
	- When the previously entered information is no longer valid, it can be requested that the user enter that information again.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G221: Provide data from a previous step in a process
	- Not requesting the same information twice (Potential future technique)

- G221: Provide data from a previous step in a process: http://localhost:3000/techniques/general/G221



--------------------------------------------------

Section 83: accessible_authentication_minimum
==================================================

In Brief
	- Goal
	- Make logins possible with less mental effort.
	- What to do
	- Don't make people solve, recall, or transcribe something to log in.
	- Why it's important
	- Some people with cognitive disabilities cannot solve puzzles, memorize a username and password, or retype one-time passcodes.

Success Criterion (SC): A cognitive function test (such as remembering a password or solving a puzzle) is not required for any step in an authentication process unless that step provides at least one of the following:: Alternative
	- Another authentication method that does not rely on a cognitive function test.
	- Mechanism
	- A mechanism is available to assist the user in completing the cognitive function test.
	- Object Recognition
	- The cognitive function test is to recognize objects.
	- Personal Content
	- The cognitive function test is to identify non-text content the user provided to the website.: Note 1: "Object recognition" and "Personal content" may be represented by images, video, or audio.: Note 2: Examples of mechanisms that satisfy this criterion include:
	- support for password entry by password managers to reduce memory need, and
	- copy and paste to reduce the cognitive burden of re-typing.

Intent: The purpose of this Success Criterion is to ensure there is an accessible, easy-to-use, and secure method for users to authenticate when logging into an existing account. As the most prevalent form of authentication, Web sites commonly rely on usernames and passwords to log in. However, memorizing a username and password places a very high or impossible burden upon people with certain cognitive disabilities, as do additional steps often added to authentication processes. For instance, the need to transcribe a one-time verification code or requiring a puzzle to be solved.: While Web sites can use the recognition of objects or of non-text content provided by the user to meet this Success Criterion, such techniques do not fully support the cognitive accessibility community and should be avoided if possible. Refer to Accessible Authentication (Enhanced) for guidance to be more inclusive and accessible.: This Success Criterion is focused on authentication of existing users. It does not cover creation of a username or initiation of an account. For many Web sites, establishing an initial username and credentials may not differ greatly from logging in with that username. The techniques used to satisfy this criterion (particularly allowing pasting into inputs and not relying on transcription) can also reduce the cognitive burden in account creation. However, the focus of the Success Criterion is on reducing the ongoing need for users to recall previously supplied information each time they log in or otherwise authenticate to an account.: Cognitive Function Tests: Remembering a site-specific password is a cognitive function test. Such tests are known to be problematic for many people with cognitive disabilities. Whether it is remembering random strings of characters, or a pattern gesture to perform on a touch screen, cognitive function tests will exclude some people. When a cognitive function test is used, at least one other authentication method must be available which is not a cognitive function test.: Some CAPTCHA systems have an audio alternative of the visible text. If the user needs to transcribe this audio, it cannot be used to meet the Alternative exception.: If there is more than one step in the authentication process, such as with multi-factor authentication, all steps need to comply with this Success Criterion to pass. There needs to be a path through authentication that does not rely on cognitive function tests.: Being able to recover or change the email and password is an important part of authentication. If the user is authenticating with alternative information in order to recover their account, there needs to be a method that is not a cognitive function test.: Many organizations are required to use 2-factor authentication that combines independent sources to confirm a user's identity. These sources can consist of combining authentication through:: knowledge (e.g., password, letters in a passphrase or memorized swipe path);
	- possession (e.g., a verification code generated or received on a device, or scanning of a QR code on an external device);
	- biometrics (e.g., fingerprint scanning, facial recognition or keystroke dynamics).: Most knowledge-based authentication methods rely on a cognitive function test, so mechanisms to assist users must be available. When authentication relies on performing an action on a separate device, it should be possible to complete the action without the need to transcribe information. It may not be possible to know what device-based authentication methods are available to a user; offering a choice of methods can allow them to choose the path that most suits them.: Authentication Approaches: Web sites can employ username (or email) and password inputs as an authentication method if the author enables the user agent (browsers and third-party password managers) to fill in the fields automatically. Generally, if the login form meets Success Criterion 1.3.5 Input Purpose, and the form controls have an appropriate accessible name in accordance with Success Criterion 4.1.2 Name, Role, Value, the user agent should be able to reliably recognize the fields and automatically fill them in. However, if the user agent is actively blocked from filling in the fields (for instance, by a script), then the page would not pass this criterion because it prevents the mechanism from working.: Copy and paste: Copy and paste can be relied on to avoid transcription. Users can copy their login credentials from a local source (such as a standalone third-party password manager) and paste it into the username and password fields on a login form, or into a web-based command line interfaces asking for a password. Blocking people from pasting into authentication fields, or using a different format between the copied text and the input field (for example, "Enter the 3rd, 4th, and 6th character of your password"), would force the user to transcribe information and therefore fail this criterion, unless another method is available.: Two-factor authentication systems (verification codes): Beyond usernames and passwords, some sites may use two-factor authentication, asking the user to enter a verification code (also called a passcode or one-time password). A service that requires manual transcription of a verification code is not compliant. As with usernames and passwords, it must be possible for a user to at least paste the code (such as from a standalone third-party password manager, text message application, or software-based security key), or to allow user agents to fill in the fields automatically.: There are scenarios where a verification code must be received or generated on a secondary device. For example, authenticating in a web browser on a laptop requires a verification code that is sent as an SMS text message to a mobile phone. However, in most cases, it is possible for the code to then be sent directly to the primary device, where it can then be copied and pasted (for example, by copying the code on the secondary device and emailing it to the primary device, or through the use of a shared cross-device clipboard where copying content on the secondary device makes it available to paste on the primary device). Evaluating whether or not the code can be seamlessly transferred from the secondary device to the primary device is outside of the scope for this Success Criterion. For the purpose of evaluating Web content that relies on authentication using these types of secondary device systems, it is assumed that provisions are in place that make the code available in the user's clipboard. Evaluating this criterion therefore only requires verification that the web content does allow pasting the clipboard content in the related authentication challenge field.: Note that two-factor systems that do not rely on codes — including hardware authentication devices (such as YubiKey), secondary applications (either on the same primary device, or on a secondary device) that expect the user to confirm that it is indeed them trying to log in, and authentication methods provided by the user's operating system (such as Windows Hello, or Touch ID/Face ID on macOS and iOS) — are not a cognitive function test.: Object Recognition: If a CAPTCHA is used as part of an authentication process, there must be a method that does not include a cognitive function test, unless it meets the exception. If the test is based on something the website has set such as remembering or transcribing a word, or recognizing a picture the website provided, that would be a cognitive functional test. Recognizing objects, or a picture the user has provided is a cognitive function test; however, it is excepted at the AA level.: An object in this context means the general English definition ("a material thing that can be seen and touched") and can include vehicles and animals. If the test goes beyond recognition (e.g. multiply the number cats by the number of dogs), that does not meet the exception.: Some forms of object recognition may require an understanding of a particular culture. For example, taxis can appear differently in different locales. This is an issue for many people, including people with disabilities, but it is not considered an accessibility-specific issue.: Some CAPTCHAs and cognitive function tests used for authentication may only appear in certain situations, such as when ad blockers are present, or after repeated incorrect password entry. This criterion applies when these tests are used regardless of whether they are used every time or only triggered by specific scenarios.: There are a number of technologies that can be employed to prevent scripted abuse of the authentication process.: 1.1.1. Rate-limited Access
	- 1.1.2. Client Geo-Location
	- 1.1.3. Private Client Authentication: None of these systems are 100% effective. However, they may reduce the likelihood of a CAPTCHA being displayed.: Personal Content: Personal content is sometimes used as a second factor for authentication. For example, as part of account creation the user would upload a picture, and when logging in they would be asked to select that picture from several possible alternatives. Care must be taken to provide adequate security in this case, since non-legitimate users might be able to guess the correct personal content when presented with a choice.: Text-based personal content does not qualify for this exception as it relies on recall (rather than recognition), and transcription (rather than selecting an item). Whilst picture-based personal content will still be a barrier for some people, text based versions tend to be a much larger barrier.: Hiding characters: Another factor that can contribute to cognitive load is hiding characters when typing. Although this criterion requires that users do not have to type in (transcribe) a password, there are scenarios where that is necessary such as creating a password to be saved by a password manager. Providing a feature to optionally show a password can improve the chance of success for some people with cognitive disabilities or those who have difficulties with accurately typing.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G218: Email link authentication
	- H100: Providing properly marked up email and password inputs
	- Providing WebAuthn as an alternative to username/password (Potential future technique)
	- Providing a 3rd party login using OAuth (Potential future technique)
	- Using two techniques to provide 2 factor authentication (Potential future technique)
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F109: Failure of Success Criterion 3.3.8 and 3.3.9 due to preventing password or code re-entry in the same format

- G218: Email link authentication: http://localhost:3000/techniques/general/G218
- H100: Providing properly marked up email and password inputs: http://localhost:3000/techniques/html/H100
- F109: Failure of Success Criterion 3.3.8 and 3.3.9 due to preventing password or code re-entry in the same format: http://localhost:3000/techniques/failures/F109



--------------------------------------------------

Section 84: accessible_authentication_enhanced
==================================================

In Brief
	- Goal
	- Make logins possible with less mental effort.
	- What to do
	- Don't make people recognize objects or user-supplied images and media to login.
	- Why it's important
	- Some people with cognitive disabilities can't do puzzles, including identifying objects and non-text information they previously supplied.

Success Criterion (SC): A cognitive function test (such as remembering a password or solving a puzzle) is not required for any step in an authentication process unless that step provides at least one of the following:: Alternative
	- Another authentication method that does not rely on a cognitive function test.
	- Mechanism
	- A mechanism is available to assist the user in completing the cognitive function test.

Intent: The purpose of this Success Criterion is to ensure there is an accessible, easy-to-use, and secure method to log in, access content, and undertake tasks. This criterion is the same as Accessible Authentication (Minimum) but without the exceptions for objects and user-provided content.: Any required step of the authentication process:: cannot display a selection of images, videos, or audio clips, where users must choose which image they provided;
	- cannot display a selection of images, where users must choose the images which contain a specific object, such as a car.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques
	- G218: Email link authentication
	- H100: Providing properly marked up email and password inputs
	- Providing WebAuthn as an alternative to username/password (Potential future technique)
	- Providing a 3rd party login using OAuth (Potential future technique)
	- Using two techniques to provide 2 factor authentication (Potential future technique)
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F109: Failure of Success Criterion 3.3.8 and 3.3.9 due to preventing password or code re-entry in the same format

- G218: Email link authentication: http://localhost:3000/techniques/general/G218
- H100: Providing properly marked up email and password inputs: http://localhost:3000/techniques/html/H100
- F109: Failure of Success Criterion 3.3.8 and 3.3.9 due to preventing password or code re-entry in the same format: http://localhost:3000/techniques/failures/F109



--------------------------------------------------

Section 85: parsing_obsolete_and_removed
==================================================

In Brief
	- Goal
	- Assistive technology can properly present page content.
	- What to do
	- Create web pages according to specifications.
	- Why it's important
	- People can browse web content more easily with their assistive technology.

Success Criterion (SC): Note: This criterion was originally adopted to address problems that assistive technology had directly parsing HTML. Assistive technology no longer has any need to directly parse HTML. Consequently, these problems either no longer exist or are addressed by other criteria. This criterion no longer has utility and is removed.

Intent
	- New in WCAG 2.2:: This criterion has been removed from WCAG 2.2.: The intent of this Success Criterion was to ensure that user-agents, including assistive technologies, can accurately interpret and parse content. Since WCAG 2.0 was published, the specifications (such as HTML) and browsers have improved their handling of parsing errors. It is also the case that assistive technology used to do their own parsing of markup, but now rely on the browser. For that reason this success criterion has been removed. Many issues that would have failed this criterion will fail Info and Relationships or Name, Role, Value. Other issues are excepted by the "except where the specification allow these features" part of the criterion.: The following content is left for historical purposes to show the original intent.: Success Criterion 4.1.1 Parsing (Level A): In content implemented using markup languages, elements have complete start and end tags, elements are nested according to their specifications, elements do not contain duplicate attributes, and any IDs are unique, except where the specifications allow these features.: Note: Start and end tags that are missing a critical character in their formation, such as a closing angle bracket or a mismatched attribute value quotation mark are not complete.: The intent of this Success Criterion is to ensure that user agents, including assistive technologies, can accurately interpret and parse content. If the content cannot be parsed into a data structure, then different user agents may present it differently or be completely unable to parse it. Some user agents use "repair techniques" to render poorly coded content.: Since repair techniques vary among user agents, authors cannot assume that content will be accurately parsed into a data structure or that it will be rendered correctly by specialized user agents, including assistive technologies, unless the content is created according to the rules defined in the formal grammar for that technology. In markup languages, errors in element and attribute syntax and failure to provide properly nested start/end tags lead to errors that prevent user agents from parsing the content reliably. Therefore, the Success Criterion requires that the content can be parsed using only the rules of the formal grammar.: Note: The concept of "well formed" is close to what is required here. However, exact parsing requirements vary amongst markup languages, and most non XML-based languages do not explicitly define requirements for well formedness. Therefore, it was necessary to be more explicit in the Success Criterion in order to be generally applicable to markup languages. Because the term "well formed" is only defined in XML, and (because end tags are sometimes optional) valid HTML does not require well formed code, the term is not used in this Success Criterion.: With the exception of one Success Criterion ( 1.4.4: Resize Text, which specifically mentions that the effect specified by the Success Criterion must be achieved without relying on an assistive technology) authors can meet the Success Criteria with content that assumes use of an assistive technology (or access features in use agents) by the user, where such assistive technologies (or access features in user agents) exist and are available to the user.


--------------------------------------------------

Section 86: name,_role,_value
==================================================

In Brief
	- Goal
	- People using assistive technology understand all components.
	- What to do
	- Give components correct names, roles, states, and values.
	- Why it's important
	- Assistive technology only works well when code is done properly.

Success Criterion (SC): For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies.: Note: This success criterion is primarily for web authors who develop or script their own user interface components. For example, standard HTML controls already meet this success criterion when used according to specification.

Intent: The intent of this Success Criterion is to ensure that Assistive Technologies (AT) can gather appropriate information about, activate (or set) and keep up to date on the status of user interface controls in the content.: When standard controls from accessible technologies are used, this process is straightforward. If the user interface elements are used according to specification the conditions of this provision will be met. (See examples of Success Criterion 4.1.2 below): If custom controls are created, however, or interface elements are programmed (in code or script) to have a different role and/or function than usual, then additional measures need to be taken to ensure that the controls provide important and appropriate information to assistive technologies and allow themselves to be controlled by assistive technologies.: What roles and states are appropriate to convey to assistive technology will depend on what the control represents. Specifics about such information are defined by other specifications, such as WAI-ARIA, or the relevant platform standards. Another factor to consider is whether there is sufficient accessibility support with assistive technologies to convey the information as specified.: A particularly important state of a user interface control is whether or not it has focus. The focus state of a control can be programmatically determined, and notifications about change of focus are sent to user agents and assistive technology. Other examples of user interface control states are whether or not a checkbox or radio button has been selected, or whether a collapsible tree view or accordion is expanded or collapsed.: Note: Success Criterion 4.1.2 requires a programmatically determinable name for all user interface components. Names may be visible or invisible. Occasionally, the name needs to be visible, in which case it is identified as a label. Refer to the definition of name and label in the glossary for more information.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: Select the situation below that matches your content. Each situation includes techniques or combinations of techniques that are known and documented to be sufficient for that situation.: Situation A: If using a standard user interface component in a markup language (e.g., HTML):
	- ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used
	- ARIA16: Using aria-labelledby to provide a name for user interface controls: G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes using technology-specific techniques below:: H91: Using HTML form controls and links
	- H44: Using label elements to associate text labels with form controls
	- H64: Using the title attribute of the iframe element
	- H65: Using the title attribute to identify form controls when the label element cannot be used
	- H88: Using HTML according to spec
	- Situation B: If using script or code to re-purpose a standard user interface component in a markup language:: Exposing the names and roles, allowing user-settable properties to be directly set, and providing notification of changes using one of the following techniques:: ARIA16: Using aria-labelledby to provide a name for user interface controls
	- Situation C: If using a standard user interface component in a programming technology:: G135: Using the accessibility API features of a technology to expose names and … notification of changes using technology-specific techniques below:: PDF10: Providing labels for interactive form controls in PDF documents
	- PDF12: Providing name, role, value information for form fields in PDF documents
	- Situation D: If creating your own user interface component in a programming language:: G10: Creating components using a technology that supports the accessibility … notification of changes using technology-specific techniques below:: ARIA4: Using a WAI-ARIA role to expose the role of a user interface component
	- ARIA5: Using WAI-ARIA state and property attributes to expose the state of a user interface component
	- ARIA16: Using aria-labelledby to provide a name for user interface controls
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F59: Failure of Success Criterion 4.1.2 due to using script to make div or span a user interface control in HTML without providing a role for the control
	- F15: Failure of Success Criterion 4.1.2 due to implementing custom controls that do not use an accessibility API for the technology, or do so incompletely
	- F20: Failure of Success Criterion 1.1.1 and 4.1.2 due to not updating text alternatives when changes to non-text content occur
	- F42: Failure of Success Criteria 1.3.1, 2.1.1, 2.1.3, or 4.1.2 when emulating links
	- F68: Failure of Success Criterion 4.1.2 due to a user interface control not having a programmatically determined name
	- F79: Failure of Success Criterion 4.1.2 due to the focus state of a user interface component not being programmatically determinable or no notification of change of focus state available
	- F86: Failure of Success Criterion 4.1.2 due to not providing names for each part of a multi-part form field, such as a US telephone number
	- F89: Failure of Success Criteria 2.4.4, 2.4.9 and 4.1.2 due to not providing an accessible name for an image which is the only content in a link
	- F111: Failure of Success Criteria 1.3.1, 2.5.3, and 4.1.2 due to a control with visible label text but no accessible name

- ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used: http://localhost:3000/techniques/aria/ARIA14
- ARIA16: Using aria-labelledby to provide a name for user interface controls: http://localhost:3000/techniques/aria/ARIA16
- G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes: http://localhost:3000/techniques/general/G108
- H91: Using HTML form controls and links: http://localhost:3000/techniques/html/H91
- H44: Using label elements to associate text labels with form controls: http://localhost:3000/techniques/html/H44
- H64: Using the title attribute of the iframe element: http://localhost:3000/techniques/html/H64
- H65: Using the title attribute to identify form controls when the label element cannot be used: http://localhost:3000/techniques/html/H65
- H88: Using HTML according to spec: http://localhost:3000/techniques/html/H88
- ARIA16: Using aria-labelledby to provide a name for user interface controls: http://localhost:3000/techniques/aria/ARIA16
- G135: Using the accessibility API features of a technology to expose names and … notification of changes: http://localhost:3000/techniques/general/G135
- PDF10: Providing labels for interactive form controls in PDF documents: http://localhost:3000/techniques/pdf/PDF10
- PDF12: Providing name, role, value information for form fields in PDF documents: http://localhost:3000/techniques/pdf/PDF12
- G10: Creating components using a technology that supports the accessibility … notification of changes: http://localhost:3000/techniques/general/G10
- ARIA4: Using a WAI-ARIA role to expose the role of a user interface component: http://localhost:3000/techniques/aria/ARIA4
- ARIA5: Using WAI-ARIA state and property attributes to expose the state of a user interface component: http://localhost:3000/techniques/aria/ARIA5
- ARIA16: Using aria-labelledby to provide a name for user interface controls: http://localhost:3000/techniques/aria/ARIA16
- F59: Failure of Success Criterion 4.1.2 due to using script to make div or span a user interface control in HTML without providing a role for the control: http://localhost:3000/techniques/failures/F59
- F15: Failure of Success Criterion 4.1.2 due to implementing custom controls that do not use an accessibility API for the technology, or do so incompletely: http://localhost:3000/techniques/failures/F15
- F20: Failure of Success Criterion 1.1.1 and 4.1.2 due to not updating text alternatives when changes to non-text content occur: http://localhost:3000/techniques/failures/F20
- F42: Failure of Success Criteria 1.3.1, 2.1.1, 2.1.3, or 4.1.2 when emulating links: http://localhost:3000/techniques/failures/F42
- F68: Failure of Success Criterion 4.1.2 due to a user interface control not having a programmatically determined name: http://localhost:3000/techniques/failures/F68
- F79: Failure of Success Criterion 4.1.2 due to the focus state of a user interface component not being programmatically determinable or no notification of change of focus state available: http://localhost:3000/techniques/failures/F79
- F86: Failure of Success Criterion 4.1.2 due to not providing names for each part of a multi-part form field, such as a US telephone number: http://localhost:3000/techniques/failures/F86
- F89: Failure of Success Criteria 2.4.4, 2.4.9 and 4.1.2 due to not providing an accessible name for an image which is the only content in a link: http://localhost:3000/techniques/failures/F89
- F111: Failure of Success Criteria 1.3.1, 2.5.3, and 4.1.2 due to a control with visible label text but no accessible name: http://localhost:3000/techniques/failures/F111



--------------------------------------------------

Section 87: status_messages
==================================================

In Brief
	- Goal
	- Make users aware of important changes in content.
	- What to do
	- Let assistive technology notify users about status changes that don't take focus.
	- Why it's important
	- People who do not see messages need to be informed about them.

Success Criterion (SC): In content implemented using markup languages, status messages can be programmatically determined through role or properties such that they can be presented to the user by assistive technologies without receiving focus.

Intent: The intent of this Success Criterion is to make users aware of important changes in content that are not given focus, and to do so in a way that doesn't unnecessarily interrupt their work.: The intended beneficiaries are blind and low vision users of assistive technologies with screen reader capabilities. An additional benefit is that assistive technologies for users with cognitive disabilities may achieve an alternative means of indicating (or even delaying or supressing) status messages, as preferred by the user.: The scope of this Success Criterion is specific to changes in content that involve status messages. A status message is a defined term in WCAG. There are two main criteria that determine whether something meets the definition of a status message:: the message provides information to the user on the success or results of an action, on the waiting state of an application, on the progress of a process, or on the existence of errors;
	- the message is not delivered via a change in context.: Information can be added to pages which does not meet the definition of a status message. For example, the list of results obtained from a search are not considered a status update and thus are not covered by this Success Criterion. However, brief text messages displayed about the completion or status of the search, such as "Searching...", "18 results returned" or "No results returned" would be status updates if they do not take focus. Examples of status messages are given in the section titled Status Message Examples below.: This Success Criterion specifically addresses scenarios where new content is added to the page without changing the user's context. Changes of context, by their nature, interrupt the user by taking focus. They are already surfaced by assistive technologies, and so have already met the goal to alert the user to new content. As such, messages that involve changes of context do not need to be considered and are not within the scope of this Success Criterion. Examples of scenarios that add new content by changing the context are given in the section titled Examples of Changes That Are Not Status Messages below.

Techniques: Each numbered item in this section represents a technique or combination of techniques that the WCAG Working Group deems sufficient for meeting this Success Criterion. A technique may go beyond the minimum requirement of the criterion. There may be other ways of meeting the criterion not covered by these techniques. For information on using other techniques, see Understanding Techniques for WCAG Success Criteria, particularly the "Other Techniques" section.: Sufficient Techniques: Select the situation below that matches your content. Each situation includes techniques or combinations of techniques that are known and documented to be sufficient for that situation.: Situation A: If a status message advises on the success or results of an action, or the state of an application:
	- ARIA22: Using role=status to present status messages in combination with any of the following:
	- G199: Providing success feedback when data is submitted successfully
	- Situation B: If a status message conveys a suggestion, or a warning on the existence of an error:
	- ARIA19: Using ARIA role=alert or Live Regions to Identify Errors in combination with any of the following:
	- G83: Providing text descriptions to identify required fields that were not completed
	- G84: Providing a text description when the user provides information that is not in the list of allowed values
	- G85: Providing a text description when user input falls outside the required format or values
	- G177: Providing suggested correction text
	- G194: Providing spell checking and suggestions for text input: Note: Not all examples in the preceding general techniques use status messages to convey warnings or errors to users. A role of "alert" is only necessary where a change of context does not take place.: Situation C: If a status message conveys information on the progress of a process:
	- ARIA23: Using role=log to identify sequential information updates
	- Using role="progressbar" (future link)
	- ARIA22: Using role=status to present status messages in combination with G193: Providing help by an assistant in the Web page
	- Advisory Techniques: Although not required for conformance, the following additional techniques should be considered in order to make content more accessible. Not all techniques can be used or would be effective in all situations.: Using aria-live regions with chat clients (future link)
	- Using aria-live regions to support 1.4.13 Content on Hover or Focus (future link)
	- Using role="marquee" (future link)
	- Using role="timer" (future link)
	- Where appropriate, moving focus to new content with ARIA18: Using aria-alertdialog to Identify Errors
	- Supporting personalization with SCR14: Using scripts to make nonessential alerts optional
	- Failures: The following are common mistakes that are considered failures of this Success Criterion by the WCAG Working Group.: F103: Failure of Success Criterion 4.1.3 due to providing status messages that cannot be programmatically determined through role or properties
	- Using role="alert" or aria-live="assertive" on content which is not important and time-sensitive (future link)

- ARIA22: Using role=status to present status messages: http://localhost:3000/techniques/aria/ARIA22
- G199: Providing success feedback when data is submitted successfully: http://localhost:3000/techniques/general/G199
- ARIA19: Using ARIA role=alert or Live Regions to Identify Errors: http://localhost:3000/techniques/aria/ARIA19
- G83: Providing text descriptions to identify required fields that were not completed: http://localhost:3000/techniques/general/G83
- G84: Providing a text description when the user provides information that is not in the list of allowed values: http://localhost:3000/techniques/general/G84
- G85: Providing a text description when user input falls outside the required format or values: http://localhost:3000/techniques/general/G85
- G177: Providing suggested correction text: http://localhost:3000/techniques/general/G177
- G194: Providing spell checking and suggestions for text input: http://localhost:3000/techniques/general/G194
- ARIA23: Using role=log to identify sequential information updates: http://localhost:3000/techniques/aria/ARIA23
- ARIA22: Using role=status to present status messages: http://localhost:3000/techniques/aria/ARIA22
- G193: Providing help by an assistant in the Web page: http://localhost:3000/techniques/general/G193
- ARIA18: Using aria-alertdialog to Identify Errors: http://localhost:3000/techniques/aria/ARIA18
- SCR14: Using scripts to make nonessential alerts optional: http://localhost:3000/techniques/client-side-script/SCR14
- F103: Failure of Success Criterion 4.1.3 due to providing status messages that cannot be programmatically determined through role or properties: http://localhost:3000/techniques/failures/F103



--------------------------------------------------

Section 88: introduction_to_understanding_wcag_2.2
==================================================


--------------------------------------------------

Section 89: understanding_techniques_for_wcag_2.2_success_criteria
==================================================


--------------------------------------------------

Section 90: understanding_test_rules_for_wcag_2.2_success_criteria
==================================================


--------------------------------------------------

Section 91: understanding_conformance
==================================================


--------------------------------------------------

Section 92: how_to_refer_to_wcag_2.2_from_other_documents
==================================================


--------------------------------------------------

Section 93: documenting_accessibility_support_for_uses_of_a_web_technology
==================================================


--------------------------------------------------

Section 94: understanding_metadata
==================================================


--------------------------------------------------

