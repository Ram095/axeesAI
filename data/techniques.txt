File: aria.json
==================================================

ARIA1: - Using the aria-describedby property to provide a descriptive label for user interface controls
Using the aria-describedby property to provide a descriptive label for user interface controls

About this Technique
	- This technique relates to:
	- 1.3.1: Info and Relationships (Advisory)
	- 3.3.2: Labels or Instructions (Sufficient when used with G131: Providing descriptive labels)
	- This technique applies to technologies that support Accessible Rich Internet Applications (WAI-ARIA).

Description : The purpose of this technique is to demonstrate how to use the WAI-ARIA aria-describedby property to provide programmatically determined, descriptive information about a user interface element. The aria-describedby property may be used to attach descriptive information to one or more elements through the use of an id reference list. The id reference list contains one or more unique element ids. : Refer to ARIA in HTML for information on how to provide WAI-ARIA States and Properties with HTML. WAI-ARIA States and Properties are compatible with other languages as well; refer to documentation in those languages. : Note : The aria-describedby property is not designed to reference descriptions on an external resource - since it is an id, it must reference an element in the same DOM document.

Examples
Example 1: Using aria-describedby to associate instructions with form fields

Sample form field using aria-describedby to associate instructions with form fields while there is a form label.

<form>
  <label for="fname">First name</label>
  <input aria-describedby="int2" autocomplete="given-name" id="fname" type="text">
  <p id="int2">Your first name is sometimes called your "given name".</p>
</form>
Example 2: Using aria-describedby property to provide more detailed information about the button
<div>
  <span id="fontDesc">Select the font faces and sizes to be used on this page</span>
  <button aria-describedby="fontDesc" id="fontB" type="button">Fonts</button>
</div>
<div>
  <span id="colorDesc">Select the colors to be used on this page</span>
  <button aria-describedby="colorDesc" id="colorB" type="button">Colors</button>
</div>
<div>
  <span id="customDesc">Customize the layout and styles used on this page</span>
  <button aria-describedby="customDesc" id="customB" type="button">Customize</button>
</div>

Related techniques:
- ARIA2: Identifying a required field with the aria-required property
- ARIA7: Using aria-labelledby for link purpose


------------------------------

ARIA2: - Identifying a required field with the aria-required property
Identifying a required field with the aria-required property

About this Technique
	- This technique relates to:
	- 1.3.1: Info and Relationships (Advisory)
	- 3.3.1: Error Identification (Sufficient)
	- This technique applies to technologies that support Accessible Rich Internet Applications (WAI-ARIA).

Description : The objective of this technique is to provide programmatic indication that a form field (which shown through presentation to be required) is mandatory for successful submission of a form. : The fact that the element is required is often visually presented (via a text or non-text symbol, or text indicating input is required or color / styling) but this is not programmatically determinable as part of the field's name. : The WAI-ARIA aria-required property indicates that user input is required before submission. The aria-required property can have values of true or false. For example, if a user must fill in an address field, then aria-required is set to true. : Note : Use of aria-required="true" might be beneficial even when an asterisk or other text symbol is programmatically associated with the field as it may reinforce its required property for some assistive technology users. : The fact that the element is required is often visually presented (such as a sign or symbol after the control). Using the aria-required property in addition to the visual presentation makes it much easier for user agents to pass on this important information to the user in a user agent-specific manner. Refer to ARIA in HTML for information on how to provide WAI-ARIA States and Properties with HTML. WAI-ARIA States and Properties are compatible with other languages as well; refer to documentation in those languages.

Examples
Example 1: The required property is indicated by an asterisk placed in the label element
<form>
  <p>Note: * denotes a required field</p>
  <div>
    <label for="usrname">Login name *:</label>
    <input aria-required="true" autocomplete="username" id="usrname" type="text">
  </div>
  <div>
    <label for="pwd">Password *:</label>
    <input aria-required="true" autocomplete="current-password" 
     id="pwd" type="password">
  </div>
  <div>
    <input type="submit" value="Login">
  </div>
</form>
Example 2: The required property is indicated by the word "required" placed next to the label element
<form>
  <div>
    <label for="fname">First name:</label> <span>(required)</span>
    <input aria-required="true" autocomplete="given-name" id="fname" type="text">
  </div>
  <div>
    <label for="mname">Middle name:</label> <span>(required)</span>
    <input autocomplete="additional-name" id="mname" type="text">
  </div>
  <div>
    <label for="lname">Last name:</label> <span>(required)</span>
    <input aria-required="true" autocomplete="family-name" id="lname" type="text">
  </div>
  <div>
    <label for="email">Email address:</label> <span>(required)</span>
    <input aria-required="true" autocomplete="email" id="email" type="text">
  </div>
  <div>
    <label for="zip_post">Zip / Postal code:</label> <span>(required)</span>
    <input aria-required="true" autocomplete="postal-code" id="zip_post" type="text">
  </div>
  <div>
    <input type="submit" value="Next Step">
  </div>
</form>
Example 3: Required fields are indicated by a red border around the fields and a star icon rendered via CSS using ::after

This example uses custom radio buttons with role=radio. The CSS properties are available below the form.

<form>
  <label data-required="true" for="acctnum">Account Number</label>
  <input aria-required="true" id="acctnum" type="text">

  <p data-required="true" id="radio_label">
    Please send an alert when balance exceeds $3,000.
  </p>

  <ul aria-required="true" aria-labelledby="radio_label" role="radiogroup">
    <li aria-checked="false" id="rb1" role="radio" tabindex="0">Yes</li>
    <li aria-checked="false" id="rb2" role="radio" tabindex="-1">No</li>
  </ul>
</form>

Related CSS style definition for this example:

[aria-required=true] {
  border: red thin solid;
}
[data-required=true]::after {
  content: url('/iconStar.gif');
}


------------------------------

ARIA4: - Using a WAI-ARIA role to expose the role of a user interface component
Using a WAI-ARIA role to expose the role of a user interface component

About this Technique
	- This technique relates to 4.1.2: Name, Role, Value (Sufficient when used with G10: Creating components using a technology that supports the accessibility … notification of changes).
	- This technique applies to technologies that support Accessible Rich Internet Applications (WAI-ARIA).

Description : The objective of this technique is to define the role of an element using the role attribute with one of the non-abstract values defined in the WAI-ARIA Definition of Roles. The WAI-ARIA specification provides an informative description of each role, how it relates to other roles, and the states and properties for each role. When rich internet applications define new user interface widgets, exposing the roles enables users to understand the widget and how to interact with it.

Examples
Example 1: A simple toolbar

A toolbar containing three buttons. The div element has a role of "toolbar", and the img elements have "button" roles:

<div role="toolbar"
   tabindex="0" 
   id="customToolbar" 
   onkeydown="return optionKeyEvent(event);"
   onkeypress="return optionKeyEvent(event);"
   onclick="return optionClickEvent(event);"
   onblur="hideFocus()"
   onfocus="showFocus()"
   > 
   <img src="img/btn1.gif" 
        role="button" 
        tabindex="-1" 
        alt="Home" 
        id="b1" 
        title="Home">
   <img src="img/btn2.gif" 
        role="button" 
        tabindex="-1" 
        alt="Refresh" 
        id="b2" 
        title="Refresh">
  <img src="img/btn3.gif" 
        role="button" 
        tabindex="-1" 
        alt="Help" 
        id="b3" 
        title="Help"> 
</div>  

The Authoring Practices Toolbar Pattern provides a working example of a toolbar.

Example 2: A Tree Widget

A basic tree widget. Note the use of the roles "tree", "treeitem", and "group" to identify the tree and its structure. Here is a simplified excerpt from the code:

<ul role="tree" tabindex="0">
   <li role="treeitem">Birds</li>
   <li role="treeitem">Cats
     <ul role="group">
       <li role="treeitem">Siamese</li>
       <li role="treeitem">Tabby</li>
     </ul>
   </li>
   <li role="treeitem">Dogs
     <ul role="group">
       <li role="treeitem">Small Breeds
         <ul role="group">
           <li role="treeitem">Chihuahua</li>
           <li role="treeitem">Italian Greyhound</li>
           <li role="treeitem">Japanese Chin</li>
         </ul>
       </li>
       <li role="treeitem">Medium Breeds
         <ul role="group">
           <li role="treeitem">Beagle</li>
           <li role="treeitem">Cocker Spaniel</li>
           <li role="treeitem">Pit Bull</li>
         </ul>
       </li>
       <li role="treeitem">Large Breeds
         <ul role="group">
           <li role="treeitem">Afghan</li>
           <li role="treeitem">Great Dane</li>
           <li role="treeitem">Mastiff</li>
         </ul>
       </li>
     </ul>
   </li>
 </ul>

The Authoring Practices Tree View Pattern provides a working example of a tree.


------------------------------

ARIA5: - Using WAI-ARIA state and property attributes to expose the state of a user interface component
Using WAI-ARIA state and property attributes to expose the state of a user interface component

About this Technique
	- This technique relates to 4.1.2: Name, Role, Value (Sufficient when used with G10: Creating components using a technology that supports the accessibility … notification of changes).
	- This technique applies to technologies that support Accessible Rich Internet Applications (WAI-ARIA).

Description : The objective of this technique is to use WAI-ARIA state and property attributes to expose the state, properties and values of a user interface component so that they can be read and set by assistive technology, and so that assistive technology is notified of changes to these values. The WAI-ARIA specification provides a normative description of each attribute, and the role of the user interface elements that they support. When rich internet applications define new user interface widgets, exposing the state and property attributes enables users to understand the widget and how to interact with it.

Examples
Example 1: A toggle button

A widget with role button acts as a toggle button when it implements the attribute aria-pressed. When aria-pressed is true, the button is in a "pressed" state. When aria-pressed is false, it is not pressed. If the attribute is not present, the button is a simple command button.

The following snippet from the ARIA Authoring Practices Guide (APG) examples for button shows WAI-ARIA mark-up for a toggle button to mute/unmute audio:

<a tabindex="0"
  role="button"
  id="toggle"
  aria-pressed="false">
  Mute
  ...
</a>

The a element has a role="button" and an aria-pressed attribute. The following excerpt from the Javascript for this example updates the value of the aria-pressed attribute:

/**
* Toggles the toggle button's state between *pressed* and *not pressed*.
*
* @param {HTMLElement} button
*/

function toggleButtonState(button) {
  var isAriaPressed = button.getAttribute('aria-pressed') === 'true';
  button.setAttribute('aria-pressed', isAriaPressed ? 'false' : 'true');
  ...
}
Example 2: A slider

A widget with role slider lets a user select a value from within a given range. The slider represents the current value and the range of possible values via the size of the slider and the position of the handle. These properties of the slider are represented by the attributes aria-valuemin, aria-valuemax, and aria-valuenow.

The following snippet from the ARIA Authoring Practices Guide (APG) color viewer slider example shows WAI-ARIA mark-up for one of the sliders:

<div id="id-red" class="color-slider-label">Red</div>
<div class="color-slider red"
  role="slider"
  tabindex="0"
  aria-valuemin="0"
  aria-valuenow="128"
  aria-valuemax="255"
  aria-labelledby="id-red">
   ...
</div>

The following excerpt from the Javascript for this example updates the value of the aria-valuenow attribute when the value of the slider handle is changed:

moveSliderTo(slider, value) {
  ...
  slider.sliderNode.setAttribute('aria-valuenow', value);
  ...
}

Related techniques:
- ARIA4: Using a WAI-ARIA role to expose the role of a user interface component
- H91: Using HTML form controls and links


------------------------------

ARIA6: - Using aria-label to provide labels for objects
Using aria-label to provide labels for objects

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Sufficient).
	- This technique applies to technologies that support Accessible Rich Internet Applications (WAI-ARIA).

Description : The purpose of this technique is to provide a label for objects that can be read by assistive technology. The aria-label attribute provides the text label for an object, such as a button. When a screen reader encounters the object, the aria-label text is read so that the user will know what it is. : Authors should be aware that aria-label may be disregarded by assistive technologies in situations where aria-labelledby is used for the same object. For more information on the naming hierarchy please consult the accessible name and description computation section of the Accessible Name And Description Computation recommendation. Authors should be aware that use of aria-label will override any native naming such as alt on images or label associated with a form field using the for attribute.

Examples
Example 1: Distinguishing navigation landmarks

The following example shows how aria-label could be used to distinguish two navigation landmarks in an HTML document, where there are more than two of the same type of landmark on the same page, and there is no existing text on the page that can be referenced as the label.

<div role="navigation" aria-label="Primary">
  <ul>
    <li>...a list of links here ...</li>
  </ul>
</div>
<div role="navigation" aria-label="Secondary">
  <ul>
    <li>...a list of links here ...</li>
  </ul>
</div>
Example 2: Identifying region landmarks

The following example shows how a generic "region" landmark might be added to a weather portlet. There is no existing text on the page that can be referenced as the label, so it is labelled with aria-label.

<div role="region" aria-label="weather portlet"> 
  ...
</div>
Example 3: Providing a label for Math

Below is an example of a MathML function, using the math role, appropriate label, and MathML rendering:

<div role="math" aria-label="6 divided by 4 equals 1.5">
  <math xmlns="https://www.w3.org/1998/Math/MathML">
    <mfrac>
      <mn>6</mn>
      <mn>4</mn>
    </mfrac>
      <mo>=</mo>
      <mn>1.5</mn>
  </math>
</div>

Related techniques:
- ARIA16: Using aria-labelledby to provide a name for user interface controls
- H44: Using label elements to associate text labels with form controls


------------------------------

ARIA7: - Using aria-labelledby for link purpose
Using aria-labelledby for link purpose

About this Technique
	- This technique relates to 2.4.4: Link Purpose (In Context) (Sufficient when used for Identifying the purpose of a link using link text combined with programmatically determined link context).
	- This technique applies to technologies that support Accessible Rich Internet Applications (WAI-ARIA).

Description : With the aria-labelledby attribute, authors can use a visible text element on the page as a label for a focusable element (a form control or a link). For example, a "read more..." link could be associated with the text of the heading of the preceding section to make the purpose of the link unambiguous (see example 1). : When associating text to a focusable element with the help of aria-labelledby, the target text element is given an id which is referenced in the value of the aria-labelledby attribute of the focusable element. : It is also possible to use several text elements on the page as a label for a focusable element. Each of the text elements used must be given a unique ID which is referenced as a string of ids (IDREF) in the value of the aria-labelledby attribute. The label text should then be concatenated following the order of ids in the value of the aria-labelledby attribute. : When applied on links, aria-labelledby can be used to identify the purpose of a link that may be readily apparent for sighted users, but less obvious for screen reader users. : The specified behavior of aria-labelledby is that the associated label text is announced instead of the link text (not in addition to the link text). When the link text itself should be included in the label text, the ID of the link should be referenced as well in the string of IDs forming the value of the aria-labelledby attribute. : For more information on the naming hierarchy please consult the Accessible Name and Description Computation.

Examples
Example 1: Providing additional information for links

This example will mean that the link text as shown on screen is then used as the start of the accessible name for the link. Screen readers will announce this as: "Read more ...Storms hit east coast" and will display that same text in the links list which is very useful for screen reader users who may browse by links.

<h2 id="headline">Storms hit east coast</h2>
<p>Torrential rain and gale force winds have struck the east coast, 
   causing flooding in many coastal towns.
  <a id="p123" href="news.html" aria-labelledby="p123 headline">Read more...</a>
</p>
Example 2: Concatenating link text from multiple sources

There may be cases where an author will place a tag around a section of code that will be referenced.

<p>Download <span id="report-title">2012 Sales Report</span>:
   <a aria-labelledby="report-title pdf" href="#" id="pdf">PDF</a> |
   <a aria-labelledby="report-title doc" href="#" id="doc">Word</a> |
   <a aria-labelledby="report-title ppt" href="#" id="ppt">PowerPoint</a>
</p>


------------------------------

ARIA8: - Using aria-label for link purpose
Using aria-label for link purpose

About this Technique
	- This technique relates to:
	- 2.4.4: Link Purpose (In Context) (Sufficient when used for Identifying the purpose of a link using link text combined with programmatically determined link context)
	- 2.4.9: Link Purpose (Link Only) (Sufficient)
	- This technique applies to technologies that support Accessible Rich Internet Applications (WAI-ARIA).

Description : The objective of this technique is to describe the purpose of a link using the aria-label attribute. The aria-label attribute provides a way to place a descriptive text label on an object, such as a link, when there are no elements visible on the page that describe the object. If descriptive elements are visible on the page, the aria-labelledby attribute should be used instead of aria-label. Providing a descriptive text label lets a user distinguish the link from links in the Web page that lead to other destinations and helps the user determine whether to follow the link. In some assistive technologies the aria-label value will show in the list of links instead of the actual link text. : Per the Accessible Name and Description Computation and the Accessible Name and Description Computation in the HTML Accessibility API Mappings 1.0, the aria-label text will override the text supplied within the link. As such the text supplied will be used instead of the link text by assistive technology. Due to this it is recommended to start the text used in aria-label with the text used within the link. This will allow consistent communication between users.

Examples
Example 1: Describing the purpose of a link in HTML using aria-label.

In some situations, designers may choose to lessen the visual appearance of links on a page by using shorter, repeated link text such as "read more". These situations provide a good use case for aria-label in that the simpler, non-descriptive "read more" text on the page can be replaced with a more descriptive label of the link. The words 'read more' are repeated in the aria-label (which replaces the original anchor text of "[Read more...]") to allow consistent communication between users.

<h4>Neighborhood News</h4>
<p>Seminole tax hike: Seminole city managers are proposing a 75% increase in 
  property taxes for the coming fiscal year.
  <a href="taxhike.html" aria-label="Read more about Seminole tax hike">
   [Read more...]</a>
</p> 
  
<p>Baby Mayor: Seminole voters elect the city's youngest mayor ever by voting
   in 3 year old Willy "Dusty" Williams in yesterday's mayoral election.
   <a href="babymayor.html" aria-label="Read more about Seminole's new baby mayor">
    [Read more...]</a>
</p>

Related techniques:
- ARIA6: Using aria-label to provide labels for objects
- ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used
- ARIA7: Using aria-labelledby for link purpose
- G91: Providing link text that describes the purpose of a link
- H30: Providing link text that describes the purpose of a link for anchor elements


------------------------------

ARIA9: - Using aria-labelledby to concatenate a label from several text nodes
Using aria-labelledby to concatenate a label from several text nodes

About this Technique
	- This technique relates to:
	- 1.1.1: Non-text Content (Sufficient)
	- 3.3.2: Labels or Instructions (Sufficient when used with G131: Providing descriptive labels)
	- This technique applies to technologies that support Accessible Rich Internet Applications (WAI-ARIA).

Description : The aria-labelledby property can be used to provide a name for all visual objects. Applied to inputs, the aria-labelledby property can be used to provide a name to native inputs as well as non-native elements, such as custom text inputs constructed with div contenteditable="true". : One particular use of aria-labelledby is for text inputs in situations where a meaningful name should consist of more than one text string. : Authors assign unique ids to the label strings to be concatenated as the name for the input element. The value of the aria-labelledby attribute is then a space-separated list of all ids in the order in which the label strings referenced should be read by screen readers. Supporting user agents will concatenate the label strings referenced and read them as one continuous name for the input. : The concatenation of strings can be useful for different reasons. In example 1, an input is nested within the context of a full sentence. The desired screen reader output is "Extend time-out to [ 20 ] minutes - edit with autocomplete, selected 20". Since the id of the text input is included in the string of ids referenced by aria-labelledby, the value of the input is included in the concatenated name at the right position. : Another application of aria-labelledby is when there is no space to provide a visible label next to the input, or when using native labels would create unnecessary redundancy. Here, the use aria-labelledby makes it possible to associate visible elements on the page as name for such inputs. This is demonstrated in example 2 where table column and row headings are concatenated into names for the text input elements inside the table. : Note : The Accessible Name and Description Computation specifies that the string specified in aria-labelledby should replace rather than add to the content of the element that carries the property. So adding the aria-labelledby property to a native label should replace the text content inside that label unless the label itself is referenced as part of the sequence of ids in aria-labelledby.

Examples
Example 1: A time-out input field with concatenated name

A text input allows users to extend the default time before a time-out occurs.

The string "Extend time-out to" is contained in a native label element and is associated with the input with the input by id="timeout-duration" . This label is associated with this input using the for/id association only on user agents that don't support ARIA. On user agents that support ARIA, the for/id association is ignored and the name for the input is provided only by aria-labelledby, per the Accessible Name and Description Computation in the HTML Accessibility API Mappings 1.0.

The aria-labelledby attribute on the text input references three elements: (1) the span containing the native label, (2) the text input containing the default text '20' (recall that this input is not labelled with the for/id associated label text), and (3) the string 'minutes' contained in a span. These elements should be concatenated to provide the full name for the text input

<div>
  <span id="timeout-label">
    <label for="timeout-duration">Extend time-out to</label>
  </span>
  <input type="text" size="3" id="timeout-duration" value="20" 
   aria-labelledby="timeout-label timeout-duration timeout-unit">
  <span id="timeout-unit"> minutes</span>
</div>

Working example, Time-out input field with concatenated label, adapted from Easy ARIA tip #2: aria-labelledby and aria-describedby, an example put together by Marco Zehe.

Example 2: A simple data table with text inputs

A simple data table containing text inputs. The input labels are concatenated through aria-labelledby referencing the respective column and row headers.

<table>
  <tr>
    <td></td>
    <th id="tpayer">Taxpayer</th>
    <th id="sp">Spouse</th>
  </tr>
  <tr>
    <th id="gross">W2 Gross</th>
    <td><input type="text" size="20" aria-labelledby="tpayer gross"></td>
    <td><input type="text" size="20" aria-labelledby="sp gross"></td>
  </tr>
  <tr>
    <th id="divi">Dividends</th>
    <td><input type="text" size="20" aria-labelledby="tpayer divi"></td>
    <td><input type="text" size="20" aria-labelledby="sp divi"></td>
  </tr>
</table>

Working example, Using aria-labelledby for simple table with text inputs, based on an example by Jim Thatcher.

Example 3: A conference workshop booking table

A conference workshop booking table with two parallel tracks allows users to select the workshop they want to attend. When tabbing through the checkbox inputs in the table, the track (1 or 2), the title, and the speaker of the workshop followed by the adjacent checkbox label "Attend" are provided as concatenated name for the checkboxes via aria-labelledby.

<h1>Dinosaur Conference workshops timetable Thursday, 14 & Friday, 15 March 2013</h1>
<table>
  <caption>Dinosaur Conference workshop booking table</caption>
  <tr>
    <th rowspan="2" scope="col">Track</th>
    <th colspan="2" scope="colgroup">Thursday</th>
    <th colspan="2" scope="colgroup">Friday</th>
  </tr>
  <tr>
    <th scope="col" id="am1">9 to 12 AM</th>
    <th scope="col" id="pm1">2 to 5 PM</th>
    <th scope="col" id="am2">9 to 12 AM</th>
    <th scope="col" id="pm2">2 to 5 PM</th>
  </tr>
  <tr>
    <th id="track1" scope="row">Track 1</th>
    <td>
      <h2 id="title-TM1">The Paleozoic era </h2>
      <p>2 places left</p>
      <input type="checkbox" id="TM1" aria-labelledby="title-TM1 track1 am1 TM1-att">
      <label id="TM1-att" for="TM1">Attend</label>
    </td>
    <td>
      <h2 id="title-TA1">The Mesozoic era overview</h2>
      <p>2 places left</p>
      <input type="checkbox" id="TA1" aria-labelledby="title-TA1 track1 am2 TA1-att">
      <label id="TA1-att" for="TA1">Attend</label>
    </td>
    <td>
      <h2 id="title-FM1">The Triassic period, rise of the dinosaurs</h2>
      <p>1 place left</p>
      <input type="checkbox" id="FM1" aria-labelledby="title-FM1 track1 pm1 FM1-att">
      <label id="FM1-att" for="FM1">Attend</label>
    </td>
    <td>
      <h2 id="title-FA1">The Jurassic period</h2>
      <p>11 places left</p>
      <input type="checkbox" id="FA1" aria-labelledby="title-FA1 track1 pm2 FA1-att">
      <label id="FA1-att" for="FA1">Attend</label>
    </td>
  </tr>
  <tr>
    <th id="track2" scope="row">Track 2</th>
    <td>
      <h2 id="title-TM2">The Cretaceous period</h2>
      <p>18 places left</p>
      <input type="checkbox" id="TM2" aria-labelledby="title-TM2 track2 am1 TM2-att">
      <label id="TM2-att" for="TM2">Attend</label>
   </td>
   <td>
      <h2 id="title-TA2">The end of the dinosaurs</h2>
      <p>2 places left</p>
      <input type="checkbox" id="TA2" aria-labelledby="title-TA2 track2 am2 TA2-att">
      <label id="TA2-att" for="TA2">Attend</label>
    </td>
    <td>
      <h2 id="title-FM2">First discoveries of dinosaurs</h2>
      <p>2 places left</p>
      <input type="checkbox" id="FM2" aria-labelledby="title-FM2 track2 pm1 FM2-att">
      <label id="FM2-att" for="FM2">Attend</label>
    </td>
    <td>
      <h2 id="title-FA2">Emerging scholarship</h2>
      <p>19 places left</p>
      <input type="checkbox" id="FA2" aria-labelledby="title-FA2 track2 pm2 FA2-att">
      <label id="FA2-att" for="FA2">Attend</label>
    </td>
  </tr>
</table>

Working example: Conference workshop booking timetable.

Related techniques:
- ARIA6: Using aria-label to provide labels for objects
- ARIA16: Using aria-labelledby to provide a name for user interface controls


------------------------------

ARIA10: - Using aria-labelledby to provide a text alternative for non-text content
Using aria-labelledby to provide a text alternative for non-text content

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Sufficient).
	- This technique applies to HTML with Accessible Rich Internet Applications (WAI-ARIA).

Description : The purpose of this technique is to provide a short description for an element that can be read by assistive technologies by using the aria-labelledby attribute. The aria-labelledby attribute associates an element with text that is visible elsewhere on the page by using an id reference value that matches the id attribute of the labeling element. Assistive technology such as screen readers use the text of the element identified by the value of the aria-labelledby attribute as the text alternative for the element with the attribute.

Examples
Example 1: Providing a short description for a complex graphic

This example shows how to use the aria-labelledby attribute to provide a short text description for a read-only complex graphic of an star rating pattern; the graphic is composed of several image elements. The text alternative for the graphic is the label, visible on the page beneath the star pattern.

<div role="img" aria-labelledby="star-id">
  <img src="fullstar.png" alt="">
  <img src="fullstar.png" alt="">
  <img src="fullstar.png" alt="">
  <img src="fullstar.png" alt="">
  <img src="emptystar.png" alt="">
</div>
<div id="star-id">4 of 5</div>

Working example: Providing a short description for a complex graphic.

Related techniques:
- H37: Using alt attributes on img elements
- F65: Failure of Success Criterion 1.1.1 due to omitting the alt attribute or text alternative on img elements, area elements, and input elements of type "image"


------------------------------

ARIA11: - Using ARIA landmarks to identify regions of a page
Using ARIA landmarks to identify regions of a page

About this Technique
	- This technique relates to:
	- 1.3.1: Info and Relationships (Sufficient)
	- 1.3.6: Identify Purpose (Sufficient)
	- 2.4.1: Bypass Blocks (Sufficient when used for grouping blocks of repeated material in a way that can be skipped)
	- This technique applies to technologies that support Accessible Rich Internet Applications (WAI-ARIA).

Description : The purpose of this technique is to provide programmatic access to sections of a web page. Landmark roles (or "landmarks") programmatically identify sections of a page. Landmarks help assistive technology (AT) users orient themselves to a page and help them navigate easily to various sections of a page. : They also provide an easy way for users of assistive technology to skip over blocks of content that are repeated on multiple pages and notify them of programmatic structure of a page. For instance, if there is a common navigation menu found on every page, landmark roles (or "landmarks") can be used to skip over it and navigate from section to section. This will save assistive technology users and keyboard users the trouble and time of tabbing through a large amount of content to find what they are really after, much like a traditional "skip links" mechanism. (Refer to User Agent Notes above for specifics of AT support). A blind user who may be familiar with a news site's menu, and is only interested in getting to the top story could easily navigate to the "main" landmark, and bypass dozens of menu links. In another circumstance, a user who is blind may want to quickly find a navigation menu, and can do so by jumping to the navigation landmark. : Landmarks also can help sighted keyboard-only users navigate to sections of a page using a browser plugin. : Landmarks are inserted into the page using the role attribute on an element that marks the section. The value of the attribute is the name of the landmark. These role values are listed below. For HTML mappings of landmark roles, refer to the Rules of ARIA attribute usage by HTML element table in the ARIA In HTML recommendation. : banner: A region that contains the prime heading or internal title of a page.
	- navigation: A region that contains navigation links links to other pages or different parts of the same page.
	- main: A region that contains a page's main content.
	- region: A region that contains a perceivable section of the page containing content that is sufficiently important for users to be able to navigate to the section. A region landmark isn't exposed as a landmark region unless it has an accessible name.
	- form: A region of the document that represents a collection of form-associated elements, some of which can represent editable values that can be submitted to a server for processing.
	- search: A region of the page containing search functionality.
	- complementary: Any section of the document that supports the main content, yet is separate and meaningful on its own.
	- contentinfo: A region that contains information about the parent document such as copyrights and links to privacy statements. : There are cases when a particular landmark role could be used more than once on a page, such as on primary and secondary blocks of navigation. In these cases, identical roles should be labeled using a valid technique for labelling regions. : Landmarks should supplement native semantic markup such as HTML headings, lists and other structural markup. Landmarks are interpretable by WAI-ARIA-aware assistive technologies and are not exposed by browsers directly to users. : It is a best practice to include all content on the page in landmarks, so that screen reader users who rely on them to navigate from section to section do not lose track of content.

Examples
Example 1: Simple landmarks

The following example shows how landmarks might be added to an HTML document:

<div role="banner">site logo and name, etc. here</div>
<div role="search">search functionality here</div>
<div role="navigation">a list of navigation links here</div>
<div role="form">a sign-up form here</div>
<div role="main">the page's main content here</div>
<div role="region">a sponsor's promotion here</div>
<div role="complementary">sidebar content here</div>
<div role="contentinfo"> site contact details, copyright information, etc. here </div>
Example 2: Multiple landmarks of the same type and aria-labelledby

The following example shows a best practice of how landmarks might be added to an HTML document in situations where there are two or more of the same type of landmark on the same page. For instance, if a navigation role is used multiple times on a page, each instance may have a unique label specified using aria-labelledby:

<div aria-labelledby="site-nav-heading" role="navigation">
  <h2 id="site-nav-heading">Site</h2>
    <ul>
      <li><a href="...">nav link 1</a></li>  
      <li><a href="...">nav link 2</a></li>
      <li><a href="...">nav link 3</a></li>
   </ul>
</div>
<div aria-labelledby="related-nav-heading" role="navigation">
  <h2 id="related-nav-heading">Related Topics</h2>
    <ul>
      <li><a href="...">topic link 1</a></li>
      <li><a href="...">topic link 2</a></li>
      <li><a href="...">topic link 3</a></li>
    </ul>
</div>
Example 3: Multiple landmarks of the same type and aria-label

The following example shows a best practice of how landmarks might be added to an HTML document in situations where there are two or more of the same type of landmark on the same page, and there is no existing text on the page that can be referenced as the label:

<div aria-label="Site" role="navigation">
   <ul>
      <li><a href="...">nav link 1</a></li>
      <li><a href="...">nav link 2</a></li>
      <li><a href="...">nav link 3</a></li>
   </ul>
</div>
<div aria-label="Tags" role="navigation">
   <ul>
      <li><a href="...">tag link 1</a></li>
      <li><a href="...">tag link 2</a></li>
      <li><a href="...">tag link 3</a></li>
   </ul>
</div>
Example 4: Search form

The following example shows a search form with a "search" landmark. The search role typically goes on the form element or a div surrounding the form:

<form role="search">
   <label for="product-search" id="search-label">Search</label>
   <input id="product-search" placeholder="title, author, or ISBN" type="text">
   <button type="submit">Find Books</button>
</form>

Related techniques:
- G1: Adding a link at the top of each page that goes directly to the main content area
- G124: Adding links at the top of the page to each area of the content
- H69: Providing heading elements at the beginning of each section of content
- H100: Providing properly marked up email and password inputs
- SCR28: Using an expandable and collapsible menu to bypass block of content


------------------------------

ARIA12: - Using role=heading to identify headings
Using role=heading to identify headings

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Sufficient).
	- This technique applies to technologies that support Accessible Rich Internet Applications (WAI-ARIA).

Description : The purpose of this technique is to provide a way for Assistive Technologies (AT) to identify a piece of content as a heading. Applying role="heading" to an element causes an AT (like a screen reader) to treat it as though it were a heading. The role="heading" property must be paired with the aria-level property to define the heading level. : When possible, use native heading markup. For example, it is preferable to use an h1 element, rather than using <div role="heading" aria-level="1">. Native HTML elements have implicit styling and features that won't necessarily be replicated with ARIA equivalents. For instance, heading elements will have specific styling adjustments made when viewing a page in a browser's Reader Mode. Whereas a <div role="heading" aria-level="1"> will not be styled as a heading, because the underlying element is a div. ARIA only modifies the way an element is exposed to assistive technology, it does nothing to change the implicit style or functionality of the element it is applied to.

Examples
Example 1: Simple headings

This example demonstrates how to implement headings using role="heading" and aria-level.

<div role="heading" aria-level="2">Global News Items</div>
... a list of global news with editorial comment....
   
<div role="heading" aria-level="3">Politics</div>
... a list of global political news stories ...
Example 2: Additional heading levels

This example demonstrates how to implement a level 7 heading using role="heading" and the aria-level attribute. Since HTML only supports headings up to level 6, there is no native element to provide these semantics.

<h5>Fruit Trees</h5>
<h6>Apples</h6>
<p>Apples grow on trees in areas known as orchards...</p>
   ...
<div role="heading" aria-level="7">Jonagold</div>
<p>Jonagold is a cross between the Golden Delicious and Jonathan varieties...</p>

Headings with an aria-level of 10 or higher can create difficulties for users. At the time of writing (2024), most combinations of user agents and assistive technologies report such levels as being level 2.

Related techniques:
- H42: Using h1-h6 to identify headings
- H69: Providing heading elements at the beginning of each section of content
- G141: Organizing a page using headings
- F2: Failure of Success Criterion 1.3.1 due to using changes in text presentation to convey information without using the appropriate markup or text


------------------------------

ARIA13: - Using aria-labelledby to name regions and landmarks
Using aria-labelledby to name regions and landmarks

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Sufficient).
	- This technique applies to technologies that support Accessible Rich Internet Applications (WAI-ARIA).

Description : The purpose of this technique is to provide names for regions of a page that can be read by assistive technology. The aria-labelledby attribute provides a way to associate a section of the page marked up as a region or landmarks with text that is on the page that labels it. : Landmark roles (or "landmarks") programmatically identify sections of a page. Landmarks help assistive technology (AT) users orient themselves to a page and help them navigate easily to various sections of a page. : Like aria-describedby, aria-labelledby can accept multiple ids to point to other regions of the page using a space separated list. It is also limited to ids for defining these sets.

Examples
Example 1: Identify a landmark with on-page text

Below is an example of aria-labelledby used on a complementary Landmark. The region of the document to which the heading pertains could be marked with the aria-labelledby property containing the value of the id for the header.

<div role="complementary" aria-labelledby="hdr1">
  <h1 id="hdr1">Top News Stories</h1>
  ...
</div>
Example 2: Identification for Application landmarks

The following code snippet for application landmarks with static prose. If you have a regional landmark of type application and static descriptive text is available, then on the application landmark, include an aria-describedby reference to associate the application and the static text as shown here:

<div role="application" aria-labelledby="p123" aria-describedby="info">
   <h1 id="p123">Calendar<h1>
   <p id="info">This calendar shows the game schedule for the Boston Red Sox.</p>
   <div role="grid">
    ...
   </div>
</div>

Related techniques:
- ARIA10: Using aria-labelledby to provide a text alternative for non-text content
- ARIA6: Using aria-label to provide labels for objects
- ARIA9: Using aria-labelledby to concatenate a label from several text nodes
- ARIA16: Using aria-labelledby to provide a name for user interface controls
- ARIA7: Using aria-labelledby for link purpose
- G92: Providing long description for non-text content that serves the same purpose and presents the same information


------------------------------

ARIA14: - Using aria-label to provide an invisible label where a visible label cannot be used
Using aria-label to provide an invisible label where a visible label cannot be used

About this Technique
	- This technique relates to 4.1.2: Name, Role, Value (Sufficient).
	- This technique applies to technologies that support Accessible Rich Internet Applications (WAI-ARIA).

Description : For sighted users, the context and visual appearance of an element can provide sufficient cues to determine the purpose. An example is the 'X' often used in the top right corner of pop-up divs (light boxes) to indicate the control for closing the div. : In some situations, elements can be given the attribute aria-label to provide an accessible name for situations when there is no visible label due to a chosen design approach or layout but the context and visual appearance of the control make its purpose clear. : In other situations, elements can be given the attribute aria-label to provide an accessible name when the native HTML labeling element is not supported by the control - for example, when a div set to contentEditable is used instead of native form elements such as input type="text" or textarea in order to provide a richer text editing experience.

Examples
Example 1: A close button in a pop-up box

On a page, a link displays a pop-up box (a div) with additional information. The 'close' element is implemented as a button containing merely the letter 'X'. The property aria-label="close" is used to provide an accessible name to the button.

<div id="box">
   This is a pop-up box.
   <button aria-label="Close">X</button>				
</div>

Working example: Close button example.

Example 2: A phone number with multiple fields
<div role="group" aria-labelledby="groupLabel">
  <span id="groupLabel">Work Phone</span>
  +<input autocomplete="tel-country-code" type="number" aria-label="country code">
  <input autocomplete="tel-area-code" type="number" aria-label="area code">
  <input autocomplete="tel-local" type="number" aria-label="subscriber number">
</div>

Related techniques:
- ARIA6: Using aria-label to provide labels for objects
- ARIA16: Using aria-labelledby to provide a name for user interface controls


------------------------------

ARIA15: - Using aria-describedby to provide descriptions of images
Using aria-describedby to provide descriptions of images

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Sufficient).
	- This technique applies to technologies that support Accessible Rich Internet Applications (WAI-ARIA).

Description : The objective of this technique is to provide descriptions of images when a short text alternative does not adequately convey the function or information provided in the object. : A feature of WAI-ARIA is the ability to associate descriptive text with a section, drawing, form element, picture, and so on using the aria-describedby property. Descriptive text provided using aria-describedby is separate from the short name provided using the alt attribute in HTML. An advantage of providing long descriptions using content from the same page as the image is that the alternative is available to all, including sighted people who do not have assistive technology. : Like aria-labelledby, aria-describedby can accept multiple ids to point to other regions of the page using a space separated list. It is also limited to ids for defining these sets.

Examples
Example 1: Describing an image

The following example shows how aria-describedby can be applied to an image to provide a long description, where that text description is on the same page as the image.

<img src="ladymacbeth.jpg" alt="Lady MacBeth" aria-describedby="p1">
<p id="p1">This painting dates back to 1889 and is oil on canvas. It was created by 
 John Singer Sargent, and represents ...</p>

Related techniques:
- ARIA6: Using aria-label to provide labels for objects
- ARIA16: Using aria-labelledby to provide a name for user interface controls
- G92: Providing long description for non-text content that serves the same purpose and presents the same information


------------------------------

ARIA16: - Using aria-labelledby to provide a name for user interface controls
Using aria-labelledby to provide a name for user interface controls

About this Technique
	- This technique relates to:
	- 1.3.1: Info and Relationships (Sufficient)
	- 4.1.2: Name, Role, Value (Sufficient)
	- 4.1.2: Name, Role, Value (Sufficient when used for exposing the names and roles, allowing user-settable properties to be directly set, and providing notification of changes)
	- 4.1.2: Name, Role, Value (Sufficient when used with G10: Creating components using a technology that supports the accessibility … notification of changes)
	- This technique applies to technologies that support Accessible Rich Internet Applications (WAI-ARIA).

Description : The purpose of this technique is to provide names for user interface controls that can be read by assistive technology. WAI-ARIA provides a way to associate text with a section, drawing, form element, picture, and so on, using the aria-labelledby property. This techniques uses the aria-labelledby attribute to associate a user interface control, such as a form field, with text on the page that labels it. : Like aria-describedby, aria-labelledby can accept multiple ids to point to other elements of the page using a space separated list. This capability makes aria-labelledby especially useful in situations where sighted users use information from the surrounding context to identify a control. Using aria-labelledby to concatenate a label from several text nodes contains more examples of situations where names are created from several other text elements on the page. : While the function of aria-labelledby appears similar to the native HTML label element, there are some differences: : aria-labelledby can reference more than one text element; label can only reference one.
	- aria-labelledby can be used for a variety of elements while the label element can only be used on form elements.
	- Clicking on a label focuses the associated form field. This does not occur with aria-labelledby. If this behaviour is required then use label or implement this functionality using scripting.

Examples
Example 1: Labelling a simple text field

The following is an example of aria-labelledby used on a simple text field to provide a label in a situation where there is no text available for a dedicated label but there is other text on the page that can be used to accurately label the control.

<input name="searchtxt" type="text" aria-labelledby="searchbtn">
<input name="searchbtn" id="searchbtn" type="submit" value="Search">
Example 2: Labelling a slider

Below is an example of aria-labelledby used to provide a label for a slider control. In this case the label text is selected from within a longer adjacent text string. Please note that this example is simplified to show only the labeling relationship; authors implementing custom controls also need to ensure that controls meet other success criteria.

<p>Please select the <span id="mysldr-lbl">number of days for your trip</span></p>
<div id="mysldr" role="slider" aria-labelledby="mysldr-lbl"></div>
Example 3: A label from multiple sources

The following example of aria-labelledby with multiple references uses the label element. For additional detail on concatenating multiple sources of information into a label with aria-labelledby, please view the technique Using ARIA labelledby to concatenate a label from several text nodes.

<label id="l1" for="f3">Notify me</label>
<select name="amt" id="f3" aria-labelledby="l1 f3 l2">
  <option value="1">1</option>
  <option value="2">2</option>
</select>
<span id="l2">days in advance</span>

Note: The use of the label element is included for a number of reasons. If the user clicks on the text of the label element, the corresponding form field will receive focus, which makes the clicking target larger for people with dexterity problems. Also the label element will always be exposed via the accessibility API. A span could have been used. However, a span would lose the advantage of the larger clickable region.

Related techniques:
- ARIA10: Using aria-labelledby to provide a text alternative for non-text content
- ARIA6: Using aria-label to provide labels for objects
- ARIA9: Using aria-labelledby to concatenate a label from several text nodes
- ARIA7: Using aria-labelledby for link purpose
- ARIA13: Using aria-labelledby to name regions and landmarks
- G92: Providing long description for non-text content that serves the same purpose and presents the same information


------------------------------

ARIA17: - Using grouping roles to identify related form controls
Using grouping roles to identify related form controls

About this Technique
	- This technique relates to:
	- 1.3.1: Info and Relationships (Sufficient)
	- 3.3.2: Labels or Instructions (Sufficient when used with G131: Providing descriptive labels)
	- This technique applies to technologies that support Accessible Rich Internet Applications (WAI-ARIA).

Description : The objective of this technique is to mark up a set of related controls within a form as a group. Any label associated with the group also serves as a common label or qualifier for individual controls in the group. Assistive technologies can indicate the start and end of the group and the group's label as one navigates into and out of the group. This is a viable alternative for grouping form controls programmatically when the user interface's design makes it difficult to employ the fieldset / legend technique (H71). : For a group of radio buttons, one should use role="radiogroup" instead of role="group". : The group can be labeled using aria-labelledby. : This technique is not meant for wrapping all controls on a form within a single container with role="group".

Examples
Example 1: Social Security Number

Social security number fields which are nine digits long and broken up into three segments can be grouped using role="group".

<div role="group" aria-labelledby="ssn1">
  <span id="ssn1">Social Security Number</span> 
  <span style="color: #D90D0D;"> (required)</span>
  <input size="3" type="text" aria-required="true" title="First 3 digits">-
  <input size="2" type="text" aria-required="true" title="Next 2 digits">-
  <input size="4" type="text" aria-required="true" title="Last 4 digits">
</div>

Working example: Multiple part field groups.

Example 2: Identifying radio groups

This example demonstrates use role=radiogroup. Note also that the radio buttons are custom controls with role=radio. (But the script to make the span actually work like radio buttons is not included in this example.) One may optionally employ CSS to place a border around groups of such fields to visually reinforce the group relationship. The CSS properties are available below the form.

<h3>Set Alerts for your Account</h3>
<div role="radiogroup" aria-labelledby="alert1">
  <p id="alert1">Send an alert when balance exceeds $ 3,000</p>
  <div>
    <span role="radio" aria-labelledby="a1r1" name="a1radio"></span>
    <span id="a1r1">Yes</span>
  </div>
  <div>
    <span role="radio" aria-labelledby="a1r2" name="a1radio"></span>
    <span id="a1r2">No</span>
  </div>
</div>
<div role="radiogroup" aria-labelledby="alert2">
  <p id="alert2">Send an alert when a charge exceeds $ 250</p>
  <div>
    <span role="radio" aria-labelledby="a2r1" name="a2radio"></span>
    <span id="a2r1">Yes</span>
  </div>
  <div>
    <span role="radio" aria-labelledby="a2r2" name="a2radio"></span>
    <span id="a2r2">No</span>
   </div>
</div>
<p><input type="submit" value="Continue" id="continue_btn" name="continue_btn"></p>

Related CSS Style Definition to place a border around the group of fields:

div[role=radiogroup] {
  border: black thin solid;
}

Working example: using grouping roles to identify related form controls.

Related techniques:
- H71: Providing a description for groups of form controls using fieldset and legend elements


------------------------------

ARIA18: - Using aria-alertdialog to Identify Errors
Using aria-alertdialog to Identify Errors

About this Technique
	- This technique relates to:
	- 3.3.1: Error Identification (Sufficient)
	- 3.3.3: Error Suggestion (Sufficient)
	- 4.1.3: Status Messages (Advisory)
	- This technique applies to technologies that support Accessible Rich Internet Applications (WAI-ARIA).

Description : The purpose of this technique is to alert people that an input error has occurred. Using role="alertdialog" creates a notification. This notification should be modal with the following characteristics: : aria-label or aria-labelledby attribute gives the alertdialog an accessible name.
	- The alertdialog contains at least one focusable element, and the focus should move to that element when the alertdialog opens.
	- The tab order is constrained within the alertdialog whilst it is open.
	- When the alertdialog is dismissed, the focus moves back to the position it had before the alertdialog opened, if possible. : Note that the alertdialog should not be present in a way that it will be accessed by assistive technology until it is needed. One way to do this is not to include it in the static HTML and instead to insert it into the DOM via script when the error condition is triggered. The insertion would correspond to the following HTML sample.

Examples
Example 1: Alert dialog

This example shows how a notification using role="alertdialog" can be used to notify someone they have entered invalid information.

<div role="alertdialog" aria-labelledby="alertHeading">
  <h1 id="alertHeading">Error</h1>
  <p>Employee's Birth Date is after their hire date.
   Please verify the birth date and hire date.</p>
  <button>Save and Continue</button>
  <button>Return to page and correct error</button>
</div>

Working example: Alert dialog.


------------------------------

ARIA19: - Using ARIA role=alert or Live Regions to Identify Errors
Using ARIA role=alert or Live Regions to Identify Errors

About this Technique
	- This technique relates to:
	- 3.3.1: Error Identification (Sufficient)
	- 4.1.3: Status Messages (Sufficient using a more specific technique)
	- This technique applies to technologies that support Accessible Rich Internet Applications (WAI-ARIA).

Description : The purpose of this technique is to notify Assistive Technologies (AT) when an input error occurs. The aria-live attribute makes it possible for an AT (such as a screen reader) to be notified when error messages are injected into a Live Region container. The content within the aria-live region is automatically read by the AT, without the AT having to focus on the place where the text is displayed. : There are also a number of special case live region roles which can be used instead of applying live region properties directly.

Examples
Example 1: Injecting error messages into a container with role=alert already present in the DOM

The following example uses role=alert which is equivalent to using aria-live=assertive.

In the example there is an empty error message container element with aria-atomic=true and an aria-live property or alert role present in the DOM on page load. The error container must be present in the DOM on page load for the error message to be spoken by most screen readers. aria-atomic=true is necessary to make Voiceover on iOS read the error messages after more than one invalid submission.

jQuery is used to test if the inputs are empty on submit and inject error messages into the live region containers if so. Each time a new submit is attempted the previous error messages are removed from the container and new error messages injected.

$(document).ready(function(e) {
  $('#signup').submit(function() {
    $('#errors').html('');
    if ($('#first').val() === '') {
      $('#errors').append('<p>Please enter your first name.</p>');
    }
    if ($('#last').val() === '') {
      $('#errors').append('<p>Please enter your last name.</p>');
    } 
    if ($('#email').val() === '') {
      $('#errors').append('<p>Please enter your email address.</p>');
    }
    return false;
  });
});
<form name="signup" id="signup">
  <p id="errors" role="alert" aria-atomic="true"></p>
  <div>
    <label for="first">First Name (required)</label><br>
    <input type="text" name="first" id="first">
  </div>
  <div>
    <label for="last">Last Name (required)</label><br>
    <input type="text" name="last" id="last">
  </div>
  <div>
    <label for="email">Email (required)</label><br>
    <input type="text" name="email" id="email">
  </div>
  <div>
    <input type="submit" name="button" id="button" value="Submit">
  </div>
 </form>

Working example: Using role=alert to identify errors.


------------------------------

ARIA20: - Using the region role to identify a region of the page
Using the region role to identify a region of the page

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Sufficient).
	- This technique applies to technologies that support Accessible Rich Internet Applications.

Description : This technique demonstrates how to assign a generic region role to a section of a page so that user agents and assistive technologies may be able to programmatically identify it. The region role demarcates a segment of the page that contains content of significance so that it is more readily discoverable and navigable. The generic region should be used when the section cannot be marked up using a standard document landmark role (see ARIA11). : It is important to name regions, because they are generic grouping elements and users will need some way to tell which region they are in. Regions can be named using aria-labelledby, aria-label, or another technique. Doing so helps to better expose content and information relationships on the page. The role of region should be used prudently, because if overused they can make the page overly verbose for screen reader users.

Examples
Example 1: Region on a news website

A section on the home page of a news website that contains a poll that changes every week is marked up with role="region". The h3 above the form is referenced as the region's name using aria-labelledby.

<div role="region" aria-labelledby="pollhead">
  <h3 id="pollhead">This week's Poll</h3>
  <form>
    <fieldset>
      <legend>Do you believe the tax code needs to be overhauled?</legend>
      <input type="radio" id="r1" name="poll">
      <label for="r1">No, it's fine the way it is</label>
      <input type="radio" id="r2" name="poll">
      <label for="r2">Yes, the wealthy need to pay more</label>
      <input type="radio" id="r3" name="poll">
      <label for="r3">Yes, we need to close corporate loopholes</label>
      <input type="radio" id="r4" name="poll">
      <label for="r4">Changes should be made across the board</label>
    </fieldset>
  </form>
  <a href="results.php">See Poll Results</a>
</div>
Example 2: Identifying a region on a banking site

A user can expand links on a bank website after logging in to see details of term deposit accounts. The details are within a span marked up with region role. The heading for the region has role=heading and is included in the aria-labelledby that names the region.

<ol>
  <li>
    <button aria-controls="block1" aria-expanded="false" id="l1" title="show details"
      type="button">John Henry's Account <img alt="" src="images/panel_expand.gif">
    </button>
    <div id="block1" class="nowHidden" tabindex="-1" aria-labelledby="l1 cd1"
      role="region">
      <span id="cd1" role="heading" aria-level="3">Certificate Of Deposit</span>
      <table>
        <tr>
          <th scope="row">Account:</th>
          <td>25163522</td>
         </tr>
         <tr>
          <th scope="row">Start date:</th>
          <td>February 1, 2014</td>
         </tr>
         <tr>
          <th scope="row">Maturity date:</th>
          <td>February 1, 2016</td>
         </tr>
         <tr>
          <th scope="row">Deposit Amount:</th>
          <td>$ 3,000.00</td>
         </tr>
         <tr>
          <th scope="row">Maturity Amount:</th>
          <td>$ 3,072.43</td>
        </tr>
      </table>
    </div>
  </li>
</ol>
Example 3: Identifying a portlet with a generic region

This example shows how a generic region landmark might be added to a weather portlet. There is no existing text on the page that can be referenced as the label, so it is labelled with aria-label.

<div role="region" aria-label="weather portlet"> 
  ...
</div>

Related techniques:
- ARIA11: Using ARIA landmarks to identify regions of a page
- ARIA12: Using role=heading to identify headings
- ARIA13: Using aria-labelledby to name regions and landmarks


------------------------------

ARIA21: - Using aria-invalid to Indicate An Error Field
Using aria-invalid to Indicate An Error Field

About this Technique
	- This technique relates to 3.3.1: Error Identification (Sufficient).
	- This technique applies to HTML with Accessible Rich Internet Applications.

Description : This technique demonstrates how aria-invalid may be employed to specifically identify fields that have failed validation. Its use is most suitable when: : The error description does not programmatically identify the failed fields
	- The failed fields are identified in a manner that is not available to some users - for example by using an error-icon rendered visually by some technique that does not rely on color such as a visual cue like a border. : Note : One of the above two situations may be true for a field which has programmatically associated label and / or instructions that conveys data format, a data range, or the required property. : While it is always preferable to programmatically associate specific error description with the failed field, the page's design or the framework employed may sometimes constrain the author's ability to do so. In these cases, authors may programmatically set aria-invalid to "true" on the fields that have failed validation. This is interpretable mainly by assistive technologies (like screen readers / screen magnifiers) employed by users who are vision impaired. When a field has aria-invalid set to “true”, VoiceOver in Safari announces invalid data when the field gets focus; JAWS and NVDA notify the error as an invalid entry. : This ARIA attribute has to be set / turned on programmatically. It should not be set to “true” before input validation is performed or the form is submitted. Setting aria-invalid to “false” is the same as not placing the attribute for the form control at all. Quite understandably, nothing is conveyed by assistive technology to users in this case. : When visible text is used to programmatically identify a failed field and / or convey how the error can be corrected, setting aria-invalid to "true" is not required from a strict compliance standpoint but may still provide helpful information for users.

Examples
Example 1: Using aria-invalid on required fields

The aria-invalid attribute is used on required fields that have no input. A message above the form conveys that form submission has failed due to this.

A portion of the jQuery code and the HTML form markup follow:

<script>
...
...
   if ($('#first').val() === '') {
      $('#first').attr("aria-invalid", "true");
$("label[for='first']").addClass('failed');
   }
   if ($('#last').val() === '') {
      $('#last').attr("aria-invalid", "true");
$("label[for='last']").addClass('failed');
   } 
   if ($('#email').val() === '') {
      $('#email').attr("aria-invalid", "true");
$("label[for='email']").addClass('failed');
   } 
...
...
</script>

<style>
  label.failed {
    border: red thin solid;
  }
</style>

<form name="signup" id="signup">
  <div>
    <label for="first">First Name (required)</label>
    <input type="text" name="first" id="first">
  </div>
  <div>
    <label for="last">Last Name (required)</label>
    <input type="text" name="last" id="last">
  </div>
  <div>
    <label for="email">Email (required)</label>
    <input type="text" name="email" id="email">
  </div>
  <div>
    <input type="submit" name="button" id="button" value="Submit">
  </div>
</form>

Working example: Using aria-invalid on required fields.

Example 2: Identifying errors in data format

Aria-invalid and aria-describedby are used together to indicate an error when the personal identification number (PIN), email address, or start date are not in the expected format. The error message is associated with the field using aria-describedby, and aria-invalid makes it easier to programmatically find fields with errors.

Below is the rendered HTML code for the email address field in Example 1: When an invalid email address is entered by the user such as "samexample.com" (instead of sam@example.com), the HTML code is:

<div class="control">
  <div>
    <label for="email">Email address: [*]</label> 
    <input type="text" name="email" id="email" class="error"
     aria-invalid="true" aria-describedBy="err_1">
  </div>
  <span class="errtext" id="err_1">Error: Incorrect data</span>
</div>

And when no data is entered in the email field, the HTML code is:

<div class="control">
  <div><label for="email">Email address: [*]</label> 
    <input type="text" name="email" id="email" class="error"
     aria-invalid="true" aria-describedBy="err_2">
  </div>
  <span class="errtext" id="err_2">Error: Input data missing</span>
</div>

jQuery code: jQuery is used to add aria-invalid or aria-describedby attributes as well as the class attribute and append the error text. This is the code that inserts aria-invalid and class="error" but does not associate the error text "incorrect data" with the control programmatically:

$(errFld).attr("aria-invalid", "true").attr("class", "error");
// Suffix error text: 
$(errFld).parent().append('<span class="errtext">Error: Incorrect data</span>');

CSS Code:

input.error {
  border: red thin solid;
}

span.errtext {
  background-color: #EEEEFF;
  background-image:url('images/iconError.gif');
  background-position:right;	
  background-repeat:no-repeat;
  border: red thin solid;
  margin-bottom: 1em;
  padding: .25em 1.4em .25em .25em;
}

Working example: Identifying errors in data format.

Related techniques:
- G83: Providing text descriptions to identify required fields that were not completed
- G85: Providing a text description when user input falls outside the required format or values
- G139: Creating a mechanism that allows users to jump to errors
- SCR32: Providing client-side validation and adding error text via the DOM
- ARIA18: Using aria-alertdialog to Identify Errors
- ARIA19: Using ARIA role=alert or Live Regions to Identify Errors


------------------------------

ARIA22: - Using role=status to present status messages
Using role=status to present status messages

About this Technique
	- This technique relates to:
	- 4.1.3: Status Messages (Sufficient using a more specific technique)
	- 4.1.3: Status Messages (Sufficient, together with G193: Providing help by an assistant in the Web page)
	- This technique applies to content using WAI-ARIA.

Description : This technique uses the status role from the ARIA specification to notify Assistive Technologies (AT) when content has been updated with information about the user's or application's status. This is done by adding role="status" to the element that contains the status message. The aria live region role of status has an implicit aria-live value of polite, which allows a user to be notified via AT (such as a screen reader) when status messages are added. The role of status also has a default aria-atomic value of true, so that updates to the container marked with a role of status will result in the AT presenting the entire contents of the container to the user, including any author-defined labels (or additional nested elements). Such additional context can be critical where the status message text alone will not provide an equivalent to the visual experience. The content of the aria-live container is automatically read by the AT, without the AT having to focus on the place where the text is displayed. See WAI-ARIA status (role) for more details. : Note that since role="status" is currently not treated as atomic by default in some environments, it is advisable to add an explicit aria-atomic="true" if the entire contents of the container should be announced.

Examples
Example 1: Including a search results message

After a user presses a Search button, the page content is updated to include the results of the search, which are displayed in a section below the Search button. The change to content also includes the message "5 results returned" near the top of this new content. This text is given an appropriate role for a status message. A screen reader will announce "5 results returned".

<div role="status" aria-atomic="true">5 results returned.</div>

Working example: role=status on search results

Example 2: Updating the shopping cart status

After a user presses an Add to Shopping Cart button, content near the Shopping Cart icon updates to read "1 items". The container for this text (in this case a <p>) is marked with the role of status. Because it adds visual context, the shopping cart image — with succinct and accurate alt text — is also placed in the container. Due to the aria-atomic value, a screen reader will announce "Shopping cart, six items".

<p role="status" aria-atomic="true">
  <img src="shopping-cart.png" alt="Shopping Cart">
  <span id="cart">0</span> items
</p>



Working example: role=status on a shopping cart


------------------------------

ARIA23: - Using role=log to identify sequential information updates
Using role=log to identify sequential information updates

About this Technique
	- This technique relates to 4.1.3: Status Messages (Sufficient).
	- This technique applies to content using WAI-ARIA.

Description : The purpose of this technique is to notify Assistive Technologies (AT) when content has been appended to sequential information concerning the application's history or logs. The aria live region role of log has an implicit aria-live value of polite and aria-atomic value of false, which allows a user to be notified via AT (such as a screen reader) when log messages are added. The new content within the aria-live region is automatically read by the AT, without the AT having to focus on the place where the text is displayed. See WAI-ARIA 1.1 log (role) for more details.

Examples
Example 1: Updating the contents of a chat conversation

Comments that users type into a chat input field are appended to the end of the chat history region. The region is marked with role of log so that new additions are announced by ATs. When each new chat message appears, a screen reader should announce its content (depending on AT/browser compatibility).

<div id="chatRegion" role="log" aria-labelledby="chatHeading">
  <h4 id="chatHeading">Chat History</h4>
  <ul id="conversation">
    <li>The latest chat message</li>
  </ul>
</div>

Working example: using role="log" with chat conversation

Example 2: Updating the log of a server

An application log records time-stamped activities. The log is exposed in the app as a view, with the region marked with the role of log so that the new additions are announced by the ATs. (The default value for the aria-relevant attribute is "additions", so the removal of the old top entries due to log size limitations will not be announced.) When each new log entry is added, a screen reader announces it.

<div id="activityLog" role="log">
  <h4 id="logHeading">Recent activity</h4>
  <ul id="logentries"">
    <li>08:03 UserX logged off</li>
  </ul>
</div>

Working example: using role="log" with server log


------------------------------

ARIA24: - Semantically identifying a font icon with role="img"
Semantically identifying a font icon with role="img"

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Sufficient).
	- This technique applies to content using WAI-ARIA.

Description : The objective of this technique is to show how to semantically identify an element that uses a font file for icons. When a user overrides font-family these icons typically disappear unless there is a means to identify them. The point is to provide a technique to differentiate icon fonts from general font (text) usage. : Some low vision users need user stylesheets, scripts, or extensions to override the fonts on a page to perceive text content. However, they need to be able to perceive icon fonts that are meaningful, such as a star signifying a favorite, or an email icon in a link. : The key is for the author to semantically markup icon fonts with role="img". Then the user's font replacement selector can hook into that semantic and exclude role="img". This results in those icon fonts being shown. : Basic principle of the technique
	- 1. Author adds a font-face to the CSS : The first step is used for adding a font face with icons via the CSS file. : /* specify font-family name for icons */
	- @font-face { font-family: 'IconFontRoleImg'; } : /* default class for fonts-face with icons */
	- .icon,
	- [class^="icon-"],
	- [class*=" icon-"] { font-family: 'IconFontRoleImg' !important; } : /* specific class for icon */
	- .icon-star-bg:before { content: "\e982"; }
	- 2. Author adds the font classes to the HTML : The second step adds classes, the role="img" attribute for semantics and an accessible name. : <!-- icon via class names, role="img" and a text alternative -->
	- <p>
	-   <span class="icon icon-star-bg" role="img" aria-label="Favorite"></span>
	- </p>
	- 3. User CSS file replaces the font-family except the icon file : The third step uses the ":not selector" in combination with the "[attribute] selector" to only replace font faces for regular text. : /* replaces font faces but excludes all elements with attribute role="img" */
	- *:not([role="img"]) { font-family: Verdana, sans-serif !important; }

Examples
Example 1: Star Icon Font used as an indicator (not interactive)

In this example a star icon is used to indicate a favorite. It is not interactive and does not disappear if the user overrides the font family via CSS.

Author CSS
/* default class for fonts-face with icons */
.icon { font-family: 'IconFontRoleImg' !important; }

/* specific class for icon */
.icon-star-bg:before { content: "\e982"; }
HTML
- Instead of... -
<p>
  <span class="icon icon-star-bg"></span>
</p>
- Do... -
<p>
  <span class="icon icon-star-bg" role="img" aria-label="Favorite"></span>
</p>
User CSS
*:not([role="img"]) { font-family: Verdana, sans-serif !important; }
Working example:

Star Icon Font used as an indicator (not interactive)

Example 2: Two colored / stacked star Icon Font used as an indicator

In this example a two colored star icon is created by stacking two fonts with different colors on top of each other. This way it's possible to mimic only half the star is filled. It is not interactive and does not disappear if the user overrides the font family via CSS.

Author CSS
/* default class for fonts-face with icons */
.icon { font-family: 'IconFontRoleImg' !important; }

/* specific classes for icons */
.icon-star-bg:before    {content: "\e982"; }
.icon-star-half:before  {content: "\e983"; }
HTML
- Instead of... -
<span class="icon-stacked">
  <span class="icon icon-star-bg grey"></span>
  <span class="icon icon-star-half yellow"></span>
</span>
- Do... -
<span class="icon-stacked" role="img" aria-label="Favorite star half filled">
  <span class="icon icon-star-bg grey" role="img" aria-hidden="true"></span>
  <span class="icon icon-star-half yellow" role="img" aria-hidden="true"></span>
</span>
User CSS
*:not([role="img"]) { font-family: Verdana, sans-serif !important; }
Working example:

Two colored / stacked star Icon Font used as an indicator

Example 3: Email Icon Font in a link WITHOUT visible text

In this example an email icon is in a link with no visible text. It does not disappear if a user overrides font family. The icon font is identified by assistive technology as a "link image" and the name "Email" (keyboard or mouse).

Author CSS
/* default class for fonts-face with icons */
.icon { font-family: 'IconFontRoleImg' !important; }

/* specific class for icon */
.icon-email:before { content: "\e93e"; }
HTML
- Instead of... -
<a href="email.html">
  <span class="icon icon-email"></span>
</a>
- Do... -
<a href="email.html">
  <span class="icon icon-email" role="img" aria-label="Email"></span>
</a>
User CSS
*:not([role="img"]) { font-family: Verdana, sans-serif !important; }
Working example:

Email Icon Font in a link WITHOUT visible text

Example 4: Multiple Icon Fonts as part of another sematic element WITH visible text

This example already has a visible text label in the link to be used as an accessible name, the mail and chevron font icons must stay visible when the font family is changed. This can be done by ensuring the icons are contained in their own element and the attribute aria-hidden="true" is used so the font icons will be ignored by assistive technologies.

Author CSS
/* default class for fonts-face with icons */
.icon { font-family: 'IconFontRoleImg' !important; }

/* specific class for icon */
- See style declarations in HTML examples -
HTML
- Instead of... -
<style>
.icon-double-link:before   { content: "\e93e"; }
.icon-double-link:after    { content: "\e993"; }
</style>

<a href="email.html" class="icon-double-link">Email</a>
- Do... -
<style>
  .icon-email:before   { content: "\e93e"; }
  .icon-chevron:before { content: "\e993"; }
  .icon-double-link .icon-chevron  { float: right; margin-left: 1.5rem; }
</style>

<a href="email.html" class="icon-double-link">
  <span class="icon icon-email" role="img" aria-hidden="true"></span>
  <span class="icon icon-chevron" role="img" aria-hidden="true"></span>
   Email
</a>
User CSS
*:not([role="img"]) { font-family: Verdana, sans-serif !important; }
Working example:

Multiple Icon Fonts as part of another sematic element WITH visible text

--------------------------------------------------

File: changelog.json
==================================================

F105: - Failure of Success Criterion 2.5.1 due to providing functionality via a path-based gesture without simple pointer alternative
Failure of Success Criterion 2.5.1 due to providing functionality via a path-based gesture without simple pointer alternative

About this Technique
	- This technique relates to 2.5.1: Pointer Gestures (Failure).
	- This failure applies to all technologies that include interactive controls that can be triggered using a pointer.

Description : The objective of this Failure is to describe situations where authors have implemented a function that is operated via a path-based gesture, and no alternative ways of operating this function via simple pointer gestures exist. : If you did not create the content and functionality you can find path-based gestures by exploring the content on a touch screen, or checking the page code for the existence of specific event handlers such as touchstart or touchend. See the Understanding document for Pointer Gestures for more on the path-based gestures. : Note: For functionality implemented with a path-based gesture, the possibility of also operating it via the keyboard is beneficial (and may serve to meet Success Criterion 2.1.1 Keyboard). The point of Success Criterion 2.5.1, however, is to ensure that pointer users who on many devices will have no keyboard available, have alternative ways of operating the function via simple pointer input.

Examples
Example 1
A web application implements an interface where drawing a "Z" on the screen undoes the last action. There is no other way to undo the action.
A swipe-to-reveal control displays a set of options when swiping an item to the left, and another set of options when swiping an item to the right. One or more of these options are not available after the item is first opened with a single tap or click.

Related techniques:
- F101: Failure of Success Criterion 2.5.2 due to activating a control on the down-event
- G216: Providing single point activation for a control slider


------------------------------

F106: - Failure due to inability to deactivate motion actuation
Failure due to inability to deactivate motion actuation

About this Technique
	- This technique relates to 2.5.4: Motion Actuation (Failure).
	- This failure applies to content using technologies that can support the detection of device or user motion such as shaking or tilting and use these motions as a means of input.

Description : This describes the failure condition that results when motion actuation can not be deactivated. People who may accidentally activate sensors due to tremors or other motor impairments need the ability to turn off motion actuation to prevent such accidental triggering of functions. : Note : The type of motion covered by the Motion Actuation Success Criterion does not relate to the movement of users through space as registered by geolocation sensors or beacons, or events observed by the device other than intentional gesturing by the user. It also does not cover indirect motion associated with operating a keyboard, pointer, or assistive technology.

Examples
Example 1: Motion Activated Slider

A slider which uses tilting motion to increase or decrease the value of an input, with no mechanism to deactivate the motion detection.

Working example of a motion activated slider that can not be deactivated

Related techniques:
- G213: Provide conventional controls and an application setting for motion activated input


------------------------------

F104: - Failure of Success Criterion 1.4.12 due to clipped or overlapped content when text spacing is adjusted
Failure of Success Criterion 1.4.12 due to clipped or overlapped content when text spacing is adjusted

About this Technique
	- This technique relates to 1.4.12: Text Spacing (Failure).
	- This failure applies to text content created in markup languages that support text style properties.

Description : The purpose of this technique is to identify and test a failure condition where part of the content clips and is unreadable when the user overrides the spacing of the text within the boundaries set out in the Text Spacing success criterion. In general, this failure occurs when text is presented in a size-constrained block which does not expand if the size of the content increases. Some of the ways in which this can occur include: : Setting the overflow property of the enclosing element to hidden
	- Using absolutely positioned content
	- Creating borders that are not large enough for the content when using the new font spacing

Examples
Example 1: Text inside a box overflows and overlaps text below it when text spacing is implemented.

The code below is what is implemented in the DOM before the user implements any CSS test spacing overrides. The text renders correctly in the box and doesn't interfere with the next paragraph.

<div style="font-size:100%; width:130px; height:125px; border: thin solid gray;">
  <p style="margin:0;">Now is the time for all good men to come to 
   the aid of their country.</p>
</div>
<p style="margin:0;">The quick brown fox jumps over the lazy dog.</p>

Now is the time for all good men to come to the aid of their country.

The quick brown fox jumps over the lazy dog.

Here is the view AFTER the text spacing has been overridden by the user with the text spacing in the success criterion. The text overlaps the paragraph below it.

Now is the time for all good men to come to the aid of their country.

The quick brown fox jumps over the lazy dog.

Example 2: Text inside a box is clipped when text spacing is implemented.

The code below is what is implemented in the DOM before the user implements any CSS test spacing overrides. The text renders correctly in the box and doesn't interfere with the next paragraph.

<div style="font-size:100%; width:130px;
 height:95px; overflow:hidden; border:thin solid gray;">
  <p>Now is the time for all good men to come to the aid of their country.</p>
</div>
<p>The quick brown fox jumps over the lazy dog.</p>

Here is the default view before the text spacing has been overridden by the user, The text renders properly in the box.

Now is the time for all good men to come to the aid of their country.

The quick brown fox jumps over the lazy dog.

Here is the view AFTER the text spacing has been overridden by the user with the maximum text spacing in the success criterion, the text is clipped.

Now is the time for all good men to come to the aid of their country.

The quick brown fox jumps over the lazy dog.

Related techniques:
- F69: Failure of Success Criterion 1.4.4 when resizing visually rendered text up to 200 percent causes the text, image or controls to be clipped, truncated or obscured


------------------------------

F103: - Failure of Success Criterion 4.1.3 due to providing status messages that cannot be programmatically determined through role or properties
Failure of Success Criterion 4.1.3 due to providing status messages that cannot be programmatically determined through role or properties

About this Technique
	- This technique relates to 4.1.3: Status Messages (Failure).
	- This failure applies to technologies that support Accessible Rich Internet Applications (WAI-ARIA).

Description : The objective of this technique is to describe a failure where status messages are used in content but are not communicated to the user due to a lack of appropriate roles or properties. : The initial step in confirming a failure of Status Messages is to check that new dynamic content meets the definition of a status message. There are two criteria that determine if changed content on a page represents a status message: : the new content does not take focus (does not change context);
	- the new content provides information to the user on the outcome of an action, the state of an application, the progress of a process, or the existence of errors.
	- Where updated content does not conform to the definition of status messages, a failure of 4.1.3 has not taken place. : The second step in this failure technique involves examining code. Where dynamic content meets the definition of a status message, its container can be examined for an appropriate WAI-ARIA role or property which allows it to be programmatically determinable as a status message. Currently there are only a small number of techniques available to indicate status messages to assistive technologies. They are: : the HTML output element
	- role="status"
	- role="alert"
	- role="log"
	- the use of an aria-live attribute on an element, set to either "polite" or "assertive"
	- The absence of all of these techniques predicts a failure for the status message be announced to the user. Additionally, if the role or property is not set before the dynamic content is added, this also predicts a failure. : Since additional techniques may exist to alert an assistive technology, the final step of this failure technique is confirming whether an assistive technology (such as a screen reader) detects the dynamic content and exposes the information to users. Where a status message exists but is not surfaced by assistive technology, it is confirmation that a failure has taken place.

Examples
Example 1: Including a search results message without a status role

When a user carries out a search by pressing a Search button, the page content is updated with the results of the search, displayed in a section below the Search button. Since the search has no results, the change to content conveys the status message "0 results returned". This text is not given an appropriate role for a status message, and so a screen reader will not announce "Zero results returned" unless the user repositions to that text. Since the status message is not automatically presented to the user (i.e., instead, it must be manually discovered by the individual), it fails 4.1.3.

Working example: search results message without appropriate role


------------------------------

F102: - Failure of Success Criterion 1.4.10 due to content disappearing and not being available when content has reflowed
Failure of Success Criterion 1.4.10 due to content disappearing and not being available when content has reflowed

About this Technique
	- This technique relates to 1.4.10: Reflow (Failure).
	- This failure applies to all technologies.

Description : This document describes a failure that occurs when a change of the viewport width to 320px makes content disappear that was available at wider viewport widths. Some content available at wider widths may not be shown in the same way or at the same position at the viewport width of 320px, simply because there is less space (screen 'real estate') to display it. This content, however, should still be available after reflow to 320px viewport width, either by being repositioned in a single column view, or through some interaction offering the information in some other way, for example, in a disclosure area, a dialog, or via a link to another view.

Examples

The following examples demonstrate the failure to make content visible at a wider viewport width also available after a reflow to 320px:

A block of blog entry links in a side column disappears entirely after reflow (i.e., it is not available further down in the single column view).
Labels above text inputs are hidden and replaced by placeholder text after reflow, without a technique showing dedicated labels when focusing the fields.
Sections of content text disappear after reflow, without being available via some disclosure widget.
Information-carrying images disappear after reflow, without link or the availability of an equivalent alternative.
A global search field disappears after reflow, without an icon or menu option to reveal a search function or reach an equivalent search page.


------------------------------

G216: - Providing single point activation for a control slider
Providing single point activation for a control slider

About this Technique
	- This technique relates to 2.5.1: Pointer Gestures (Sufficient).
	- This technique applies to any technology that supports pointer input (e.g. supporting any or all of the following: mouse pointer, touch on touch screen or trackpad, stylus input, or laser pointer input).

Description : The objective of this technique is to ensure that users who have difficulties performing path-based gestures can operate a control slider. A control slider is a track with a "thumb" that you move along the track to set a value. : Screenshot of an example control slider showing the thumb in the middle of the track. : It allows a user to set a value in a certain range, e.g. setting the volume, changing the hue value of a color, putting in the amount of money needed in a loan calculator, or picking a sum to be donated to a charity. A slider that requires path-based gestures would use swiping left or right to change the value, or dragging the thumb of the slider in a specific direction to change the value. : A simple fallback for activation without a path-based gesture is to make the control slider track clickable. This way, a value can be specified using a single tap or click on the track. : Providing controls (e.g., arrow buttons) as alternative also allows incrementing or decrementing the value with taps or clicks. This can allow for a more fine-grained setting of the value. : Note : On touch screen devices, author-supplied path-based gestures usually do not work when an OS level Assistive Technology (AT) like a built-in screenreader are turned on. This is because AT generally consumes path-based gestures so they would not reach the authored content. When custom controls are built on top of native controls, however, these may also be operable with AT gestures such as vertical swiping to change the value (see example 1).

Example

A custom control slider built on top of a native slider (input type range) allows users to swipe left and right or drag the slider thumb to change the value of the slider. The slider track allows tapping or clicking to set the slider thumb to the activated position. Standard buttons on either side allow for incrementing and decrementing the slider value by tap, click or keyboard activation.

Working example of custom control slider


------------------------------

G215: - Providing controls to achieve the same result as path based or multipoint gestures
Providing controls to achieve the same result as path based or multipoint gestures

About this Technique
	- This technique relates to 2.5.1: Pointer Gestures (Sufficient).
	- This technique applies to any technology that supports pointer input (e.g., supporting any or all of the following: mouse pointer, touch on touch screen or trackpad, stylus input, or laser pointer input).

Description : The objective of this technique is to ensure that users who have difficulties performing path-based gestures can operate a content slider with a single pointer (e.g., a single tap on a touch screen or a single mouse click). A content slider contains chunks of content in a row. Usually several chunks of content are hidden, and only one chunk is visible at any time. Left and right horizontal swiping over the visible part of the slider brings adjacent hidden chunks of content into view. Providing controls (for example, arrow buttons) as alternative means of input allows advancing the slider with single pointer input. : Note : On touch screen devices, author-supplied path-based gestures usually do not work when OS level assistive technologies (AT) like a built-in screenreader are turned on. This is because AT generally consumes a path-based gestures so they would not reach the authored content. For example, a horizontal swipe gesture over the content slider will not work as intended by the author, but move the screen reader focus to the next or previous element. Some gestures may work if the user operates "pass-through gestures" which are often unreliable as they may depend on factors of hardware, operating system, operating system "skin", operating system setting, or user agent. : Note : This technique addresses gestures where support has been implemented by authors, not gestures provided by the user agent (such as horizontal swiping to move through the browser history or vertical swiping to scroll through page content) or the operating system (e.g., gestures to move between open apps, or call up contextual menus of assistive technologies when these are enabled).

Example
A content slider allows users to swipe left and right to reveal adjacent chunks of content. There are also next and previous buttons that enable users to advance to the next or previous chunks of content.


------------------------------

F100: - Failure of Success Criterion 1.3.4 due to showing a message asking to reorient device
Failure of Success Criterion 1.3.4 due to showing a message asking to reorient device

About this Technique
	- This technique relates to 1.3.4: Orientation (Failure).
	- This failure applies to Cascading Style Sheet / HTML technologies.

Description : This describes the failure condition that results when an author, having detected a device orientation that is considered undesirable, displays a message telling the user to reorient the device -- instead of the author reorienting all the content. : Detecting and responding to a user's device orientation is not itself a problem. The author decision to only offer one orientation of content is what fails the requirements of Success Criterion (SC) 1.3.4 Orientation. It is inadequate to display only a message in the detected orientation, telling users to rotate their devices (when not essential to the underlying activity). The entirety of the author-controlled content needs to be re-oriented in order to meet the SC. : There are various methods for devices to determine if the content is in landscape or portrait orientation. One of these methods involves looking at the width-to-height aspect ratio of the viewport. In other words, checking if the width is smaller or larger than the height. The CSS orientation media feature is portrait when the value of the height media feature is greater than or equal to the value of the width media feature. Otherwise, orientation is landscape.

Examples
Example 1: Block an orientation ("door slam") by using HTML and CSS

The following example uses HTML and CSS to show a message asking to reorient the device if in landscape.

The message will disappear if the orientation is changed to portrait. When the portrait property matches the viewport space defined via media queries, the message will disappear or vice versa. This particular example uses the CSS landscape, portrait media query properties.

<style>
/* Orientation "door slam" Styling */

@media all and (orientation: landscape) {
  .rotate { display: block; }
  .content { display: none; }
}

@media all and (orientation: portrait) {
  .rotate { display: none; }
  .content { display: block; }
}

.rotate {
  text-align: center;
  font-size: 2rem;
  margin-top: 4rem;
}
</style>

<!-- Orientation "door slam" HTML -->

<div class="rotate">Please rotate your device!</div>

<div class="content">
  ...
</div>

Working example: Show message asking to reorient device


------------------------------

G214: - Using a control to allow access to content in different orientations which is otherwise restricted
Using a control to allow access to content in different orientations which is otherwise restricted

About this Technique
	- This technique relates to 1.3.4: Orientation (Sufficient).
	- This technique applies to when the orientation of the page is locked, provide a button to allow a user to change the orientation.

Description : The objective of this technique is to allow users to access content in the way the user prefers. A content provider may expect that most users will view content using a specific device orientation or may expect that a user will want to maintain the original view within the device. As a result the provider then prevents the content from rotating. By providing a control to allow the user to rotate the content, someone who needs to use a particular orientation will be able to view the content in a comfortable manner. For example, a person who cannot hold the device and has it mounted attached to a wheelchair or bed. : Note : Many users will expect to use OS-level settings to prevent the orientation from changing. As a result, it is usually preferable to satisfy this Success Criterion by not restricting the content's ability to adapt to changes in orientation and allowing users to use the OS orientation lock when desired.

Examples
Example 1: An e-Reader application

Users of an e-Reader web application sometimes read when lying down on their side. In this situation, the device is viewed by the user in portrait mode even though the device is in the landscape orientation with regard to gravity. The developer locks the content into the portrait orientation to allow for this reading behavior, but also provides a control to allow users who have devices mounted in a specific orientation to achieve the desired viewing orientation.

Related techniques:
- F97: Failure due to locking the orientation to landscape or portrait view


------------------------------

C40: - Creating a two-color focus indicator to ensure sufficient contrast with all components
Creating a two-color focus indicator to ensure sufficient contrast with all components

About this Technique
	- This technique relates to:
	- 2.4.7: Focus Visible (Sufficient)
	- 2.4.13: Focus Appearance (Sufficient)
	- This technique applies to CSS.

Description : The objective of this technique is to create a two-color focus indicator that has sufficient contrast against any solid background color. This technique can avoid the need for multiple classes to ensure sufficient contrast of the focus indicator when viewed against different backgrounds. : Authors may apply this technique to sites that use a variety of different colored backgrounds. Although it is possible to create different colored focus indicators for different parts of a page, this can be time consuming and it can be easy to miss some components. However, if the focus indicator uses two highly-contrasting colors - a light color and a dark color - then the same indicator can be re-used, since at least one of the two colors will always have enough contrast against any background color. : As long as the two indicator colors have a contrast ratio of at least 9:1 with each other, at least one of the two colors is guaranteed to meet 3:1 contrast with any solid background color. : Note : This technique only guarantees that an indicator will pass if the entire indicator is drawn over the background, not within the boundary of the focused component, and if the entire background behind the indicator is one single, solid color. For example, if the background is an image or gradient, or if the indicator is partially overlaid on top of a different UI component, it may still be necessary to compare the indicator pixel-by-pixel against the background. : In CSS, two-color indicators can be implemented by combining the outline and box-shadow properties with the :focus or :focus-visible pseudo-classes. : Note : Avoid setting outline: none to use box-shadow on its own. User agents commonly suppress the box-shadow property in forced-color modes, so authors should avoid relying on box-shadow alone to implement focus indicators. If box-shadow only styling is required, consider combining it with an outline: 2px transparent solid property to ensure compatibility with forced-color modes.

Examples

This example demonstrates a simple implementation where focus styles are applied to all focusable components. In use on a more complex website care would need to be taken that these styles are not overridden by more specific styles.

Example 1: A thick two-color indicator

In this example, the indicator consists of two solid bands of color. Because each color band is 2 CSS pixels thick, either color band is large enough to meet the minimum indicator size requirement on its own. As long as one of the two colors has 3:1 change contrast with the pixels behind and around the focus indicator, the indicator will satisfy both the Focus Appearance and Non-Text Contrast success criteria.

*:focus {
	/* inner indicator */
	outline: 2px #F9F9F9 solid;
	outline-offset: 0;
	/* outer indicator */
	box-shadow: 0 0 0 4px #193146;
}

Working example of a thick two-color indicator

Related techniques:
- G149: Using user interface components that are highlighted by the user agent when they receive focus
- G195: Using an author-supplied, visible focus indicator
- C15: Using CSS to change the presentation of a user interface component when it receives focus
- G165: Using the default focus indicator for the platform so that high visibility default focus indicators will carry over
- C45: Using CSS :focus-visible to provide keyboard focus indication


------------------------------

F99: - Failure of Success Criterion 2.1.4 due to implementing character key shortcuts that cannot be turned off or remapped
Failure of Success Criterion 2.1.4 due to implementing character key shortcuts that cannot be turned off or remapped

About this Technique
	- This technique relates to 2.1.4: Character Key Shortcuts (Failure).
	- This failure applies to web content that can be interacted with using a physical keyboard as input mechanism.

Description : When keyboard shortcuts using only character keys are implemented, voice commands can inadvertently trigger functionality. Character key shortcuts use a single key such as a letter key (including upper- and lower-case letters), punctuation, number, or symbol characters. : Content must either not implement single character key shortcuts, or offer settings to either turn off these shortcuts or to map them to keyboard shortcuts that employ an additional modifier key, such Alt or Ctrl. : Note : The use of a single key keyboard shortcut is not a failure if the shortcut is only active when a particular interface element has focus. For example, when a select element or a custom listbox has focus, the input of single character keys to navigate the list is a useful feature. : The test procedure suggests asking the author (often the developer of the site) whether keyboard shortcuts are used. If that information is trusted then the procedure can be simpler than pressing all the keys. : The success criterion does not apply when single key shortcuts are only active when interface elements have the focus, for example, a select element. Here, pressing a letter key is used for fast navigation within the select options. : Viewing page scripts and searching for typical keyboard event handlers like document.addEventListener('keydown' ...) or the presence of the .keycode attribute may establish the presence of scripts that intercept keyboard shortcuts without modification keys like ALT or Ctrl being held down at the same time. As there are several ways of implementing character key events, this method is not considered reliable. : Some browsers employ single key shortcuts with Shift. For example, Firefox opens a page search when pressing Shift + / and a search in page links when pressing Shift + '. In these cases, it will be necessary to press Esc or click an empty part of the page to remove the focus from the browser input.

Example

An application uses the single key shortcut S to bring up a search popup. There is no setting available to turn off or modify the shortcut.


------------------------------

SCR39: - Making content on focus or hover hoverable, dismissible, and persistent
Making content on focus or hover hoverable, dismissible, and persistent

About this Technique
	- This technique relates to 1.4.13: Content on Hover or Focus (Sufficient).
	- This technique applies to any technology that supports the display of additional content on pointer hover.

Description : Additional content that is displayed when a user moves the pointer over a trigger or moves the keyboard focus to the trigger (for example, a pop-up) must remain visible to allow users time to read and interact with the content and must allow the user to move the pointer over the additional content. : Low vision users who magnify their screens often see only a small part of the screen at a time (their viewport). This means that the additional content may not be fully visible in the current viewport and users may need to move their mouse over the additional content to read it. Web authors should therefore ensue that additional content stays visible when the pointer moves away from the trigger to the (mostly adjacent) additional content. additional content should also be dismissible without moving the focus, so that users can read content covered by the additional content.

Examples
Example 1: Content preview for links

When hovering over or focusing on a link, a content preview for the link appears just above or below that link. Users can move the pointer over the additional content (pop-up) so that they can fully read the additional content. Pressing the Esc key dismisses (closes) the additional content.

HTML of example 1
<p>This is the 
   <a class="a-and-tooltip" id="parent" href="index.html">trigger
   <span id="popup" role="tooltip">And this additional text 
    gives additional context on the trigger term
   </span>
  </a>.
   Text and popup are <strong>in one link (a)</strong> element.
</p>
CSS of example 1
[role="tooltip"] {
  display: none;
  padding: 0.5em;
  background:white;
  color: black;
  border:solid black 2px;
  width:10em;
}

.a-and-tooltip {
  position: relative;
}

[role="tooltip"] {
  position: absolute;
  left:0;
  top:1em;
}
JavaScript of example 1
// trigger and popup inside the same link

var parent = document.getElementById("parent");

parent.onmouseover = function() {
  document.getElementById("popup").style.display = "block";
}

parent.onmouseout = function() {
  document.getElementById("popup").style.display = "none";
}

parent.onfocus = function() {
  document.getElementById("popup").style.display = "block";
}

parent.onblur = function() {
  document.getElementById("popup").style.display = "none";
}

// hide when ESC is pressed

document.addEventListener("keydown", (e) => {
  if ((e.keyCode || e.which) === 27)
    document.getElementById("popup").style.display = "none";
});

Working example of content on hover or focus


------------------------------

G212: - Using native controls to ensure functionality is triggered on the up-event.
Using native controls to ensure functionality is triggered on the up-event.

About this Technique
	- This technique relates to 2.5.2: Pointer Cancellation (Sufficient).
	- This technique applies to nearly all technologies.

Description : The objective of this technique is to ensure that users who attempt to interact with a control do not trigger the action of the event accidentally. This can be accomplished most directly by relying on the pointer's up-event (for example, the onclick or mouseup event). : The easiest way to meet this success criterion is simply to use the default behavior of controls and not override that behaviour with an explicit down-event trigger. The up-event is the default behaviour for almost all controls and any programming or markup language. : In native languages where a control is fired on the down event it is usually for good reason and is easily recoverable. For instance, an HTML input element could have the cursor enter the editable area on the “pointer down” event, because the action is trivially reversible, and as such meets the requirements of the Pointer Cancellation SC. This is because if the user realizes they made a mistake after pressing down the control, they can simply move their pointer away from the hit area while still holding down the pointer, then release their pointer and the event is not triggered.

Examples
Example 1: Using an native onclick event in JavaScript

In JavaScript native onclick events are triggered on the up-event by default.

Example 2: Using a native button or link in HTML

In HTML native <button> or <a href ....> onclick events are triggered on the up-event by default.

Note

The <button> element doesn't do anything on its own (unless its part of a <form>, and does NOT have <type="button">, in which case it submits the form). Authors should rely on input-agnostic click handlers.

Example 3: Using a native button in iOS or Android

In native buttons in iOS and Android onclick events are triggered on the up-event by default.

Note

The WCAG standard itself applies to web pages, and therefore this example is provided as helpful supplementary advice for those looking to implement the WCAG2ICT for native applications.


------------------------------

F98: - Failure due to interactions being limited to touch-only on touchscreen devices
Failure due to interactions being limited to touch-only on touchscreen devices

About this Technique
	- This technique relates to 2.5.6: Concurrent Input Mechanisms (Failure).
	- This failure applies to all technologies that include interactive controls (such as links, form inputs, or complex custom widgets) and that can detect the presence of different input modalities.

Description : The objective of this Failure is to describe situations where users on devices that have a touchscreen are unable to use other input modalities available to them (such as an additional/external mouse or keyboard). : There are various methods and heuristics for web content to determine if a user's device has a touchscreen. However, even when a touchscreen is present, other input modalities may be available to users. It is not necessarily the case that the user will be interacting with the web content (exclusively, or at all) using the touchscreen. : If, when a touchscreen is detected, web content is designed to be operated exclusively through touch, these users will be unable to operate the content using their other (possibly preferred) input mechanisms.

Examples
Example 1: Only using touch-specific JavaScript event listeners when a touchscreen is detected

These types of approaches have historically been popular for "mobile" specific development, to ensure that touchscreen interactions are more responsive and immediate (due to the way that touch interactions used to add a delay of approximately 300ms between a "tap" interaction and the generic click event being fired).


/* inferring the presence of a touchscreen based on
   support for the Touch Events API */

if (window.TouchEvent || ('ontouchstart' in window)) {
  /* set up event listeners for touch */
  target.addEventListener('touchend', ...);
  ...
}
else {
  /* set up event listeners for mouse/keyboard */
  target.addEventListener('click', ...);
  ...
}

/* inferring the presence of a touchscreen based on
   the CSS Media Queries 4 Interaction Media Features
   match for a "coarse" primary input mechanism */

if (window.matchMedia && window.matchMedia("(pointer:coarse)").matches) {
  /* set up event listeners for touch */
  target.addEventListener('touchend', ...);
  ...
}
else {
  /* set up event listeners for mouse/keyboard */
  target.addEventListener('click', ...);
  ...
}

Similarly, web content that omits relevant/necessary keyboard event listeners (e.g. for the correct keyboard interaction with a complex widget, such as a tab interface) when a touchscreen is detected - under the assumption that on a touch device, keyboard support won't be necessary.


/* inferring the presence of a touchscreen based on
   the navigator.maxTouchPoints property defined in
   the Pointer Events API */

if (window.PointerEvent && ('maxTouchPoints' in navigator) &&
    (navigator.maxTouchPoints > 0)) {
	/* no need to listen to keyboard - there's a touchscreen... */
	...
}
else {
	/* set up event listeners for keyboard interactions */
  target.addEventListener('keyup', ...);
  ...
}

Note

Generally, these approaches will also result in a failure of Success Criterion 2.1.1 Keyboard - but only in situations where a touchscreen interface was also detected.

Example 2: Hiding/omitting controls for mouse and keyboard users when a touchscreen is detected

Web content containing interactive widgets such as content carousels, with visible buttons to operate the widget (such as previous/next buttons, or a visible scrollbar/slider). These visible controls are hidden/omitted when a touchscreen is detected, under the assumption that users will simply use touch gestures to operate the widgets, and no other alternatives are then provided for keyboard or mouse users.

/* using CSS Media Queries 4 Interaction Media Features
   to hide particular elements in the page (such as a container
   with visible controls) when a "coarse" primary input is present */

@media (pointer: coarse) {
  #widget .controls { display: none; }
}

Depending on the specific implementation, authors may allow mouse interactions with widgets that mirror touch gestures - for instance, allowing mouse users to also drag/swipe carousels, rather than just relying on clickable previous/next controls or scrollbars. In these cases, hiding controls when a touchscreen is detected will still allow users to operate the widget with the mouse (unless this interaction has also been suppressed/omitted when the touchscreen was detected, as per the previous example). However, if the only keyboard-operable controls for the widget were hidden, and no alternative for keyboard users was provided (such as allowing cursor key operation), this situation would still fail Success Criterion 2.5.6.

Note

Generally, these approaches will also result in a failure of Success Criterion 2.1.1 Keyboard and (depending on the touch gesture that the user is expected to perform) Success Criterion 2.5.1 Pointer Gestures.


------------------------------

G213: - Provide conventional controls and an application setting for motion activated input
Provide conventional controls and an application setting for motion activated input

About this Technique
	- This technique relates to 2.5.4: Motion Actuation (Sufficient).
	- This technique applies to web pages that detect device or user motion such as shaking or tilting and use this motion as a means of input. If the motion itself is essential to the application's function, then this technique does not apply.
	- This technique also does not relate to movement of users through space as registered by geolocation sensors or beacons, or events observed by the device other than intentional gesturing by the user. It also does not cover indirect motion associated with operating a keyboard, pointer, or assistive technology.

Description : The objective of this technique is to ensure that: : People who use mounted devices or who cannot precisely manipulate a device are able to provide inputs through more conventional user interface components, and
	- People who may accidentally activate sensors due to tremors or other motor impairments have the ability to turn off motion actuation to prevent such accidental triggering of functions. : When a device sensor such as an accelerometer or gyroscope is used to gather input: : A button, link, or other conventional control is provided that does not rely on sensor input, and
	- A setting is provided to allow the user to turn off the sensor data.

Examples
Example 1: Shake to undo

After text is entered in a field, shaking a device shows a dialog offering users to undo the entry. Supporting use of the backspace key and/or providing a clear button next to the text field offers the same functionality.

Shake to undo can be turned off in a settings page.

Example 2: Motion Activated Slider

A slider can be adjusted by tipping the device to the left and right. There are also buttons to achieve the same functionality, and a tick-box that prevents the motion from having an effect.

Working example of a slider with motion actuation.


------------------------------

ARIA24: - Semantically identifying a font icon with role="img"
Semantically identifying a font icon with role="img"

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Sufficient).
	- This technique applies to content using WAI-ARIA.

Description : The objective of this technique is to show how to semantically identify an element that uses a font file for icons. When a user overrides font-family these icons typically disappear unless there is a means to identify them. The point is to provide a technique to differentiate icon fonts from general font (text) usage. : Some low vision users need user stylesheets, scripts, or extensions to override the fonts on a page to perceive text content. However, they need to be able to perceive icon fonts that are meaningful, such as a star signifying a favorite, or an email icon in a link. : The key is for the author to semantically markup icon fonts with role="img". Then the user's font replacement selector can hook into that semantic and exclude role="img". This results in those icon fonts being shown. : Basic principle of the technique
	- 1. Author adds a font-face to the CSS : The first step is used for adding a font face with icons via the CSS file. : /* specify font-family name for icons */
	- @font-face { font-family: 'IconFontRoleImg'; } : /* default class for fonts-face with icons */
	- .icon,
	- [class^="icon-"],
	- [class*=" icon-"] { font-family: 'IconFontRoleImg' !important; } : /* specific class for icon */
	- .icon-star-bg:before { content: "\e982"; }
	- 2. Author adds the font classes to the HTML : The second step adds classes, the role="img" attribute for semantics and an accessible name. : <!-- icon via class names, role="img" and a text alternative -->
	- <p>
	-   <span class="icon icon-star-bg" role="img" aria-label="Favorite"></span>
	- </p>
	- 3. User CSS file replaces the font-family except the icon file : The third step uses the ":not selector" in combination with the "[attribute] selector" to only replace font faces for regular text. : /* replaces font faces but excludes all elements with attribute role="img" */
	- *:not([role="img"]) { font-family: Verdana, sans-serif !important; }

Examples
Example 1: Star Icon Font used as an indicator (not interactive)

In this example a star icon is used to indicate a favorite. It is not interactive and does not disappear if the user overrides the font family via CSS.

Author CSS
/* default class for fonts-face with icons */
.icon { font-family: 'IconFontRoleImg' !important; }

/* specific class for icon */
.icon-star-bg:before { content: "\e982"; }
HTML
- Instead of... -
<p>
  <span class="icon icon-star-bg"></span>
</p>
- Do... -
<p>
  <span class="icon icon-star-bg" role="img" aria-label="Favorite"></span>
</p>
User CSS
*:not([role="img"]) { font-family: Verdana, sans-serif !important; }
Working example:

Star Icon Font used as an indicator (not interactive)

Example 2: Two colored / stacked star Icon Font used as an indicator

In this example a two colored star icon is created by stacking two fonts with different colors on top of each other. This way it's possible to mimic only half the star is filled. It is not interactive and does not disappear if the user overrides the font family via CSS.

Author CSS
/* default class for fonts-face with icons */
.icon { font-family: 'IconFontRoleImg' !important; }

/* specific classes for icons */
.icon-star-bg:before    {content: "\e982"; }
.icon-star-half:before  {content: "\e983"; }
HTML
- Instead of... -
<span class="icon-stacked">
  <span class="icon icon-star-bg grey"></span>
  <span class="icon icon-star-half yellow"></span>
</span>
- Do... -
<span class="icon-stacked" role="img" aria-label="Favorite star half filled">
  <span class="icon icon-star-bg grey" role="img" aria-hidden="true"></span>
  <span class="icon icon-star-half yellow" role="img" aria-hidden="true"></span>
</span>
User CSS
*:not([role="img"]) { font-family: Verdana, sans-serif !important; }
Working example:

Two colored / stacked star Icon Font used as an indicator

Example 3: Email Icon Font in a link WITHOUT visible text

In this example an email icon is in a link with no visible text. It does not disappear if a user overrides font family. The icon font is identified by assistive technology as a "link image" and the name "Email" (keyboard or mouse).

Author CSS
/* default class for fonts-face with icons */
.icon { font-family: 'IconFontRoleImg' !important; }

/* specific class for icon */
.icon-email:before { content: "\e93e"; }
HTML
- Instead of... -
<a href="email.html">
  <span class="icon icon-email"></span>
</a>
- Do... -
<a href="email.html">
  <span class="icon icon-email" role="img" aria-label="Email"></span>
</a>
User CSS
*:not([role="img"]) { font-family: Verdana, sans-serif !important; }
Working example:

Email Icon Font in a link WITHOUT visible text

Example 4: Multiple Icon Fonts as part of another sematic element WITH visible text

This example already has a visible text label in the link to be used as an accessible name, the mail and chevron font icons must stay visible when the font family is changed. This can be done by ensuring the icons are contained in their own element and the attribute aria-hidden="true" is used so the font icons will be ignored by assistive technologies.

Author CSS
/* default class for fonts-face with icons */
.icon { font-family: 'IconFontRoleImg' !important; }

/* specific class for icon */
- See style declarations in HTML examples -
HTML
- Instead of... -
<style>
.icon-double-link:before   { content: "\e93e"; }
.icon-double-link:after    { content: "\e993"; }
</style>

<a href="email.html" class="icon-double-link">Email</a>
- Do... -
<style>
  .icon-email:before   { content: "\e93e"; }
  .icon-chevron:before { content: "\e993"; }
  .icon-double-link .icon-chevron  { float: right; margin-left: 1.5rem; }
</style>

<a href="email.html" class="icon-double-link">
  <span class="icon icon-email" role="img" aria-hidden="true"></span>
  <span class="icon icon-chevron" role="img" aria-hidden="true"></span>
   Email
</a>
User CSS
*:not([role="img"]) { font-family: Verdana, sans-serif !important; }
Working example:

Multiple Icon Fonts as part of another sematic element WITH visible text


------------------------------

F97: - Failure due to locking the orientation to landscape or portrait view
Failure due to locking the orientation to landscape or portrait view

About this Technique
	- This technique relates to 1.3.4: Orientation (Failure).
	- This failure applies to all technologies that allow the viewing of content to be restricted to one orientation.

Description : The objective of this technique is to describe how restricting the view of content to a single orientation is a failure to allow content to be viewed in multiple orientations. When content is presented with a restriction to a specific orientation, users must orient their devices to view the content in the orientation that the author imposed. Some users have their devices mounted in a fixed orientation (e.g. on the arm of a power wheelchair), and if the content cannot be viewed in that orientation it creates problems for the user. : If a specific orientation is determined to be essential for the operation and viewing of the content, then this failure technique will not apply.

Examples
A news app always shows the content in portrait orientation. Users can view the content on a device which supports landscape and portrait display orientations. When the device is turned to landscape view, the content appears sideways to the user.

Related techniques:
- G214: Using a control to allow access to content in different orientations which is otherwise restricted


------------------------------

F52: - Failure of Success Criterion 3.2.5 due to opening a new window as soon as a new page is loaded
Failure of Success Criterion 3.2.5 due to opening a new window as soon as a new page is loaded

About this Technique
	- This technique relates to 3.2.5: Change on Request (Failure).
	- This failure applies when scripting is used to open new windows.

Description : Some Web sites open a new window when a page is loaded, to advertise a product or service. The objective of this technique is to ensure that pages do not disorient users by opening up one or more new windows that automatically attain focus as soon as a page is loaded.

Examples

Note

There are multiple methods by which this failure may be triggered. Two common examples that are supported differently in various versions of user agents are listed as examples below.

Example 1: example commonly used to open new windows when pages are loaded
window.addEventListener("load", showAdvertisement, true);
window.attachEvent("onload", showAdvertisement);
   
function showAdvertisement(){
  window.open('noscript.html', '_blank', 'height=200,width=150');
}

Related techniques:
- G107: Using "activate" rather than "focus" as a trigger for changes of context


------------------------------

G209: - Provide sufficient contrast at the boundaries between adjoining colors
Provide sufficient contrast at the boundaries between adjoining colors

About this Technique
	- This technique relates to 1.4.11: Non-text Contrast (Sufficient).
	- This technique applies to for graphics which use multiple colours adjacent to each other.

Description : The objective of this technique is to ensure people with moderately low vision can distinguish boundaries between adjoining segments of color. : The success criteria for non-text contrast uses the term "graphical object" to cover small simple graphics, and parts of larger complex graphics. This technique focuses on solid color segments where the boundaries between colors convey meaning. : When selecting colors for graphics with multiple colors, consider adjoining colors and test that the contrast ratio is at least 3:1. If adjoining colors have less than 3:1 color contrast ratio difference add a border with at least a 3:1 color contrast with each color.

Examples
Example 1: Pie chart with alternative light/dark colors
The contrast between adjoining segments of the pie chart range from 5.8 to 9.4.
Example 2: Pie chart with borders between segments
The contrast between the segments of the pie chart range from 1.1 to 1.8. A border has been added with at least a 3:1 contrast ratio with the colors to distinguish between segments. .
Example 3: Map with border boundaries
The color contrast of areas within the map range between 1.3 and 1.8. A boundary line is added with a color contrast ratio of at least 3:1 with the area colors.
Example 4: Pie chart with black and white borders
The colored areas in the chart are both dark and light. A black and white boundary line is added to ensure sufficient contrast between both light and dark colors.

Related techniques:
- G207: Ensuring that a contrast ratio of 3:1 is provided for icons


------------------------------

C39: - Using the CSS reduce-motion query to prevent motion
Using the CSS reduce-motion query to prevent motion

About this Technique
	- This technique relates to 2.3.3: Animation from Interactions (Sufficient).
	- This technique applies to CSS which causes motion that is triggered by user interactions.

Description : The objective of this technique is to allow users to prevent animation from being displayed on Web pages, via the use of the prefers-reduced-motion CSS Media Query. : Some users experience distraction or nausea from animated content. For example, if scrolling a page causes elements to move (other than the essential movement associated with scrolling) it can trigger vestibular disorders. Enclosing the CSS that creates the animations in a media query allows people to prevent those symptoms. : A typical example is 'parallax scrolling', where backgrounds move at different rates. The movement due to scrolling the page is essential (and under the users control), but additional movement triggered by the scrolling can also trigger vestibular symptoms. : The understanding document for Motion Actuation includes links for changing the reduce motion setting.

Examples
Example 1: 'prefers-reduced-motion' CSS Media Query

Users can indicate their motion preference for interfaces in their system and the 'prefers-reduced-motion' CSS Media Query will respect that choice. CSS can then be applied to disable that motion for users that request it.

@media (prefers-reduced-motion: reduce) {
  /* CSS to disable motion goes here */
}

Working example of 'prefers-reduced-motion' CSS Media Query


------------------------------

G207: - Ensuring that a contrast ratio of 3:1 is provided for icons
Ensuring that a contrast ratio of 3:1 is provided for icons

About this Technique
	- This technique relates to 1.4.11: Non-text Contrast (Sufficient).
	- This technique applies to all technologies that support graphical icons.

Description : The objective of this technique is to ensure graphical icons provide enough contrast for people with vision impairments. Not all graphics are within the scope of SC 1.4.11 Non-text contrast but if the icons are required to understand the content, then the icons need to have a contrast ratio of at least 3:1. : The success criteria for non-text contrast uses the term "graphical object" to cover small simple graphics, and parts of larger complex graphics. This technique focuses on solid color icons used on solid or gradient backgrounds. : When choosing the colors for graphics, consider the color(s) adjacent to that graphic, and test that the contrast ratio is at least 3:1. : Note : A selection of tools and applications for testing contrast ratios can be found in Understanding SC 1.4.3 Contrast (minimum).

Examples
Example 1: Solid icon color against the background

A solid icon such as a telephone symbol uses orange on a white background. The color orange (#E3660E) is tested against the white background (#FFFFFF) and it has a contrast ratio of 3.4:1.

Example 2: Solid icon color against a custom background

A solid icon such as a telephone symbol used within an orange background. The orange and white colors are the same as in example 1, in this case the contrast against the white background is not relevant, the white icon within the orange background is what provides the information in the icon and as a result needs to meet the contrast requirement.

Example 3: Solid icon with a gradient background

A solid icon such as a telephone symbol using a dark blue icon on a white-to-blue gradient background. The first test of the icon should be against the darkest (least contrasting) background that is adjacent to the icon color. If that is at least 3:1, it passes the success criterion.

Example 4: Solid icon with gradient background overlapping in contrast

A solid icon on a gradient background can overlap in contrast if the graphic is still understandable where it does not have contrast against all of the background. If you find the part of the gradient where it does not meet a 3:1 ratio with the graphic and treat that part as if it was removed, does the icon still convey the appropriate meaning?

A method of visualizing this is to remove the non-contrasting area and check that you can still understand the icon. If so, it is sufficient. The images below shows an icon on a gradient background, and a second version where it removes the area of the icon that does not meet the 3:1 contrast ratio. It is still recognizable as a phone icon, so passes the success criterion.

Related techniques:
- G18: Ensuring that a contrast ratio of at least 4.5:1 exists between text (and images of text) and background behind the text
- G145: Ensuring that a contrast ratio of at least 3:1 exists between text (and images of text) and background behind the text


------------------------------

C38: - Using CSS width, max-width and flexbox to fit labels and inputs
Using CSS width, max-width and flexbox to fit labels and inputs

About this Technique
	- This technique relates to 1.4.10: Reflow (Sufficient).
	- This technique applies to CSS and HTML.

Description : The objective of this technique is to be able to present labels and inputs without introducing a horizontal scroll bar at a width equivalent to 320 CSS pixels for content intended to scroll vertically. When space is limited in the viewport for the label and input to sit next to each other horizontally, they will be changed to a vertical alignment. This is done by using CSS properties for width, max-width and flexbox that adapt to the available space. : Responsive layouts can add or remove columns or layout blocks, and each part of the layout can be wider or smaller at different points. This technique ensures labels and inputs do not break out of their layout area, including in one-column layouts where it would cause horizontal scrolling. : The basic approach for fitting labels and inputs is to: : Define the size of layout regions using flexbox properties and media queries for specific viewport sizes, so they enlarge, shrink or wrap in the available space and respond to zoom levels;
	- Position the layout regions in the flexbox container as a row of adjacent flexbox items, which may wrap to new rows as needed in much the same way as words in a paragraph wrap.
	- Define the width and max-width property for labels and inputs so they enlarge or shrink in the available space and respond to zoom levels. : All labels and inputs require design finesse by making sure the original size fits the biggest size of the available spaces to achieve good-looking results at a wide range of viewport sizes and zoom levels. For help on flexbox please see the MDN article on Flexbox.

Examples
Example 1: Fitting labels, inputs and flexbox layout with HTML and CSS.

The following example uses HTML and CSS to fit labels and inputs within various width containers, including the viewport. The layout regions adjust their size as the viewport is adjusted. The labels and inputs subsequently adjust their size to fit within the layout region containers.

The zoom level can be increased to 400% without requiring horizontal scrolling. This particular example uses a percent size for the width and max-width for the labels and inputs. The max-width is applied in order to fix elements spilling out of the grid in a cross-browser way, as replaced elements such as the select have intrinsic sizing.

<style>

/* Fitting Inputs Styling */

.form-group {
  display: flex;
  flex-flow: row wrap;
  margin: 0 -1rem 1rem -1rem;
}

[class*="form-col"] {
  flex: 0 1 100%;
  padding: 0 1rem;
}

@media (min-width: 576px) {
  .form-col-4 {
    flex: 0 0 33.33333%;
    max-width: 33.33333%;
  }
  
  .form-col-8 {
    flex: 0 0 66.66667%;
    max-width: 66.66667%;
  }

  .offset-form-col-4 {
    margin-left: 33.33333%;
  }
}

input {
  display: block;
  width: 100%;
}

label, select {
  display: block;
  width: 100%;
  max-width: 100%;
}

</style>

<div class="form-group">
  <div class="form-col-4">
    <label for="fname">First Name</label>
  </div>
  <div class="form-col-8">
    <input type="text" id="fname" autocomplete="given-name">
  </div>
</div>

<div class="form-group">
  <div class="form-col-4">
    <label for="lname">Last Name</label>
  </div>
  <div class="form-col-8">
    <input type="text" id="lname" autocomplete="family-name">
  </div>
</div>

<div class="form-group">
  <div class="form-col-4">
   <label for="favorite-fruit">Favorite fruit</label>
  </div>
  <div class="form-col-8">
    <select id="favorite-fruit">
      <option>Banana</option>
      <option>Pineapple</option>
      <option>Strawberry</option>
    </select>
  </div>
</div>

<div class="form-group">
  <div class="offset-form-col-4 form-col-8">
    <button type="submit">Submit</button>
  </div>
</div>



Working example: Using Adjustable Labels and Inputs for Reflow


------------------------------

F95: - Failure of Success Criterion 1.4.13 due to content shown on hover not being hoverable
Failure of Success Criterion 1.4.13 due to content shown on hover not being hoverable

About this Technique
	- This technique relates to 1.4.13: Content on Hover or Focus (Failure).
	- This failure applies to any technology that supports the display of additional content on pointer hover.

Description : The objective of this failure is to describe a situation where users find it difficult or impossible to move the pointer over additional content that appears on hover. For users of screen magnification software, the new content is often not fully visible in the current magnifed section. In order to perceive it, it is therefore critical for these users to be able to move the pointer away from the trigger and over the additional content, and thereby change the position of the magnified section, without this content disappearing.

Examples
A pop-up opens on pointer hover. Due to the chosen screen magnification, the content is only partially visible. However, as soon as the pointer is moved away from the trigger towards the pop-up content so it can be read, the pop-up automatically closes.
Hovering over a chart with data points, pop-ups open to show details of the respective data point, somewhat offset from the data point itself. When moving the pointer towards the pop-up so it can be fully read with magnification, the pointer travels over other data points that cause the appearance of other pop-ups that replace the particular pop-up the user wanted to see.


------------------------------

C34: - Using media queries to un-fixing sticky headers / footers
Using media queries to un-fixing sticky headers / footers

About this Technique
	- This technique relates to 1.4.10: Reflow (Advisory).
	- This technique applies to CSS and HTML.

Description : The objective of this technique is to be able to present content with sticky headers and footers when there is enough space. This is done by using min-height, max-height, and min-width media queries techniques that adapt to the available space of the viewport. : Sticky regions always stay visible in the viewport while the other content will disappear underneath when scrolling. In terms of content visibility, this is often not a problem on the desktop and on mobile devices in portrait orientation. However, when using mobile devices in landscape orientation or when zooming in on the desktop, sticky regions may block a big portion of the screen: the height of the sticky region may leave only a small part of the screen for the display of page content. : Disabling, or un-fixing sticky regions, is an effective way to allow for enough available space when users prefer different reading and zoom preferences or when using landscape mode. : Note : Be aware that sticky regions can create disadvantages for keyboard users and should therefore be used judiciously. The problem for keyboard users tabbing through a page with a fixed header is that once the page has started to scroll, tabbing backwards to reach interactive elements higher up on the page will often mean that the focus becomes invisible once it moves behind the sticky header. Users must then scroll up to be able to see the focus, something they may not necessarily be aware of. In the same way the visible focus can disappear behind a sticky footer, so users would need to scroll down to be able to see their focus position, which is a major inconvenience. : The basic approach for un-fixing sticky headers / footers is to: : Define the first sticky regions using media query min-height properties, so they get fixed or un-fixed depending on the available space;
	- Define other sticky regions using media query min-width and max-height properties for specific viewport sizes, so they get fixed or un-fixed depending on the available space, e.g. for tablets depending on the portrait or landscape position of the device.

Examples
Example 1: Un-fix sticky headers / footers in HTML and CSS

The following example uses HTML and CSS to un-fix sticky headers / footers. The sticky regions get un-fixed as the height of the viewport is limited or the orientation is changed. When the min-height property matches the viewport space defined via media queries, regions which are not sticky get fixed or vice versa. This particular example uses the CSS min-height, max-height and min-width media query properties.


<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>Using media queries to un-fix sticky headers / footers</title>
    <style>

    /* Sticky Styling */

    header { min-height: 130px; }

    @media (min-height: 480px) {
      header {
        position: -webkit-sticky;
        position: sticky;
        top: 0;
      }
    }

    @media (min-device-width: 576px) and 
    (max-device-width: 1024px) and 
    (orientation: landscape) {
      header {
        position: static;
      }
    }

    footer { min-height: 130px; }

    @media (min-height: 480px) {
      footer {
        position: sticky;
        bottom: 0;
      }
    }

    @media (min-device-width: 576px) and
    (max-device-width: 1024px) and
    (orientation: landscape)  {
      footer {
        position: static;
      }
    }

    </style>

  </head>

  <body class="grid">

    <header class="grid-item">
      ...
    </header>

    <main class="grid-item">        
      ...
    </main>

    <aside class="grid-item">
      ...
    </aside>

    <footer class="grid-item">
      ...
    </footer>

  </body>
</html>


Working example: Using media queries to un-fix sticky headers / footers


------------------------------

C36: - Allowing for text spacing override
Allowing for text spacing override

About this Technique
	- This technique relates to 1.4.12: Text Spacing (Sufficient).
	- This technique applies to content using technologies that support CSS.

Description : The objective of this technique is to allow a user to override text spacing via user stylesheet, bookmarklet, extension, or application. Increased spacing between paragraphs, lines, words, and characters benefits people with low vision or some cognitive disabilities. Content needs to allow spacing changes without loss of content or functionality, so text containers must either have room for the text to expand or the container must be able to expand. This technique will typically apply to short strings of text such as in a navigation bar, as longer strings of text are increasingly likely to require wrapping to be readable when styles are changed. : In English languages, if authors do not set the CSS height property, it can help ensure paragraphs expand. Paragraphs need to allow text to increase vertically for languages or scripts such as English which are read horizontally or to increase horizontally for languages or scripts which are read vertically.

Examples

When a user adapts the page to increase the text spacing, text fits within the bounds of its containing box.

Example 1: A paragraph expands vertically within container
The CSS
<style>
/* CSS: No height property is set.*/
</style>
The HTML
<div class="card">
  <img alt="" src="image.png">
  <h3>Heading</h3>
  <p class="lede">Long lede paragraph...</p>
</div>

None of the paragraphs on this page have a height specified, so all are effectively using this technique.

Related techniques:
- C35: Allowing for text spacing without wrapping


------------------------------

C37: - Using CSS max-width and height to fit images
Using CSS max-width and height to fit images

About this Technique
	- This technique relates to 1.4.10: Reflow (Advisory).
	- This technique applies to CSS and HTML.

Description : The objective of this technique is to be able to present images without introducing a horizontal scroll bar at a width equivalent to 320 CSS pixels, or a vertical scroll bar at a height equivalent to 256 CSS pixels for content intended to scroll horizontally. This is done by using CSS max-width and height property techniques that adapt to the available space and keep the original dimensions of the image. : Responsive layouts can add or remove columns or layout blocks, and each part of the layout can be wider or smaller at different points. This technique ensures images do not break out of their layout area, including in one-column layouts where it would cause scrolling. : The basic principles of fitting images are to: : Define the max-width property for images, and;
	- Define the height property for images, so they enlarge or shrink in the available space and respond to zoom levels. : All images require design finesse by making sure the original size fits the biggest size of the available spaces to achieve good-looking results at a wide range of viewport sizes and zoom levels.

Examples
Example 1: Fitting images in HTML and CSS

The following simple example uses HTML and CSS to create a fitting image. The layout regions adjust their size as the viewport is adjusted. The images subsequently adjust their size to fit within the layout region containers.

The zoom level can be increased to 400% without requiring scrolling in more than one direction. This particular example uses a percent size for the max-width and auto size for the height of the image to remain the original dimensions.

<style>
.img-responsive {
  max-width: 100%;
}
</style>

<div class="panel">
  <img alt="" class="img-responsive" src="...">
  ...
</div>

Working example: Using Fitting Images for Reflow


------------------------------

G207: - Ensuring that a contrast ratio of 3:1 is provided for icons
Ensuring that a contrast ratio of 3:1 is provided for icons

About this Technique
	- This technique relates to 1.4.11: Non-text Contrast (Sufficient).
	- This technique applies to all technologies that support graphical icons.

Description : The objective of this technique is to ensure graphical icons provide enough contrast for people with vision impairments. Not all graphics are within the scope of SC 1.4.11 Non-text contrast but if the icons are required to understand the content, then the icons need to have a contrast ratio of at least 3:1. : The success criteria for non-text contrast uses the term "graphical object" to cover small simple graphics, and parts of larger complex graphics. This technique focuses on solid color icons used on solid or gradient backgrounds. : When choosing the colors for graphics, consider the color(s) adjacent to that graphic, and test that the contrast ratio is at least 3:1. : Note : A selection of tools and applications for testing contrast ratios can be found in Understanding SC 1.4.3 Contrast (minimum).

Examples
Example 1: Solid icon color against the background

A solid icon such as a telephone symbol uses orange on a white background. The color orange (#E3660E) is tested against the white background (#FFFFFF) and it has a contrast ratio of 3.4:1.

Example 2: Solid icon color against a custom background

A solid icon such as a telephone symbol used within an orange background. The orange and white colors are the same as in example 1, in this case the contrast against the white background is not relevant, the white icon within the orange background is what provides the information in the icon and as a result needs to meet the contrast requirement.

Example 3: Solid icon with a gradient background

A solid icon such as a telephone symbol using a dark blue icon on a white-to-blue gradient background. The first test of the icon should be against the darkest (least contrasting) background that is adjacent to the icon color. If that is at least 3:1, it passes the success criterion.

Example 4: Solid icon with gradient background overlapping in contrast

A solid icon on a gradient background can overlap in contrast if the graphic is still understandable where it does not have contrast against all of the background. If you find the part of the gradient where it does not meet a 3:1 ratio with the graphic and treat that part as if it was removed, does the icon still convey the appropriate meaning?

A method of visualizing this is to remove the non-contrasting area and check that you can still understand the icon. If so, it is sufficient. The images below shows an icon on a gradient background, and a second version where it removes the area of the icon that does not meet the 3:1 contrast ratio. It is still recognizable as a phone icon, so passes the success criterion.

Related techniques:
- G18: Ensuring that a contrast ratio of at least 4.5:1 exists between text (and images of text) and background behind the text
- G145: Ensuring that a contrast ratio of at least 3:1 exists between text (and images of text) and background behind the text


------------------------------

F95: - Failure of Success Criterion 1.4.13 due to content shown on hover not being hoverable
Failure of Success Criterion 1.4.13 due to content shown on hover not being hoverable

About this Technique
	- This technique relates to 1.4.13: Content on Hover or Focus (Failure).
	- This failure applies to any technology that supports the display of additional content on pointer hover.

Description : The objective of this failure is to describe a situation where users find it difficult or impossible to move the pointer over additional content that appears on hover. For users of screen magnification software, the new content is often not fully visible in the current magnifed section. In order to perceive it, it is therefore critical for these users to be able to move the pointer away from the trigger and over the additional content, and thereby change the position of the magnified section, without this content disappearing.

Examples
A pop-up opens on pointer hover. Due to the chosen screen magnification, the content is only partially visible. However, as soon as the pointer is moved away from the trigger towards the pop-up content so it can be read, the pop-up automatically closes.
Hovering over a chart with data points, pop-ups open to show details of the respective data point, somewhat offset from the data point itself. When moving the pointer towards the pop-up so it can be fully read with magnification, the pointer travels over other data points that cause the appearance of other pop-ups that replace the particular pop-up the user wanted to see.


------------------------------

F96: - Failure due to the accessible name not containing the visible label text
Failure due to the accessible name not containing the visible label text

About this Technique
	- This technique relates to 2.5.3: Label in Name (Failure).
	- This failure applies to all technologies that include interactive controls (such as links or form inputs).

Description : The objective of this Failure is to describe situations where speech input users cannot reliably speak the name of a control because it differs from the visible label. : When speech input users interact with a web page, they usually speak a command followed by the reference to some visible label (like the text in a button or a link, or the text labelling some input). If the visible label does not match the accessible name of the control, speech users may be unable to directly activate that control. : There are techniques that go beyond the visible label text of elements. The idea is to provide more context for users of assistive technologies to whom the visible context may not be available. Examples are the use of accessible hidden (e.g., offscreen-positioned) text, the use of the aria-label attribute to overwrite the label text, or the use of the aria-labelledby attribute to compose a label text from one or more strings strings on the page. : When the use of these techniques results in an accessible name in which the exact string of the visible label does not occur in the accessible name, speech users may be unable to activate that control. Refer to the Accessible Name and Description Computation algorithm to work out the order of precedence in computing the accessible name of a control.

Examples
Example 1: Mismatch of visible button text and accessible name supplied via aria-label

The text in a search button reads "Go" but the accessible name provided in an aria-label attribute is "Find in this site"

<button id="sitesearch" aria-label="Find in this site">Go</button>

Example 2: Invisible link text disrupts visible label text string in accessible name

A download link reads "Download specification" but there is invisible link text so that the accessible name of that link is "Download gizmo specification". While the visible label text is contained in the accessible name, there is no string match which may prevent the link from being activated by speech input.

<a href="#">Download <span class="accessibly-hidden">gizmo</span> specification</a>
Example 3: Input with a hidden label carrying text that differs from the input's value attribute

An input of type="submit" with the value="search" which is exposed as visible label of the input, has a programmatically linked and accessibly hidden label enclosing the text "Find in this site" referenced by aria-labelledby. Because aria-labelledby takes precedence over the value of the input, the accessible name of the input in most browser / screen reader combinations will be "Find in this site". Speech users speaking a command such as "Click search" will be unable to activate the input.

<div id="hidden-label">Find in this site</div>
<input type="submit" aria-labelledby="hidden-label" value="search">

Related techniques:
- F111: Failure of Success Criteria 1.3.1, 2.5.3, and 4.1.2 due to a control with visible label text but no accessible name
- G131: Providing descriptive labels
- ARIA7: Using aria-labelledby for link purpose
- ARIA8: Using aria-label for link purpose
- ARIA9: Using aria-labelledby to concatenate a label from several text nodes
- ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used
- ARIA16: Using aria-labelledby to provide a name for user interface controls
- SCR30: Using scripts to change the link text


------------------------------

C38: - Using CSS width, max-width and flexbox to fit labels and inputs
Using CSS width, max-width and flexbox to fit labels and inputs

About this Technique
	- This technique relates to 1.4.10: Reflow (Sufficient).
	- This technique applies to CSS and HTML.

Description : The objective of this technique is to be able to present labels and inputs without introducing a horizontal scroll bar at a width equivalent to 320 CSS pixels for content intended to scroll vertically. When space is limited in the viewport for the label and input to sit next to each other horizontally, they will be changed to a vertical alignment. This is done by using CSS properties for width, max-width and flexbox that adapt to the available space. : Responsive layouts can add or remove columns or layout blocks, and each part of the layout can be wider or smaller at different points. This technique ensures labels and inputs do not break out of their layout area, including in one-column layouts where it would cause horizontal scrolling. : The basic approach for fitting labels and inputs is to: : Define the size of layout regions using flexbox properties and media queries for specific viewport sizes, so they enlarge, shrink or wrap in the available space and respond to zoom levels;
	- Position the layout regions in the flexbox container as a row of adjacent flexbox items, which may wrap to new rows as needed in much the same way as words in a paragraph wrap.
	- Define the width and max-width property for labels and inputs so they enlarge or shrink in the available space and respond to zoom levels. : All labels and inputs require design finesse by making sure the original size fits the biggest size of the available spaces to achieve good-looking results at a wide range of viewport sizes and zoom levels. For help on flexbox please see the MDN article on Flexbox.

Examples
Example 1: Fitting labels, inputs and flexbox layout with HTML and CSS.

The following example uses HTML and CSS to fit labels and inputs within various width containers, including the viewport. The layout regions adjust their size as the viewport is adjusted. The labels and inputs subsequently adjust their size to fit within the layout region containers.

The zoom level can be increased to 400% without requiring horizontal scrolling. This particular example uses a percent size for the width and max-width for the labels and inputs. The max-width is applied in order to fix elements spilling out of the grid in a cross-browser way, as replaced elements such as the select have intrinsic sizing.

<style>

/* Fitting Inputs Styling */

.form-group {
  display: flex;
  flex-flow: row wrap;
  margin: 0 -1rem 1rem -1rem;
}

[class*="form-col"] {
  flex: 0 1 100%;
  padding: 0 1rem;
}

@media (min-width: 576px) {
  .form-col-4 {
    flex: 0 0 33.33333%;
    max-width: 33.33333%;
  }
  
  .form-col-8 {
    flex: 0 0 66.66667%;
    max-width: 66.66667%;
  }

  .offset-form-col-4 {
    margin-left: 33.33333%;
  }
}

input {
  display: block;
  width: 100%;
}

label, select {
  display: block;
  width: 100%;
  max-width: 100%;
}

</style>

<div class="form-group">
  <div class="form-col-4">
    <label for="fname">First Name</label>
  </div>
  <div class="form-col-8">
    <input type="text" id="fname" autocomplete="given-name">
  </div>
</div>

<div class="form-group">
  <div class="form-col-4">
    <label for="lname">Last Name</label>
  </div>
  <div class="form-col-8">
    <input type="text" id="lname" autocomplete="family-name">
  </div>
</div>

<div class="form-group">
  <div class="form-col-4">
   <label for="favorite-fruit">Favorite fruit</label>
  </div>
  <div class="form-col-8">
    <select id="favorite-fruit">
      <option>Banana</option>
      <option>Pineapple</option>
      <option>Strawberry</option>
    </select>
  </div>
</div>

<div class="form-group">
  <div class="offset-form-col-4 form-col-8">
    <button type="submit">Submit</button>
  </div>
</div>



Working example: Using Adjustable Labels and Inputs for Reflow


------------------------------

G207: - Ensuring that a contrast ratio of 3:1 is provided for icons
Ensuring that a contrast ratio of 3:1 is provided for icons

About this Technique
	- This technique relates to 1.4.11: Non-text Contrast (Sufficient).
	- This technique applies to all technologies that support graphical icons.

Description : The objective of this technique is to ensure graphical icons provide enough contrast for people with vision impairments. Not all graphics are within the scope of SC 1.4.11 Non-text contrast but if the icons are required to understand the content, then the icons need to have a contrast ratio of at least 3:1. : The success criteria for non-text contrast uses the term "graphical object" to cover small simple graphics, and parts of larger complex graphics. This technique focuses on solid color icons used on solid or gradient backgrounds. : When choosing the colors for graphics, consider the color(s) adjacent to that graphic, and test that the contrast ratio is at least 3:1. : Note : A selection of tools and applications for testing contrast ratios can be found in Understanding SC 1.4.3 Contrast (minimum).

Examples
Example 1: Solid icon color against the background

A solid icon such as a telephone symbol uses orange on a white background. The color orange (#E3660E) is tested against the white background (#FFFFFF) and it has a contrast ratio of 3.4:1.

Example 2: Solid icon color against a custom background

A solid icon such as a telephone symbol used within an orange background. The orange and white colors are the same as in example 1, in this case the contrast against the white background is not relevant, the white icon within the orange background is what provides the information in the icon and as a result needs to meet the contrast requirement.

Example 3: Solid icon with a gradient background

A solid icon such as a telephone symbol using a dark blue icon on a white-to-blue gradient background. The first test of the icon should be against the darkest (least contrasting) background that is adjacent to the icon color. If that is at least 3:1, it passes the success criterion.

Example 4: Solid icon with gradient background overlapping in contrast

A solid icon on a gradient background can overlap in contrast if the graphic is still understandable where it does not have contrast against all of the background. If you find the part of the gradient where it does not meet a 3:1 ratio with the graphic and treat that part as if it was removed, does the icon still convey the appropriate meaning?

A method of visualizing this is to remove the non-contrasting area and check that you can still understand the icon. If so, it is sufficient. The images below shows an icon on a gradient background, and a second version where it removes the area of the icon that does not meet the 3:1 contrast ratio. It is still recognizable as a phone icon, so passes the success criterion.

Related techniques:
- G18: Ensuring that a contrast ratio of at least 4.5:1 exists between text (and images of text) and background behind the text
- G145: Ensuring that a contrast ratio of at least 3:1 exists between text (and images of text) and background behind the text

--------------------------------------------------

File: client-side-script.json
==================================================

SCR1: - Allowing the user to extend the default time limit
Allowing the user to extend the default time limit

About this Technique
	- This technique relates to 2.2.1: Timing Adjustable (Sufficient, together with SCR16: Providing a script that warns the user a time limit is about to expire).
	- This technique applies to time limits that are controlled by client-side scripting.

Description : The objective of this technique is to allow user to extend the default time limit by providing a mechanism to extend the time when scripts provide functionality that has default time limits. In order to allow the user to request a longer time limit, the script can provide a form allowing the user to enter a larger time limit or indicating that more time is needed. If the user is being warned that a time limit is about to expire (see providing a script that warns the user a time limit is about to expire), this form can be made available from the warning dialog. The user can extend the time limit to at least 10 times the default time limit, either by allowing the user to indicate how much additional time is needed or by repeatedly allowing the user to extend the time limit.

Examples
A Web page contains current stock market statistics and is set to refresh periodically. When the user is warned prior to refreshing the first time, the user is provided with an option to extend the time period between refreshes.
In an online chess game, each player is given a time limit for completing each move. When the player is warned that time is almost up for this move, the user is provided with an option to increase the time.

Related techniques:
- SCR16: Providing a script that warns the user a time limit is about to expire


------------------------------

SCR2: - Using redundant keyboard and mouse event handlers
Using redundant keyboard and mouse event handlers

About this Technique
	- This technique relates to 2.1.1: Keyboard (Sufficient when used with G90: Providing keyboard-triggered event handlers).
	- This technique applies to HTML with scripting support.

Description : The objective of this technique is to demonstrate using device independent events to change a decorative image in response to a mouse or focus event. Use the onmouseover and onmouseout events to change a decorative image when the mouse moves on top of or away from an element on the page. Also, use the onfocus and onblur events to change the image when the element receives and loses focus. : The example below has a decorative image in front of an anchor element. When the user mouses over the anchor tag, the decorative image in front of the anchor is changed. When the mouse moves off of the anchor, the image is changed back to its original version. The same image change effect occurs when the user gives keyboard focus to the anchor element. When focus is received the image changes, when focus is lost the image is changed back. This is accomplished by attaching onmouseover, onmouseout, onfocus and onblur event handlers to the anchor element. The event handler is a JavaScript function called updateImage(), which changes the src attribute of the image. The updateImage() is called in response to the onmouseover, onmouseout, onfocus, and onblur events. : Each image is given a unique id. This unique id is passed to updateImage() along with a boolean value indicating which image is to be used: updateImage(imgId, isOver);. The boolean value of true is passed when the mouse is over the anchor element or it has focus. A false value is passed when the mouse moves off of the anchor element or it loses focus. The updateImage() function uses the image id to load the image and then changes the src attribute based on the boolean value. Note that since the image is for decorative purposes, it has a null alt attribute. : Note : It is best to use images that are similar in size and to specify the height and width attributes on the image element. This will prevent any changes to the layout of the page when the image is updated. This example uses images which are identical in size.

Examples
Example 1
<!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Changing Image Source in a Device Independent Manner</title>
    <script>
       /* This function will change the image src of an image element.
        * param imgId - the id of the image object to change
        * param isOver - true when mouse is over or object has focus,
         false when mouse move out or focus is lost
       */
       function updateImage(imgId, isOver) {
       var theImage = document.getElementById(imgId);
       if (theImage != null) {
         if (isOver) {
           theImage.setAttribute("src","yellowplus.gif");
         }
         else {
           theImage.setAttribute("src","greyplus.gif");
         }
       }
     }
    </script>
  </head>
  <body>
    <p>Mouse over or tab to the links below and see the image change.</p>
    <a href="https://www.w3.org/WAI/"
       onmouseover="updateImage('wai', true);" onfocus="updateImage('wai', true);"
       onmouseout="updateImage('wai',false);" onblur="updateImage('wai',false);">
       <img alt="" id="wai" src="greyplus.gif">
       W3C Web Accessibility Initiative</a> &amp;
    <a href="https://www.w3.org/International/" onmouseover="updateImage('i18n', true);" 
       onfocus="updateImage('i18n',true);" onmouseout="updateImage('i18n',false);"
       onblur="updateImage('i18n',false);">
       <img alt="" id="i18n" src="greyplus.gif">
       W3C Internationalization</a>
  </body>
</html>


------------------------------

SCR14: - Using scripts to make nonessential alerts optional
Using scripts to make nonessential alerts optional

About this Technique
	- This technique relates to:
	- 2.2.4: Interruptions (Sufficient)
	- 4.1.3: Status Messages (Advisory)
	- This technique applies to scripting technologies which use scripting alerts for non-emergency communication.

Description : The objective of this technique is to toggle announcements to screen readers of changes in a stock-price alert component. By default, when the stock price changes, the change is announced by screen readers. This could be annoying to some users, so there are buttons to allow users to toggle the announcements on or off. : This technique uses the aria-live property to turn the stock component into a live region and the aria-atomic property to tell screen readers to announce all of the component's content rather than just what was updated when the stock is updated. For the sake of this demo, the stock updates every 10 seconds. If announcements are turned on, the aria-live property is set to assertive; if announcements are turned off, the aria-live property is set to off. The two buttons used to control the announcements use the aria-pressed property, updated to either true or false, to inform screen reader users which button is pressed and therefore whether their screen reader will announce the stock updates or not. In a real-life situation, an author should consider setting a cookie (or equivalent) to store the user's preference so that it's set over multiple visits to the page.

Examples
Example 1: Updating screen reader settings for stock price update alerts

The script below will update a stock value in an aria-live component every 10 seconds. If the user presses the "Turn Announcements Off" button, their screen reader will stop making announcements when the stock value changes; if they press the "Turn Announcements On" button, the announcements will start again.

The JavaScript
<script>
document.addEventListener("DOMContentLoaded", function (e) {
  const stockBox = document.querySelector("#stock-box");
  const stockMovement = document.querySelector("#stock-movement");
  const onBtn = document.querySelector("#live-on");
  const offBtn = document.querySelector("#live-off"); 
  const stocks = new Array("stock went down", "stock stayed the same", "stock went up");
  let loopCount = 0;	
		
  onBtn.addEventListener("click", modifyLive, false);
  offBtn.addEventListener("click", modifyLive, false);
		
  function modifyLive(e){
    let elm = e.currentTarget;
    let liveState = elm.getAttribute("id");
    if (liveState === "live-off"){
      stockBox.setAttribute("aria-live", "off");
      onBtn.setAttribute("aria-pressed", "false");
      offBtn.setAttribute("aria-pressed", "true");
    }
    else{
      stockBox.setAttribute("aria-live", "assertive");
      onBtn.setAttribute("aria-pressed", "true");
      offBtn.setAttribute("aria-pressed", "false");      
    }
  }
		
  setInterval(() => {
    if(loopCount >2){
      loopCount = 0;
    }
    stockMovement.innerHTML = stocks[loopCount];
      loopCount++;
    }, 10000)
  });
</script>
The HTML
<body>
  <h1>Turbo Encabulator Stock Information</h1>	
  <div id="stock-box" aria-atomic="true" aria-live="assertive">
    <span>Turbo Encabulator Stock Price: </span>
    <span id="stock-movement">stock went up</span>
  </div>
  <p>Use the buttons to toggle screen reader announcements of stock changes:</p>
  <div>
    <button aria-pressed="true" id="live-on" type="button">
     Turn Announcements On</button>
    <button aria-pressed="false" id="live-off" type="button">
     Turn Announcements Off</button>
  </div>
</body>

Working example of this code: Demonstration of toggling ARIA alerts.


------------------------------

SCR16: - Providing a script that warns the user a time limit is about to expire
Providing a script that warns the user a time limit is about to expire

About this Technique
	- This technique relates to 2.2.1: Timing Adjustable (Sufficient, together with SCR1: Allowing the user to extend the default time limit).
	- This technique applies to time limits exist that are controlled by script.

Description : The objective of this technique is to notify users that they are almost out of time to complete an interaction. When scripts provide functionality that has time limits, the script can include functionality to warn the user of imminent time limits and provide a mechanism to request more time. 20 seconds or more before the time limit occurs, the script provides a confirm dialog that states that a time limit is imminent and asks if the user needs more time. If the user answers "yes" then the time limit is reset. If the user answers "no" or does not respond, the time limit is allowed to expire. : This technique involves time limits set with the window.setTimeout() method. If, for example, the time limit is set to expire in 60 seconds, you can set the time limit for 40 seconds and provide the confirm dialog. When the confirm dialog appears, a new time limit is set for the remaining 20 seconds. Upon expiry of the "grace period time limit" the action that would have been taken at the expiry of the 60 second time limit in the original design is taken.

Examples
Example 1

A page of stock market quotes uses script to refresh the page every five minutes in order to ensure the latest statistics remain available. 20 seconds before the five minute period expires, a confirm dialog appears asking if the user needs more time before the page refreshes. This allows the user to be aware of the impending refresh and to avoid it if desired.

<!doctype html>
<html lang="en">
<head>
   <meta charset="utf-8">
   <title>Stock Market Quotes</title>
   <script>
     function timeControl() {
     // set timer for 4 min 40 sec, then ask user to confirm.
     setTimeout('userCheck()', 280000);
     }

     function userCheck() {
     // set page refresh for 20 sec
     var id=setTimeout('pageReload()', 20000);
     // If user selects "OK" the timer is reset 
     // else the page will refresh from the server.
     if (confirm("This page is set to refresh in 20 seconds. 
       Would you like more time?"))
       {
          clearTimeout(id);
          timeControl();
       }
     }

     function pageReload() {
       window.location.reload(true);
     }

    timeControl();
  </script>
</head>
<body>
   <h1>Stock Market Quotes</h1>
   ...
</body>
</html>

Related techniques:
- SCR1: Allowing the user to extend the default time limit


------------------------------

SCR18: - Providing client-side validation and alert
Providing client-side validation and alert

About this Technique
	- This technique relates to:
	- 3.3.1: Error Identification (Sufficient)
	- 3.3.3: Error Suggestion (Advisory)
	- 3.3.4: Error Prevention (Legal, Financial, Data) (Advisory)
	- This technique applies to content that validates user input.

Description : The objective of this technique is to validate user input as values are entered for each field, by means of client-side scripting. If errors are found, an alert dialog describes the nature of the error in text. Once the user dismisses the alert dialog, it is helpful if the script positions the keyboard focus on the field where the error occurred.

Examples
Example 1: Checking a single control with an event handler

The following script will check that a valid date has been entered in the form control.

<label for="date">Date:</label>
<input type="text" name="date" id="date" 
  onchange="if(isNaN(Date.parse(this.value))) 
  alert('This control is not a valid date. 
  Please re-enter the value.');">
Example 2: Checking multiple controls when the user submits the form

The following sample shows multiple controls in a form. The form element uses the onsubmit attribute which creates an event handler to execute the validation script when the user attempts to submit the form. If the validation is successful, the event returns true and the form submission proceeds; if the validation finds errors, it displays an error message and returns false to cancel the submit attempt so the user can fix the problems.

Note

This example demonstrates an alert for simplicity. A more helpful notification to the user would be to highlight the controls with problems and add information to the page about the nature of the errors and how to navigate to the controls that require data fixes.

Although this example uses an onsubmit attribute on the form element for brevity, normal practice is to create a submit event listener when the page is loaded.

Script code:

function validate() {
  // initialize error message
  var msg = "";
	
  //validate name
  var pattern = /^[a-zA-Z\s]+$/;
  var el = document.getElementById("name");
  
  if (!pattern.test(el.value)) {
    msg += "Name can only have letters and spaces. ";
  }
	
  // validate number
  var pattern = /^[\d\-+\.\s]+$/;
  var el = document.getElementById("tel");

  if (!pattern.test(el.value)) {
    msg += "Telephone number can only have digits and separators. ";
  }
	
  if (msg != "") {
    alert(msg);
    return false;
  }
  else {
  return true;
  }

Form code:

<form action="multiple-controls.html" onsubmit="return validate()">
  <div>
    <label for="name">Name:</label>
    <input autocomplete="name" id="name" name="name" type="text">
  </div>
  <div>
    <label for="tel">Telephone number:</label>
    <input autocomplete="tel" id="tel" name="tel" type="tel">
  </div>
  <div>
    <input type="submit">
  </div>
</form>

This is demonstrated in the working example of checking multiple controls when the user submits the form.

Related techniques:
- G89: Providing expected data format and example


------------------------------

SCR19: - Using an onchange event on a select element without causing a change of context
Using an onchange event on a select element without causing a change of context

About this Technique
	- This technique relates to:
	- 3.2.2: On Input (Sufficient)
	- 3.2.5: Change on Request (Sufficient)
	- This technique applies to HTML with support for scripting.

Description : The objective of this technique is to demonstrate how to correctly use an onchange event with a select element to update other elements on the Web page. This technique will not cause a change of context. When there are one or more select elements on the Web page, an onchange event on one, can update the options in another select element on the Web page. All of the data required by the select elements is included within the Web page. : It is important to note that the select item which is modified is after the trigger select element in the reading order of the Web page. This ensures that assistive technologies will pick up the change and users will encounter the new data when the modified element receives focus. This technique relies on JavaScript support in the user agent.

Examples
Example 1

This example contains two select elements. When an item is selected in the first select, the choices in the other select are updated appropriately. The first select element contains a list of continents. The second select element will contain a partial list of countries located in the selected continent. There is an onchange event associated with the continent select. When the continent selection changes, the items in the country select are modified using JavaScript via the Document Object Model (DOM). All of the data required, the list of countries and continents, is included within the Web page.

Overview of the code below

countryLists array variable which contains the list of countries for each continent in the trigger select element.
countryChange() function which is called by the onchange event of the continent select element.
The HTML code to create the select elements in the body of the Web page.
<!doctype html> 
<html lang="en"> 
  <head> 
    <meta charset=utf-8"> 
    <title>Dynamic Select Statements</title> 
    <script>
    // array of possible countries in the same order as they appear
    // in the country selection list 
    var countryLists = new Array(4) 
    countryLists["empty"] = ["Select a Country"]; 
    countryLists["North America"] = ["Canada", "United States", "Mexico"]; 
    countryLists["South America"] = ["Brazil", "Argentina", "Chile", "Ecuador"]; 
    countryLists["Asia"] = ["Russia", "China", "Japan"]; 
    countryLists["Europe"]= ["Britain", "France", "Spain", "Germany"]; 
  
    /* CountryChange() is called from the onchange event of a select element. 
     * param selectObj - the select object which fired the on change event. 
    */ 
  
    function countryChange(selectObj) { 
    // get the index of the selected option 
    var idx = selectObj.selectedIndex; 
  
    // get the value of the selected option 
    var which = selectObj.options[idx].value; 
  
    // use the selected option value to retrieve the list of items 
    // from the countryLists array 
    cList = countryLists[which]; 
  
    // get the country select element via its known id 
    var cSelect = document.getElementById("country"); 
  
    // remove the current options from the country select 
    var len=cSelect.options.length; 
  
    while (cSelect.options.length > 0) { 
      cSelect.remove(0); 
    } 
  
    var newOption; 
    // create new options 
    for (var i=0; i<cList.length; i++) { 
      newOption = document.createElement("option"); 
      newOption.value = cList[i];  // assumes option string and value are the same 
      newOption.text=cList[i]; 
  
   // add the new option 
    try { 
      cSelect.add(newOption);  // this will fail in DOM browsers but is needed for IE 
    } 
    catch (e) { 
      cSelect.appendChild(newOption); 
    } 
  } 
} 
  </script>
</head>
<body>
  <h1>Dynamic Select Statements</h1>
  <label for="continent">Select Continent</label>
  <select id="continent" onchange="countryChange(this);">
    <option value="empty">Select a Continent</option>
    <option value="North America">North America</option>
    <option value="South America">South America</option>
    <option value="Asia">Asia</option>
    <option value="Europe">Europe</option>
  </select>
  <div>
    <label for="country">Select a country</label>
    <select id="country">
      <option value="0">Select a country</option>
    </select>
  </div>
</body>
</html>

Here is a working example: Dynamic Select


------------------------------

SCR20: - Using both keyboard and other device-specific functions
Using both keyboard and other device-specific functions

About this Technique
	- This technique relates to 2.1.1: Keyboard (Sufficient when used with G90: Providing keyboard-triggered event handlers).
	- This technique applies to all content that uses Script to implement functionality.

Description : The objective of this technique is to illustrate the use of both keyboard-specific and mouse-specific events with code that has a scripting function associated with an event. Using both keyboard-specific and mouse-specific events together ensures that content can be operated by a wide range of devices. For example, a script may perform the same action when a keypress is detected that is performed when a mouse button is clicked. This technique goes beyond the Success Criterion requirement for keyboard access by including not only keyboard access but access using other devices as well. : In JavaScript, commonly used event handlers include, onblur, onchange, onclick, ondblclick, onfocus, onkeydown, onkeypress, onkeyup, onload, onmousedown, onmousemove, onmouseout, onmouseover, onmouseup, onreset, onselect, onsubmit, onunload. Some mouse-specific functions have a logical corresponding keyboard-specific function (such as 'onmouseover' and 'onfocus'). A keyboard event handler should be provided that executes the same function as the mouse event handler. : The following table suggests keyboard event handlers to pair mouse event handlers. : Device Handler Correspondences
	- Use...	...with
	- mousedown	keydown
	- mouseup	keyup
	- click [1]	keypress [2]
	- mouseover	focus
	- mouseout	blur : 1 Although click is in principle a mouse event handler, most HTML user agents also process this event when a native HTML control (e.g. a button or a link) is activated, regardless of whether it was activated with the mouse or the keyboard. In practice, therefore, it is not necessary to duplicate this event when adding handlers to natively focusable HTML elements. However, it is necessary when adding handlers to other events, such as in Example 2 below. : 2 Since the keypress event handler reacts to any key, the event handler function should check first to ensure the Enter key was pressed before proceeding to handle the event. Otherwise, the event handler will run each time the user presses any key, even the tab key to leave the control, and this is usually not desirable. : Some mouse-specific functions (such as dblclick and mousemove) do not have a corresponding keyboard-specific function. This means that some functions may need to be implemented differently for each device (for example, including a series of buttons to execute, via keyboard, the equivalent mouse-specific functions implemented).

Examples
Example 1

In this example of an image link, the image is changed when the user positions the pointer over the image. To provide keyboard users with a similar experience, the image is also changed when the user tabs to it.

<a href="menu.php" onmouseover="swapImageOn('menu')" onfocus="swapImageOn('menu')" 
   onmouseout="swapImageOff('menu')" onblur="swapImageOff('menu')"> 
   <img id="menu" src="menu_off.gif" alt="Menu"> 
</a>
Example 2

This example shows a custom link control where both the mouse and the keyboard can be used to activate the function. The mouse onclick event is duplicated by an appropriate keyboard onkeypress event. The tabindex attribute ensures that the keyboard will have a tab stop on the span element. Note that in this example, the nextPage() function should check that the key pressed was Enter, otherwise it will respond to all keyboard actions while the span has focus, which is not the desired behavior.

<span onclick="nextPage();" onkeypress="nextPage();" role="link" tabindex="0">
  <img alt="Go to next page" src="arrow.gif">
</span>

Related techniques:
- G90: Providing keyboard-triggered event handlers


------------------------------

SCR22: - Using scripts to control blinking and stop it in five seconds or less
Using scripts to control blinking and stop it in five seconds or less

About this Technique
	- This technique relates to 2.2.2: Pause, Stop, Hide (Sufficient).
	- This technique applies to technologies that support script-controlled blinking of content.

Description : The objective of this technique is to control blinking with script so it can be set to stop in less than five seconds by the script. Script is used to start the blinking effect of content, control the toggle between visible and hidden states, and also stop the effect at five seconds or less. The setTimeout() function can be used to toggle blinking content between visible and hidden states, and stop when the number of iterations by the time between them adds up to nearly five seconds.

Examples
Example 1

This example uses JavaScript to control blinking of some HTML and XHTML content. JavaScript creates the blinking effect by changing the visibility status of the content. It controls the start of the effect and stops it within five seconds.

...
<div id="blink1" class="highlight">New item!</div>
<script>
  // blink "on" state
  function show() {
   if (document.getElementById){
    document.getElementById("blink1").style.visibility = "visible";
  }
}
   
// blink "off" state
function hide() {
  if (document.getElementById){
    document.getElementById("blink1").style.visibility = "hidden";
  }
}

// toggle "on" and "off" states every 450 ms to achieve a blink effect
// end after 4500 ms (less than five seconds)
for(let i=900; i < 4500; i=i+900) {
  setTimeout("hide()",i);
  setTimeout("show()",i+450);
}
</script>
...

Working example of this code: Using script to control blinking.


------------------------------

SCR24: - Using progressive enhancement to open new windows on user request
Using progressive enhancement to open new windows on user request

About this Technique
	- This technique relates to 3.2.5: Change on Request (Sufficient when used for including pop-up windows).
	- This technique applies to HTML.

Description : The objective of this technique is to avoid confusion that may be caused by the appearance of new windows that were not requested by the user. Suddenly opening new windows can disorient or be missed completely by some users. New windows / tabs can be opened with the HTML target attribute or JavaScript. The example below demonstrates how to open new windows with script: it adds an event handler to a link and warns the user that the content will open in a new window.

Examples
Example 1: Using JavaScript to open a new tab / window
Markup:

The script is included in the head of the document, and the link has an id that can be used as a hook by the script.

<script src="popup.js"></script>
...
<a href="help.html" id="newwin">Show Help</a>
Script:
window.onload = addHandlers;

function addHandlers(){
  var objAnchor = document.getElementById('newwin');
  
  if (objAnchor){
    objAnchor.firstChild.data = objAnchor.firstChild.data + ' (opens in a new window)';
    objAnchor.onclick = function(event){return launchWindow(this, event);}
    // UAAG requires that user agents handle events in a device-independent manner
    // but only some browsers do this, so add keyboard event to be sure
    objAnchor.onkeypress = function(event){return launchWindow(this, event);}
  }
}
   
   function launchWindow(objAnchor, objEvent)
   {
     var iKeyCode, bSuccess=false;
   
     // If the event is from a keyboard, we only want to open the
     // new window if the user requested the link (return or space)
     if (objEvent && objEvent.type == 'keypress')
     {
       if (objEvent.keyCode)
         iKeyCode = objEvent.keyCode;
       else if (objEvent.which)
         iKeyCode = objEvent.which;
   
       // If not carriage return or space, return true so that the user agent
       // continues to process the action
       if (iKeyCode != 13 && iKeyCode != 32)
         return true;
     }
   
     bSuccess = window.open(objAnchor.href);
   
     // If the window did not open, allow the browser to continue the default
     // action of opening in the same window
     if (!bSuccess)
       return true;
   
     // The window was opened, so stop the browser processing further
     return false;
   }

Related techniques:
- H83: Using the target attribute to open a new window on user request and indicating this in link text


------------------------------

SCR26: - Inserting dynamic content into the Document Object Model immediately following its trigger element
Inserting dynamic content into the Document Object Model immediately following its trigger element

About this Technique
	- This technique relates to 2.4.3: Focus Order (Sufficient when used for changing a Web page dynamically).
	- This technique applies to HTML and script.

Description : The objective of this technique is to place inserted user interface elements into the Document Object Model (DOM) in such a way that the tab order and screen-reader reading order are set correctly by the default behavior of the user agent. This technique can be used for any user interface element that is hidden and shown, such as menus and dialogs. : The reading order in a screen-reader is based on the order of the HTML elements in the Document Object Model, as is the default tab order. This technique inserts new content into the DOM immediately following the element that was activated to trigger the script. The triggering element must be a link or a button, and the script must be called from its onclick event. These elements are natively focusable, and their onclick event is device independent. Focus remains on the activated element and the new content, inserted after it, becomes the next thing in both the tab order and screen-reader reading order. : Note that this technique works for synchronous updates. For asynchronous updates (sometimes called AJAX), an additional technique is needed to inform the assistive technology that the asynchronous content has been inserted.

Examples
Example 1

This example creates a menu when a link is clicked and inserts it after the link. The onclick event of the link is used to call the ShowHide script, passing in an id for the new menu as a parameter.

<button aria-expanded="false" type="button" onclick="ShowHide('foo',this)">
  Toggle
</button>

The ShowHide script creates a div containing the new menu, and inserts a link into it. The last line is the core of the script. It finds the parent of the element that triggered the script, and appends the div it created as a new child to it. This causes the new div to be in the DOM after the menu. When the user hits tab, the focus will go to the first focusable item in the menu, the link we created.

function ShowHide(id,src){
  var el = document.getElementById(id);
  if (!el){
    el = document.createElement("div");
    el.id = id;
    var link = document.createElement("a");
    link.href = "/laptops";
    link.appendChild(document.createTextNode("Laptops"));
    el.appendChild(link);
    src.parentElement.appendChild(el);
    src.setAttribute("aria-controls", id);
    src.setAttribute("aria-expanded", "true");
   }
   else if (el && src.getAttribute("aria-expanded") === "false"){
     el.style.display = 'block';
     src.setAttribute("aria-expanded", "true");
   }
   else{
     el.style.display = 'none';
     src.setAttribute("aria-expanded", "false");    
   }   
}

CSS is used to make the div and link look like a menu.


------------------------------

SCR27: - Reordering page sections using the Document Object Model
Reordering page sections using the Document Object Model

About this Technique
	- This technique relates to 2.4.3: Focus Order (Sufficient when used for changing a Web page dynamically).
	- This technique applies to HTML, script.

Description : The objective of this technique is to provide a mechanism for re-ordering component which is both highly usable and accessible. The two most common mechanisms for reordering are to send users to a set-up page where they can number components, or to allow them to drag and drop components to the desired location. The drag and drop method is much more usable, as it allows the user to arrange the items in place, one at a time, and get a feeling for the results. Unfortunately, drag and drop relies on the use of a mouse. This technique allows users to interact with a menu on the components to reorder them in place in a device independent way. It can be used in place of, or in conjunction with drag and drop reordering functionality. : The menu is a list of links using the device-independent onclick event to trigger scripts which re-order the content. The content is re-ordered in the Document Object Model (DOM), not just visually, so that it is in the correct order for all devices.

Examples
Example 1

This example does up and down reordering. This approach can also be used for two-dimensional reordering by adding left and right options.

The components in this example are list items in an unordered list. Unordered lists are a very good semantic model for sets of similar items, like these components. The menu approach can also be used for other types of groupings.

The modules are list items, and each module, in addition to content in div elements, contains a menu represented as a nested list.

<ul id="swapper">
    <li id="black">
      <div class="module">
        <div class="module_header">
          <!-- menu link -->
          <a href="#" onclick="ToggleMenu(event);">menu</a>
          <!-- menu -->
          <ul class="menu">
            <li><a href="#" onclick="OnMenuClick(event)" 
              onkeypress="OnMenuKeypress(event);">up</a></li>
            <li><a href="#" onclick="OnMenuClick(event)" 
              onkeypress="OnMenuKeypress(event);">down</a></li>
          </ul>
        </div>
      <div class="module_body">
        Text in the black module
      </div>
    </div>
  </li>
  ...
</ul>

Since we've covered the showing and hiding of menus in the simple tree samples, we'll focus here just on the code that swaps the modules. Once we harmonize the events and cancel the default link action, we go to work. First, we set a bunch of local variables for the elements with which we'll be working: the menu, the module to be reordered, the menuLink. Then, after checking the reorder direction, we try to grab the node to swap. If we find one, we then call swapNode() to swap our two modules, and PositionElement() to move the absolutely-positioned menu along with the module, and then set focus back on the menu item which launched the whole thing.

function MoveNode(evt,dir){
  
  HarmonizeEvent(evt);
  evt.preventDefault();
    
  var src = evt.target;
  var menu = src.parentNode.parentNode;
  var module = menu.parentNode.parentNode.parentNode;
  var menuLink = module.getElementsByTagName("a")[0];
  var swap = null;
  
  switch(dir){
    case 'up': {
      swap = module.previousSibling;
      while (swap && swap.nodeType != 1){
        swap = swap.previousSibling;
      }
        break;
    }
    case 'down': {
      swap = module.nextSibling;
      while (swap && swap.nodeType != 1){
        swap = swap.nextSibling;
      }
        break;
    }
  }
  if (swap && swap.tagName == node.tagName){
    module.swapNode(swap);
    PositionElement(menu,menuLink,false,true);
  }
  src.focus();
}

The CSS for the node swap is not much different than that of our previous tree samples, with some size and color adjustment for the modules and the small menu.

ul#swapper {
  list-item-style:none;
  margin:0px;
  padding:0px;
}

ul#swapper li {
  border:1px solid black;
  height:5em;
  list-style:none;
  margin:1em;
  padding:0;
  width:15em;
}

ul#swapper li a {
  color:white;
  font-size:90%;
  text-decoration:none;
}
    
ul#swapper li div.module_header {
  padding:0 0.2em;
  text-align:right;
}

ul#swapper li div.module_body {
  padding:0.2em;
}
    
ul#swapper ul.menu {
  background-color:#eeeeee; 
  border:1px solid gray;
  display:none;
  height:auto;
  list-style:none;
  margin:0;
  padding:0;
  position:absolute;
  text-align:left;
}

ul#swapper ul.menu li {
  border:none;
  font-weight:normal;
  height:auto;
  margin:0;
  text-align:left;
  width:5em;
}

ul#swapper ul.menu li a {
  color:black;
  display:block;
  padding:0 0.1em;
  text-decoration:none;
  width:100%;
}


------------------------------

SCR28: - Using an expandable and collapsible menu to bypass block of content
Using an expandable and collapsible menu to bypass block of content

About this Technique
	- This technique relates to 2.4.1: Bypass Blocks (Sufficient when used for grouping blocks of repeated material in a way that can be skipped).
	- This technique applies to technologies that provide client side scripting.

Description : This technique allows users to skip repeated material by placing that material in a menu that can be expanded or collapsed under user control. The user can skip the repeated material by collapsing the menu. The user invokes a user interface control to hide or remove the elements of the menu. The resources section lists several techniques for menus, toolbars and trees, any of which can be used to provide a mechanism for skipping navigation. : Note : Similar approaches can be implemented using server-side scripting and reloading a modified version of the Web page.

Examples
Example 1: Toggling a table of contents

The table of contents for a set of Web pages is repeated near the beginning of each Web page. A button at the beginning of the table of contents lets the user remove or restore it on the page.

...
<script>
let tocToggle = document.querySelector(".toc-toggle");
let toc = document.querySelector("#toc");
tocToggle.addEventListener("click", toggle, false);

function toggle(e){
  let elm = e.currentTarget;
  if(elm.getAttribute("aria-expanded") === "false"){
    elm.setAttribute("aria-expanded", "true");
  }
  else{
    elm.setAttribute("aria-expanded", "false");
  }
}
</script>

...

<button aria-controls="toc" aria-expanded="true" class="toc-toggle" type="button">
  Toggle Table Of Contents
</button>
<nav aria-labelledby="toc-header" id="toc">
  <h2 id="toc-header">Table of Contents</h2>
  <ul>
    <li><a href="#sec1">Section 1</a></li>
    <li><a href="#sec2">Section 2</a></li>
    <li><a href="#sec3">Section 3</a></li>
    <li><a href="#sec4">Section 4</a></li>
  </ul>
</nav>
...

Working example of this code: Toggle table of contents with a button.

Related techniques:
- H69: Providing heading elements at the beginning of each section of content


------------------------------

SCR29: - Adding keyboard-accessible actions to static HTML elements
Adding keyboard-accessible actions to static HTML elements

About this Technique
	- This technique relates to 2.1.1: Keyboard (Advisory).
	- This technique applies to HTML, script.

Description : The objective of this technique is to demonstrate how to provide keyboard access to a user interface control that is implemented by actions to static HTML elements such as div or span. This technique ensures that the element is focusable by setting the tabindex attribute, and it ensures that the action can be triggered from the keyboard by providing an onkeyup or onkeypress handler in addition to an onclick handler. : When the tabindex attribute has the value 0, the element can be focused via the keyboard and is included in the tab order of the document. When the tabindex attribute has the value -1, the element cannot be tabbed to, but focus can be set programmatically, using element.focus(). : Because static HTML elements do not have actions associated with them, it is not possible to provide a backup implementation or explanation in environments in which scripting is not available. This technique should only be used in environments in which client-side scripting can be relied upon. : Note : Such user interface controls must still satisfy Success Criterion 4.1.2. Applying this technique without also providing role, name, and state information about the user interface control will results in Failure F59, Failure of Success Criterion 4.1.2 due to using script to make div or span a user interface control in HTML.

Examples
Example 1: Adding a JavaScript action to a div element

The div element on the page is given a unique id attribute and a tabindex attribute with value 0. A script uses the Document Object Model (DOM) to find the div element by its id and add the onclick handler and the onkeyup handler. The onkeyup handler will invoke the action when the Enter key is pressed. Note that the div element must be loaded into the DOM before it can be found and modified. This is usually accomplished by calling the script from the onload event of the body element. The script to add the event handlers will only execute if the user agent supports and has JavaScript enabled.

<script>
// this is the function to perform the action. This simple example toggles a message.
function doSomething(event) {
  var msg=document.getElementById("message");
  msg.style.display = msg.style.display=="none" ? "" : "none";

  //return false from the function to make certain
  // that the href of the link does not get invoked
  return false;
  }
	
  // this is the function to perform the action when the Enter key has been pressed.  
  function doSomethingOnEnter(event) {
    var key = 0;

     // Determine the key pressed, depending on whether window.event
    // or the event object is in use
    if (window.event) {
      key = window.event.keyCode;
    }
    else if (event) {
      key = event.keyCode;
    }
		
    // Was the Enter or Space key pressed?
    if (key == 13 || key == 32) {
      return doSomething(event);
    } 

    // The event has not been handled, so return true
    return true;
  }
	
  // This setUpActions() function must be called to set the onclick and onkeyup
  // event handlers onto the existing div element.
  // This function must be called after the div element with id="active" 
  // has been loaded into the DOM.
  // In this example the setUpActions() function is called from the onload event
  // for the body element.
  function setUpActions() {
   
    // get the div object
    var active=document.getElementById("active");

    // assign the onclick handler to the object.
    active.onclick=doSomething;

    // assign the onkeyup handler to the object.
    active.onkeyup=doSomethingOnEnter;
}
</script>
 
<body onload="setUpActions();">
  <p>Here is the link to modify with a javascript action:</p>
  <div>
    <span id="active" role="button" tabindex="0">Do Something</span>
  </div>
  <div aria-live="polite">
    <div id="message">Hello, world!</div>
  </div>
</body>

Working example of this code: Creating Divs with Actions using JavaScript.

Related techniques:
- SCR20: Using both keyboard and other device-specific functions
- SCR24: Using progressive enhancement to open new windows on user request
- SCR35: Making actions keyboard accessible by using the onclick event of anchors and buttons
- F59: Failure of Success Criterion 4.1.2 due to using script to make div or span a user interface control in HTML without providing a role for the control


------------------------------

SCR30: - Using scripts to change the link text
Using scripts to change the link text

About this Technique
	- This technique relates to:
	- 2.4.4: Link Purpose (In Context) (Sufficient when used for allowing the user to choose short or long link text)
	- 2.4.9: Link Purpose (Link Only) (Sufficient when used for allowing the user to choose short or long link text)
	- This technique applies to client-side scripting used with HTML.

Description : The purpose of this technique is to allow users to choose to have additional information added to the text of links so that the links can be understood out of context. : Some users prefer to have links that are self-contained, where there is no need to explore the context of the link. Other users find including the context information in each link to be repetitive and to reduce their ability to use a site. Among users of assistive technology, the feedback to the working group on which is preferable has been divided. This technique allows users to pick the approach that works best for them. : A link is provided near the beginning of the page that will expand the link text of the links on the page so that no additional context is needed to understand the purpose of any link. It must always be possible to understand the purpose of the expansion link directly from its link text. : This technique expands the links only for the current page view. It is also possible, and in some cases would be advisable, to save this preference in a cookie or server-side user profile, so that users would only have to make the selection once per site.

Examples
Example 1

This example uses Javascript to add contextual information directly to the text of a link. The link class is used to determine which additional text to add. When the "Expand Links" link is activated, each link on the page is tested to see whether additional text should be added.

...
<script>
  var expanded = false;
  var linkContext = {
    "hist":" version of The History of the Web",
    "cook":" version of Cooking for Nerds"
  };
	
  function doExpand() {
    var links = document.links;
		
    for (var i=0; i<links.length; i++) {
      var link = links[i];
      var cn = link.className;
      if (linkContext[cn]) {
        span = link.appendChild(document.createElement("span"));
        span.setAttribute("class", "linkexpansion");
        span.appendChild(document.createTextNode(linkContext[cn]));
      }
    }
    objUpdate = document.getElementById('expand');
    if (objUpdate) {
      objUpdate.childNodes[0].nodeValue = "Collapse links";
    }
    expanded = true;
  }
	
  function doCollapse() {
    objUpdate = document.getElementById('expand');
    var spans = document.getElementsByTagName("span");
    var span;
	
    // go backwards through the set as removing from the front changes indices
    // and messes up the process
    for (i = spans.length - 1; i >= 0; i--) {
      span = spans[i];
      if (span.getAttribute("class") == "linkexpansion")
        span.parentNode.removeChild(span);
      }
      if (objUpdate) {
      objUpdate.childNodes[0].nodeValue = "Expand links";
    }
    expanded = false;
  }
	
  function toggle() {
    if (expanded) doCollapse();
    else doExpand();
  }
</script>

...
	
<h1>Books for download</h1>
<p><button id="expand" onclick="toggle(); type="button">Expand Links</button></p>
<ul>
  <li>The History of the Web:
    <a href="history.docx" class="hist">Word</a>, 
    <a href="history.pdf" class="hist">PDF</a>, 
    <a href="history.html" class="hist">HTML</a>
  </li>
  <li>Cooking for Nerds: 
    <a href="history.docx" class="cook">Word</a>, 
    <a href="history.pdf" class="cook">PDF</a>, 
    <a href="history.html" class="cook">HTML</a>
  </li>
</ul>

...

Working example of this code: Providing link expansions on demand.

Related techniques:
- G91: Providing link text that describes the purpose of a link
- H30: Providing link text that describes the purpose of a link for anchor elements
- H33: Supplementing link text with the title attribute
- C7: Using CSS to hide a portion of the link text


------------------------------

SCR31: - Using script to change the background color or border of the element with focus
Using script to change the background color or border of the element with focus

About this Technique
	- This technique relates to 2.4.7: Focus Visible (Sufficient).
	- This technique applies to HTML CSS, script.

Description : This purpose of this technique is to allow the author to use JavaScript to apply CSS, in order to make the focus indicator more visible than it would ordinarily be. When an element receives focus, the background color or border is changed to make it visually distinct. When the element loses focus, it returns to its normal styling. This technique can be used on any HTML user agent that supports Script and CSS, regardless of whether it supports the :focus pseudo class.

Examples
Example 1

In this example, when the link receives focus, its background turns yellow. When it loses focus, the yellow is removed. Note that if the link had a background color to begin with, you would use that color rather than "" in the script.

<script>function toggleFocus(el) {
  el.style.backgroundColor =  el.style.backgroundColor=="yellow" ? "inherit" : "yellow";
}
</script>
...
<a href="example.html" 
 onfocus="toggleFocus(this)" onblur="toggleFocus(this)">focus me</a>
...

Related techniques:
- C15: Using CSS to change the presentation of a user interface component when it receives focus


------------------------------

SCR32: - Providing client-side validation and adding error text via the DOM
Providing client-side validation and adding error text via the DOM

About this Technique
	- This technique relates to:
	- 3.3.1: Error Identification (Sufficient)
	- 3.3.3: Error Suggestion (Advisory)
	- This technique applies to script used with HTML.

Description : The objective of this technique is to demonstrate the display of an error message when client side validation of a form field has failed. Anchor elements are used to display the error messages in a list and are inserted above the fields to be validated. Anchor elements are used in the error messages so that focus can be placed on the error message(s), drawing the user's attention to it. The href of the anchor elements contain an in-page link which references the fields where error(s) have been found. : In a deployed application, if Javascript is turned off, client side validation will not occur. Therefore, this technique would only be sufficient in situations where scripting is relied upon for conformance or when server side validation techniques are also used to catch any errors and return the page with information about the fields with errors.

Examples
Example 1: Listing errors in a block at the top of a form

This example validates required fields as well as fields where a specific format is required. When an error is identified, the script inserts a list of error messages into the DOM and moves focus to them.

Error messages appear as a list of links near the top of the form.
HTML for the form
<!DOCTYPE HTML>
<html lang="en">
  <head>
    <title>Form Validation</title>
    <meta charset="utf-8">
    <link href="css/validate.css" rel="stylesheet">
    <script src="scripts/validate.js">
  </head>
  <body>
    <h1>Form Validation</h1>
    <p>The following form is validated before being submitted if scripting
      is available, otherwise the form is validated on the server. All fields are
      required, except those marked optional. If errors are found in the submission,
      the form is cancelled and a list of errors is displayed
      at the top of the form.</p>

    <p>Please enter your details below.</p>
	
    <h2>Validating Form</h2>
    <form id="personalform">
      <div class="validationerrors"></div>
      <fieldset>
        <legend>Personal Details</legend>
          <div>
            <label for="forename">Please enter your forename</label>
            <input autocomplete="given-name" class="string"
             id="forename" name="forename" type="text" value="">
         </div>
         <div>
            <label for="age">Please enter your age</label>
            <input class="number" id="age" name="age" type="text" value="">
         </div>
         <div>
           <label for="email">Please enter your email address</label>
           <input autocomplete="email" class="email" id="email"
            name="email" type="text" value="">
         </div>
      </fieldset>
      <div>
        <input type="submit" name="signup" value="Sign up">
      </div>
    </form>
    
    <h2>Second Form</h2>
    <form id="secondform">
      <div class="validationerrors"></div>
      <fieldset>
        <legend>Second Form Details</legend>
          <div>
            <label for="suggestion">Enter a suggestion</label>
            <input class="string" id="suggestion" name="suggestion" type="text" value="">
          </div>
          <div>
            <label for="optemail">Please enter your email address (optional)</label>
            <input autocomplete="email" class="optional email" id="optemail"
             name="optemail" type="text" value="">
          </div>
          <div>
            <label for="rating">Please rate this suggestion</label>
            <input class="number" id="rating" name="rating" type="text" value="">
          </div>
          <div>
            <label for="jibberish">Enter some jibberish (optional)</label>
            <input id="jibberish" name="jibberish" type="text" value="">
          </div>
      </fieldset>
      <div>
        <input type="submit" name="submit" value="Add Suggestion">
      </div>
    </form>
  </body>
</html>
The Javascript which performs the validation and inserts the error messages
window.onload = initialise;
function initialise() {
  var objForms = document.getElementsByTagName('form');
  var iCounter;
	
  // Attach an event handler for each form
  for (iCounter=0; iCounter<objForms.length; iCounter++) {
    objForms[iCounter].onsubmit = function(){return validateForm(this);};
  }
}
		
// Event handler for the form
function validateForm(objForm) {
  var arClass = [];
  var iErrors = 0;
  var objField = objForm.getElementsByTagName('input');
  var objLabel = objForm.getElementsByTagName('label');
  var objList = document.createElement('ol');
  var objError, objExisting, objNew, objTitle, objParagraph, objAnchor, objPosition;
  var strLinkID, iFieldCounter, iClassCounter, iCounter;
	
  // Get the id or name of the form, to make a unique
  // fragment identifier
  if (objForm.id) {
    strLinkID = objForm.id + 'ErrorID';
  }
  else {
    strLinkID = objForm.name + 'ErrorID';
  }
	
  // Iterate through input form controls, looking for validation classes
  for (iFieldCounter=0; iFieldCounter<objField.length; iFieldCounter++) {
    
  // Get the class for the field, and look for the appropriate class
  arClass = objField[iFieldCounter].className.split(' ');
  for (iClassCounter=0; iClassCounter<arClass.length; iClassCounter++) {
    switch (arClass[iClassCounter]) {
      case 'string':
        if (!isString(objField[iFieldCounter].value, arClass)) {
          if (iErrors === 0) {
            logError(objField[iFieldCounter], objLabel, objList, strLinkID);
          }
          else {
            logError(objField[iFieldCounter], objLabel, objList, '');
          }
          iErrors++;
        }
      break;
      case 'number':
        if (!isNumber(objField[iFieldCounter].value, arClass)) {
          if (iErrors === 0) {
            logError(objField[iFieldCounter], objLabel, objList, strLinkID);
          }
          else {
            logError(objField[iFieldCounter], objLabel, objList, '');
          }
          iErrors++;
        }
      break;
      case 'email' :
        if (!isEmail(objField[iFieldCounter].value, arClass)) {
          if (iErrors === 0) {
            logError(objField[iFieldCounter], objLabel, objList, strLinkID);
          }
          else {
            logError(objField[iFieldCounter], objLabel, objList, '');
          }
          iErrors++;
        }
        break;
      }
    }
  }
	
  if (iErrors > 0) {

    // If not valid, display error messages
    objError = objForm.getElementsByTagName('div');
				
    // Look for existing errors
    for (iCounter=0; iCounter<objError.length; iCounter++) {
      if (objError[iCounter].className == 'validationerrors') {
        objExisting = objError[iCounter];
      }
    }
	
    objNew = document.createElement('div');
    objTitle = document.createElement('h2');
    objParagraph = document.createElement('p');
    objAnchor = document.createElement('a');
	
    if (iErrors == 1) {
      objAnchor.appendChild(document.createTextNode('1 Error in Submission'));
    }
    else {
      objAnchor.appendChild(document.createTextNode(iErrors + ' Errors in Submission'));
    }

    objAnchor.href = '#' + strLinkID;
    objAnchor.className = 'submissionerror';

    objTitle.appendChild(objAnchor);
    objParagraph.appendChild(document.createTextNode('Please review the following'));
    objNew.className = 'validationerrors';

    objNew.appendChild(objTitle);
    objNew.appendChild(objParagraph);
    objNew.appendChild(objList);
				
    // If there were existing error, replace them with the new lot,
    // otherwise add the new errors to the start of the form
    if (objExisting) {
      objExisting.parentNode.replaceChild(objNew, objExisting);
    }
    else {
      objPosition = objForm.firstChild;
      objForm.insertBefore(objNew, objPosition);
    }
	
    // Allow for latency
    setTimeout(function() { objAnchor.focus(); }, 50);
				
    // Don't submit the form
    objForm.submitAllowed = false;
    return false;
  }
	
  // Submit the form
  return true;
	}
	
  // Function to add a link in a list item that points to problematic field control
  function addError(objList, strError, strID, strErrorID) {
    
		var objListItem = document.createElement('li');
    var objAnchor = document.createElement('a');
		 
    // Fragment identifier to the form control
    objAnchor.href='#' + strID;

    // Make this the target for the error heading
    if (strErrorID.length > 0) {
      objAnchor.id = strErrorID;
    }
	
    // Use the label prompt for the error message
    objAnchor.appendChild(document.createTextNode(strError));

    // Add keyboard and mouse events to set focus to the form control
    objAnchor.onclick = function(event){return focusFormField(this, event);};
    objAnchor.onkeypress = function(event){return focusFormField(this, event);};
    objListItem.appendChild(objAnchor);
    objList.appendChild(objListItem);
  }

  function focusFormField(objAnchor, objEvent) {
    var strFormField, objForm;

    // Allow keyboard navigation over links
    if (objEvent && objEvent.type == 'keypress') {
      if (objEvent.keyCode != 13 && objEvent.keyCode != 32) {
        return true;
      }
    }
	
    // set focus to the form control
    strFormField = objAnchor.href.match(/[^#]\w*$/);
    objForm = getForm(strFormField);
    objForm[strFormField].focus();
    return false;
  }

    // Function to return the form element from a given form field name
    function getForm(strField) {
      var objElement = document.getElementById(strField);

    // Find the appropriate form
    do {
      objElement = objElement.parentNode;
    } while (!objElement.tagName.match(/form/i) && objElement.parentNode);

    return objElement;
  }
	
  // Function to log the error in a list
  function logError(objField, objLabel, objList, strErrorID) {
    var iCounter, strError;

    // Search the label for the error prompt
    for (iCounter=0; iCounter<objLabel.length; iCounter++) {
      if (objLabel[iCounter].htmlFor == objField.id) {
        strError = objLabel[iCounter].firstChild.nodeValue;
      }
    }

    addError(objList, strError, objField.id, strErrorID);
  }
	
  // Validation routines - add as required

  function isString(strValue, arClass) {
    var bValid = (typeof strValue == 'string' && strValue.replace(/^\s*|\s*$/g, '') 
    !== '' && isNaN(strValue));

    return checkOptional(bValid, strValue, arClass);
  }

  function isEmail(strValue, arClass) {
    var objRE = /^[\w-\.\']{1,}\@([\da-zA-Z\-]{1,}\.){1,}[\da-zA-Z\-]{2,}$/;
    var bValid = objRE.test(strValue);

    return checkOptional(bValid, strValue, arClass);
  }
	
  function isNumber(strValue, arClass) {
    var bValid = (!isNaN(strValue) && strValue.replace(/^\s*|\s*$/g, '') !== '');

    return checkOptional(bValid, strValue, arClass);
  }

  function checkOptional(bValid, strValue, arClass) {
    var bOptional = false;
    var iCounter;

    // Check if optional
    for (iCounter=0; iCounter<arClass.length; iCounter++) {
      if (arClass[iCounter] == 'optional') {
        bOptional = true;
      }
    }

    if (bOptional && strValue.replace(/^\s*|\s*$/g, '') === '') {
      return true;
    }

    return bValid;
  }

Working example of this technique implemented using PHP, Javascript, CSS and HTML: Form Validation Example.

Related techniques:
- G83: Providing text descriptions to identify required fields that were not completed
- G85: Providing a text description when user input falls outside the required format or values
- SCR18: Providing client-side validation and alert


------------------------------

SCR33: - Using script to scroll content, and providing a mechanism to pause it
Using script to scroll content, and providing a mechanism to pause it

About this Technique
	- This technique relates to:
	- 2.2.1: Timing Adjustable (Sufficient)
	- 2.2.2: Pause, Stop, Hide (Sufficient)
	- This technique applies to technologies that support script-controlled scrolling of content.

Description : The objective of this technique is to provide a way for users to stop scrolling content when the scrolling is created by a script. Scrolling content can be difficult or impossible to read by users with low vision or with cognitive disabilities. The movement can also be distracting for some people making it difficult for them to concentrate on other parts of the Web page.

Examples
Example 1

In this example CSS and JavaScript are used to visually present some text in a scrolling format. A link is included to pause the scrolling movement.

This implementation will display the full text and omit the link when JavaScript or CSS are unsupported or inactive.

The HTML component
...
<div id="scroller">
  <p id="tag">This text will scroll and a Pause/Scroll link will be present 
  when JavaScript and CSS are supported and active.</p>
</div>
...
The CSS component
...
body {
  font:1em verdana,sans-serif;
  color:#000;
  margin:0
}

#scroller {
  position:relative;
  overflow:hidden;
  width:15em;
  border:1px solid #008080;
}
  
#tag {
  margin:2px 0;
}

#testP {
  visibility:hidden;
  position:absolute;
  white-space:nowrap;
} 

 #top {
  width:350px;
  margin:auto;
}
...
The JavaScript component
var speed=50        // speed of scroller
var step=3          // smoothness of movement
var StartActionText= "Scroll"  // Text for start link
var StopActionText = "Pause"   // Text for stop link
 
var x, scroll, divW, sText=""
 
function onclickIE(idAttr,handler,call){
  if ((document.all)&&(document.getElementById)){idAttr[handler]="Javascript:"+call}
}
 
function addLink(id,call,txt){
  var e=document.createElement('a');
  e.setAttribute('href',call);
  var linktext=document.createTextNode(txt);
  e.appendChild(linktext);
  document.getElementById(id).appendChild(e);
}
 
function getElementStyle() {
  var elem = document.getElementById('scroller');
  if (elem.currentStyle) {
    return elem.currentStyle.overflow;
  }
  else if (window.getComputedStyle) {
    var compStyle = window.getComputedStyle(elem, '');
    return compStyle.getPropertyValue("overflow");
  }
  return "";
}

function addControls(){
  
  // test for CSS support first 
  // test for the overlow property value set in style element or external file
  if (getElementStyle()=="hidden") {
    var f=document.createElement('div');
    f.setAttribute('id','controls');
    document.getElementById('scroller').parentNode.appendChild(f);
    addLink('controls','Javascript:clickAction(0)',StopActionText);
    onclickIE(document.getElementById('controls').childNodes[0],"href",'clickAction(0)');
    document.getElementById('controls').style.display='block';
  }
}
 
function stopScroller(){clearTimeout(scroll)}
  
function setAction(callvalue,txt){
  var c=document.getElementById('controls')
  c.childNodes[0].setAttribute('href','Javascript:clickAction('+callvalue+')')
    onclickIE(document.getElementById('controls').childNodes[0],"href",'clickAction

  ('+callvalue+')')
  c.childNodes[0].firstChild.nodeValue=txt
}

function clickAction(no){
  switch(no) {
    case 0:
      stopScroller();
      setAction(1,StartActionText);
      break;
    case 1:
      startScroller();
      setAction(0,StopActionText);
  }
}

function startScroller(){
  document.getElementById('tag').style.whiteSpace='nowrap'
  var p=document.createElement('p')
  p.id='testP'
  p.style.fontSize='25%' //fix for mozilla. multiply by 4 before using
  x-=step
  if (document.getElementById('tag').className) p.className=document.getElementById

  ('tag').className
    p.appendChild(document.createTextNode(sText))
    document.body.appendChild(p)
    pw=p.offsetWidth
    document.body.removeChild(p)
    if (x<(pw*4)*-1){x=divW}
    document.getElementById('tag').style.left=x+'px'
    scroll=setTimeout('startScroller()',speed)
}
  
function initScroller(){
  if (document.getElementById && document.createElement && document.body.appendChild) {
    addControls();
    divW=document.getElementById('scroller').offsetWidth;
    x=divW;
    document.getElementById('tag').style.position='relative';
    document.getElementById('tag').style.left=divW+'px';
    var ss=document.getElementById('tag').childNodes;
    for (i=0;i<ss.length;i++) {sText+=ss[i].nodeValue+" "};
    scroll=setTimeout('startScroller()',speed);
  }
}
  
function addLoadEvent(func) {
  if (!document.getElementById | !document.getElementsByTagName) return
  var oldonload = window.onload
  if (typeof window.onload != 'function') {
    window.onload = func;
  } else {
    window.onload = function() {
      oldonload()
      func()
    }
  }
}
  
addLoadEvent(initScroller)

A working example of this code, Example of using script to scroll content and providing a mechanism to pause it, is available.

Related techniques:
- G4: Allowing the content to be paused and restarted from where it was paused


------------------------------

SCR34: - Calculating size and position in a way that scales with text size
Calculating size and position in a way that scales with text size

About this Technique
	- This technique relates to:
	- 1.4.4: Resize Text (Sufficient when used for techniques for text container resizing)
	- 1.4.8: Visual Presentation (Sufficient when used with G146: Using liquid layout)
	- 1.4.10: Reflow (Sufficient)
	- This technique applies to client-side scripting.

Description : The objective of this technique is to calculate the size and position of elements in a way that will scale appropriately as the text size is scaled. : There are four properties in JavaScript that help determine the size and position of elements: : offsetHeight (the height of the element in pixels)
	- offsetWidth (the width of the element in pixels)
	- offsetLeft (the distance of the element from the left of its parent (offsetParent) in pixels)
	- offsetTop (the distance of the element from the top of its parent (offsetParent) in pixels) : Calculating the height and width using offsetHeight and offsetWidth is straightforward, but when calculating an object's left and top position as absolute values, we need to consider the parent element. The calculatePosition function below iterates through all of an element's parent nodes to give a final value. The function takes two parameters: objElement (the name of the element in question), and the offset property (offsetLeft or offsetTop):

Examples
Example 1: Calculating the size and position of elements in a way that will scale appropriately as the text size is scaled
function calculatePosition(objElement, strOffset {
  var iOffset = 0;
	if (objElement.offsetParent) {
    do {
      iOffset += objElement[strOffset];
      objElement = objElement.offsetParent;
    } while (objElement);
  }
  return iOffset;
}

The following example illustrates using the function above by aligning an object beneath a reference object, the same distance from the left:

// Get a reference object
var objReference = document.getElementById('refobject');
// Get the object to be aligned
var objAlign = document.getElementById('lineup');

objAlign.style.position = 'absolute';
objAlign.style.left = calculatePosition(objReference, 'offsetLeft') + 'px';
objAlign.style.top = calculatePosition(objReference, 'offsetTop')
 + objReference.offsetHeight + 'px';

Related techniques:
- C12: Using percent for font sizes
- C14: Using em units for font sizes
- C17: Scaling form elements which contain text
- C20: Using relative measurements to set column widths so that lines can average 80 characters or less when the browser is resized
- C24: Using percentage values in CSS for container sizes
- G206: Providing options within the content to switch to a layout that does not require the user to scroll horizontally to read a line of text


------------------------------

SCR35: - Making actions keyboard accessible by using the onclick event of anchors and buttons
Making actions keyboard accessible by using the onclick event of anchors and buttons

About this Technique
	- This technique relates to 2.1.1: Keyboard (Sufficient when used with G90: Providing keyboard-triggered event handlers).
	- This technique applies to script used with HTML.

Description : The objective of this technique is to demonstrate how to invoke a scripting function in a way that is keyboard accessible by attaching it to a keyboard-accessible control. In order to ensure that scripted actions can be invoked from the keyboard, they are associated with "natively actionable" HTML elements (links and buttons). The onclick event of these elements is device independent. While "onclick" sounds like it is tied to the mouse, the onclick event is actually mapped to the default action of a link or button. The default action occurs when the user clicks the element with a mouse, but it also occurs when the user focuses the element and hits enter or space, and when the element is triggered via the accessibility API. : This technique relies on client-side scripting. However, it is beneficial to provide a backup implementation or explanation for environments in which scripting is not available. When using anchor elements to invoke a JavaScript action, a backup implementation or explanation is provided via the href attribute. When using buttons, it is provided via a form post.

Examples
Example 1: Link that runs a script and has no fallback for non-scripted browsers

This approach should only be used when script is relied upon as an Accessibility Supported Technology.

Even though we do not want to navigate from this link, we must use the href attribute on the a element in order to make this a true link and get the proper eventing. In this case, we're using "#" as the link target, but you could use anything. This link will never be navigated.

The "return false;" at the end of the doStuff() event handling function tells the browser not to navigate to the URI. Without it, the page would refresh after the script ran.

<script> 
  function doStuff() {
    //do stuff
    return false;
  }
</script>
<a href="#" onclick="return doStuff();">do stuff</a>
Example 2: Link that runs script, but navigates to another page when script is not available

This approach can be used to create sites that don't rely on script, if and only if the navigation target provides the same functionality as the script. This example is identical to the example 1, except that its href is now set to a real page, dostuff.html. The dostuff.html page must provide the same functionality as the script. The "return false;" at the end of the doStuff() event handling function tells the browser not to navigate to the URI. Without it, the browser would navigate to dostuff.html after the script ran.

<script> 
  function doStuff() {  
  //do stuff
  return false;
}
</script>
<a href="dostuff.html" onclick="return doStuff();">do stuff</a>

A working example of this code is available. Refer to Creating Action Links using JavaScript.

Example 3: Button that runs a script and falls back to a form post for users without script

This approach can be used by sites that do not rely on script, if and only if the form post provides the same functionality as the script. The onsubmit="return false;" prevents the form from submitting.

<script>
function doStuff() {
  //do stuff
}
</script>
<form action="doStuff.aspx" onsubmit="return false;">
  <input type="submit" value="Do Stuff" onclick="doStuff();">
</form>

A working example of this code is available. Refer to Creating Action Buttons using JavaScript.

Example 4: Button that runs a script, implemented with input type="image"

Note that an alt attribute must be added to the input to provide a text equivalent for the image. This approach should only be used when script is relied upon.

<script>
function doStuff() {
  //do stuff
  return false;
}
</script>
<input type="image" src="stuff.gif" alt="Do stuff" onclick="return doStuff();">
Example 5: Button that runs a script, implemented with input type="submit", input type="reset" or input type="button"

This approach should only be used when script is relied upon.

<input type="submit" onclick="return doStuff();" value="Do Stuff">
Example 6: Button that runs a script, implemented with button

This is valuable when you want more control over the look of your button. In this particular example, the button contains both an icon and some text. This approach should only be used when script is relied upon.

<button onclick="return doStuff();">
  <img src="stuff.gif" alt="stuff icon">
  Do Stuff
</button>

Related techniques:
- G90: Providing keyboard-triggered event handlers
- G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes
- H91: Using HTML form controls and links
- SCR20: Using both keyboard and other device-specific functions
- SCR24: Using progressive enhancement to open new windows on user request
- F42: Failure of Success Criteria 1.3.1, 2.1.1, 2.1.3, or 4.1.2 when emulating links
- F59: Failure of Success Criterion 4.1.2 due to using script to make div or span a user interface control in HTML without providing a role for the control


------------------------------

SCR36: - Providing a mechanism to allow users to display moving, scrolling, or auto-updating text in a static window or area
Providing a mechanism to allow users to display moving, scrolling, or auto-updating text in a static window or area

About this Technique
	- This technique relates to 2.2.1: Timing Adjustable (Sufficient).
	- This technique applies to any technology that moves, blinks, or updates text and can create a static block of text.

Description : Some Web pages display scrolling text because there is limited space available. Scrolling the text in a small text window makes the content available for users who can read quickly enough, but causes problems for users who read more slowly or use assistive technology. This technique provides a mechanism to stop the movement and make the entire block of text available statically. The text may be made available in a separate window or in a (larger) section of the page. Users can then read the text at their own speed. : This technique does not apply when the text that is moving can not be displayed all at once on the screen (e.g., a long chat conversation). : Note : This technique can be used in combination with a style switching technique to present a page that is a conforming alternate version for non-conforming content. Refer to C29: Using a style switcher to provide a conforming alternate version and Understanding Conforming Alternate Versions for more information.

Examples
Example 1: Expanding Scrolling Text in Place

A large block of text is scrolled through a small marquee area of the page. A button lets the user stop the scrolling and display the entire block of text.

Note

This code example requires that both CSS and JavaScript be turned on and available.

The CSS component
#scrollContainer {
  background-color: darkblue;
  left: 10px;
  overflow: hidden;
  top: 50px;
  visibility: visible;
}

.scrolling {
  height: 50px;
  position: absolute;
  width: 200px;
}

.notscrolling {
  margin:10px;
  width: 500px;
}

#scrollingText {
  color: white;
  top: 0px;
}

.scrolling #scrollingText {
  position: absolute;
}
The script and HTML content:
<script>
var tid;
function init() {
  var st = document.getElementById('scrollingText');
  st.style.top = '0px';
  initScrolling();
}

function initScrolling () {
  tid = setInterval('scrollText()', 300);
}
	
function scrollText () {
  var st = document.getElementById('scrollingText');
  if (parseInt(st.style.top) > (st.offsetHeight*(-1) + 8)) {
    st.style.top = (parseInt(st.style.top) - 5) + 'px';
  }
  else {
    var sc = document.getElementById('scrollContainer');
    st.style.top = parseInt(sc.offsetHeight) + 8 + 'px';
  }
}

function toggle() {
  var scr = document.getElementById('scrollContainer');
  if (scr.className == 'scrolling') {
    scr.className = 'notscrolling';
    clearInterval(tid);
    document.getElementById('scrollButton').value="Shrink";
  }
  else {
    scr.className = 'scrolling';
    initScrolling();
    document.getElementById('scrollButton').value="Expand";
  }
}

<input type="button" id="scrollButton" value="Expand" onclick="toggle()">
<div id="scrollContainer" class="scrolling">
  <div id="scrollingText" class="on">
    ... Text to be scrolled ...
  </div>
</div>
...


Working example of this code: Expanding Scrolling Text in Place.

Related techniques:
- G4: Allowing the content to be paused and restarted from where it was paused
- SCR33: Using script to scroll content, and providing a mechanism to pause it
- SCR22: Using scripts to control blinking and stop it in five seconds or less


------------------------------

SCR38: - Creating a conforming alternate version for a web page designed with progressive enhancement
Creating a conforming alternate version for a web page designed with progressive enhancement

About this Technique
	- This technique is not referenced from any Understanding document.
	- This technique applies to HTML with scripting.

Description : This objective of this technique is to offer a conforming alternate version for a web page designed with progressive enhancement. The technique demonstrates how to use a scripting technique to accomplish this by: : Storing the initial pre-enhanced version of the web page so that it can act as a "conforming alternate version" for any later enhanced versions of the content; and
	- Inserting a mechanism into all enhanced versions of the web page which allows a user to revert the content back to the stored pre-enhanced Alternate Version. : Web pages designed with progressive enhancement detect features in the web-enabled accessing device (size, capability and software) to allow those supported web technologies to be applied in layers on top of an HTML foundation. The basic content and functionality of such a web page are available through the HTML foundation to anyone using a more simple web-enabled accessing device, whilst enhanced versions of the page are created to suit the different features in more advanced accessing devices. : The current guidance for web pages delivered in alternate versions reads: "Note 4: Alternate versions may be provided to accommodate different technology environments or user groups. Each version should be as conformant as possible. One version would need to be fully conformant in order to meet conformance requirement 1." With regard to web pages designed with progressive enhancement this leaves the problem of which version to select as the one fully conformant version - all whilst trying to ensure that no set of users is disadvantaged by that choice. : One solution to this challenge is to select the pre-enhanced version of the web page (e.g. the DOM state created solely from the HTML in the source code in the absence of support for scripts, styles or non-HTML plugins) as the "fully conformant version", due to its broad reach, with regard to support, across all the possible web-enabled devices accessing the content. : Note : This technique removes all scripts, styles, and plugins, but it is important to state that this is not required for conformance with WCAG 2.x. An author could use a similar technique, but retain a reduced set of styles and scripts in the "pre-enhanced" version. : While this technique offers a way to base conformance claims on a single version, authors should continue to work to ensure that each enhanced version of the web page is as conformant as possible.

Examples
Example 1: Using JavaScript

The example uses JavaScript in the "accToggle.js" file to store the initial pre-enhanced version of the web page, created solely from the HTML in the source code, so that it can act as a "conforming alternate version" for any later enhanced versions of the web page; and inserts a toggle link into all enhanced versions of the web page which allows a user to revert the web page back to the stored pre-enhanced "Conforming Alternate Version". Note: The "sayhello.js" file is simply there as an example payload external file, and is to be replaced by any other external scripts which are desired.

The script in the acctoggle.js file stores the pre-enhanced version - assigning the version the url postfix #accessible. Clicking the "WCAG 2.0 conforming alternate version" link (inserted as the first child of the body element in any enhanced versions) changes the url to include the postfix "#accessible" which then resets the html located in the body element and the head element to pre-enhanced code. The pre-enhanced state can be reached from the link, or directly from a url typed into the browser. In addition, a link is inserted into the pre-enhanced "Conforming Alternate Version" which allows the user to re-enhance the web page (something which can also be done using the web browser's back button).

acctoggle.js JavaScript:
window.onload = function(event) {

// store pre-enhanced element content
var initialHead = document.head.innerHTML;
var initialBody = document.body.innerHTML;
var initialURL = location.href;
				
var runOnce = function() {
  // payload you want to run per page call - e.g. analytics code
}

var setup = function() {
  // create conforming alternate version link

  var toggleEnhanced = document.querySelector("#toggle_enhanced");
  if (toggleEnhanced) {
    toggleEnhanced.outerHTML = "";
  }

  var nel = document.createElement("a");
  nel.id = "acctoggle";
  nel.setAttribute("href", "#accessible");
  nel.innerHTML = "WCAG 2.0 conforming alternate version";
  document.body.insertBefore(nel, document.body.firstChild);

  // payload
  var s = document.createElement("SCRIPT");
  s.setAttribute("src", "sayhello.js");
  document.querySelector("HEAD").appendChild(s);   
}
					
setup();
runOnce();

window.onpopstate = function(event) {
  if (location.href.indexOf("#accessible") != -1) {
  
  // revert element contents to pre-enhanced version
  document.head.innerHTML = initialHead;
  document.body.innerHTML = initialBody;

  // create enhanced version link
  var el = document.createElement("a");
  el.id = "toggle_enhanced";
  el.setAttribute("href", "");
  el.innerHTML = "Enhanced version";
  var back = function(e) {
    e.preventDefault();
    window.history.back();
  }
  el.addEventListener("click", back, false);
  document.body.insertBefore(el, document.body.firstChild);
}

if (location.href == initialURL) {
  setup();
}
};
}
HTML web page source code:
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Evaluera Ltd</title>
    <meta charset="UTF-8">
    <script src="accSwitch.js"></script>
  </head>
  <body> 
    <h1>Test Page</h1>
    <p>Say: <span id="change">Goodbye</span></p>
  </body>
</html>
sayhello.js source code
var change = document.querySelector("#change");
change.innerText = "Hello";

Related techniques:
- G136: Providing a link at the beginning of a nonconforming Web page that points to a conforming alternate version
- C29: Using a style switcher to provide a conforming alternate version
- SVR4: Allowing users to provide preferences for the display of conforming alternate versions


------------------------------

SCR39: - Making content on focus or hover hoverable, dismissible, and persistent
Making content on focus or hover hoverable, dismissible, and persistent

About this Technique
	- This technique relates to 1.4.13: Content on Hover or Focus (Sufficient).
	- This technique applies to any technology that supports the display of additional content on pointer hover.

Description : Additional content that is displayed when a user moves the pointer over a trigger or moves the keyboard focus to the trigger (for example, a pop-up) must remain visible to allow users time to read and interact with the content and must allow the user to move the pointer over the additional content. : Low vision users who magnify their screens often see only a small part of the screen at a time (their viewport). This means that the additional content may not be fully visible in the current viewport and users may need to move their mouse over the additional content to read it. Web authors should therefore ensue that additional content stays visible when the pointer moves away from the trigger to the (mostly adjacent) additional content. additional content should also be dismissible without moving the focus, so that users can read content covered by the additional content.

Examples
Example 1: Content preview for links

When hovering over or focusing on a link, a content preview for the link appears just above or below that link. Users can move the pointer over the additional content (pop-up) so that they can fully read the additional content. Pressing the Esc key dismisses (closes) the additional content.

HTML of example 1
<p>This is the 
   <a class="a-and-tooltip" id="parent" href="index.html">trigger
   <span id="popup" role="tooltip">And this additional text 
    gives additional context on the trigger term
   </span>
  </a>.
   Text and popup are <strong>in one link (a)</strong> element.
</p>
CSS of example 1
[role="tooltip"] {
  display: none;
  padding: 0.5em;
  background:white;
  color: black;
  border:solid black 2px;
  width:10em;
}

.a-and-tooltip {
  position: relative;
}

[role="tooltip"] {
  position: absolute;
  left:0;
  top:1em;
}
JavaScript of example 1
// trigger and popup inside the same link

var parent = document.getElementById("parent");

parent.onmouseover = function() {
  document.getElementById("popup").style.display = "block";
}

parent.onmouseout = function() {
  document.getElementById("popup").style.display = "none";
}

parent.onfocus = function() {
  document.getElementById("popup").style.display = "block";
}

parent.onblur = function() {
  document.getElementById("popup").style.display = "none";
}

// hide when ESC is pressed

document.addEventListener("keydown", (e) => {
  if ((e.keyCode || e.which) === 27)
    document.getElementById("popup").style.display = "none";
});

Working example of content on hover or focus

--------------------------------------------------

File: css.json
==================================================

C6: - Positioning content based on structural markup
Positioning content based on structural markup

About this Technique
	- This technique relates to:
	- 1.3.2: Meaningful Sequence (Sufficient when used with G57: Ordering the content in a meaningful sequence)
	- 1.4.5: Images of Text (Advisory)
	- 1.4.9: Images of Text (No Exception) (Advisory)
	- 2.4.1: Bypass Blocks (Advisory)
	- This technique applies to all technologies that support CSS.

Description : The objective of this technique is to demonstrate how visual appearance may be enhanced via style sheets while still maintaining a meaningful presentation when style sheets are not applied. Using the positioning properties of CSS, content may be displayed at any position on the user's viewport. Using structural elements ensures that the meaning of the content can still be determined when styling is not available.

Examples
Example 1

In this example structural markup (description lists) have been applied to the content. CSS has been used to style the content into columnar form. Each class absolutely positions the content into columns and the margins have been set to 0 to override the default behavior of user agents to display HTML definition lists with the dd element indented.

Here is the content to be displayed:

<div class="box">
  <dl>
    <dt class="menu1">Products</dt>
    <dd class="item1">Telephones</dd>
    <dd class="item2">Computers</dd>
    <dd class="item3">Portable MP3 Players</dd>
    <dt class="menu2">Locations</dt>
    <dd class="item4">Idaho</dd>
    <dd class="item5">Wisconsin</dd>
  </dl>
</div>

Here is the CSS which positions and styles the above elements:

.item1 {
   left: 0;
   margin: 0;
   position: absolute;
   top: 7em;
 }
 .item2 {
   left: 0;
   margin: 0;
   position: absolute;
   top: 8em;
 }
 .item3 {
   left: 0;
   margin: 0;
   position: absolute;
   top: 9em;
 }
 .item4 {
   left: 14em;
   margin: 0;
   position: absolute;
   top: 7em;
 }
 .item5 {
   left: 14em;
   margin: 0;
   position: absolute;
   top: 8em;
 }
 .menu1 {
   background-color: #FFFFFF;
   color: #FF0000;
   font-family: sans-serif;
   font-size: 120%;
   left: 0;
   margin: 0;
   position: absolute;
   top: 3em;
 }
 .menu2 {
   background-color: #FFFFFF;
   color: #FF0000;
   font-family: sans-serif;
   font-size: 120%;
   left: 10em;
   margin: 0;
   position: absolute;
   top: 3em;
 }
 #box {
   left: 5em;
   position: absolute;
   top: 5em;
 }

When style sheets are applied, the data are displayed in two columns of "Products" and "Locations." When the style sheets are not applied, the text appears in a definition list which maintains the structure and reading order.

Related techniques:
- F1: Failure of Success Criterion 1.3.2 due to changing the meaning of content by positioning information with CSS


------------------------------

C7: - Using CSS to hide a portion of the link text
Using CSS to hide a portion of the link text

About this Technique
	- This technique relates to:
	- 2.4.4: Link Purpose (In Context) (Sufficient when used for providing a supplemental description of the purpose of a link using one of the following techniques: )
	- 2.4.9: Link Purpose (Link Only) (Sufficient when used for providing a supplemental description of the purpose of a link using one of the following techniques: )
	- This technique applies to all technologies that support CSS.

Description : The objective of this technique is to supplement the link text by adding additional text that describes the unique function of the link and styling the additional text so that it is not rendered on the screen by user agents that support CSS. When information in the surrounding context is needed to interpret the displayed link text, this technique provides a complete description of the link's input function while permitting the less complete text to be displayed. : This technique works by creating a CSS selector to target text that is to be hidden. The rule set for the selector places the text to be hidden in a 1-pixel box with overflow:hidden. This ensures the text does not display on screen but remains accessible to assistive technologies such as screen readers and braille displays. Note that the technique does not use visibility:hidden or display:none properties, since these have the effect of hiding the text from assistive technology in addition to preventing on-screen display. : This technique is not a method for hiding complete links, only a section of text within a link. The resources section includes methods for hiding and showing links aimed at screen reader users. : Note : This technique to hide link text has been advocated by some screen reader users and corporate Web authors. It has proved effective on some Web sites. Other screen reader users and accessibility experts don't recommend this as a general technique because the results can be overly chatty and constrain the ability of the experienced screen reader user to control the verbosity. The working group believes the technique can be useful for Web pages that do not have repetitive content in the hidden text areas. : This technique can be used in combination with a style switching technique to present a page that is a conforming alternate version for non-conforming content. Refer to C29 and Understanding Conforming Alternate Versions for more information.

Examples

The following examples use the CSS selector and rule set below:

.visually-hidden {
  clip-path: inset(100%);
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}
Example 1: A news site with "full story" links

This example describes a news site that has a series of short synopsis of stories followed by a link that says "full story". Hidden link text describes the purpose of the link.


<p>Washington has announced plans to stimulate economic growth.
  <a href="/washington-growth/"><span class="visually-hidden">Washington stimulates
   economic growth </span>Full Story</a>
</p>
Example 2: A list of books in different formats

This example describes a resource that has electronic books in different formats. The title of each book is followed by links that say "HTML" and "PDF." Visually-hidden text describes the purpose of each link.

<dl>
  <dt>Winnie the Pooh</dt>
  <dd><a href="winnie-the-pooh.html">
    <span class="visually-hidden">Winnie the Pooh </span>HTML</a></dd>
  <dd><a href="winnie_the_pooh.pdf">
    <span class="visually-hidden">Winnie the Pooh </span>PDF</a></dd>
  <dt>War and Peace</dt>
  <dd><a href="war-and-peace.html">
    <span class="visually-hidden">War and Peace </span>HTML</a></dd> 
  <dd><a href="war_and_peace.pdf">
    <span class="visually-hidden">War and Peace </span>PDF</a></dd>
</dl>

Related techniques:
- G91: Providing link text that describes the purpose of a link
- H33: Supplementing link text with the title attribute


------------------------------

C8: - Using CSS letter-spacing to control spacing within a word
Using CSS letter-spacing to control spacing within a word

About this Technique
	- This technique relates to:
	- 1.3.2: Meaningful Sequence (Sufficient when used with G57: Ordering the content in a meaningful sequence)
	- 1.4.5: Images of Text (Advisory)
	- 1.4.9: Images of Text (No Exception) (Advisory)
	- 1.4.12: Text Spacing (Advisory)
	- This technique applies to all technologies that support CSS.

Description : The objective of this technique is to demonstrate how the visual appearance of spacing in text may be enhanced via style sheets while still maintaining meaningful text sequencing. The CSS letter-spacing property helps developers control the amount of white space between characters. This is recommended over adding blank characters to control the spacing, since the blank characters can change the meaning and pronunciation of the word.

Examples
Example 1: Increasing the spacing between characters in a word

The following CSS would add the equivalent of a space between each character in a level-2 heading:

The CSS
h2 {
  letter-spacing: 1em;
}
The HTML
<h2>Museum</h2>

The rendered result might look something like:

M u s e u m

Related techniques:
- F1: Failure of Success Criterion 1.3.2 due to changing the meaning of content by positioning information with CSS
- F32: Failure of Success Criterion 1.3.2 due to using white space characters to control spacing within a word


------------------------------

C9: - Using CSS to include decorative images
Using CSS to include decorative images

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Sufficient).
	- This technique applies to any technology that can use CSS to include images.

Description : The objective of this technique is to provide a mechanism to add purely decorative images and images used for visual formatting to Web content without requiring additional markup within the content. This makes it possible for assistive technologies to ignore the non-text content. Some user agents can ignore or turn off CSS at the user's request, so that background images included with CSS simply "disappear" and do not interfere with display settings such as enlarged fonts or high contrast settings. : Background images can be included with the following CSS properties: : background;
	- background-image;
	- content, combined with the ::before and ::after pseudo-elements;
	- list-style-image. : Note : This technique is not appropriate for any image that conveys information or provides functionality, or for any image primarily intended to create a specific sensory experience.

Examples
Example 1: Background image for an HTML page

The stylesheet for a Web page specifies a background image for the whole page.

<style>
  body { background: #ffe url('/images/home-bg.jpg') repeat; }
</style>
Example 2: Background image with CSS for image rollovers

The stylesheet for a Web page uses the CSS background property to create a decorative rollover effects when a user hovers their mouse pointer over a link.

a:hover {
  background: #ffe url('/images/hover.gif') repeat;
  color: #000;
  text-decoration: none;
}

Related techniques:
- C30: Using CSS to replace text with images of text and providing user interface controls to switch
- F3: Failure of Success Criterion 1.1.1 due to using CSS to include images that convey important information


------------------------------

C12: - Using percent for font sizes
Using percent for font sizes

About this Technique
	- This technique relates to:
	- 1.4.4: Resize Text (Sufficient when used for techniques for relative measurements)
	- 1.4.5: Images of Text (Advisory)
	- 1.4.8: Visual Presentation (Sufficient when used with G146: Using liquid layout)
	- 1.4.9: Images of Text (No Exception) (Advisory)
	- This technique applies to CSS.

Description : The objective of this technique is to specify text font size proportionally so that user agents can scale content effectively. If a font-size is specified for the body element, all other elements inherit that value, unless overridden by a more specific selector.

Examples
Example 1: Percent font sizes in CSS

This example defines the font size for the strong element so that its text will always be larger than the surrounding text, in whatever context it is used. Assuming that headings and paragraphs use different font sizes, the emphasized words in this example will each be larger than their surrounding text.

<style>
  strong {font-size: 120%}
</style>

<h1>Letting the <strong>user</strong> control text size</h1>
<p>Since only the user can know what size text works for them, 
it is <strong>very</strong> important to let them configure the text size.</p>

Related techniques:
- C13: Using named font sizes
- C14: Using em units for font sizes


------------------------------

C13: - Using named font sizes
Using named font sizes

About this Technique
	- This technique relates to:
	- 1.4.4: Resize Text (Sufficient when used for techniques for relative measurements)
	- 1.4.5: Images of Text (Advisory)
	- 1.4.8: Visual Presentation (Sufficient when used with G146: Using liquid layout)
	- 1.4.9: Images of Text (No Exception) (Advisory)
	- This technique applies to CSS.

Description : The objective of this technique is to specify a named font size that expresses the relative font size desired. These values provide hints so that the user agent can choose a font-size relative to the inherited font-size.

Examples
Example 1: Named font sizes in CSS

This example selects a larger font size for strong elements so that their text will always be larger than the surrounding text, in whatever context they are used. Assuming that headings and paragraphs use different font sizes, the emphasized words in this example will each be larger than their surrounding text.

<style>
  strong {font-size: larger}
</style>
...
<h1>Letting the <strong>user</strong> control text size</h1>
<p>Since only the user can know what size text works for them, 
 it is <strong>very</strong> important to let them configure the text size.  
...

Related techniques:
- C12: Using percent for font sizes
- C14: Using em units for font sizes


------------------------------

C14: - Using em units for font sizes
Using em units for font sizes

About this Technique
	- This technique relates to:
	- 1.4.4: Resize Text (Sufficient when used for techniques for relative measurements)
	- 1.4.5: Images of Text (Advisory)
	- 1.4.8: Visual Presentation (Sufficient when used with G146: Using liquid layout)
	- 1.4.9: Images of Text (No Exception) (Advisory)
	- This technique applies to CSS.

Description : The objective of this technique is to specify text font size in em units so that user agents can scale content effectively. Since the em is a property of the font, it scales as the font changes size. If a font-size is specified for the body element, all other elements inherit that value, unless overridden by a more specific selector.

Examples
Example 1: em font sizes in CSS

This example defines the font size for strong element so that its text will always be larger than the surrounding text, in whatever context it is used. Assuming that headings and paragraphs use different font sizes, the strong words in this example will each be larger than their surrounding text.

<style>
  strong {font-size: 1.6em}
</style>
...	
<h1>Letting the <strong>user</strong> control text size</h1>
<p>Since only the user can know what size text works for them, 
   it is <strong>very</strong> important to let them configure the text size.</p>
…

Related techniques:
- C12: Using percent for font sizes
- C13: Using named font sizes


------------------------------

C15: - Using CSS to change the presentation of a user interface component when it receives focus
Using CSS to change the presentation of a user interface component when it receives focus

About this Technique
	- This technique relates to:
	- 1.4.1: Use of Color (Advisory)
	- 2.4.7: Focus Visible (Sufficient)
	- This technique applies to CSS, HTML.

Description : The objective of this technique is to demonstrate how visual appearance may be enhanced via style sheets to provide visual feedback when an interactive element has focus or when a user hovers over it using a pointing device. Highlighting the element that has focus or is hovered over can provide information such as the fact that the element is interactive or the scope of the interactive element. : Providing visual feedback may be possible through more than one mode. Usually, it is attained through using a mouse to hover over the element or a keyboard to tab to the element.

Examples
Example 1: Link elements

In this example, mouse and keyboard focus indicators have been applied to the link elements. CSS has been used to apply a background color when the link elements receive focus.

Here is the content to be displayed:

<nav id="main-nav">
  <ul>
    <li>Home</li>
    <li><a href="/services">Services</a></li>
    <li><a href="/projects">Projects</a></li>
    <li><a href="/demos">Demos</a></li>
    <li><a href="/about-us">About us</a></li>
    <li><a href="/contact-us">Contact us</a></li>
    <li><a href="/links">Links</a></li>
  </ul>
<nav>

Here is the CSS that changes the background color for the above elements when they receive mouse or keyboard focus:

#main-nav a:hover, #main-nav a:active, #main-nav a:focus-visible {
  background-color: #DCFFFF;
  color:#000066;
}
Example 2: Highlighting elements that receive focus

In this example, the :focus pseudo-class is used to change the style applied to input fields when they receive focus by changing the background color.

<!doctype html>
<html lang="en">
  <head>
    <style>
      input[type=text]:focus-visible {
        outline:2px solid #0054AE;
        outline-offset:2px;
      }

      input[type=checkbox]:focus + label, input[type=radio]:focus + label {
        background-color:#1E2EB8; 
        color:#FFF;
      }
    </style>
  </head>
  <body>
    <form>
      <div>
        <label for="fname">Name: </label>
        <input autocomplete="name" type="text" name="fname" id="fname">
      </div>
      <div>
        <input type="radio" name="sex" value="male" id="sm">
        <label for="sm">Male</label>
      </div>
      <div>			
        <input type="radio" name="sex" value="female" id="sf">
        <label for="sf">Female</label>
      </div>
    </form>
  </body>
</html>

Working example of this code: Example of highlighting elements that receive focus.

Related techniques:
- G165: Using the default focus indicator for the platform so that high visibility default focus indicators will carry over
- G195: Using an author-supplied, visible focus indicator
- C40: Creating a two-color focus indicator to ensure sufficient contrast with all components
- C45: Using CSS :focus-visible to provide keyboard focus indication


------------------------------

C17: - Scaling form elements which contain text
Scaling form elements which contain text

About this Technique
	- This technique relates to 1.4.4: Resize Text (Advisory).
	- This technique applies to HTML, CSS.

Description : The objective of this technique is to ensure text-based form controls resize when text size is changed in the user agent. This will allow users to enter text and read what they have entered in input boxes because the text is displayed at the size required by the user. : Text-based form controls include input boxes (text and textarea) as well as buttons.

Examples
Example 1: A Contact Form

A Contact Us form has some introductory information and then form controls for users to enter their first name, last name, telephone number and email address. All of the text and form controls have been implemented in a scalable way.

The HTML
<h1>Contact Us</h1>
<p>Please provide us with your details and we will contact you as soon as we can.
  Note that all of the form fields are required.</p>
<div>
  <label for="fname">First Name</label>
  <input autocomplete="given-name" id="fname" name="fname" type="text">
</div>
<div>
  <label for="lname">Last Name</label>
  <input autocomplete="family-name" id="lname" name="lname" type="text">
</div>
<div>
  <label for="phone">Telephone</label>
  <input autocomplete="tel" id="phone" name="phone" type="text">
</div>
<div>
  <label for="email">Email</label>
  <input autocomplete="email" id="email" name="email" type="text">
</div>
<input id="submit" name="submit" type="submit" value="Submit">
The CSS component
h1 { font-size: 2em; }
p, label { font-size: 1em; }
label { display:block; }
input { font: inherit; }
div { margin-bottom: 1rem; }

Working example of this code: Example of resizing input with CSS.


------------------------------

C18: - Using CSS margin and padding rules instead of spacer images for layout design
Using CSS margin and padding rules instead of spacer images for layout design

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Advisory).
	- This technique applies to CSS.

Description : Web designers sometimes use spacer images (usually 1x1 pixel, transparent GIFs) for better control over layout, for example in tables or to indent a paragraph. However, Cascading Style Sheets (CSS) allow sufficient control over layout to replace spacer images. The CSS properties for margins and padding can be used on their own or in combination to control the layout. The margin properties ('margin-top', 'margin-right', 'margin-bottom', 'margin-left', and the shorthand 'margin') can be used on any element that is displayed as a block; they add space at the outside of an element. The padding properties ('padding-top', 'padding-right', 'padding-bottom', 'padding-left', and the shorthand 'padding') can be used on any element; they add space inside the element.

Examples
Example 1

The following example consists of two parts: the CSS code, which specifies a margin on all sides of the table, and padding for the table cells; and the HTML code for the table, which does not contain spacer images and is not nested inside another table.

The CSS
table { margin: .5em; border-collapse: collapse; } 
td, th { padding: .4em; border: 1px solid #000; }
The HTML
<table>
  <caption>Books in the category 'Web development'</caption>
  <thead>
    <tr>
      <th>Title</th>
      <th>Author</th>
      <th>Date</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>How to Think Straight About Web Standards</td>
      <td>Andrew Stanovich</td>
      <td>1 April 2007</td>
    </tr>
  </tbody>
</table>


------------------------------

C19: - Specifying alignment either to the left or right in CSS
Specifying alignment either to the left or right in CSS

About this Technique
	- This technique relates to 1.4.8: Visual Presentation (Sufficient).
	- This technique applies to CSS.

Description : This technique describes how to align blocks of text either left or right by setting the CSS text-align property.

Examples
Example 1: Aligning text to the left

In the following example, text is aligned left. In the style sheet, define the class:

p.left {text-align: left}

In the content call the up the class.

<p class="left"> Lorem ipsum dolor sit ...</p>
Example 2: Aligning text to the right

In the following example, text is aligned right.

p.right {text-align: right}

In the content call the up the class.

<p class="right"> Lorem ipsum dolor sit ...</p>


------------------------------

C20: - Using relative measurements to set column widths so that lines can average 80 characters or less when the browser is resized
Using relative measurements to set column widths so that lines can average 80 characters or less when the browser is resized

About this Technique
	- This technique relates to:
	- 1.4.4: Resize Text (Advisory)
	- 1.4.8: Visual Presentation (Sufficient)
	- This technique applies to CSS.

Description : The purpose of this technique is to ensure that CSS is used in a way that allows users to view content in such a way that line length can average 80 characters or less. This makes it possible for users with certain reading or vision disabilities that have trouble keeping their place when reading long lines of text to view and interact with the content more efficiently. This technique also allows for column width to grow wider as font sizes increase, which will reduce the possibility of clipping as the text size increases. : Note that this technique does not require authors to use CSS to limit the width of lines of text to less than 80 characters in the default view. Rather, the recommendation to use relative measurements in CSS layouts helps to ensure that authors do not set column widths in such a way that makes it impossible for users to view content with line lengths of 80 characters or less.

Examples
Example 1

In this example the div width is set in ems in the stylesheet.

#main-content {max-width: 70em}

And the text block would be placed inside the div in the content

<div id="main-content"> 
  <p>Lorem ipsum dolor sit amet, consectetur adipisicing ...</p>
</div>
Example 2

In this example the div width is set in percent in the stylesheet

#main-content {width: 90%}

And the text block would be placed inside the div in the content

<div id="main-content"> 
  <p>Lorem ipsum dolor sit amet, consectetur adipisicing ...</p>
</div>


------------------------------

C21: - Specifying line spacing in CSS
Specifying line spacing in CSS

About this Technique
	- This technique relates to:
	- 1.4.8: Visual Presentation (Sufficient)
	- 1.4.12: Text Spacing (Advisory)
	- This technique applies to CSS.

Description : Many people with cognitive disabilities have trouble tracking lines of text when a block of text is single spaced. Providing spacing between 1.5 to 2 allows them to start a new line more easily once they have finished the previous one.

Examples
Example 1: Setting the element to 1.5 line height

In the style sheet set the characteristics of the element.

body { line-height: 1.5; }

This sets the line height of everything in the body of the document to 1.5.


------------------------------

C22: - Using CSS to control visual presentation of text
Using CSS to control visual presentation of text

About this Technique
	- This technique relates to:
	- 1.3.1: Info and Relationships (Advisory)
	- 1.4.4: Resize Text (Advisory)
	- 1.4.5: Images of Text (Sufficient)
	- 1.4.9: Images of Text (No Exception) (Sufficient)
	- This technique applies to all technologies that support CSS.

Description : The objective of this technique is to demonstrate how CSS can be used to control the visual presentation of text. This will allow users to modify, via the user agent, the visual characteristics of the text to meet their requirement. The text characteristics include aspects such as size, color, font family and relative placement. : CSS benefits accessibility primarily by separating document structure from presentation. Style sheets were designed to allow precise control - outside of markup - of character spacing, text alignment, object position on the page, audio and speech output, font characteristics, etc. By separating style from markup, authors can simplify and clean up the markup in their content, making it more accessible at the same time. : Text within images has several accessibility problems, including the inability to: : be scaled according to settings in the browser
	- be displayed in colors specified by settings in the browser or rules in user-defined style sheets
	- honor operating system settings, such as high contrast : It is better to use real text for the text portion of these elements, and a combination of semantic markup and style sheets to create the appropriate visual presentation. For this to work effectively, choose fonts that are likely to be available on the user's system and define fallback fonts for users who may not have the first font that is specified. Newer machines and user agents often smooth or anti-alias all text, so it is likely that your headings and buttons will look nice on these systems without resorting to images of text. : The following CSS properties are useful to style text and avoid the need for text in images: : The font-family property is used to display the code aspect in a monospace font family.
	- The text-align property is used to display the text to the right of the viewport.
	- The font-size property is used to display the text in a larger size.
	- The font-style property is used to display text in italics.
	- The font-weight property is used to set how thick or thin characters in text should be displayed.
	- The color property is used to display the color of text or text containers.
	- The line-height property is used to display the line height for a block of text.
	- The text-transform property is used to control the case of letters in text.
	- The letter-spacing property is used to control the spacing of letters in text.
	- The background-image property can be used to display text on a non-text background.
	- The ::first-line pseudo-element can be used to modify the presentation of the first line in a block of text.
	- The ::first-letter pseudo-element can be used to modify the presentation of the first letter in a block of text.
	- The ::before and ::after pseudo-elements can be used to insert decorative non-text content before or after blocks of text.

Examples
Example 1: Using CSS font-family to control the font family for text
The HTML component
<p>The JavaScript method to convert a string to uppercase is <code>toUpperCase()</code>.</p>
The CSS component
code { font-family:"Courier New", Courier, monospace }
Example 2: Using CSS text-align to control the placement (alignment) of text
The HTML component
<p class="right">This text should be to the right of the viewport.</p>
The CSS component
.right { text-align: right; }
Example 3: Using CSS font-size to control the size of text
The HTML component
<p>09 <strong class="largersize">March</strong> 2008</p>
The CSS component
strong.largersize { font-size: 1.5em; }

Example 4: Using CSS color to control the color of text

Note

The style used in this example is not used to convey information, structure or relationships.

The HTML component
<p>09 <em class="highlight">March</em> 2008</p>
The CSS component
.highlight{ color: red; }
Example 5: Using CSS font-style to italicize text

Note

The style used in this example is not used to convey information, structure or relationships.

The HTML component
<p>The article is available in the
  <a href="https://www.example.com" class="featuredsite">Endocrinology Blog</a>.
</p>
The CSS component
.featuredsite{ font-style:italic; }
Example 6: Using CSS font-weight to control the font weight of the text

Note

The style used in this example is not used to convey information, structure or relationships.

The HTML component
<p>This deal is available <span class="highlight">now!</span></p>
The CSS component
.highlight { font-weight:bold; color:#990000; }
Example 7: Using CSS text-transform to control the case of text

Note

The style used in this example is not used to convey information, structure or relationships.

The HTML component
<p>09 <span class="caps">March</span> 2008</p>
The CSS component
.caps { text-transform:uppercase; }
Example 8: Using CSS line-height to control spacing between lines of text

The CSS line-height property is used to display the line height for the paragraph at twice the height of the font.

The HTML component
<p>Concern for man and his fate must always form the chief interest of all technical 
endeavors. Never forget this in the  midst of your diagrams and equations.</p>
The CSS component
p { line-height:2; }

The CSS line-height property is used to display the line height for the text at less than the height of the font. The second line of text is positioned after the first line of text and visually appears as though the text is part of the first line but dropped a little.

The HTML component
<h1 class="overlap"><span class="upper">News</span>
  <span class="byline">today</span>
</h1>
The CSS component
.overlap { line-height:0.2;}
.upper { text-transform:uppercase; }
.byline {
  color:red;
  font-style:italic;
  font-weight:bold;
  padding-left:3em;
}
Example 9: Using CSS letter-spacing to space text

The CSS letter-spacing property is used to display the letters farther apart in the heading.

The HTML component
<h1 class="overlap"><span class="upper">News</span><br>
  <span class="byline">today</span>
</h1>
The CSS component
.overlap { line-height:0.2em; }
.upper { text-transform:uppercase; }
.byline {
  color:red;
  font-style:italic;
  font-weight:bold;
  padding-left:3em;
  letter-spacing:-0.1em;
}

The CSS letter-spacing property is used to display the letters closer together in the second line of text.

The HTML component
<h1 class="upper2">News</h1>
The CSS component
.upper2 { text-transform:uppercase; letter-spacing:1em; }
Example 10: Using CSS background-image to layer text and images

The CSS font-style property is used to display the textual component of a banner and background-image property is used to display a picture behind the text.

The HTML component
<div id="banner"><span id="bannerstyle1">Welcome</span> 
  <span id="bannerstyle2">to your local city council</span>
</div>
The CSS component
#banner { 
  color:white; 
  background-image:url(banner-bg.gif); 
  background-repeat:no-repeat; 
  background-color:#003399; 
  width:29em; 
}

#bannerstyle1 { 
  text-transform:uppercase; 
  font-weight:bold; 
  font-size:2.5em;
}

#bannerstyle2 { 
  font-style:italic; 
  font-weight:bold; 
  letter-spacing:-0.1em;
  font-size:1.5em; 
}
Example 11: Using CSS ::first-line to control the presentation of the first line of text

The CSS ::first-line pseudo-element is used to display the first line of text in a larger, red font.

The HTML component
<p class="startline">Once upon a time...<br />
  ...in a land far, far away...</p>
The CSS component
.startline::first-line { font-size:2em; color:#990000; }
Example 12: Using CSS ::first-letter to control the presentation of the first letter of text

The CSS ::first-letter pseudo-element is used to display the first letter in a larger font size, red and vertically aligned in the middle.

The HTML component
<p class="startletter">Once upon a time...</p>
The CSS component
.startletter::first-letter { font-size:2em; color:#990000; vertical-align:middle; }

Related techniques:
- C8: Using CSS letter-spacing to control spacing within a word
- C12: Using percent for font sizes
- C13: Using named font sizes
- C14: Using em units for font sizes
- C21: Specifying line spacing in CSS
- SCR34: Calculating size and position in a way that scales with text size


------------------------------

C23: - Specifying text and background colors of secondary content such as banners, features and navigation in CSS while not specifying text and background colors of the main content
Specifying text and background colors of secondary content such as banners, features and navigation in CSS while not specifying text and background colors of the main content

About this Technique
	- This technique relates to 1.4.8: Visual Presentation (Sufficient).
	- This technique applies to CSS.

Description : Some Web pages use colors to identify different groupings. The objective of this technique is to allow users to select specific color combinations for the text and background of the main content while retaining visual clues to the groupings and organization of the web page. When a user overrides the foreground and background colors of all the text on a page, visual clues to the grouping and organization of the Web page may be lost, making it much more difficult to understand and use. : When an author does not specify the colors of the text and background of the main content, it is possible to change the colors of those regions in the browser without the need to override the colors with a user style sheet. Specifying the text and background colors of secondary content means that the browser will not override those colors. : With this technique the author uses the default text color and background color of the main area. As a result the colors are completely determined by the user agent via the user's color preferences. The user can ensure that the color selection best meets their needs and provides the best reading experience.

Examples
Example 1

An HTML Web page uses CSS to specify the text and background colors of all secondary content such as navigation bars, menu bars, and the table of contents. Neither the text color nor background of the main content is specified. The user sets their own color preferences in the browser so that they view the main content in colors and contrasts that work well for them. The distinction between the separate sections of the page are still visually obvious.

Example 2

A music magazine has an article that is blue text on a white background. The site provides a link near the beginning of the page which assigns a different style sheet to the page. The new style sheet does not have any colors specified for the text or background.

Related techniques:
- G148: Not specifying background color, not specifying text color, and not using technology features that change those defaults
- G156: Using a technology that has commonly-available user agents that can change the foreground and background of blocks of text
- G175: Providing a multi color selection tool on the page for foreground and background colors
- C25: Specifying borders and layout in CSS to delineate areas of a Web page while not specifying text and text-background colors


------------------------------

C24: - Using percentage values in CSS for container sizes
Using percentage values in CSS for container sizes

About this Technique
	- This technique relates to 1.4.8: Visual Presentation (Sufficient when used with G146: Using liquid layout).
	- This technique applies to CSS.

Description : The objective of this technique is to enable users to increase the size of text without having to scroll horizontally to read that text. To use this technique, an author specifies the width of text containers using percent values.

Examples
Example 1

A newspaper has content in the middle of the window. The width of the container for the content is specified in page percentages, so that when a person with low vision increases the font size the text reflows inside the browser window at the new size and there is no need to scroll horizontally.

Related techniques:
- C20: Using relative measurements to set column widths so that lines can average 80 characters or less when the browser is resized


------------------------------

C25: - Specifying borders and layout in CSS to delineate areas of a Web page while not specifying text and text-background colors
Specifying borders and layout in CSS to delineate areas of a Web page while not specifying text and text-background colors

About this Technique
	- This technique relates to 1.4.8: Visual Presentation (Sufficient).
	- This technique applies to pages that use CSS.

Description : The intent of this technique is to specify borders and layout using CSS and leave text and background colors to render according to the user's browser and/or operating system settings. This allows users to view the text in the colors they require while maintaining other aspects of the layout and page design such as columns of text, borders around sections or vertical lines between a menu and main content area. It will also prevent some display issues in some browsers when pages contain Javascript pop-up boxes or drop-down menus and have the colors overridden. : Borders and layout indicators help many people with cognitive disabilities, as does flexibility over the text and background colors. Sometimes these two needs are in conflict when the user has to over-ride the author's color selection of text and background in the browser and the browser also removes the borders and the intended layout. This can mean the page is displayed in a single column with one block of content below the other, which can result in unnecessary whitespace and long lines of text. It can also mean that pop-up boxes gain a transparent background, superimposing the text of the box on the text of the page, and drop-down menus either become transparent or gain a dark-grey background. When a Web author does not specify the colors of any text and background, while specifying border colors and layout, it is possible, in most popular browsers, to change the text and background colors without affecting the other (author-specified) CSS declarations.

Examples
Example 1

A Web page is designed using HTML. CSS is used to specify border colors around discrete areas of the page and to layout the content so that the menu floats to the left of the main content area. Neither the text color nor background is specified. The user sets their own colors in the browser. They can view the page in colors and contrasts that work well for them without disrupting the layout.

Related techniques:
- G17: Ensuring that a contrast ratio of at least 7:1 exists between text (and images of text) and background behind the text
- G18: Ensuring that a contrast ratio of at least 4.5:1 exists between text (and images of text) and background behind the text
- G145: Ensuring that a contrast ratio of at least 3:1 exists between text (and images of text) and background behind the text
- G148: Not specifying background color, not specifying text color, and not using technology features that change those defaults
- G156: Using a technology that has commonly-available user agents that can change the foreground and background of blocks of text
- C23: Specifying text and background colors of secondary content such as banners, features and navigation in CSS while not specifying text and background colors of the main content


------------------------------

C27: - Making the DOM order match the visual order
Making the DOM order match the visual order

About this Technique
	- This technique relates to:
	- 1.3.2: Meaningful Sequence (Sufficient)
	- 2.4.3: Focus Order (Sufficient when used for giving focus to elements in an order that follows sequences and relationships within the content)
	- This technique applies to CSS used with HTML.

Description : The objective of this technique is to ensure that the order of content in the source code is the same as the visual presentation of the content. The order of content in the source code can be changed by the author to any number of visual presentations with CSS. Each order may be meaningful in itself but may cause confusion for assistive technology users. This could be due to the user switching off the author-specified presentation, by accessing the content directly from the source code (such as with a screen reader), or by interacting with the content with a keyboard. If a blind user, who reads the page with a screen reader that follows the source order, is working with a sighted user who reads the page in visual order, they may be confused when they encounter information in different orders. A user with low vision who uses a screen magnifier in combination with a screen reader may be confused when the reading order appears to skip around on the screen. A keyboard user may have trouble predicting where focus will go next when the source order does not match the visual order. : There may also be situations where the visually presented order is necessary to the overall understanding of the page, and if the source order is presented differently, it may be much more difficult to understand. : When the source order matches the visual order, everyone will read the content and interact with it in the same (correct) order. : Note : The tabindex attribute in HTML has two functions. One is to make an element focusable and the other is to assign the element a position in the focus order. A tabindex of 0 makes an element focusable, but adds it to the focus order in the order of source elements. The focus order will follow positive values of tabindex in ascending order. Setting tabindex values that result in an order different from the order of elements in the Document Object Model (DOM) can mean the order is incorrect for users of assistive technologies. This is largely because the tabindex property is specified in the HTML and not the CSS. This may change in future specifications. It may also differ from the visual presentation order.

Examples
An online newspaper has placed a navigation bar visually in the top left corner of the page directly below its initial logo. In the source code, the navigation elements appear after the elements encoding the logo.

Related techniques:
- G57: Ordering the content in a meaningful sequence
- G59: Placing the interactive elements in an order that follows sequences and relationships within the content


------------------------------

C28: - Specifying the size of text containers using em units
Specifying the size of text containers using em units

About this Technique
	- This technique relates to:
	- 1.4.4: Resize Text (Sufficient when used for Ensuring that text containers resize when the text resizes AND using measurements that are relative to other measurements in the content)
	- 1.4.12: Text Spacing (Advisory)
	- This technique applies to CSS.

Description : The objective of this technique is to specify the width and/or height of containers, that contain text or that will accept text input, in em units. This will allow user agents that support text resizing to resize the text containers in line with changes in text size settings. : The width and/or height of text containers that have been specified using other units risk text cropping because it falls outside the container boundaries when the text size has been increased. : The containers generally control the placement of text within the Web page and can include layout elements, structural elements and form controls. : Note : This technique uses em units, but using rem units instead would have the same effect.

Examples
Example 1: em units for sizes for layout container containing text

In this example, a div element, with id value of "nav_menu", is used to position the navigation menu along the left-hand side of the main content area of the Web page. The navigation menu consists of a list of text links, with id value of "nav_list". The text size for the navigation links and the width of the container are specified in em units.

#nav_menu { width: 20em; height: 100em; }
#nav_list { font-size: 100%; }
Example 2: em units for text-based form controls

In this example, input elements that contain text or accept text input by the user have been given the class name "form1". CSS rules are used to define the font size in percent units and width for these elements in em units. This will allow the text within the form control to resize in response to changes in text size settings without being cropped (because the width of the form control itself also resizes according to the font size).

input.form1 { font-size: 100%; width: 15em; }
Example 3: em units in dropdown boxes

In this example, select elements have been given the class name "pick." CSS rules are used to define the font size in percent units and width in em units. This will allow the text within the form control to resize in response to changes in text size settings without being cropped.

select.pick { font-size: 100%; width: 10em; }
Example 4: em units for non-text-based form controls

In this example, input elements that define checkboxes or radio buttons have been given the class name "choose." CSS rules are used to define the width and height for these elements in em units. This will allow the form control to resize in response to changes in text size settings.

input.choose { width: 1.2em; height: 1.2em; }

Related techniques:
- C12: Using percent for font sizes
- C14: Using em units for font sizes
- C17: Scaling form elements which contain text
- C20: Using relative measurements to set column widths so that lines can average 80 characters or less when the browser is resized


------------------------------

C29: - Using a style switcher to provide a conforming alternate version
Using a style switcher to provide a conforming alternate version

About this Technique
	- This technique is not referenced from any Understanding document.
	- This technique applies to CSS used with client-side or server-side scripting.

Description : When some aspect of the default presentation of a Web page does not meet a Success Criterion, it is possible to meet that requirement using the "Alternate Version" clause in the conformance requirements (Conformance Requirement 1). For some requirements, invoking a style switcher via a link or control on the page that can adjust the presentation so that all aspects of the page conform at the level claimed allows authors to avoid having to provide multiple versions of the same information. : The objective of this technique is to demonstrate how CSS can be used in combination with scripting to provide conforming alternate versions of a Web page. In this technique, an author provides alternative views of the content by providing controls that adjust the CSS that is used to control the visual presentation of content. Controls provided within the Web page allow users to select or modify the presentation in a way that meets the success criterion at the level claimed. This makes it possible for different visual presentations to be selected by users in situations such as the following: : the user may not be able to adjust browser or operating system settings, due to a lack of familiarity or rights
	- the text is provided in a manner that does not respond to browser or operating system settings (such as text within an image)
	- the default presentation of the content does not include sufficient contrast for some users : For this technique to be used successfully, three things must be true. : The link or control on the original page must itself meet the success criterion to be met via the alternate presentation. For example, if a style switcher is used to provide increased font sizes and the control is presented using a small font, users may not be able to activate the control and view the alternate presentation.
	- The new page must contain all the same information and functionality as the original page.
	- The new page must conform to all of the Success Criteria for the desired level of conformance. For example, an alternate stylesheet can not be used to meet one requirement if it causes a different requirement to no longer conform. : When using a style switcher, it is important to consider the following challenges and limitations: : The number and type of changes that a user can make is limited to the scope of the controls provided by the author of the Web page. A variety of presentation and preferences should be provided in order to address the needs of as wide an audience as possible. However, it is also important for authors to consider interactions between preferences and the complexity for users that might result from providing large numbers of options to users.
	- Maintaining the user's preference from one page to the next may be achieved by storing a cookie on the user's machine (see Resources section for more information) or by including their preferences in a profile saved on the Web server by passing a query string parameter, or by other means.
	- The technical method used to implement a style switcher may be subject to the support and availability of one or more technologies on the user's machine (for example, many client-side solutions require support for both JavaScript and CSS). Unless these technologies are relied upon for conformance, authors should consider using server-side technologies where client-side support and availability of technologies can not be assured. Alternatively, the use of techniques which ensure that content will transform gracefully when one or more of the technologies used are not available can be an effective way to enhance pages when support for these technologies is not relied upon for conformance.

Examples
Example 1: Using a JavaScript control to apply a different external CSS file

This example is of a page that provides links to change text and background colors for the page via JavaScript. The links should only be inserted if JavaScript is supported by and available on the user's system. Otherwise, selecting the links will not result in the desired changes. This can be achieved by using script to insert the links themselves (which means that the links would only be present when scripting is supported and available).

The following code shows the JavaScript-dependent color-change links and a snippet of other content in the Web page, the associated style sheet rules, and the JavaScript that changes the style sheet in use when a color-change link is selected.

The example applies only to the current page view. In a production environment, it would be advisable to save this preference in a cookie or server-side user profile, so that users would only have to make the selection once per site.

The HTML components
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <link href="main.css" rel="stylesheet">
    <link id="currentCSS" href="defaultColors.css" rel="stylesheet">
  </head>
  <body>
    <div id="colorswitch">
    <p>Change colors:</p>
    <ul class="inline">
      <li>
        <a href="#" onClick="javascript:changeColors('altColors1.css');return false;" 
	id="altColors1">dark blue on white</a>
      </li>
      <li>
        <a href="#" onClick="javascript:changeColors('altColors2.css');return false;" 
	id="altColors2">yellow on black</a>
      </li>
      <li>
        <a href="#" onClick="javascript:changeColors('altColors3.css');return false;" 
	id="altColors3">black on pale yellow</a>
      </li>
      <li>
        <a href="#" onClick="javascript:changeColors('altColors4.css');return false;" 
	id="altColors4">black on white</a>
      </li>
      <li>
        <a href="#" onClick="javascript:changeColors('defaultColors.css');return false;" 
	id="default">Reset to default</a>
      </li>
    </ul>
  </div>
  <div id="mainbody">
    <h1>Conference report</h1>
      <p>Last week's conference presented an impressive line-up of speakers...</p>
    </div>
  </body>
</html>
The CSS components
In main.css
body{ font-family: Geneva, Arial, Helvetica, sans-serif; margin: 2em; }

#mainbody { 
  padding: 1em; 
}

#colorswitch {
  float: right; 
  width: 12em; 
  border: 1px #000066 solid; 
  padding:0 1em 1em 1em; margin:0;
}

#colorswitch p { 
  padding-top:.5em; 
  font-weight:bold;
}
In defaultColors.css
body, p { 
  color:#000000; 
  background-color:#FFFFFF; 
}

h1, h2, h3 {
  color:#990000; 
  background-color:#FFFFFF;
}
In altColors1.css
body, h1, h2, h3, p, a { 
  color:#000066; 
  background-color:#FFFFFF; 
}
In altColors2.css
body, h1, h2, h3, p, a { 
  color:#FFFF33; 
  background-color:#000000; 
}
In altColors3.css
body, h1, h2, h3, p, a { 
  color:#000000; 
  background-color:#FFFF99; 
}
In altColors4.css
body, h1, h2, h3, p, a { 
  color:#000000; 
  background-color:#FFFFFF; 
}
The JavaScript components
function changeColors (newCSS){
  document.getElementById('currentCSS').href = newCSS; 
}

A working example of this code, Using a JavaScript control to apply a different external CSS file, is available.

Example 2: Using a client-side JavaScript to change a CSS property

This example can be used for simple changes to a section of content and may be less practical for complex sites or pages. The example uses a client-side JavaScript to change the class name to visually present the user's color selection (from a defined set of options) as a background for highlighting specific content.

Note

The following code includes JavaScript calls within the HTML code to aid understanding of the technique. However, the author is encouraged to use current best practice for including JavaScript (see resources for more information about Unobtrusive JavaScript and progressive enhancement).

The HTML components
<h1>Product comparison</h1>
<p>The products you selected to compare are listed below. 
  Any differences between the products are highlighted and italicized.</p>
<p class="inlinePara">Change hightlight color: </p>
<ul class="inline">
  <li>
    <a href="#" onClick="changeColor('hghltLightYellow');return false;" 
     class="hghltLightYellow">light yellow</a>
  </li>
  <li>
    <a href="#" onClick="changeColor('hghltBrightYellow');return false;" 
     class="hghltBrightYellow">bright yellow</a>
  </li>
  <li>
    <a href="#" onClick="changeColor('hghltLightBlue');return false;" 
     class="hghltLightBlue">light blue</a></li>
	<li>
    <a href="#" onClick="changeColor('hghltBrightBlue');return false;" 
     class="hghltBrightBlue">bright blue</a>
  </li>
  <li>
    <a href="#" onClick="changeColor('hghltLightRed');return false;" 
     class="hghltLightRed">light red</a>
  </li>
  <li>
    <a href="#" onClick="changeColor('hghltDrkRed');return false;" 
     class="hghltDrkRed">dark red</a>
  </li>
</ul>
<table>
  <tr>
    <td> </td>
    <th scope="col">Product 1</th>
    <th scope="col">Product 2</th>
  </tr>
  <tr>
    <th scope="row">Aspect 1</th>
    <td>Yes</td>
    <td>Yes</td>
  </tr>
  <tr>
    <th scope="row">Aspect 2</th>
    <td class="hghltLightYellow">Yes</td>
    <td class="hghltLightYellow">No</td>
  </tr>
  <tr>
    <th scope="row">Aspect 3</th>
    <td>Yes</td>
    <td>Yes</td>
  </tr>
</table>
The CSS components
body { color:#000000; background-color:#FFFFFF; }
.hghltLightYellow { color: #000000; background-color: #FFFF99; font-style:oblique; }
.hghltBrightYellow { color: #000000; background-color: #FFFF00; font-style:oblique; }
.hghltLightBlue { color: #000000; background-color: #33FFFF; font-style:oblique; }
.hghltBrightBlue { color: #FFFFFF; background-color: #0000FF; font-style:oblique; }
.hghltLightRed { color: #000000; background-color: #FF6266; font-style:oblique; }
.hghltDrkRed { color: #FFFFFF; background-color: #993300; font-style:oblique; }

.inlinePara { display:inline; }
.inline { display: inline; margin-left:0px; padding-left:0px; line-height:3em; }
.inline li { display:inline; }
.inline li a { padding: 0.5em 1em; border: 2px solid #000000; }
The JavaScript components
function changeColor(hghltColor) {
  // collects table data cells into an array 
  var els = document.getElementsByTagName('td');

  // for each item in the array, look for a class name starting with "hghlt"
  // if found, change the class value to the current selection
  // note that this script assumes the  'td' class attribute is only used for highlighting

  for (var i=0; i<els.length; i++) {
    if (els[i].className.indexOf("hghlt") == 0) { els[i].className = hghltColor; }
  }
}

A working example of this code, Using a client-side JavaScript to change a CSS property, is available.

Example 3: Using PHP $_GET to apply a different external CSS file

This simple example uses PHP $_GET to assign one of two available external style sheets. Similar functionality could be achieved using a variety of PHP features. The example applies only to the current page view. In a production environment, it would be advisable to save this preference in a cookie or server-side user profile, so that users would only have to make the selection once per site.

The following code is PHP, but a similar approach would work with a variety of server-side technologies.

The PHP and HTML components
At the beginning of the PHP page
<?php
  $thestyle = $_GET['set'];
  if ($thestyle == "style1") {
    $thestyle = "style2";
  }
  else {
    $thestyle = "style1";
  }
?>
In the <head> section
<link rel="stylesheet" media="screen" href="<?php echo($thestyle);?>.css">
In <body> section
<?php
  if ($thestyle == "style1") {
    echo "<a href=\"index.php?set=style1\">Switch to Style Sheet Two</a>";
  }
  else {
    echo "<a href=\"index.php?set=style2\">Switch to Style Sheet One</a>";
  }
?>
	
<div id="mainbody">
  <h1>Conference report</h1>
  <p>Last week's conference presented an impressive line-up of speakers...</p>
</div>
The CSS components
In style1.css
body, p { color:#000000; background-color:#FFFFFF; }
h1, h2, h3 {color:#990000; background-color:#FFFFFF; }
In style2.css
body, h1, h2, h3, p, a { color:#FFFF00; background-color:#000000; }

A working example of this code, Using PHP $_GET to apply a different external CSS file, is available.

Related techniques:
- G140: Separating information and structure from presentation to enable different presentations
- G174: Providing a control with a sufficient contrast ratio that allows users to switch to a presentation that uses sufficient contrast
- G178: Providing controls on the Web page that allow users to incrementally change the size of all text on the page up to 200 percent
- G188: Providing a button on the page to increase line spaces and paragraph spaces
- G189: Providing a control near the beginning of the Web page that changes the link text
- G191: Providing a link, button, or other mechanism that reloads the page without any blinking content
- G206: Providing options within the content to switch to a layout that does not require the user to scroll horizontally to read a line of text
- C7: Using CSS to hide a portion of the link text
- C22: Using CSS to control visual presentation of text
- SCR38: Creating a conforming alternate version for a web page designed with progressive enhancement


------------------------------

C30: - Using CSS to replace text with images of text and providing user interface controls to switch
Using CSS to replace text with images of text and providing user interface controls to switch

About this Technique
	- This technique relates to:
	- 1.4.5: Images of Text (Sufficient)
	- 1.4.9: Images of Text (No Exception) (Sufficient)
	- This technique applies to CSS.

Description : The objective of this technique is to demonstrate how CSS can be used to replace structured HTML text with images of text in a way that makes it possible for users to view content according to their preferences. To use this technique, an author starts by creating an HTML page that uses semantic elements to mark up the structure of the page. The author then designs two or more stylesheets for that page. One stylesheet presents the HTML text as text and the second uses CSS features to replace some of the HTML text with images of text. Finally, through the use of server-side or client-side scripting, the author provides a control that allows the user to switch between the available views. : This technique can be used to meet Success Criterion 1.4.5 or 1.4.9 if a presentation that does not include images of text is available and as long as the user interface control that is provided to allow users to switch to an alternate presentation meets the relevant criteria. Where possible, authors should deliver the presentation that does not include images of text as the default presentation. In addition, the control used to switch should be located near the beginning of the page. : A variety of "image replacement" techniques have been developed to address a variety of user agent, configuration and compatibility with assistive technology issues (See resources for more information). While there are a variety of approaches authors may use to replace text, it is important to consider compatibility with assistive technology, whether the technique will work correctly if scripting, CSS, images (or combinations of these) are turned off. Since it can be difficult to find a single solution that works in all cases, this technique recommends the use of a control that allows users to switch to a presentation that does not include an image replacement technique. : Note : This technique can be used in combination with a style switching technique to present a page that is a conforming alternate version for non-conforming content. Refer to C29 and Understanding Conforming Alternate Versions for more information.

Examples
Example 1: Replacing heading text with images of text

A design studio site uses a style switcher to allow users to view two presentations of their home page. For the default version, the heading text is replaced with images of text. A control on the page allows users to switch to a version that presents the headings as text.

The HTML component
<div id="Header"> 
  <h1><span>Pufferfish Design Studio</span></h1> 
  <h2><span>Surprising Identity and Design Solutions</span></h2> 
</div>
The CSS for the presentation that includes images of text

Note that the CSS uses positioning to place the contents of the heading elements offscreen so that the text remains available to screen reader users.

#Header h1 {
  background-image: url(pufferfish-logo.png);
  height: 195px;
  width: 290px;
  background-repeat: no-repeat;
  margin-top: 0;
  position: absolute;
}
#Header h1 span {
  position: absolute;
  left: -999em;
}
#Header h2 {
  background-image: url(beauty.png);
  background-repeat: no-repeat;
  height: 234px;
  width: 33px;
  margin-left: 8px;
  position: absolute;
  margin-top: 250px;
}
#Header h2 span {
  position: absolute;
  left: -999em;
}
The CSS for the presentation that does not include images of text
#Header h1 {
  font: normal 200%/100% Garamond, "Times New Roman", serif;
  margin-bottom: 0;
  color: #000099;
  background: #ffffff;
}
#Header h2 {
  font: normal 160%/100% Garamond, "Times New Roman", serif;
  margin-bottom: 0;
  color: #336600;
  background: #ffffff;
}

Related techniques:
- C29: Using a style switcher to provide a conforming alternate version
- F3: Failure of Success Criterion 1.1.1 due to using CSS to include images that convey important information


------------------------------

C31: - Using CSS Flexbox to reflow content
Using CSS Flexbox to reflow content

About this Technique
	- This technique relates to 1.4.10: Reflow (Sufficient).
	- This technique applies to content using technologies that support CSS.

Description : The objective of this technique is to be able to present content without introducing a horizontal scroll bar at a width equivalent to 320 CSS pixels, or a vertical scroll bar at a height equivalent to 256 CSS pixels for text intended to scroll horizontally. This is done by using layout techniques that adapt to the available viewport space. : Flexbox layouts define layout regions that reflow as needed to display the region on the screen. Although the exact layout therefore varies, the relationship of elements and the reading order remains the same when done right. This is an effective way to create designs that present well on different devices and for users with different zoom preferences. : The basic principles of flexbox layouts are to: : Define the size of layout regions using flexbox properties and media queries for specific viewport sizes, so they enlarge, shrink or wrap in the available space and respond to zoom levels;
	- Position the layout regions in the flexbox container as a row of adjacent flexbox items, which may wrap to new rows as needed in much the same way as words in a paragraph wrap. : Note : Flexbox has the possibility to cause a keyboard navigation disconnect by using the order and reverse properties. The CSS Flexible Box Layout module warns against resequencing content logic as they cause incorrect source ordering and are non-conforming.

Examples
Example 1: Medium complex flexbox layout in HTML and CSS

The following medium complex example uses HTML and CSS to create a flexbox layout. The layout regions adjust their size as the viewport is adjusted. When the total viewport width matches the width defined via media queries, columns wrap to be positioned below, rather than beside each other or vice versa.

The zoom level can be increased to 400% without requiring scrolling in more than one direction. This particular example uses percent sizes for the flex items by using the "flex-basis" property and are laid out in source order.


  <!DOCTYPE html>
  <html lang="en">
    <head>
    <meta charset="UTF-8">
    <title>Using CSS Flexbox for Reflow</title>
    <style>

    /* Reflow Styling */

    .row {
      width: 100%;
      display: flex;
      flex-flow: row wrap;
    }

    .row-nested {
      width: calc(100% + 2rem);
      margin: 0 -1rem 1rem -1rem;
    }

    .col {
      padding: 1rem;
      flex: 0 1 100%;
    }

    @media all and (min-width: 576px) {
      .col-panel {
        flex: 0 1 50%;
        padding-bottom: 0.25rem;
      }
    }

    @media all and (min-width: 992px) { 
      main {
        flex: 0 1 66.333333%;
      }
      aside {
        flex: 0 1 33.333333%;
        margin-top: 0;
      }
    }
    </style>
    </head>
    <body class="row">
      <header class="col">
        ...
      </header>
      <main class="col">
        ...
        ...     
        <div class="row row-nested">
          <div class="col col-panel">
            ...
          </div>
          <div class="col col-panel">
            ...
          </div>
        </div>
      </main>
      <aside class="col">
        ...
      </aside>
      <footer class="col">
        ...
      </footer>
    </body>
  </html>

Working example: Using CSS Flexbox for Reflow

Related techniques:


------------------------------

C32: - Using media queries and grid CSS to reflow columns
Using media queries and grid CSS to reflow columns

About this Technique
	- This technique relates to 1.4.10: Reflow (Sufficient).
	- This technique applies to CSS.

Description : The objective of this technique is to be able to present content without introducing a horizontal scroll bar at a width equivalent to 320 CSS pixels, or a vertical scroll bar at a height equivalent to 256 CSS pixels for text intended to scroll horizontally. This is done by using layout techniques that adapt to the available viewport space. : Grid layouts define layout regions that reflow as needed to display the region on the screen. Although the exact layout therefore varies, the relationship of elements and the reading order remains the same when done right. This is an effective way to create designs that present well on different devices and for users with different content-size preferences. : The basic principles of grid layouts are to: : Define the size of layout regions using grid properties and media queries for specific viewport sizes, so they enlarge, shrink or wrap in the available space and respond to zoom levels;
	- Position the layout regions in the grid container as a row of adjacent grid items, which may wrap to new rows as needed in much the same way as words in a paragraph wrap. : Note : Use of grid layout CSS can cause a keyboard navigation disconnect by making the visual layout and source-code order different. The CSS Grid Layout Module Level 1 warns against re-ordering content by grid item placement as they cause an incorrect focus order for keyboard users and others.

Examples
Example 1: Grid layout in HTML and CSS - Medium complexity

The following medium complexity example uses HTML and CSS to create a grid layout. The layout regions adjust their size as the viewport is adjusted. When the total viewport width matches the width defined via media queries, columns wrap to be positioned below, rather than beside each other or vice versa.

The zoom level can be increased to 400% without requiring scrolling in more than one direction. This particular example uses fr units as a fraction of the free space of the grid container for the grid items by using the "grid-template-columns" property and are laid out in source order.


  <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="UTF-8">
        <title>CSS: Using media queries and grid CSS to reflow columns</title>
        <style>

        /* Reflow Styling */
        header { grid-area: header; }
        main   { grid-area: main; }
        aside  { grid-area: aside; }
        footer { grid-area: footer; }

        .grid,
        .subgrid {
          display: grid;
          grid-template-columns: minmax(0, 1fr);
        }

        .grid {
          grid-template-areas:
          'header'
          'main'
          'aside'
          'footer';
          width: 100%;
        }

        .subgrid {
          width: calc(100% + 2rem);
          margin: 0 -1rem;
        }

        .grid-item,
        .subgrid-item {
          padding: 1rem;
        }

        @media all and (min-width: 576px) {
          .subgrid {
            grid-template-columns: minmax(0, 1fr) minmax(0, 1fr);
            margin-bottom: 1rem;
          }
          .subgrid-item {
            padding-bottom: 0.25rem;
          }
        }

        @media all and (min-width: 992px) { 
          .grid {
            grid-template-areas:
              'header header header'
              'main main aside'
              'footer footer footer';
            grid-template-columns: minmax(0, 1fr) minmax(0, 1fr) minmax(0, 1fr);
          }
        }

        </style>

      </head>

      <body class="grid">

        <header class="grid-item">
          ...
        </header>

        <main class="grid-item">        
          ...
          ...
          <div class="subgrid">
            <div class="subgrid-item">
              ...
            </div>
            <div class="subgrid-item">
              ...
            </div>
          </div>
        </main>

        <aside class="grid-item">
          ...
        </aside>

        <footer class="grid-item">
          ...
        </footer>

      </body>
    </html>


Working example: Using media queries and grid CSS to reflow columns

Related techniques:
- C31: Using CSS Flexbox to reflow content


------------------------------

C33: - Allowing for Reflow with Long URLs and Strings of Text
Allowing for Reflow with Long URLs and Strings of Text

About this Technique
	- This technique relates to 1.4.10: Reflow (Sufficient).
	- This technique applies to CSS and HTML.

Description : Long sets of characters without a space, such as URLs shown as content, can break reflow when the page is zoomed. The objective of this technique is to present URLs without introducing a horizontal scroll bar at a width equivalent to 320 CSS pixels or a vertical scroll bar at a height equivalent to 256 CSS pixels. This is done by using CSS techniques that adapt to the available viewport space. Note: Using a human readable text link, rather than a long URL, is better for usability and accessibility. : By default most browsers will wrap long URLs at the following characters: : "&" Ampersand
	- "/" Forward Slash
	- "-" Hyphen
	- "?" Question Mark : Sometimes these are not enough to ensure that long URLs will not overflow the viewport.

Examples
Example 1: Breaking long URLs

Using the following CSS will cause long URLs to break at appropriate places (hyphens, forward slashes, etc.) and within words without causing reflow.

List of CSS declarations used and why they are used:

overflow-wrap: break-word: Allows words to be broken and wrapped within words.
word-wrap: break-word: Allows words to be broken and wrapped within.
a {
  overflow-wrap: break-word;
  word-wrap: break-word;
}

Working Example


------------------------------

C34: - Using media queries to un-fixing sticky headers / footers
Using media queries to un-fixing sticky headers / footers

About this Technique
	- This technique relates to 1.4.10: Reflow (Advisory).
	- This technique applies to CSS and HTML.

Description : The objective of this technique is to be able to present content with sticky headers and footers when there is enough space. This is done by using min-height, max-height, and min-width media queries techniques that adapt to the available space of the viewport. : Sticky regions always stay visible in the viewport while the other content will disappear underneath when scrolling. In terms of content visibility, this is often not a problem on the desktop and on mobile devices in portrait orientation. However, when using mobile devices in landscape orientation or when zooming in on the desktop, sticky regions may block a big portion of the screen: the height of the sticky region may leave only a small part of the screen for the display of page content. : Disabling, or un-fixing sticky regions, is an effective way to allow for enough available space when users prefer different reading and zoom preferences or when using landscape mode. : Note : Be aware that sticky regions can create disadvantages for keyboard users and should therefore be used judiciously. The problem for keyboard users tabbing through a page with a fixed header is that once the page has started to scroll, tabbing backwards to reach interactive elements higher up on the page will often mean that the focus becomes invisible once it moves behind the sticky header. Users must then scroll up to be able to see the focus, something they may not necessarily be aware of. In the same way the visible focus can disappear behind a sticky footer, so users would need to scroll down to be able to see their focus position, which is a major inconvenience. : The basic approach for un-fixing sticky headers / footers is to: : Define the first sticky regions using media query min-height properties, so they get fixed or un-fixed depending on the available space;
	- Define other sticky regions using media query min-width and max-height properties for specific viewport sizes, so they get fixed or un-fixed depending on the available space, e.g. for tablets depending on the portrait or landscape position of the device.

Examples
Example 1: Un-fix sticky headers / footers in HTML and CSS

The following example uses HTML and CSS to un-fix sticky headers / footers. The sticky regions get un-fixed as the height of the viewport is limited or the orientation is changed. When the min-height property matches the viewport space defined via media queries, regions which are not sticky get fixed or vice versa. This particular example uses the CSS min-height, max-height and min-width media query properties.


<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>Using media queries to un-fix sticky headers / footers</title>
    <style>

    /* Sticky Styling */

    header { min-height: 130px; }

    @media (min-height: 480px) {
      header {
        position: -webkit-sticky;
        position: sticky;
        top: 0;
      }
    }

    @media (min-device-width: 576px) and 
    (max-device-width: 1024px) and 
    (orientation: landscape) {
      header {
        position: static;
      }
    }

    footer { min-height: 130px; }

    @media (min-height: 480px) {
      footer {
        position: sticky;
        bottom: 0;
      }
    }

    @media (min-device-width: 576px) and
    (max-device-width: 1024px) and
    (orientation: landscape)  {
      footer {
        position: static;
      }
    }

    </style>

  </head>

  <body class="grid">

    <header class="grid-item">
      ...
    </header>

    <main class="grid-item">        
      ...
    </main>

    <aside class="grid-item">
      ...
    </aside>

    <footer class="grid-item">
      ...
    </footer>

  </body>
</html>


Working example: Using media queries to un-fix sticky headers / footers


------------------------------

C35: - Allowing for text spacing without wrapping
Allowing for text spacing without wrapping

About this Technique
	- This technique relates to 1.4.12: Text Spacing (Sufficient).
	- This technique applies to content using technologies that support CSS.

Description : The objective of this technique is to allow a user to override text spacing via user stylesheet, bookmarklet, extension, or application. Increased spacing between paragraphs, lines, words, and characters benefits people with low vision or some cognitive disabilities. Content needs to allow spacing changes without loss of content or functionality by allowing the elements containing the text to expand as needed. : Where text is not intended to wrap, authors should either: : size containers to a have a value greater than the default width of the text, or
	- allow the containers to expand in the direction of text. : There is some variability in the width that words or phrases will grow to when setting the letter and word spacing. If elements must use a fixed width, a safe value is 20% wider than the default maximum width. For example, if a small text-container allows for 20 characters, allowing enough width for 24 characters should allow enough space for text-spacing to be applied. : For boxes which can expand with the text, authors can take advantage of the inline-block value of the CSS display property and not set negative margins to allow for text-spacing overrides.

Examples

When a user adapts the page to increase the text spacing, text fits within the bounds of its containing box.

Note

The ex unit has been used as as the closest available unit for character width, ex Represents the x-height of the element's font. (MDN page for CSS units). It is not perfect, different characters have different default widths.

Example 1: A box sized with space to allow for expansion

The containers are sized to a value greater than the default width of the text.

The CSS
<style>
/* Links are less than 8ex wide,
so 10ex width of each li allows for expanded letter and word width */
nav li { width: 10em; }
</style>
The HTML
<nav>
  <ul>
    <li><a href="/">Home</a></li>
    <li><a href="/contact/">Contact</a></li>
  <ul>
</nav>

If the navigation element used fix-width containers of the same size, the width would need to allow for text 20% larger than the longest word.

Example 2: A box which expands with the text size
The CSS
<style>
/* CSS containers are given a display of inline-block. No negative margins set. */
 nav li { display: inline-block; }
 </style>
The HTML
<nav>
  <ul>
    <li><a href="/">Home</a></li>
    <li><a href="/contact/">Contact</a></li>
  <ul>
</nav>


In the case of variable-width text containers for each item, the parent item may need to allow for wrapping of the items.

Working examples of #1 and #2 are available.

Related techniques:
- C36: Allowing for text spacing override


------------------------------

C36: - Allowing for text spacing override
Allowing for text spacing override

About this Technique
	- This technique relates to 1.4.12: Text Spacing (Sufficient).
	- This technique applies to content using technologies that support CSS.

Description : The objective of this technique is to allow a user to override text spacing via user stylesheet, bookmarklet, extension, or application. Increased spacing between paragraphs, lines, words, and characters benefits people with low vision or some cognitive disabilities. Content needs to allow spacing changes without loss of content or functionality, so text containers must either have room for the text to expand or the container must be able to expand. This technique will typically apply to short strings of text such as in a navigation bar, as longer strings of text are increasingly likely to require wrapping to be readable when styles are changed. : In English languages, if authors do not set the CSS height property, it can help ensure paragraphs expand. Paragraphs need to allow text to increase vertically for languages or scripts such as English which are read horizontally or to increase horizontally for languages or scripts which are read vertically.

Examples

When a user adapts the page to increase the text spacing, text fits within the bounds of its containing box.

Example 1: A paragraph expands vertically within container
The CSS
<style>
/* CSS: No height property is set.*/
</style>
The HTML
<div class="card">
  <img alt="" src="image.png">
  <h3>Heading</h3>
  <p class="lede">Long lede paragraph...</p>
</div>

None of the paragraphs on this page have a height specified, so all are effectively using this technique.

Related techniques:
- C35: Allowing for text spacing without wrapping


------------------------------

C37: - Using CSS max-width and height to fit images
Using CSS max-width and height to fit images

About this Technique
	- This technique relates to 1.4.10: Reflow (Advisory).
	- This technique applies to CSS and HTML.

Description : The objective of this technique is to be able to present images without introducing a horizontal scroll bar at a width equivalent to 320 CSS pixels, or a vertical scroll bar at a height equivalent to 256 CSS pixels for content intended to scroll horizontally. This is done by using CSS max-width and height property techniques that adapt to the available space and keep the original dimensions of the image. : Responsive layouts can add or remove columns or layout blocks, and each part of the layout can be wider or smaller at different points. This technique ensures images do not break out of their layout area, including in one-column layouts where it would cause scrolling. : The basic principles of fitting images are to: : Define the max-width property for images, and;
	- Define the height property for images, so they enlarge or shrink in the available space and respond to zoom levels. : All images require design finesse by making sure the original size fits the biggest size of the available spaces to achieve good-looking results at a wide range of viewport sizes and zoom levels.

Examples
Example 1: Fitting images in HTML and CSS

The following simple example uses HTML and CSS to create a fitting image. The layout regions adjust their size as the viewport is adjusted. The images subsequently adjust their size to fit within the layout region containers.

The zoom level can be increased to 400% without requiring scrolling in more than one direction. This particular example uses a percent size for the max-width and auto size for the height of the image to remain the original dimensions.

<style>
.img-responsive {
  max-width: 100%;
}
</style>

<div class="panel">
  <img alt="" class="img-responsive" src="...">
  ...
</div>

Working example: Using Fitting Images for Reflow


------------------------------

C38: - Using CSS width, max-width and flexbox to fit labels and inputs
Using CSS width, max-width and flexbox to fit labels and inputs

About this Technique
	- This technique relates to 1.4.10: Reflow (Sufficient).
	- This technique applies to CSS and HTML.

Description : The objective of this technique is to be able to present labels and inputs without introducing a horizontal scroll bar at a width equivalent to 320 CSS pixels for content intended to scroll vertically. When space is limited in the viewport for the label and input to sit next to each other horizontally, they will be changed to a vertical alignment. This is done by using CSS properties for width, max-width and flexbox that adapt to the available space. : Responsive layouts can add or remove columns or layout blocks, and each part of the layout can be wider or smaller at different points. This technique ensures labels and inputs do not break out of their layout area, including in one-column layouts where it would cause horizontal scrolling. : The basic approach for fitting labels and inputs is to: : Define the size of layout regions using flexbox properties and media queries for specific viewport sizes, so they enlarge, shrink or wrap in the available space and respond to zoom levels;
	- Position the layout regions in the flexbox container as a row of adjacent flexbox items, which may wrap to new rows as needed in much the same way as words in a paragraph wrap.
	- Define the width and max-width property for labels and inputs so they enlarge or shrink in the available space and respond to zoom levels. : All labels and inputs require design finesse by making sure the original size fits the biggest size of the available spaces to achieve good-looking results at a wide range of viewport sizes and zoom levels. For help on flexbox please see the MDN article on Flexbox.

Examples
Example 1: Fitting labels, inputs and flexbox layout with HTML and CSS.

The following example uses HTML and CSS to fit labels and inputs within various width containers, including the viewport. The layout regions adjust their size as the viewport is adjusted. The labels and inputs subsequently adjust their size to fit within the layout region containers.

The zoom level can be increased to 400% without requiring horizontal scrolling. This particular example uses a percent size for the width and max-width for the labels and inputs. The max-width is applied in order to fix elements spilling out of the grid in a cross-browser way, as replaced elements such as the select have intrinsic sizing.

<style>

/* Fitting Inputs Styling */

.form-group {
  display: flex;
  flex-flow: row wrap;
  margin: 0 -1rem 1rem -1rem;
}

[class*="form-col"] {
  flex: 0 1 100%;
  padding: 0 1rem;
}

@media (min-width: 576px) {
  .form-col-4 {
    flex: 0 0 33.33333%;
    max-width: 33.33333%;
  }
  
  .form-col-8 {
    flex: 0 0 66.66667%;
    max-width: 66.66667%;
  }

  .offset-form-col-4 {
    margin-left: 33.33333%;
  }
}

input {
  display: block;
  width: 100%;
}

label, select {
  display: block;
  width: 100%;
  max-width: 100%;
}

</style>

<div class="form-group">
  <div class="form-col-4">
    <label for="fname">First Name</label>
  </div>
  <div class="form-col-8">
    <input type="text" id="fname" autocomplete="given-name">
  </div>
</div>

<div class="form-group">
  <div class="form-col-4">
    <label for="lname">Last Name</label>
  </div>
  <div class="form-col-8">
    <input type="text" id="lname" autocomplete="family-name">
  </div>
</div>

<div class="form-group">
  <div class="form-col-4">
   <label for="favorite-fruit">Favorite fruit</label>
  </div>
  <div class="form-col-8">
    <select id="favorite-fruit">
      <option>Banana</option>
      <option>Pineapple</option>
      <option>Strawberry</option>
    </select>
  </div>
</div>

<div class="form-group">
  <div class="offset-form-col-4 form-col-8">
    <button type="submit">Submit</button>
  </div>
</div>



Working example: Using Adjustable Labels and Inputs for Reflow


------------------------------

C39: - Using the CSS reduce-motion query to prevent motion
Using the CSS reduce-motion query to prevent motion

About this Technique
	- This technique relates to 2.3.3: Animation from Interactions (Sufficient).
	- This technique applies to CSS which causes motion that is triggered by user interactions.

Description : The objective of this technique is to allow users to prevent animation from being displayed on Web pages, via the use of the prefers-reduced-motion CSS Media Query. : Some users experience distraction or nausea from animated content. For example, if scrolling a page causes elements to move (other than the essential movement associated with scrolling) it can trigger vestibular disorders. Enclosing the CSS that creates the animations in a media query allows people to prevent those symptoms. : A typical example is 'parallax scrolling', where backgrounds move at different rates. The movement due to scrolling the page is essential (and under the users control), but additional movement triggered by the scrolling can also trigger vestibular symptoms. : The understanding document for Motion Actuation includes links for changing the reduce motion setting.

Examples
Example 1: 'prefers-reduced-motion' CSS Media Query

Users can indicate their motion preference for interfaces in their system and the 'prefers-reduced-motion' CSS Media Query will respect that choice. CSS can then be applied to disable that motion for users that request it.

@media (prefers-reduced-motion: reduce) {
  /* CSS to disable motion goes here */
}

Working example of 'prefers-reduced-motion' CSS Media Query


------------------------------

C40: - Creating a two-color focus indicator to ensure sufficient contrast with all components
Creating a two-color focus indicator to ensure sufficient contrast with all components

About this Technique
	- This technique relates to:
	- 2.4.7: Focus Visible (Sufficient)
	- 2.4.13: Focus Appearance (Sufficient)
	- This technique applies to CSS.

Description : The objective of this technique is to create a two-color focus indicator that has sufficient contrast against any solid background color. This technique can avoid the need for multiple classes to ensure sufficient contrast of the focus indicator when viewed against different backgrounds. : Authors may apply this technique to sites that use a variety of different colored backgrounds. Although it is possible to create different colored focus indicators for different parts of a page, this can be time consuming and it can be easy to miss some components. However, if the focus indicator uses two highly-contrasting colors - a light color and a dark color - then the same indicator can be re-used, since at least one of the two colors will always have enough contrast against any background color. : As long as the two indicator colors have a contrast ratio of at least 9:1 with each other, at least one of the two colors is guaranteed to meet 3:1 contrast with any solid background color. : Note : This technique only guarantees that an indicator will pass if the entire indicator is drawn over the background, not within the boundary of the focused component, and if the entire background behind the indicator is one single, solid color. For example, if the background is an image or gradient, or if the indicator is partially overlaid on top of a different UI component, it may still be necessary to compare the indicator pixel-by-pixel against the background. : In CSS, two-color indicators can be implemented by combining the outline and box-shadow properties with the :focus or :focus-visible pseudo-classes. : Note : Avoid setting outline: none to use box-shadow on its own. User agents commonly suppress the box-shadow property in forced-color modes, so authors should avoid relying on box-shadow alone to implement focus indicators. If box-shadow only styling is required, consider combining it with an outline: 2px transparent solid property to ensure compatibility with forced-color modes.

Examples

This example demonstrates a simple implementation where focus styles are applied to all focusable components. In use on a more complex website care would need to be taken that these styles are not overridden by more specific styles.

Example 1: A thick two-color indicator

In this example, the indicator consists of two solid bands of color. Because each color band is 2 CSS pixels thick, either color band is large enough to meet the minimum indicator size requirement on its own. As long as one of the two colors has 3:1 change contrast with the pixels behind and around the focus indicator, the indicator will satisfy both the Focus Appearance and Non-Text Contrast success criteria.

*:focus {
	/* inner indicator */
	outline: 2px #F9F9F9 solid;
	outline-offset: 0;
	/* outer indicator */
	box-shadow: 0 0 0 4px #193146;
}

Working example of a thick two-color indicator

Related techniques:
- G149: Using user interface components that are highlighted by the user agent when they receive focus
- G195: Using an author-supplied, visible focus indicator
- C15: Using CSS to change the presentation of a user interface component when it receives focus
- G165: Using the default focus indicator for the platform so that high visibility default focus indicators will carry over
- C45: Using CSS :focus-visible to provide keyboard focus indication


------------------------------

C41: - Creating a strong focus indicator within the component
Creating a strong focus indicator within the component

About this Technique
	- This technique relates to 2.4.13: Focus Appearance (Sufficient).
	- This technique applies to CSS.

Description : The objective of this technique is to create a highly visible focus indicator that has sufficient contrast against the internal background color of a component.

Examples

The examples demonstrate a simple implementation where a focus styles is applied to blue background. As the indicator is contained inside the component, you can be sure it maintains contrast whatever background the component is placed on

Example 1: Inner border
HTML
<button type="button">Example button</button>
CSS

CSS to provide the indicator. It narrows the scope to buttons within the main element.

button { 
  background-color: #236AB8; /* medium-dark blue */
  color: white;
  padding: 10px;
}

main button:focus { 
  outline: 3px #fff5be solid; /* light yellow */
  outline-offset: -4px;
}
The default and focused states of the button.

Related techniques:
- G195: Using an author-supplied, visible focus indicator


------------------------------

C42: - Using min-height and min-width to ensure sufficient target spacing
Using min-height and min-width to ensure sufficient target spacing

About this Technique
	- This technique relates to 2.5.8: Target Size (Minimum) (Sufficient).
	- This technique applies to all technologies that support CSS and pointer input.

Description : The objective of this technique is to ensure that links in navigation or pagination menus will be spaced so that they fall within an area that measures at least 44 × 44 CSS pixels if the target area itself is smaller than that. The aim is to provide an adequate target clearance so the offset to adjacent targets is sufficient to prevent accidental pointer activation of adjacent targets.

Examples

The following examples can be seen as rendered versions in the working examples.

Example 1: Using a display value of inline-block, min-height, and min-width

The first example shows a situation where the targets (in this case, the linked numbers in the pagination navigation) are smaller than 44 × 44 CSS pixels. However, the list items that contain them have a minimum height and width of 44 px set, so that sufficient target spacing is assured.

Example of using CSS to ensure enough spacing around targets
The HTML
<nav aria-label="pagination">
  <ol class="pagination-1">
    <li><a class="previous">previous</a></li>
    <li><a aria-current="page">1</li>
    <li><a href="/page-2">2</a></li>
    <li><a href="/page-3">3</a></li>
    <li><a href="/page-4">4</a></li>
    <li><a href="/page-5">5</a></li>
    <li><a href="/pages-6-10">next</a></li>
  </ol>
</nav>
The CSS
.pagination-1 li {
  display: inline-block; 
  min-height: 44px;
  min-width: 44px;
}
Example 2: Using a display value of flex and min-height / width

The second example uses min-width and min-height on the targets (the linked numbers in the pagination menu) and not on the parent container, thereby meeting this target spacing Success Criterion and incidentally also the AAA Success Criterion 2.5.5 Target Size.

Example of using CSS to ensure enough spacing within targets
The HTML
<nav aria-label="pagination">
  <ol class="pagination-2">
    <li><a class="previous">previous</a></li>
    <li><a aria-current="page">1</li>
    <li><a href="/page-2">2</a></li>
    <li><a href="/page-3">3</a></li>
    <li><a href="/page-4">4</a></li>
    <li><a href="/page-5">5</a></li>
    <li><a href="/pages-6-10">next</a></li>
  </ol>
</nav>
The CSS
.pagination-2 {
  display: flex;
  flex-wrap: wrap;
}

ol.pagination-2 a {
  display: block;
  line-height: 44px;
  min-height: 44px;
  min-width: 44px;
}


------------------------------

C43: - Using CSS scroll-padding to un-obscure content
Using CSS scroll-padding to un-obscure content

About this Technique
	- This technique relates to:
	- 2.4.11: Focus Not Obscured (Minimum) (Sufficient)
	- 2.4.12: Focus Not Obscured (Enhanced) (Sufficient)
	- This technique applies to all technologies that support CSS.

Description : The objective of this technique is to ensure that user interface components (for example: links, buttons, and form fields) that are initially completely obscured by a fixed-position component can still be accessed by users. In this example, this is achieved using CSS padding and scroll-padding properties to create space underneath the site footer and allow the link in the footer to scroll into view when it is focused with a keyboard.

Examples
Example 1: Using CSS scroll-padding to un-obscure content

This example shows a situation where there is a fixed-position banner at the bottom of the screen that is covering up the site footer, which contains a link. This type of fixed-position banner is a common design for cookie-consent banners.

This example demonstrates a technique to un-obscure content underneath a fixed-position banner. To prevent the page becoming unusable at smaller screen sizes, the banner becomes un-fixed. To observe the scroll-padding effect you will need to use a viewport over 800px wide.

Working example: Using CSS scroll-padding to un-obscure content.

<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>Using CSS scroll-padding to un-obscure content</title>
  <style>
    ...

    :root{
      --height-dialog: 400px;
      --breathing-room: 20px;
      --scroll-padding: calc(var(--height-dialog) + var(--breathing-room));      
    }

    .wrapper {
      display:grid;
      gap:1rem;
      grid-template-columns:repeat(9, 1fr);
      grid-template-rows:8rem auto minmax(10rem, max-content);
      min-block-size: 100vh;
    }

    .wrapper > * {
      border:1px solid var(--black);
      padding:1rem;
    }

    header {
      grid-column:1 / -1;
      grid-row:1;
    }

    main {
      grid-column:1 / 8;
    }

    aside {
      grid-column:8 / 10;
    }

    footer {
      grid-column:1 / -1;
    }

    @media (max-width:50rem) {
      main {
       grid-column:1 / -1;
      }

      aside {
        grid-column:1 / -1;
      }
    }

    .fixed-position-banner {
      background:var(--banner-background);
      border:3px solid var(--banner-border);
      margin-block-end:0.5rem;
      padding:1rem 1rem 5rem;
      position:relative;
      width:calc(100vw - 1rem);
    }

    @media (min-width: 50rem) {
      html {
        padding-bottom:var(--height-dialog);
        scroll-padding-bottom:var(--scroll-padding);
      }

     .fixed-position-banner {
        margin-block-end:0;
        position:fixed;
        inset:auto 0 0 0;
      }
    } 
    ...
  </style>
</head>
<body>
  <dialog class="fixed-position-banner">
    <h2 tabindex="-1">Fixed-Position Banner</h2>
    <button aria-label="close fixed-position banner" class="close-banner" type="button">
      ...
    </button>
  </dialog>
  <div class="wrapper">
    <header>
      <p>Header Content</p>
    </header>
    <main>
      <h1>Main Content</h1>
    </main>
    <aside>
      <h2>Sidebar Content</h2>
      <p><a href="https://example.com">Here's an example link in the sidebar</a>.</p>
    </aside>
    <footer>
      <h2>Footer Content</h2>
      <p><a href="https://example.com">Here's an example link in the footer</a>.</p>
    </footer>
  </div>
  <script>
    window.addEventListener('DOMContentLoaded', () => {
      const elFixedBanner = document.querySelector('dialog');
      const elCloseBannerBtn = document.querySelector(".close-banner");

      elFixedBanner.show();

      const getDialogHeight = () => {
        const height = elFixedBanner.offsetHeight;
        document.documentElement.style.setProperty('--height-dialog', `${height}px`);
        document.documentElement.style.setProperty('--breathing-room', `${height ? 20 : 0}px`);
      }

      const observer = new ResizeObserver(getDialogHeight);
      observer.observe(elFixedBanner);

      elCloseBannerBtn.addEventListener("click", function(e){
        elFixedBanner.close();
      }, false);
    });
  </script>	
</body>
</html>

Related techniques:
- C32: Using media queries and grid CSS to reflow columns
- C34: Using media queries to un-fixing sticky headers / footers


------------------------------

C45: - Using CSS :focus-visible to provide keyboard focus indication
Using CSS :focus-visible to provide keyboard focus indication

About this Technique
	- This technique relates to 2.4.7: Focus Visible (Sufficient).
	- This technique applies to all technologies that support CSS.

Description : The objective of this technique is to provide custom styles for interactive elements when they receive keyboard focus. In this example, this is achieved using the CSS :focus-visible pseudo-class. : Styles defined with the regular :focus pseudo-class are applied whenever an element has focus, regardless of how it received focus. In contrast, user agents apply additional heuristics and logic to decide when to show :focus-visible styles – in particular, browsers always show these styles when a user is navigating using the keyboard, but will generally not show them as a result of a mouse/pointer interaction (with the exception of elements that also support keyboard input, such as <input> elements). This allows authors to provide strong visible focus indication for keyboard users, without forcing them on mouse/pointer users who may not necessarily want or need them (for instance, because they find them visually distracting). : This satisfies the requirement of providing a mode of operation where the keyboard focus indicator is visible. : Note : This technique is only sufficient if it uses styles that provide a visible focus indicator. : Note : There may be situations where mouse/pointer users could also benefit from having a visible focus indicator, even though they did not set focus to an element using the keyboard. As a best practice, consider still providing an explicit :focus style for these cases.

Examples
Example 1: Using CSS :focus-visible to provide keyboard focus indication

In this example, we have a standard <button> control in the HTML.

By default, in all modern browsers, this button does not show any focus indication when activated using a mouse/pointer. Browsers show their default focus outline/indication when a user sets focus on the button using Tab.

In order to make this focus indication more prominent, we use the :focus-visible pseudo-class selector to define a more intentional and pronounced focus style.

Working example: Using CSS :focus-visible to provide keyboard focus indication.

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,
              initial-scale=1, shrink-to-fit=no">
  <title>Using CSS :focus-visible to
         provide keyboard focus indication</title>
  <style>
    /* Specific :focus-visible styles */

    :focus-visible {
      outline: 5px solid red;
    }
    …
  </style>
</head>
<body>
  …
  <button>Example button</button>
  …
</body>
</html>

Related techniques:
- C15: Using CSS to change the presentation of a user interface component when it receives focus
- G165: Using the default focus indicator for the platform so that high visibility default focus indicators will carry over
- G195: Using an author-supplied, visible focus indicator
- C40: Creating a two-color focus indicator to ensure sufficient contrast with all components

--------------------------------------------------

File: failures.json
==================================================

F1: - Failure of Success Criterion 1.3.2 due to changing the meaning of content by positioning information with CSS
Failure of Success Criterion 1.3.2 due to changing the meaning of content by positioning information with CSS

About this Technique
	- This technique relates to 1.3.2: Meaningful Sequence (Failure).
	- This failure applies to all technologies that support CSS.

Description : This describes the failure condition that results when CSS, rather than structural markup, is used to modify the visual layout of the content, and the modified layout changes the meaning of the content. Using the positioning properties of CSS, content may be displayed at any position on the user's viewport. The order in which items appear on a screen may be different than the order they are found in the source document. Assistive technologies rely on the source code or other programmatically determined order to render the content in the correct sequence. Thus, it is important not to rely on CSS to visually position content in a specific sequence if this sequence results in a meaning that is different from the programmatically determined reading order.

Examples
Example 1

The following example demonstrates how CSS has been improperly used to create a set of columns. In addition, the text appears visually in the browser in a different order than in the markup.

In this example a class is defined for each object that is being positioned. When style sheets are applied, the text appears in two columns. Elements of class "menu1" (Products) and "menu2" (Locations) appear as column headings. "Telephones, Computers, and Portable MP3 Players" are listed under Products and "Idaho" and "Wisconsin" are listed under Locations (note the different order for Idaho and Wisconsin in the source code order).

Since appropriate structural elements have not been used, when style sheets are not applied, all of the text appears in one line in the source order, "Products Locations Telephones Computers Portable MP3 Players Wisconsin Idaho."

Here is the HTML content:

<div class="box">      
     <span class="menu1">Products</span>       
     <span class="menu2">Locations</span>       
     <span class="item1">Telephones</span>       
     <span class="item2">Computers</span>       
     <span class="item3">Portable MP3 Players</span>       
     <span class="item5">Wisconsin</span>       
     <span class="item4">Idaho</span>
</div>

Here are the styles for the above content:

.menu1 { 
     position: absolute; 
     top: 3em; 
     left: 0em;     
     margin: 0px; 
     font-family: sans-serif;     
     font-size: 120%; 
     color: red; 
     background-color: white 
}        
.menu2 { 
     position: absolute; 
     top: 3em; 
     left: 10em;     
     margin: 0px; 
     font-family: sans-serif;     
     font-size: 120%; 
     color: red; 
     background-color: white 
}      
.item1 { 
     position: absolute; 
     top: 7em; 
     left: 0em; 
     margin: 0px 
}      
.item2 { 
     position: absolute; 
     top: 8em; 
     left: 0em; 
     margin: 0px 
}      
.item3 { 
     position: absolute; 
     top: 9em; 
     left: 0em; 
     margin: 0px 
}      
.item4 { 
     position: absolute; 
     top: 7em; 
     left: 14em; 
     margin: 0px 
}      
.item5 { 
     position: absolute; 
     top: 8em; left: 14em; 
     margin: 0px 
}      
#box { 
     position: absolute; 
     top: 5em; 
     left: 5em 
}

A better solution for this content would be to use more meaningful elements, such as a table or a definition list.

Example of CSS positioning failure
Example of CSS positioning failure with styles removed

Related techniques:
- C6: Positioning content based on structural markup


------------------------------

F2: - Failure of Success Criterion 1.3.1 due to using changes in text presentation to convey information without using the appropriate markup or text
Failure of Success Criterion 1.3.1 due to using changes in text presentation to convey information without using the appropriate markup or text

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Failure).
	- This failure applies to all technologies that support images or presentation markup.

Description : This document describes a failure that occurs when a change in the appearance of text conveys meaning without using appropriate semantic markup. This failure also applies to images of text that are not enclosed in the appropriate semantic markup.

Examples
Example 1: Using CSS to style the p element to look like a heading

The author intended to make a heading but didn't want the look of the default HTML heading. So they used CSS to style the P element to look like a heading and they called it a heading. But they failed to use the proper HTML heading element. Therefore, the Assistive Technology could not distinguish it as a heading.

<style>
.heading1{
  font-family: Times, serif;
  font-size:200%;
  font-weight:bold;
}
</style>

<p class="heading1">Introduction</p>
<p>This introduction provides detailed information about how to use this ...</p>


Note

In this case, the proper approach would be to use CSS to style the H1 element in HTML.

Example 2: Images of text used as headings where the images are not marked up with heading tags

Chapter1.gif is an image of the words, "Chapter One" in a Garamond font sized at 20 pixels. This is a failure because at a minimum the img element should be enclosed within a header element. A better solution would be to eliminate the image and to enclose the text within a header element which has been styled using CSS.

<img src="Chapter1.gif" alt="Chapter One">
<p>Once upon a time in the land of the Web...</p>

Related techniques:
- H42: Using h1-h6 to identify headings
- H49: Using semantic markup to mark emphasized or special text
- G115: Using semantic elements to mark up structure
- G117: Using text to convey information that is conveyed by variations in presentation of text


------------------------------

F3: - Failure of Success Criterion 1.1.1 due to using CSS to include images that convey important information
Failure of Success Criterion 1.1.1 due to using CSS to include images that convey important information

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Failure).
	- This failure applies to all technologies that support CSS.

Description : The CSS background-image property provides a way to include images in the document with CSS without any reference in the HTML code. The CSS background-image property was designed for decorative purposes and it is not possible to associate text alternatives with images that are included via CSS. Text alternatives are necessary for people who cannot see images that convey important information. Therefore, it is a failure to use this property to add images to convey important information. This failure would apply equally in a case where the background image was declared in the HTML style attribute, as well as in a case where the background image declaration was created dynamically in a client script (see example 3 below). : Note : Embedding information into a background image can also cause problems for people who use alternate backgrounds in order to increase legibility and for users of high contrast mode in some operating systems. These users, would lose the information in the background image due to lack of any alternative text.

Examples
Example 1

In the following example, part of the content is contained in an image that is presented by CSS alone. In this example, the image TopRate.png is a 180 by 200 pixel image that contains the text, "19.3% APR Typical Variable."

p#bestinterest {
   padding-left: 200px;
   background: transparent url(/images/TopRate.png) no-repeat top left;
 }


It is used in this excerpt:

<p id="bestinterest">Where else would you find a better interest rate?</p>

Example 2

A book distributor uses background images to provide icons against a list of book titles to indicate whether they are new, limited, in-stock, or out of stock.

The CSS contains:

ul#booklist li {
   padding-left: 20px;
 }
 
 ul#booklist li.new {
   background: transparent url(new.png) no-repeat top left; 
 }
                             
 ul#booklist li.limited {
   background: transparent url(limited.png) no-repeat top left; 
 }
                             
 ul#booklist li.instock {
   background: transparent url(instock.png) no-repeat top left; 
 }
 
 ul#booklist li.outstock {
   background: transparent url(outstock.png) no-repeat top left; 
 }


It is used in this excerpt:

<ul id="booklist">
  <li class="new">Some book</li>
  <li class="instock">Some other book</li>
  <li class="limited">A book we desperately want to get rid of</li>
  ...
  <li class="outstock">A book you actually want </li>
</ul>
Example 3

Using the code from example 1, the same background image is declared in the HTML style attribute:

<p id="bestinterest" style="background: transparent url(/images/TopRate.png) no-repeat top left;">
   Where else would you find a better interest rate?<p>

In the following code, the background image declaration is created in a client script:

<script>
   var newP = document.createElement('p');
   var newPText = document.createTextNode('Where else would you find a better interest rate?');
   newP.appendChild(newPText);
   newP.style.background = 'transparent url(/images/TopRate.png) no-repeat top left';
   document.body.appendChild(newP);
</script>

Related techniques:
- H37: Using alt attributes on img elements


------------------------------

F4: - Failure of Success Criterion 2.2.2 due to using text-decoration:blink without a mechanism to stop it in less than five seconds
Failure of Success Criterion 2.2.2 due to using text-decoration:blink without a mechanism to stop it in less than five seconds

About this Technique
	- This technique relates to 2.2.2: Pause, Stop, Hide (Failure).
	- This failure applies to Cascading Style Sheets.

Description : CSS defines the blink value for the text-decoration property. When used, it causes any text in elements with this property to blink at a predetermined rate. This cannot be interrupted by the user, nor can it be disabled as a user agent preference. The blinking continues as long as the page is displayed. Therefore, content that uses text-decoration:blink fails the Success Criterion because blinking can continue for more than five seconds.

Examples
Example 1

A product list page uses the text-decoration:blink style on an element to draw attention to sale prices. This fails the Success Criterion because users cannot control the blink.

<p>My Great Product <span style="text-decoration:blink">Sale! $44,995!</span></p>

Related techniques:
- SCR22: Using scripts to control blinking and stop it in five seconds or less


------------------------------

F7: - Failure of Success Criterion 2.2.2 due to an object or applet that has blinking content without a mechanism to pause the content that blinks for more than five seconds
Failure of Success Criterion 2.2.2 due to an object or applet that has blinking content without a mechanism to pause the content that blinks for more than five seconds

About this Technique
	- This technique relates to 2.2.2: Pause, Stop, Hide (Failure).
	- This failure applies to technologies that support blinking content within an object, applet, or a plug-in.

Description : When content that is rendered by a plug-in or contained in an applet blinks, there may be no way for the user agent to pause the blinking. If neither the plug-in, applet, nor the content itself provides a mechanism to pause the content, the user may not have sufficient time to read the content between blinks or it may be so distracting that the user will not be able to read other content on the page.

Examples
An applet displays an advertisement on a news site. The applet blinks key words in the advertisement in order to call the user's attention to it. The blinking cannot be paused through any user agent settings and the applet does not provide a mechanism to stop it.

Related techniques:
- SCR22: Using scripts to control blinking and stop it in five seconds or less


------------------------------

F8: - Failure of Success Criterion 1.2.2 due to captions omitting some dialogue or important sound effects
Failure of Success Criterion 1.2.2 due to captions omitting some dialogue or important sound effects

About this Technique
	- This technique relates to 1.2.2: Captions (Prerecorded) (Failure).
	- This failure applies to all technologies.

Description : This describes a failure condition for all techniques involving captions. If the "caption" does not include all of the dialogue (either verbatim or in essence) as well as all important sounds then the 'Captions' are not real captions. : Note : Captions sometimes simplify the spoken text both to make it easier to read and to avoid forcing the viewer to read at very high speed. This is standard procedure and does not invalidate a caption.

Examples
Example 1

Examples of text streams that are not captions include:

text that contains the dialogue (possibly simplified dialogue) but that does not describe important sounds
text that omits dialogue during portions of the material


------------------------------

F9: - Failure of Success Criterion 3.2.5 due to changing the context when the user removes focus from a form element
Failure of Success Criterion 3.2.5 due to changing the context when the user removes focus from a form element

About this Technique
	- This technique relates to 3.2.5: Change on Request (Failure).
	- This failure applies to all technologies.

Description : This document describes a failure that occurs when removing focus from a form element, such as by moving to the next element, causes a change of context.

Examples
Example 1

Users are going through the form filling out the fields in order. When they move from the third field to the forth, the form submits.

Related techniques:
- F37: Failure of Success Criterion 3.2.2 due to launching a new window without prior warning when the selection of a radio button, check box or select list is changed
- F60: Failure of Success Criterion 3.2.5 due to launching a new window when a user enters text into an input field


------------------------------

F10: - Failure of Success Criterion 2.1.2 and Conformance Requirement 5 due to combining multiple content formats in a way that traps users inside one format type
Failure of Success Criterion 2.1.2 and Conformance Requirement 5 due to combining multiple content formats in a way that traps users inside one format type

About this Technique
	- This technique relates to 2.1.2: No Keyboard Trap (Failure).
	- This failure applies when content creates a situation where the user can enter the content using the keyboard, but cannot exit the content using the keyboard.

Description : When content includes multiple formats, one or more user agents or plug-ins are often needed in order to successfully present the content to users. For example, a page that includes HTML, SVG, SMIL and XForms may require a browser to load as many as three different plug-ins in order for a user to successfully interact with the content. Some plug-ins create a common situation in which the keyboard focus can become "stuck" in a plug-in, leaving a keyboard-only user with no way to return to the other content.

Examples
A plug-in traps the user: A user tabs into a plug-in and is unable to return to content outside the plug-in content with the keyboard. The user has to restart their browser in order to regain control and navigate to a new page and is unable to access any content that appears beyond the plug-in content.

Related techniques:
- G21: Ensuring that users are not trapped in content
- SCR20: Using both keyboard and other device-specific functions


------------------------------

F12: - Failure of Success Criterion 2.2.5 due to having a session time limit without a mechanism for saving user's input and re-establishing that information upon re-authentication
Failure of Success Criterion 2.2.5 due to having a session time limit without a mechanism for saving user's input and re-establishing that information upon re-authentication

About this Technique
	- This technique relates to 2.2.5: Re-authenticating (Failure).
	- This failure applies to sites that require user login to submit input and that terminate the session after a some period of inactivity.

Description : Web servers that require user authentication usually have a session mechanism in which a session times out after a period of inactivity from the user. This is sometimes done for security reasons, to protect users who are assumed to have left their computer exposed in a state where someone could do something harmful to them such as transfer bank funds or make an unauthorized purchase. Users with disabilities may actually still be working to complete the form as it may take them longer to complete the form than would normally be expected. Upon re-authentication, if the state of users' sessions are not restored, including all data that had been previously entered into the form, they will have to start over. And for these users, it is likely that the session will time out again before they can complete the form. This sets up a situation where a user who needs more time to complete the form can never complete it.

Examples
A user submits a form on an authenticated site after their login has expired. On submitting the form, they are prompted to log in again, and then taken to a general welcome page. The data is not processed and they must try again.
A user submits a form on an authenticated site after their login has expired. On submitting the form, they are prompted to log in again, and then taken back to the page they were on just before the login, which in this case contains the form they attempted to submit. However, the form is not populated with the data they just entered, and they must re-enter it.

Related techniques:
- G105: Saving data so that it can be used after a user re-authenticates


------------------------------

F13: - Failure of Success Criterion 1.1.1 and 1.4.1 due to having a text alternative that does not include information that is conveyed by color differences in the image
Failure of Success Criterion 1.1.1 and 1.4.1 due to having a text alternative that does not include information that is conveyed by color differences in the image

About this Technique
	- This technique relates to:
	- 1.1.1: Non-text Content (Failure)
	- 1.4.1: Use of Color (Failure)
	- This failure applies to all technologies.

Description : The objective of this technique is to describe the failure that occurs when an image uses color differences to convey information, but the text alternative for the image does not convey that information. This can cause problems for people who are blind or colorblind because they will not be able to perceive the information conveyed by the color differences.

Examples
A bar chart of sales data is provided as an image. The chart includes yearly sales figures for four employees in the Sales Department. The text alternative for the image says, "The following bar chart displays the yearly sales figures for the Sales Department. Mary sold 3.1 Million; Fred, 2.6 Million; Bob, 2.2 Million; and Andrew, 3.4 Million. The red bars indicate sales that were below the yearly quota". This text alternative fails to provide the information which is conveyed by the color red in the image. The alternative should indicate which people did not meet the sales quota rather than relying on color.

Related techniques:
- G94: Providing short text alternative for non-text content that serves the same purpose and presents the same information as the non-text content


------------------------------

F14: - Failure of Success Criterion 1.3.3 due to identifying content only by its shape or location
Failure of Success Criterion 1.3.3 due to identifying content only by its shape or location

About this Technique
	- This technique relates to 1.3.3: Sensory Characteristics (Failure).
	- This failure applies to all technologies.

Description : The objective of this technique is to show how identifying content only by its visual shape or location makes content difficult to understand and operate. When only visual identification or location is used, users with visual disabilities may find it difficult to locate content since they cannot see the screen or may perceive only a small portion of the screen at one time. Also, location of content can vary if page layout varies due to variations in font, window, or screen size.

Examples
The navigation instructions for a site state, "To go to next page, press the button to the right. To go back to previous page, press the button to the left."
A user is reading a news article in an on-line newspaper. The article contains an illustration and additional links for more information. Within the text of the article is a statement, "Please see sidebar to the left of the illustration for links to additional information." An assistive technology user would have difficulty finding the illustration and the sidebar. Some alternatives would be to include the list of links within the text; to provide an in-page link within the text which links to the sidebar; to provide a heading for the sidebar which can be used for navigation and refer to the heading in the instructions.
A user is completing an on-line survey. There are three buttons at the bottom of the survey form. The instructions state, "Press the square button to exit the survey without saving, Press the triangle button to save in-progress survey results. You may return later to complete the survey. Press the round button to submit the survey results." A screen reader user or a user unable to distinguish shapes cannot determine which button is square, triangular, or round. The buttons must have additional information to indicate their functions or their shapes.

Related techniques:
- G96: Providing textual identification of items that otherwise rely only on sensory information to be understood


------------------------------

F15: - Failure of Success Criterion 4.1.2 due to implementing custom controls that do not use an accessibility API for the technology, or do so incompletely
Failure of Success Criterion 4.1.2 due to implementing custom controls that do not use an accessibility API for the technology, or do so incompletely

About this Technique
	- This technique relates to 4.1.2: Name, Role, Value (Failure).
	- This failure applies to all technologies that support an accessibility API.

Description : When standard controls from accessible technologies are used, they usually are programmed in a way that uses and supports the accessibility API. However, when custom controls are created, it is up to the control's author to ensure that the control is correctly exposed to users via the platform's accessibility API. If this is not done, then assistive technologies will not be able to understand what the control is or how to operate it or may not even know of its existence. : Note : For technologies that support it, WAI-ARIA can be used to expose a custom control's role, name, value, states, and properties via the accessibility API for the technology. : Note : Along with ensuring custom controls are properly exposed to users via the platform's accessibility API, there are many other considerations that need to be made so the control is accessible to as many people as possible. Keyboard functionality, target size, and color contrast requirements are only a few of the additional considerations that need to be accounted for, all of which go beyond what 4.1.2 Name, Role, Value, and this technique cover.

Examples
Example 1

A music player is designed with custom controls that look like musical notes that are stretched for volume, tone etc. The programmer does not make the new control support the Accessibility API. As a result - the controls cannot be identified or controlled from AT.


------------------------------

F16: - Failure of Success Criterion 2.2.2 due to including scrolling content where movement is not essential to the activity without also including a mechanism to pause and restart the content
Failure of Success Criterion 2.2.2 due to including scrolling content where movement is not essential to the activity without also including a mechanism to pause and restart the content

About this Technique
	- This technique relates to 2.2.2: Pause, Stop, Hide (Failure).
	- This failure applies to all technologies that support visual movement or scrolling.

Description : In this failure technique, there is moving or scrolling content that cannot be paused and resumed by users. In this case, some users with low vision or cognitive disabilities will not be able to perceive the content.

Examples
A page has a scrolling news ticker without a mechanism to pause it. Some users are unable to read the scrolling content.

Related techniques:
- G4: Allowing the content to be paused and restarted from where it was paused


------------------------------

F19: - Failure of Conformance Requirement 1 due to not providing a method for the user to find the alternative conforming version of a non-conforming Web page
Failure of Conformance Requirement 1 due to not providing a method for the user to find the alternative conforming version of a non-conforming Web page

About this Technique
	- This technique is not referenced from any Understanding document.
	- This failure applies to sites that provide alternative, WCAG-conforming versions of nonconforming primary content.

Description : This failure technique describes the situation in which an alternate, conforming version of the content is provided, but there is no direct way for a user to tell that it is available or where to find it. Such content fails the Success Criterion because the user cannot find the conforming version.

Examples
A link or a search takes a user directly to one of the nonconforming pages in the Web site. There is neither an indication that an alternate page is available, nor a path to the alternate page from the nonconforming page.
Nonconforming pages on the Web site inform the user that a conforming version is available and provide a link to the home page. However, the user must search the site for the conforming version of the page, so the functionality does not meet the requirements of the Success Criterion.
A user is able to use the nonconforming Web site for most pages. But when the user is not able to access a particular page, there is no way to find the conforming version of the page.

Related techniques:
- G136: Providing a link at the beginning of a nonconforming Web page that points to a conforming alternate version


------------------------------

F20: - Failure of Success Criterion 1.1.1 and 4.1.2 due to not updating text alternatives when changes to non-text content occur
Failure of Success Criterion 1.1.1 and 4.1.2 due to not updating text alternatives when changes to non-text content occur

About this Technique
	- This technique relates to:
	- 1.1.1: Non-text Content (Failure)
	- 4.1.2: Name, Role, Value (Failure)
	- This failure applies to all technologies.

Description : The objective of this failure condition is to address situations where the non-text content is updated, but the text alternative is not updated at the same time. If the text in the text alternative cannot still be used in place of the non-text content without losing information or function, then it fails because it is no longer a text alternative for the non-text content.

Examples
Failure Example 1: A Sales chart is updated to October results, but the text alternative still describes September results.
Failure Example 2: Pictures on a home page change daily, but text alternatives are not updated at the same time.
Failure Example 3: The source attribute of images on a page is updated periodically using script, but the text alternatives are not updated at the same time.


------------------------------

F22: - Failure of Success Criterion 3.2.5 due to opening windows that are not requested by the user
Failure of Success Criterion 3.2.5 due to opening windows that are not requested by the user

About this Technique
	- This technique relates to 3.2.5: Change on Request (Failure).
	- This failure applies to all technologies.

Description : Failure due to opening new windows when the user does not expect them. New windows take the focus away from what the user is reading or doing. This is fine when the user has interacted with a piece of User Interface and expects to get a new window, such as an options dialogue. The failure comes when pop-ups appear unexpectedly.

Examples
Example 1

When a user navigates to a page, a new window appears over the existing user agent window, and the focus is moved to the new window.

Example 2

A user clicks on a link, and a new window appears. The original link has no associated text saying that it will open a new window.

Example 3

A user clicks on the body of a page and a new window appears. No indication that the area that was clicked has functionality is present.

Example 4

A user clicks on undecorated text within the page and a new window appears. The page has no visible indication that the area is functional.

Related techniques:
- SCR24: Using progressive enhancement to open new windows on user request


------------------------------

F23: - Failure of 1.4.2 due to playing a sound longer than 3 seconds where there is no mechanism to turn it off
Failure of 1.4.2 due to playing a sound longer than 3 seconds where there is no mechanism to turn it off

About this Technique
	- This technique relates to 1.4.2: Audio Control (Failure).
	- This failure applies to all technologies except those for voice interaction.

Description : This describes a failure condition for Success Criteria involving sound. If sound does not turn off automatically within 3 seconds and there is no way to turn the sound off, independently from the overall system volume level, then Success Criterion 1.4.2 would not be met. The sound would fall within this failure condition.

Examples
Example 1
A site that plays continuous background music
Example 2
A site with a narrator that lasts more than 3 seconds before stopping, and there is no mechanism to stop it.


------------------------------

F24: - Failure of Success Criterion 1.4.3, 1.4.6 and 1.4.8 due to specifying foreground colors without specifying background colors or vice versa
Failure of Success Criterion 1.4.3, 1.4.6 and 1.4.8 due to specifying foreground colors without specifying background colors or vice versa

About this Technique
	- This technique relates to:
	- 1.4.3: Contrast (Minimum) (Failure)
	- 1.4.6: Contrast (Enhanced) (Failure)
	- 1.4.8: Visual Presentation (Failure)
	- This failure applies to all technologies that allow user agents to control foreground and background colors through personal stylesheets or other means.

Description : Users with vision loss or cognitive, language and learning challenges often prefer specific foreground and background color combinations. In some cases, individuals with low vision will find it much easier to see a Web page that has white text on a black background, and they may have set their user agent to present this contrast. Many user agents make it possible for users to choose a preference about the foreground or background colors they would like to see without overriding all author-specified styles. This makes it possible for users to view pages where colors have not been specified by the author in their preferred color combination. : Unless an author specifies both foreground and background colors, then they (the author) can no longer guarantee that the user will get a contrast that meets the contrast requirements. If, for example, the author specifies, that text should be grey, then it may override the settings of the user agent and render a page that has grey text (specified by the author) on a light grey background (that was set by the user in their user agent). This principle also works in reverse. If the author forces the background to be white, then the white background specified by the author could be similar in color to the text color preference expressed by the user in their user agent settings, thus rendering the page unusable to the user. Because an author can not predict how a user may have configured their preferences, if the author specifies a foreground text color then they should also specify a background color which has sufficient contrast with the foreground and vice versa. : It is not necessary that the foreground and background colors both be defined on the same CSS rule. Since CSS color properties inherit from ancestor elements, it is sufficient if both foreground and background colors are defined either directly or through inheritance by the time that color is applied to a given element. : Note : Best practice is to include all states of the text. For example, text, link text, visited link text, link text with hover and keyboard focus, etc.

Examples
Example 1: Specifying only background color with CSS

In the example below the background color is defined on the CSS stylesheet, however the foreground color is not defined. Therefore, the example fails the Success Criterion.

<!doctype>
  <html lang="en>
  <head>
    <title>Setting the canvas background</title>
    <style>
      body {background-color:white}
    </style>
  </head>
  <body>
    <p>My background is white.</p>
  </body>
</html>
Example 2: Specifying only foreground color with CSS

In the example below the foreground color is defined on the CSS stylesheet, however the background color is not defined. Therefore, the example fails the Success Criterion.

<!doctype>
<html lang="en">
<head>
  <title>Setting the canvas foreground</title>
  <style>
    body {color:white}
  </style>
</head>
<body>
  <p>My foreground is white.</p>
</body>
</html>
Example 3: Specifying foreground color of link text with CSS

In the example below the link text (foreground) color is defined on the body element. However, the background color is not defined. Therefore, the example fails the Success Criterion.

<!doctype>
<html lang="en">
<head>
  <title>A study of population dynamics</TITLE>
  <style>
    a:link { color: red }
    a:visited { color: maroon }
    a:active { color: fuchsia }
</style>
</head>
<body>
 <p>... document body... <a href="foo.htm">Foo</a></p>
</body>
</html>

Related techniques:
- C23: Specifying text and background colors of secondary content such as banners, features and navigation in CSS while not specifying text and background colors of the main content
- C25: Specifying borders and layout in CSS to delineate areas of a Web page while not specifying text and text-background colors


------------------------------

F25: - Failure of Success Criterion 2.4.2 due to the title of a Web page not identifying the contents
Failure of Success Criterion 2.4.2 due to the title of a Web page not identifying the contents

About this Technique
	- This technique relates to 2.4.2: Page Titled (Failure).
	- This failure applies to all technologies.

Description : This describes a failure condition when the Web page has a title, but the title does not identify the contents or purpose of the Web page.

Examples
Example 1

Examples of text that are not titles include:

Authoring tool default titles, such as

"Enter the title of your HTML document here,"
"Untitled Document"
"No Title"
"Untitled Page"
"New Page 1"
Filenames that are not descriptive in their own right, such as "report.html" or "spk12.html"
Empty text
Filler or placeholder text
Example 2

A site generated using templates includes the same title for each page on the site. So the title cannot be used to distinguish among the pages.

Related techniques:
- H25: Providing a title using the title element


------------------------------

F26: - Failure of Success Criterion 1.3.3 due to using a graphical symbol alone to convey information
Failure of Success Criterion 1.3.3 due to using a graphical symbol alone to convey information

About this Technique
	- This technique relates to 1.3.3: Sensory Characteristics (Failure).
	- This failure applies to all technologies.

Description : The objective of this technique is to show how using a graphical symbol to convey information can make content difficult to comprehend. A graphical symbol may be an image, an image of text or a pictorial or decorative character symbol (glyph) which imparts information nonverbally. Examples of graphical symbols include an image of a red circle with a line through it, a "smiley" face, or a glyph which represents a check mark, arrow, or other symbol but is not the character with that meaning. : Assistive technology users may have difficulty determining the meaning of the graphical symbol. If a graphical symbol is used to convey information, provide an alternative using features of the technology or use a different mechanism that can be marked with an alternative to represent the graphical symbol. For example, an image with a text alternative can be used instead of the glyph.

Examples
Example 1: Glyphs Used to Indicate Status

A shopping cart uses two simple glyphs to indicate whether an item is available for immediate shipment. A circle indicates that the item is in stock and ready to ship. An square indicates that the item is currently on back order and not available for immediate shipment. The instructions above items refer to the circle and square as the sole means to differentiating whether an item is available.

Related techniques:
- H37: Using alt attributes on img elements
- ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used
- ARIA24: Semantically identifying a font icon with role="img"


------------------------------

F30: - Failure of Success Criterion 1.1.1 and 1.2.1 due to using text alternatives that are not alternatives (e.g., filenames or placeholder text)
Failure of Success Criterion 1.1.1 and 1.2.1 due to using text alternatives that are not alternatives (e.g., filenames or placeholder text)

About this Technique
	- This technique relates to:
	- 1.1.1: Non-text Content (Failure)
	- 1.2.1: Audio-only and Video-only (Prerecorded) (Failure)
	- This failure applies to all technologies.

Description : This describes a failure condition for all techniques involving text alternatives. If the text in the "text alternative" cannot be used in place of the non-text content without losing information or function then it fails because it is not, in fact, an alternative to the non-text content.

Examples
Example 1

Examples of text that are not text alternatives include:

placeholder text such as " " or "spacer" or "image" or "picture" etc that are put into the 'text alternative' location on images or pictures.
programming references that do not convey the information or function of the non-text content such as "picture 1", "picture 2" or "0001", "0002" or "Intro#1", "Intro#2".
filenames that are not valid text alternatives in their own right such as "Oct.jpg" or "Chart.jpg" or "sales\\oct\\top3.jpg"


------------------------------

F31: - Failure of Success Criterion 3.2.4 due to using two different labels for the same function on different Web pages within a set of Web pages
Failure of Success Criterion 3.2.4 due to using two different labels for the same function on different Web pages within a set of Web pages

About this Technique
	- This technique relates to 3.2.4: Consistent Identification (Failure).
	- This failure applies to all technologies.

Description : Components that have the same function in different Web pages are more easily recognized if they are labeled consistently. If the naming is not consistent, some users may get confused. : Note : Text alternatives that are "consistent" are not always "identical." For instance, you may have an graphical arrow at the bottom of a Web page that links to the next Web page. The text alternative may say "Go to page 4." Naturally, it would not be appropriate to repeat this exact text alternative on the next Web page. It would be more appropriate to say "Go to page 5". Although these text alternatives would not be identical, they would be consistent, and therefore would not be failures for this Success Criterion.

Examples
Example 1

One of the most common examples of using inconsistent labels for components with the same function is to use a button that says "search" in one page and to use a button that says "find" on another page when they both serve the identical function.

Example 2

An online authoring tool that uses a button with "Save page" on one page and "Save" on another page, in both cases for the same function.


------------------------------

F32: - Failure of Success Criterion 1.3.2 due to using white space characters to control spacing within a word
Failure of Success Criterion 1.3.2 due to using white space characters to control spacing within a word

About this Technique
	- This technique relates to 1.3.2: Meaningful Sequence (Failure).
	- This failure applies to all technologies.

Description : The objective of this technique is to describe how using white space characters, such as space, tab, line break, or carriage return, to format individual words visually can be a failure to present meaningful sequences properly. When blank characters are inserted to control letter spacing within a word, they may change the interpretation of the word or cause it not to be programmatically recognized as a single word. : Inserting white space characters into an initialism is not an example of this failure, since the white space does not change the interpretation of the initialism and may make it easier to understand. : The use of white space between words for visual formatting is not a failure, since it does not change the interpretation of the words.

Examples
Example 1: Failure due to adding white space in the middle of a word

This example has white spaces within a word to space out the letters in a heading. Screen readers may read each letter individually instead of the word "Welcome."

<h1>W e l c o m e</h1>


&nbsp; can also be used to add white space, producing similar failures:

<h1>H&nbsp;E&nbsp;L&nbsp;L&nbsp;O</h1>
Example 2: White space in the middle of a word changing its meaning

In Japanese, Han characters (Kanji) may have multiple readings that mean very different things. In this example, the word is read incorrectly because screen readers may not recognize these characters as a word because of the white space between the characters. The characters mean "Tokyo," but screen readers say "Higashi Kyo".

<h1>東　京</h1>
Example 3: Using line break characters to format vertical text

In the row header cell of a data table containing Japanese text, authors often create vertical text by using line break characters. However screen readers are not able to read the words in vertical text correctly because the line breaks occur within the word. In the following example, "東京都"(Tokyo-to) will be read "Higashi Kyo Miyako".

<table>
   <caption>表1.　都道府県別一覧表</caption>
   <tr>
     <td></td>
     <th scope="col">（見出しセル 1.）</th>
     <th scope="col">（見出しセル 2.）</th>
   </tr>
   <tr>
     <th scope="row">東<br />京<br />都</th>
     <td>（データセル 1.）</td>
     <td>（データセル 2.）</td>
   </tr>
   ...
</table>

Related techniques:
- C8: Using CSS letter-spacing to control spacing within a word


------------------------------

F33: - Failure of Success Criterion 1.3.1 and 1.3.2 due to using white space characters to create multiple columns in plain text content
Failure of Success Criterion 1.3.1 and 1.3.2 due to using white space characters to create multiple columns in plain text content

About this Technique
	- This technique relates to:
	- 1.3.1: Info and Relationships (Failure)
	- 1.3.2: Meaningful Sequence (Failure)
	- This failure applies to all technologies.

Description : The objective of this technique is to describe how using white space characters, such as space, tab, line break, or carriage return, to format columns of data in text content is a failure to use structure properly. Assistive technologies will interpret content in the reading order of the current language. Using white space characters to create multiple columns does not provide the information in a natural reading order. Thus, the assistive technology user will not be presented with the information in an understandable manner. : Plain text is not suitable for displaying multiple columns of text. Modify the content to present the data in a different layout. Alternatively, use a technology that provides structural elements to represent columnar data.

Examples
Example 1

The following example incorrectly uses white space characters to format a paragraph into a two column format.

Web Content Accessibility Guidelines      including blindness and low vision, 
2.0 (WCAG 2.0) covers a wide range of     deafness and hearing loss, learning 
issues and recommendations for making     difficulties, cognitive limitations, limited 
Web content more accessible. This         movement, speech difficulties, and 
document contains principles,             others. Following these guidelines will 
guidelines, Success Criteria, benefits,   also make your Web content more 
and examples that define and explain      accessible to the vast majority of users, 
the requirements for making Web-based     including older users. It will also enable
information and applications accessible.  people to access Web content using 
"Accessible" means usable to a wide       many different devices - including a 
range of people with disabilities,        wide variety of assistive technologies.


If this table was to be interpreted and spoken by a screen reader it would speak the following lines:

Web Content Accessibility Guidelines including blindness and low vision,
2.0 (WCAG 2.0) covers a wide range of deafness and hearing loss, learning
issues and recommendations for making difficulties, cognitive limitations, limited
Web content more accessible. This movement, speech difficulties, and
(additional lines eliminated for brevity)

If the text were reflowed, or changed from a fixed to a variable font, or increased in size until lines no longer fit on the page, similar interpretation issues would arise in the visual presentation.


------------------------------

F34: - Failure of Success Criterion 1.3.1 and 1.3.2 due to using white space characters to format tables in plain text content
Failure of Success Criterion 1.3.1 and 1.3.2 due to using white space characters to format tables in plain text content

About this Technique
	- This technique relates to:
	- 1.3.1: Info and Relationships (Failure)
	- 1.3.2: Meaningful Sequence (Failure)
	- This failure applies to all technologies.

Description : The objective of this technique is to describe how using white space characters, such as space, tab, line break, or carriage return, to format tables in text content is a failure to use structure properly. When tables are created in this manner there is no way to indicate that a cell is intended to be a header cell, no way to associate the table header cells with the table data cells, or to navigate directly to a particular cell in a table. : In addition, assistive technologies will interpret content in the reading order of the current language. Using white space to organize data in a visual table does not provide the information in a natural reading order in the source of the document. Thus, the assistive technology user will not be presented with the information in a logical reading order. : Plain text is not suitable for displaying complex information like tables because the structure of the table cannot be perceived. Rather than using visual formatting to represent tabular relations, tabular information would need to be presented using a different technology or presented linearly. (See Presenting tabular information in plain text)

Examples
Example 1

The following example incorrectly uses white space to format a Menu as a visual table.

Menu
         Breakfast        Lunch           Dinner

Monday   2 fried eggs    tomato soup     garden salad
         bacon           hamburger       Fried Chicken
         toast           onion rings     green beans
                         Oatmeal cookie  mashed potatoes

Tuesday   Pancakes       vegetable soup  Caesar salad
          sausage        hot dogs        Spaghetti with meatballs
          orange juice   potato salad    Italian bread
                         brownie         ice cream


If this table was to be interpreted and spoken by a screen reader it would speak the following lines:

Menu
Breakfast Lunch Dinner
Monday 2 fried eggs tomato soup garden salad
bacon hamburger Fried Chicken
toast onion rings green beans
Oatmeal cookie mashed potatoes

This reading order does not make sense since there is no structure in the table for the assistive technology to identify it as a table. If the text were reflowed, or changed from a fixed to a variable font, or increased in size until lines no longer fit on the page, similar issues would arise in the visual presentation.

Related techniques:
- H51: Using table markup to present tabular information


------------------------------

F36: - Failure of Success Criterion 3.2.2 due to automatically submitting a form and presenting new content without prior warning when the last field in the form is given a value
Failure of Success Criterion 3.2.2 due to automatically submitting a form and presenting new content without prior warning when the last field in the form is given a value

About this Technique
	- This technique relates to 3.2.2: On Input (Failure).
	- This failure applies to HTML.

Description : Forms are frequently designed so that they submit automatically when the user has filled in all the fields, or when focus leaves the last field. There are two problems with this approach. First is that a disabled user who needs more context may move focus away from the field to the directions on how to fill in the form, or to other text, accidentally submitting the form. The other is that, with some form elements, the value of the field changes as each item is navigated with the keyboard, again accidentally submitting the form. It is better to rely on the standard form behavior of the submit button and enter key.

Examples
Example 1

This failure example submits a form when the user leaves the last field of a three-field telephone number form. The form will submit if the user leaves the field after editing it, even navigating backwards in the tab order. Developers should not use this method to submit a form, and should instead use a submit button, or rely on the form's default behavior of submitting when the user hits enter in a text field.

<form method="get" id="form1">
   <input type="text" name="text1" size="3" maxlength="3"> - 
   <input type="text" name="text2" size="3" maxlength="3"> - 
   <input type="text" name="text3" size="4" maxlength="4" onchange="form1.submit();">
 </form>
Example 2

This is a example that submits a form when the user selects an option from the menu when there is no warning of this behavior in advance. The form will submit as soon as an item from the menu is selected. A user using a keyboard will not be able to navigate past the first item in the menu. Blind users and users with hand tremors can easily make a mistake on which item on the dropdown menu to choose and they are taken to the wrong destination before they can correct it.

<form method="get" id="form2">
   <input type="text" name="text1">
    <select name="select1" onchange="form2.submit();">
      <option>one</option>
      <option>two</option>
      <option>three</option>
      <option>four</option>
    </select>
  </form>


------------------------------

F37: - Failure of Success Criterion 3.2.2 due to launching a new window without prior warning when the selection of a radio button, check box or select list is changed
Failure of Success Criterion 3.2.2 due to launching a new window without prior warning when the selection of a radio button, check box or select list is changed

About this Technique
	- This technique relates to 3.2.2: On Input (Failure).
	- This failure applies to HTML.

Description : This document describes a failure that occurs when changing the selection of a radio button, a check box or an item in a select list causes a new window to open. It is possible to use scripting to create an input element that causes a change of context (submit the form, open a new page, a new window) when the element is selected. Developers can instead use a submit button (see Providing a submit button to initiate a change of context) or clearly indicate the expected action.

Examples
Example 1

The example below fails the Success Criterion because it processes the form when a radio button is selected instead of using a submit button.

<script> 
   function goToMirror(theInput) {
    var mirrorSite = "https://download." + theInput.value + "/"; 
    window.open(mirrorSite); 
   }
</script>
...
<form name="mirror_form" id="mirror_form" action="" method="get">
  <p>Please select a mirror download site:</p> 
  <p> 
    <input type="radio" onclick="goToMirror(this);" name="mirror" 
     id="mirror_belnet" value="belnet.be" /> 
    <label for="mirror_belnet">belnet (<abbr>BE</abbr>)</label><br /> 
    <input type="radio" onclick="goToMirror(this);" name="mirror" 
     id="mirror_surfnet" value="surfnet.nl" /> 
    <label for="mirror_surfnet">surfnet (<abbr>NL</abbr>)</label><br /> 
    <input type="radio" onclick="goToMirror(this);" name="mirror" 
     id="mirror_puzzle" value="puzzle.ch" /> 
    <label for="mirror_puzzle">puzzle (<abbr>CH</abbr>)</label><br /> 
    <input type="radio" onclick="goToMirror(this);" name="mirror" 
     id="mirror_voxel" value="voxel.com" /> 
    <label for="mirror_voxel">voxel (<abbr>US</abbr>)</label><br /> 
  </p> 
</form>


------------------------------

F38: - Failure of Success Criterion 1.1.1 due to not marking up decorative images in HTML in a way that allows assistive technology to ignore them
Failure of Success Criterion 1.1.1 due to not marking up decorative images in HTML in a way that allows assistive technology to ignore them

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Failure).
	- This failure applies to HTML.

Description : This describes a failure condition for text alternatives for images that should be ignored by AT. If there is no alt attribute at all assistive technologies are not able to ignore the non-text content. The alt attribute must be provided and have a null value (i.e., alt="" ) to avoid a failure of this Success Criterion. : This describes a failure condition for text alternatives for images that should be ignored by assistive technology (AT). If an image has the attribute role="presentation", it will be ignored by AT. However, if it does not have role="presentation", and if there is no alt attribute at all assistive technologies are not able to ignore the image. For decorative images which need to be ignored by AT, either role="presentation" must be used or the alt attribute must be provided and have a null value (i.e., alt="") to avoid a failure of this Success Criterion.

Examples
Decorative images that have no alt attribute and no role attribute


------------------------------

F39: - Failure of Success Criterion 1.1.1 due to providing a text alternative that is not null (e.g., alt="spacer" or alt="image") for images that should be ignored by assistive technology
Failure of Success Criterion 1.1.1 due to providing a text alternative that is not null (e.g., alt="spacer" or alt="image") for images that should be ignored by assistive technology

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Failure).
	- This failure applies to HTML.

Description : This technique describes a failure condition for images that should be ignored by assistive technologies. A text alternative for an image should convey the meaning of the image. When an image is used for decoration, spacing or other purpose that is not part of the meaningful content in the page then the image has no meaning and should be ignored by assistive technologies. : Providing a null text alternative (i.e., alt="" ) will allow assistive technology to ignore the image and avoid a failure of this Success Criterion.

Examples
Example 1: Decorative images that have no alt attribute

An image is used to create a blank space between content, where the spacing itself is not meaningful to the content. The image has an alt text value of "spacer". This image fails the Success Criterion because the text alternative does not serve an equivalent purpose. The image is meant to be ignored but its alternative text "spacer" is announced by screen readers and displayed in some alternate color schemes.

<div>
  Tree type: <img src="spacer.gif" width="100" height="1" alt="spacer">
  Cedrus deodara
</div>

Related techniques:
- H37: Using alt attributes on img elements
- C9: Using CSS to include decorative images
- F38: Failure of Success Criterion 1.1.1 due to not marking up decorative images in HTML in a way that allows assistive technology to ignore them


------------------------------

F40: - Failure due to using meta redirect with a time limit
Failure due to using meta redirect with a time limit

About this Technique
	- This technique relates to:
	- 2.2.1: Timing Adjustable (Failure)
	- 2.2.4: Interruptions (Failure)
	- 3.2.5: Change on Request (Failure)
	- This failure applies to all pages.

Description : meta http-equiv content="{time} url=..." is often used to automatically redirect users. When this occurs after a time delay, it is an unexpected change of context that may interrupt the user. : It is acceptable to use the meta element to create a redirect when the time-out is set to zero, since the redirect is instant and will not be perceived as a change of context. However, it is preferable to use server-side methods to accomplish this. See Implementing automatic redirects on the server side instead of on the client side.

Examples
Example 1

The page below is a failure because it will redirect to the URI https://www.example.com/newpage after a time limit of 5 seconds.

<!doctype>
<html lang="en">
<head>
  <title>Do not use this!</title>     
  <meta http-equiv="refresh" content="5; url=https://www.example.com/newpage">
</head>   
<body>     
  <p>
    If your browser supports Refresh, you'll be transported to our
    <a href="https://www.example.com/newpage">new site</a> in 5 seconds,
    otherwise select the link manually.     
  </p>   
</body> 
</html>

Related techniques:
- SVR1: Implementing automatic redirects on the server side instead of on the client side
- H76: Using meta refresh to create an instant client-side redirect


------------------------------

F41: - Failure of Success Criterion 2.2.1, 2.2.4, and 3.2.5 due to using meta refresh to reload the page
Failure of Success Criterion 2.2.1, 2.2.4, and 3.2.5 due to using meta refresh to reload the page

About this Technique
	- This technique relates to:
	- 2.2.1: Timing Adjustable (Failure)
	- 2.2.4: Interruptions (Failure)
	- 3.2.5: Change on Request (Failure)
	- This failure applies to HTML.

Description : meta http-equiv of refresh is often used to periodically refresh pages or to redirect users to another page. If the time interval is too short, and there is no way to turn auto-refresh off, people who are blind will not have enough time to make their screen readers read the page before the page refreshes unexpectedly and causes the screen reader to begin reading at the top. Sighted users may also be disoriented by the unexpected refresh.

Examples
Example 1

This is a deprecated example that changes the user's page at regular intervals. Content developers should not use this technique to simulate "push" technology. Developers cannot predict how much time a user will require to read a page; premature refresh can disorient users. Content developers should avoid periodic refresh and allow users to choose when they want the latest information. (The number in the content attribute is the refresh interval in seconds.)

<!doctype>
<html lang="en">
<head>     
  <title>HTML Techniques for WCAG 2</title>     
  <meta http-equiv="refresh" content="60" />   
</head>
<body>
  ...     
</body> 
</html>


------------------------------

F42: - Failure of Success Criteria 1.3.1, 2.1.1, 2.1.3, or 4.1.2 when emulating links
Failure of Success Criteria 1.3.1, 2.1.1, 2.1.3, or 4.1.2 when emulating links

About this Technique
	- This technique relates to:
	- 1.3.1: Info and Relationships (Failure)
	- 2.1.1: Keyboard (Failure)
	- 4.1.2: Name, Role, Value (Failure)
	- This failure applies to HTML.

Description : This failure occurs when JavaScript event handlers are attached to elements to emulate links. A link created in this manner cannot be tabbed to from the keyboard and does not gain keyboard focus like other controls and/or links. If scripting events are used to emulate links, user agents including assistive technology may not be able to identify the links in the content as links. They may be recognized as interactive controls but still not recognized as links. Such elements do not appear in the links list generated by user agents or assistive technology. : Note : It is possible to use the ARIA role attribute to identify an anonymous element as link control for assistive technologies. However, best practice for ARIA calls for making use of native elements whenever possible, so the use of the role attribute to identify anonymous elements as links is not recommended. : The a and area elements are intended to mark up links.

Examples
Example 1: Scripting a span element

Scripted event handling is added to a span element so that it functions as a link when clicked with a mouse. Assistive technology does not recognize this element as a link.

<span onclick="location.href='newpage.html'">Fake link</span>
Example 2: Scripting an img element

Scripted event handling is added to an img element so that it functions as a link when clicked with a mouse. Assistive technology does not recognize this element as a link.

<img src="go.gif" alt="go to the new page" onclick="location.href='newpage.html'">

Example 3: Scripting an img element, with keyboard support

Scripted event handling is added to an img element so that it functions as a link. In this example, the link functionality can be invoked with the mouse or via the Enter key if the user agent includes the element in the tab chain. Nevertheless, the element will not be recognized as a link.

function doNav(url){
  window.location.href = url;
}
   
function doKeyPress(url){
  //if the enter key was pressed
  if (window.event.type == "keypress" && window.event.keyCode == 13){
    doNav(url);
  }
}

The markup for the image is:

<p>
  <img src="bargain.jpg"
  tabindex="0" 
  alt="View Bargains"
  onclick="doNav('viewbargains.html');"
  onkeypress="doKeyPress('viewbargains.html');">
</p>
Example 4: Scripting a div element

This example uses script to make a div element behave like a link. Although the author has provided complete keyboard access and separated the event handlers from the markup to enable repurposing of the content, the div element will not be recognized as a link by assistive technology.

window.onload = init;
function init(){
  var objAnchor = document.getElementById('linklike');
  
  objAnchor.onclick = function(event){return changeLocation(event,
   'surveyresults.html');};
      objAnchor.onkeypress = function(event){return changeLocation(event,
   'surveyresults.html');};
}
   
function changeLocation(objEvent, strLocation){
  var iKeyCode;
   
  if (objEvent && objEvent.type == 'keypress'){
    if (objEvent.keyCode){
      iKeyCode = objEvent.keyCode;
    }
    else if (objEvent.which){
      iKeyCode = objEvent.which;
    }
  if (iKeyCode != 13 && iKeyCode != 32){
    return true;
    }
  }
  window.location.href = strLocation;
}

The markup for the div element is:

<div id="linklike">View the results of the survey.</div>

Related techniques:
- F59: Failure of Success Criterion 4.1.2 due to using script to make div or span a user interface control in HTML without providing a role for the control
- G115: Using semantic elements to mark up structure


------------------------------

F43: - Failure of Success Criterion 1.3.1 due to using structural markup in a way that does not represent relationships in the content
Failure of Success Criterion 1.3.1 due to using structural markup in a way that does not represent relationships in the content

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Failure).
	- This failure applies to HTML.

Description : The objective of this technique is to describe a failure that occurs when structural markup is used to achieve a presentational effect, but indicates relationships that do not exist in the content. This is disorienting to users who are depending on those relationships to navigate the content or to understand the relationship of one piece of the content to another. Note that the use of HTML tables for layout is not an example of this failure as long as the layout table does not include improper structural markup such as <th> or <caption> elements. : Note : Though an element's semantic meaning is generally exposed to AT, the WAI-ARIA presentation role can be used to suppress the native semantics of an element so that they are not mapped to the accessibility API. Setting an element's role to presentation may avoid this failure by hiding that element's semantics from the user.

Examples
Example 1: A heading used only for visual effect

In this example, a heading element is used to display an address in a large, bold font. The address does not identify a new section of the document, however, so it should not be marked as a heading.

<p>Interested in learning more? Write to us at</p> 
<h4>3333 Third Avenue, Suite 300 · New York City</h4>
<p>And we'll send you the complete informational packet absolutely Free!</p>
Example 2: Using heading elements for presentational effect

In this example, heading markup is used in two different ways: to convey document structure and to create visual effects. The h1 and h2 elements are used appropriately to mark the beginning of the document as a whole and the beginning of the abstract. However, the h3 and h4 elements between the title and the abstract are used only for visual effect — to control the fonts used to display the authors' names and the date.

<h1>Study on the Use of Heading Elements in Web Pages</h1>
<h3>Joe Jones and Mary Smith<h3>
<h4>March 14, 2006</h4>
<h2>Abstract</h2>
<p>A study was conducted in early 2006 ...</p>
Example 3: Using blockquote elements to provide additional indentation

The following example uses blockquote for text that is not a quotation to give it prominence by indenting it when displayed in graphical browsers.

<p>After extensive study of the company Web site, the task force identified 
   the following common problem.</p>
   
<blockquote>
  <p>The use of markup for presentational effects made Web 
   pages confusing to screen reader users.</p>
</blockquote>
   
<p>The committee lists particular examples of the problems 
  introduced by this practice below.</p>
Example 4: Using the fieldset and legend elements to give a border to text
<fieldset>
  <legend>Bargain Corner</legend>
  <p>Buy today, and save 20%</p>
</fieldset>

Related techniques:
- F46: Failure of Success Criterion 1.3.1 due to using th elements, … layout tables
- G115: Using semantic elements to mark up structure
- H39: Using caption elements to associate data table captions with data tables
- H42: Using h1-h6 to identify headings


------------------------------

F44: - Failure of Success Criterion 2.4.3 due to using tabindex to create a tab order that does not preserve meaning and operability
Failure of Success Criterion 2.4.3 due to using tabindex to create a tab order that does not preserve meaning and operability

About this Technique
	- This technique relates to 2.4.3: Focus Order (Failure).
	- This failure applies to HTML.

Description : This document describes a failure that occurs when the tab order does not follow logical relationships and sequences in the content. : Focusable elements like links and form elements have a tabindex attribute. The elements receive focus in ascending order of the value of the tabindex attribute. When the values of the tabindex attribute are assigned in a different order than the relationships and sequences in the content, the tab order no longer follows the relationships and sequences in the content. : One of the most common causes of this failure occurs when editing a page where tabindex has been used. It is easy for the tab order and the content order to fall out of correspondence when the content is edited but the tabindex attributes are not updated to reflect the changes to the content.

Examples
Example 1

The following example incorrectly uses tabindex to specify an alternative tab order:

<ol>
  <li><a href="main.html" tabindex="1">Homepage</a></li>
  <li><a href="chapter1.html" tabindex="4">Chapter 1</a></li>
  <li><a href="chapter2.html" tabindex="3">Chapter 2</a></li>
  <li><a href="chapter3.html" tabindex="2">Chapter 3</a></li>
</ol>

If this list is navigated by the tab key, the list is navigated in the order Homepage, chapter 3, chapter 2, chapter 1, which does not follow the sequence in the content.

Example 2

The tab order has been set explicitly in a Web page by providing tabindex attributes for all fields. Later, the page is modified to add a new field in the middle of the page, but the author forgets to add a tabindex attribute to the new field. As a result, the new field is at the end of the tab order.


------------------------------

F46: - Failure of Success Criterion 1.3.1 due to using th elements, caption elements, or non-empty summary attributes in layout tables
Failure of Success Criterion 1.3.1 due to using th elements, caption elements, or non-empty summary attributes in layout tables

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Failure).
	- This failure applies to HTML.

Description : The objective of this technique is to describe a failure that occurs when a table used only for layout includes either th elements, a summary attribute, or a caption element. This is a failure because it uses structural (or semantic) markup only for presentation. The intent of the HTML table elements is to present data. : Although not commonly used in a layout table, the following structural markup would also be failures of Success Criterion 1.3.1 if used in a layout table: : headers attributes
	- scope attributes : Assistive technologies use the structure of an HTML table to present data to the user in a logical manner. The th element is used to mark the column and row headers of the table. A screen reader uses the information in th elements to speak the header information that changes as the user navigates the table. The summary attribute on the table element provides a textual description of the table that describes its purpose and function. Assistive technologies make the summary attribute information available to users. The caption element is part of the table and identifies the table. : Although WCAG 2 does not prohibit the use of layout tables, CSS-based layouts are recommended in order to retain the defined semantic meaning of the HTML table elements and to conform to the coding practice of separating presentation from content. When a table is used for layout purposes the th element should not be used. Since the table is not presenting data there is no need to mark any cells as column or row headers. Likewise, there is no need for an additional description of a table which is only used to layout content. Do not include a summary attribute and do not use the summary attribute to describe the table as, for instance, "layout table". When spoken, this information does not provide value and will only distract users navigating the content via a screen reader. Empty summary attributes are acceptable on layout tables, but not recommended.

Examples
Example 1

Here is a simple example that uses a table to layout content in a three column format. The navigation bar is in the left column, the main content in the middle column, and an additional sidebar is on the right. At the top is a page title. The example marks the page title as <th>.

<table>
  <tr>
    <th colspan=3>Page Title</th>
  </tr>
  <tr>
    <td><div>navigation content</div></td>
    <td><div>main content</div></td>
    <td><div>right sidebar content</div></td>
  </tr>
  <tr>
    <td colspan=3>footer</td>
  </tr>
</table>

Related techniques:
- H39: Using caption elements to associate data table captions with data tables
- H51: Using table markup to present tabular information


------------------------------

F47: - Failure of Success Criterion 2.2.2 due to using the blink element
Failure of Success Criterion 2.2.2 due to using the blink element

About this Technique
	- This technique relates to 2.2.2: Pause, Stop, Hide (Failure).
	- This failure applies to HTML.

Description : The blink element, while not part of the official HTML specification, is supported by many user agents. It causes any text inside the element to blink at a predetermined rate. This cannot be interrupted by the user, nor can it be disabled as a preference. The blinking continues as long as the page is displayed. Therefore, content that uses blink fails the Success Criterion because blinking can continue for more than three seconds.

Examples
Example 1

A product list page uses the blink element to draw attention to sale prices. This fails the Success Criterion because users cannot control the blink.

<p>My Great Product <blink>Sale! $44,995!</blink></p>


------------------------------

F48: - Failure of Success Criterion 1.3.1 due to using the pre element to markup tabular information
Failure of Success Criterion 1.3.1 due to using the pre element to markup tabular information

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Failure).
	- This failure applies to HTML.

Description : This document describes a failure caused by use of the HTML pre element to markup tabular information. The pre element preserves only visual formatting. If the pre element is used to markup tabular information, the visually implied logical relationships between the table cells and the headers are lost if the user cannot see the screen or if the visual presentation changes significantly. : Instead, the HTML table element is intended to present tabular data. Assistive technologies use the structure of an HTML table to present data to the user in a logical manner. This structure is not available when using the pre element.

Examples
Example 1: A schedule formatted with tabs between columns
<pre>
         Monday   Tuesday     Wednesday      Thursday         Friday
8:00-
9:00	          Meet with Sam
9:00-
10:00    		      Dr. Williams   Sam again        Leave for San Antonio
</pre>
Example 2: Election results displayed using preformatted text
<pre>
         CIRCUIT COURT JUDGE BRANCH 3
                                                           W
                                                            R
                                                   M R E     I
                                                    A . L     T
                                              M L    R   B     E
                                               I A    Y   E     -
                                                K N        R     I
                                                 E G        T     N
                                                -----   -----   -----
         0001 TOWN OF ALBION WDS 1-2               22      99       0
         0002 TOWN OF BERRY WDS 1-2                52     178       0
         0003 TOWN OF BLACK EARTH                  16      49       0
         0004 TOWN OF BLOOMING GROVE WDS 1-3       44     125       0
         0005 TOWN OF BLUE MOUNDS                  33     117       0
         0006 TOWN OF BRISTOL WDS 1-3             139     639       1
         0007 TOWN OF BURKE WDS 1-4                80     300       0
         0008 TOWN OF CHRISTIANA WDS 1-2           22      50       0
</pre>

Related techniques:
- H51: Using table markup to present tabular information


------------------------------

F49: - Failure of Success Criterion 1.3.2 due to using an HTML layout table that does not make sense when linearized
Failure of Success Criterion 1.3.2 due to using an HTML layout table that does not make sense when linearized

About this Technique
	- This technique relates to 1.3.2: Meaningful Sequence (Failure).
	- This failure applies to HTML.

Description : Although WCAG 2 does not prohibit the use of layout tables, CSS-based layouts are recommended in order to retain the defined semantic meaning of the HTML table elements and to conform to the coding practice of separating presentation from content. If a layout table is used, however, it is important that the content make sense when linearized. : This failure occurs when a meaningful sequence of content conveyed through presentation is lost because HTML tables used to control the visual placement of the content do not “linearize" correctly. Tables present content in two visual dimensions, horizontal and vertical. However, screen readers present this two-dimensional content in linear order of the content in the source, beginning with the first cell in the first row and ending with the last cell in the last row. The screen reader reads the table from top to bottom, reading the entire contents of each row before moving to the next row. The complete content of each cell in each row is spoken—including the complete content of any table nested within a cell. This is called linearization. : Suppose that a Web page is laid out using a table with 9 columns and 22 rows. The screen reader speaks the content of the cell at Column 1, Row 1 followed by the cells in columns 2, 3, 4 and so on to column 9. However, if any cell contains a nested table, the screen reader will read the entire nested table before it reads the next cell in the original (outer) table. For example, if the cell at column 3, row 6 contains a table with 6 columns and 5 rows, all of those cells will be read before Column 4, Row 6 of the original (outer) table. As a result, the meaningful sequence conveyed through visual presentation may not be perceivable when the content is spoken by a screen reader.

Examples
Example 1: A layout table that does not linearize correctly

An advertisement makes clever use of visual positioning, but changes meaning when linearized.

<table>
  <tr>
    <td><img src="logo.gif" alt="XYZ mountaineering"></td>
    <td rowspan="2" valign="bottom">top!</td>
  </tr>
  <tr>
    <td>XYZ gets you to the</td>
  </tr>
</table>

The reading order from this example would be:

XYZ mountaineering top!
XYZ gets you to the
Example 2: A layout table that separates a meaningful sequence when linearized

A Web page from a museum exhibition positions a navigation bar containing a long list of links on the left side of the page. To the right of the navigation bar is an image of one of the pictures from the exhibition. To the right of the image is the kind of "placard" text you'd see on the wall next to the object if you were at the museum. Below that text is a heading that says "Description," and below that heading is a description of the image. The image, placard text, Description heading, and text of the description form a meaningful sequence.

A layout table is used to position the elements of the page. The links in the navigation bar are split into different cells in the leftmost column.

<table>
  <tr>
    <td><a href="#">Link 1</a></td>
    <td rowspan="20"><img src="img.png" alt="Museum Picture"></td>
    <td rowspan="6"><img src="placard.png" alt="Placard text"></td> 
  </tr> 
  <tr>
    <td><a href="#">Link 2</a></td>
  </tr>
  <tr>
    <td><a href="#">Link 3</a></td>
  </tr>
  <tr>
    <td><a href="#">Link 4</a></td>
  </tr>
  <tr>
    <td><a href="#">Link 5</a></td>
  </tr>
  <tr>
    <td><a href="#">Link 6</a></td>
  </tr>
  <tr>
    <td><a href="#">Link 7</a></td>
    <td rowspan="2"><h2>Image Heading</h2></td> 
  </tr> 
  <tr>
    <td><a href="#">Link 8</a></td>
  </tr>
  <tr>
    <td><a href="#">Link 9</a></td>
    <td rowspan="12">Description of the image</td> 
  </tr> 
  <tr>
    <td><a href="#">Link 10</a></td>
  </tr>
    ...
  <tr>
    <td><a href="#">Link 20</a></td>
  </tr>
</table>

The reading order from this example would be:

Link 1
Image
Placard Text
Link 2
Link 3
Link 4
Link 5
Link 6
Link 7
Image Heading
Link 8
Link 9
Link 10
...
Link 20

Because the navigation bar links are interleaved with the content describing the image, screen readers cannot present the content in a meaningful sequence corresponding to the sequence presented visually.

Related techniques:
- C6: Positioning content based on structural markup


------------------------------

F50: - Failure of Success Criterion 2.2.2 due to a script that causes a blink effect without a mechanism to stop the blinking at 5 seconds or less
Failure of Success Criterion 2.2.2 due to a script that causes a blink effect without a mechanism to stop the blinking at 5 seconds or less

About this Technique
	- This technique relates to 2.2.2: Pause, Stop, Hide (Failure).
	- This failure applies to technologies that support script-controlled blinking of content.

Description : Scripts can be used to blink content by toggling the content's visibility on and off at regular intervals. It is a failure for the script not to include a mechanism to stop the blinking at 5 seconds or earlier. See Using scripts to control blinking and stop it in five seconds or less for information about how to modify the technique to stop the blinking.

Examples
Example 1

The following example uses script to blink content, but the blink continues indefinitely rather than stopping after five seconds.

<script>
  // blink "on" state
  function show(){
      document.getElementById("blink1").style.visibility = "visible";
      settime-out("hide()", 450);
   }
    
   // blink "off" state
   function hide(){
      document.getElementById("blink1").style.visibility = "hidden";
      settime-out("show()", 450);
   }

   // kick it off
   show();
</script>
...
<span id="blink1">This content will blink</span>

Related techniques:
- SCR22: Using scripts to control blinking and stop it in five seconds or less


------------------------------

F52: - Failure of Success Criterion 3.2.5 due to opening a new window as soon as a new page is loaded
Failure of Success Criterion 3.2.5 due to opening a new window as soon as a new page is loaded

About this Technique
	- This technique relates to 3.2.5: Change on Request (Failure).
	- This failure applies when scripting is used to open new windows.

Description : Some Web sites open a new window when a page is loaded, to advertise a product or service. The objective of this technique is to ensure that pages do not disorient users by opening up one or more new windows that automatically attain focus as soon as a page is loaded.

Examples

Note

There are multiple methods by which this failure may be triggered. Two common examples that are supported differently in various versions of user agents are listed as examples below.

Example 1: example commonly used to open new windows when pages are loaded
window.addEventListener("load", showAdvertisement, true);
window.attachEvent("onload", showAdvertisement);
   
function showAdvertisement(){
  window.open('noscript.html', '_blank', 'height=200,width=150');
}

Related techniques:
- G107: Using "activate" rather than "focus" as a trigger for changes of context


------------------------------

F54: - Failure of Success Criterion 2.1.1 due to using only pointing-device-specific event handlers (including gesture) for a function
Failure of Success Criterion 2.1.1 due to using only pointing-device-specific event handlers (including gesture) for a function

About this Technique
	- This technique relates to 2.1.1: Keyboard (Failure).
	- This failure applies to technologies that have event handlers specific to pointing devices.

Description : When pointing device-specific event handlers are the only mechanism available to invoke a function of the content, users with no vision (who cannot use devices such as mice that require eye-hand coordination) as well as users who must use alternate keyboards or input devices that act as keyboard emulators will be unable to access the function of the content. : For Success Criterion 2.1.1 there is an exception for functions that require a path-dependant pointer movement.

Examples
Example 1: An image that responds to a mouse click to go to another page

This is a failure because the keyboard cannot be used to move to the next page.

<p><img onmousedown="nextPage();" src="nextarrow.gif" alt="Go to next page"></p>

Related techniques:
- SCR20: Using both keyboard and other device-specific functions


------------------------------

F55: - Failure of Success Criteria 2.1.1, 2.4.7, 2.4.13, and 3.2.1 due to using script to remove focus when focus is received
Failure of Success Criteria 2.1.1, 2.4.7, 2.4.13, and 3.2.1 due to using script to remove focus when focus is received

About this Technique
	- This technique relates to:
	- 2.1.1: Keyboard (Failure)
	- 2.4.7: Focus Visible (Failure)
	- 2.4.13: Focus Appearance (Failure)
	- 3.2.1: On Focus (Failure)
	- This failure applies to all content that supports script.

Description : Content that normally receives focus when the content is accessed by keyboard may have this focus removed by scripting. This is sometimes done when designer considers the system focus indicator to be unsightly. However, the system focus indicator is an important part of accessibility for keyboard users. In addition, this practice removes focus from the content entirely, which means that the content can only be operated by a pointing device such as a mouse.

Examples
Example 1
<input type="submit" onFocus="this.blur();">
Example 2
<a onFocus="this.blur()" href="Page.html"><img src="myImage.gif"></a>
Example 3
<a href="link.html" onfocus="if(this.blur)this.blur();">Link Phrase</a>


------------------------------

F58: - Failure of Success Criterion 2.2.1 due to using server-side techniques to automatically redirect pages after a time-out
Failure of Success Criterion 2.2.1 due to using server-side techniques to automatically redirect pages after a time-out

About this Technique
	- This technique relates to 2.2.1: Timing Adjustable (Failure).

Description : Server-side scripting languages allow developers to set the non-standard HTTP header "Refresh" with a time-out (in seconds) and a URI to which the browser is redirected after the specified time-out. If the time interval is too short, people who are blind will not have enough time to make their screen readers read the page before the page refreshes unexpectedly and causes the screen reader to begin reading at the top. Sighted users may also be disoriented by the unexpected refresh. : The HTTP header that is set is Refresh: {time in seconds}; url={URI of new location}. It is also possible to omit the URI and obtain a periodically refreshing page, which causes the same problem. The HTTP header that is set is Refresh: {time in seconds}.

Examples
Example 1

The following example is a failure because a timed server-side redirect is implemented in Java Servlets or JavaServer Pages (JSP).

public void doGet (HttpServletRequest request, HttpServletResponse response)
   throws IOException, ServletException {
      response.setContentType("text/html");
PrintWriter out = response.getWriter();
response.setHeader("Refresh", "10; URL=TargetPage.html");
out.println("<!DOCTYPE html>");
out.println("<html><head><title>Redirect</title></head><body>");
out.println("<p>This page will redirect you in 10 seconds.</p>");
out.println("</body></html>");
}

Related techniques:
- F40: Failure due to using meta redirect with a time limit
- F41: Failure of Success Criterion 2.2.1, 2.2.4, and 3.2.5 due to using meta refresh to reload the page


------------------------------

F59: - Failure of Success Criterion 4.1.2 due to using script to make div or span a user interface control in HTML without providing a role for the control
Failure of Success Criterion 4.1.2 due to using script to make div or span a user interface control in HTML without providing a role for the control

About this Technique
	- This technique relates to 4.1.2: Name, Role, Value (Failure).
	- This failure applies to HTML.

Description : This failure demonstrates how using generic HTML elements to create user interface controls can make the controls inaccessible to assistive technology. Assistive technologies rely on knowledge of the role and current state of a component in order to provide that information to the user. Many HTML elements have well defined roles, such as links, buttons, text fields, etc. Generic elements such as div and span do not have any predefined roles. When these generic elements are used to create user interface controls in HTML the assistive technology may not have the necessary information to describe and interact with the control. : Note : Attaching event handlers to elements that are not normally interactive, such as span and div, can be disorienting to users. Even if care is taken to provide keyboard access to such elements, users may have a difficult time discovering that there are interactive controls in the content or understanding what type of behavior to expect from them. For example, users may not know which keystrokes are supported by the script to activate the element. Additionally, these elements do not generate the same operating system events as interactive elements, so assistive technology may not be notified when the user activates them. : Accessible Rich Internet Applications (WAI-ARIA) describes mechanisms to provide the necessary role and state information to create fully accessible user interface controls.

Examples
Example 1

The following example fails because it creates a checkbox using a span and an image.

<p> 
   <span onclick="toggleCheckbox('chkbox')"> 
     <img src="unchecked.gif" id="chkbox" alt=""> Include Signature 
   </span> 
</p>

Here is the scripting code which changes the image source when the span is clicked with the mouse.

var CHECKED = "check.gif"; 
var UNCHECKED = "unchecked.gif"; 
function toggleCheckbox(imgId) { 
  var theImg = document.getElementById(imgId); 
  if (theImg.src.lastIndexOf(CHECKED)!= -1) {
    theImg.src = UNCHECKED; 
    // additional code to implement unchecked action 
  } 
  else { 
    theImg.src = CHECKED; 
    // additional code to implement checked action 
  } 
}


A checkbox created in this manner will not work with assistive technology since there is no information that identifies it as a checkbox. In addition, this example is also not operable from the keyboard and would fail guideline 2.1.

Related techniques:
- ARIA4: Using a WAI-ARIA role to expose the role of a user interface component
- F42: Failure of Success Criteria 1.3.1, 2.1.1, 2.1.3, or 4.1.2 when emulating links


------------------------------

F60: - Failure of Success Criterion 3.2.5 due to launching a new window when a user enters text into an input field
Failure of Success Criterion 3.2.5 due to launching a new window when a user enters text into an input field

About this Technique
	- This technique relates to 3.2.5: Change on Request (Failure).
	- This failure applies to all technologies.

Description : This document describes a failure that occurs when a new window is created in response to a user filling in a text field for other than error reporting.

Examples
Example 1

This is a deprecated example showing a failure: A user is filling in their mailing address. When they fill in their postal code, a new window opens containing advertisements for services available in their city.

Example 2

This example is acceptable: A user is filling in their mailing address in a form. When they fill in the postal code field, a script runs to validate that it is a valid postal code. If the value is not valid, a window opens with instructions on how to fill in the field.

Related techniques:
- F37: Failure of Success Criterion 3.2.2 due to launching a new window without prior warning when the selection of a radio button, check box or select list is changed


------------------------------

F61: - Failure of Success Criterion 3.2.5 due to complete change of main content through an automatic update that the user cannot disable from within the content
Failure of Success Criterion 3.2.5 due to complete change of main content through an automatic update that the user cannot disable from within the content

About this Technique
	- This technique relates to 3.2.5: Change on Request (Failure).
	- This failure applies to all technologies.

Description : This document describes a failure that occurs when the content in the main viewport is automatically updated, and there is no option for a user to disable this behavior. : Two procedures are presented below to test for the existence of a failure against Success Criterion 3.2.5. Procedure 1 is the preferred procedure and assumes that content authors have access to the code that generates the viewport content. : However there may be instances where this may not be possible (eg: in certain content management systems, application environments such as django or ruby-on-rails, or content generated through scripting languages such as AJAX or PHP that are generated by third parties.) To that end, the second procedure is supplied to allow testing in these instances. Note that timeframes are indicative only, and that any change after any amount of time should be treated as a failure if the test otherwise does not pass the other step evaluations.

Examples
Example 1

A news site automatically refreshes itself to ensure that it has the newest headlines. There is no option to disable this behavior.

Example 2

A slideshow fills the entire viewport and advances to the next slide automatically. There is no stop button.

Example 3

A search engine automatically generates results and dynamically updates content based on user input. There is no option to disable this behavior.


------------------------------

F63: - Failure of Success Criterion 2.4.4 due to providing link context only in content that is not related to the link
Failure of Success Criterion 2.4.4 due to providing link context only in content that is not related to the link

About this Technique
	- This technique relates to 2.4.4: Link Purpose (In Context) (Failure).
	- This failure applies to HTML.

Description : This describes a failure condition when the context needed for understanding the purpose of a link is located in content that is not programmatically determined link context. If the context for the link is not provided in one of the following ways: : in the same sentence, paragraph, list item, or table cell as the link
	- via a suitable ARIA property such as aria-label or aria-labelledby : then the user will not be able to find out where the link is going with any ease. If the user must leave the link to search for the context, the context is not programmatically determined link context and this failure condition occurs.

Examples
Example 1: A Link in an Adjacent Paragraph

A news service lists the first few sentences of an article in a paragraph. The next paragraph contains the link "Read More...". Because the link is not in the same paragraph as the lead sentence, the user cannot easily discover what the link will let the user read more about.

<p>A British businessman has racked up 2 million flyer miles and plans to 
   travel on the world's first commercial tourism flights to space.</p>
<p><a href="ff.html">Read More...</a></p>
Example 2: A Link in an Adjacent Cell Within a Layout Table

An audio site provides links to where its player can be downloaded. The information about what would be downloaded by the link is in the preceding row of the layout table, which is not programmatically determined context for the link.

<table>
  <tr> 
    <td>Play music from your browser</td>
  </tr>
  <tr>
    <td>
      <a href="https://www.example.com/download.htm">
        <img src="download.jpg" width="165" height="32" alt="Download now">
      </a>
    </td>
  </tr>
</table>

Related techniques:
- ARIA7: Using aria-labelledby for link purpose
- ARIA8: Using aria-label for link purpose


------------------------------

F65: - Failure of Success Criterion 1.1.1 due to omitting the alt attribute or text alternative on img elements, area elements, and input elements of type "image"
Failure of Success Criterion 1.1.1 due to omitting the alt attribute or text alternative on img elements, area elements, and input elements of type "image"

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Failure).
	- This failure applies to HTML.

Description : This describes a failure condition for text alternatives on images. If there is no source of text to provide an alternative for the image then assistive technologies are not able to identify the image or to convey its purpose to the user. The alt attribute continues to be the preferred way to provide alternative text for images. Appropriate WAI-ARIA attributes may be used to provide alternative text, as long as they are accessibility supported. For more information about accessibility support, see Documenting Accessibility Support. The Accessible Name and Description Computation described the method of deriving text alternative from the HTML and WAI-ARIA attributes of an element. : Some Assistive Technologies attempt to compensate for the missing text alternatives by reading the file name of the image. But it is insufficient to rely simply on the file name for many reasons. For example, file names may not be descriptive (e.g., images/nav01.gif), and technology specifications do not require descriptive file names. And some Assistive Technologies do not read the file name if there is no text alternative provided via HTML attributes.

Examples
Example 1: Missing text alternative

In the code example below, the person using a screen reader would not know the purpose of the image.

<img src="../images/animal.jpg">

Related techniques:
- ARIA10: Using aria-labelledby to provide a text alternative for non-text content
- H37: Using alt attributes on img elements
- H67: Using null alt text and no title attribute on img elements for images that assistive technology should ignore


------------------------------

F66: - Failure of Success Criterion 3.2.3 due to presenting navigation links in a different relative order on different pages
Failure of Success Criterion 3.2.3 due to presenting navigation links in a different relative order on different pages

About this Technique
	- This technique relates to 3.2.3: Consistent Navigation (Failure).
	- This failure applies to all technologies.

Description : This describes a failure condition for all techniques involving navigation mechanisms that are repeated on multiple Web pages within a set of Web pages (Success Criterion 3.2.3). If the mechanism presents the order of links in a different order on two or more pages, then the failure is triggered.

Examples
Example 1: Navigation presenting a series of links that are in a different relative order on two different pages

Examples of a navigation mechanism that presents links in a different order.

Page 1 navigation
<nav>
  <ul>
    <li><a href="brazil.html">Brazil</a></li>
    <li><a href="canada.html">Canada</a></li>
    <li><a href="germany.html">Germany</a></li>
    <li><a href="poland.html">Poland</a></li>
  </ul>
</nav>
Page 2 navigation
<nav>
  <ul>
     <li><a href="canada.html">Canada</a></li>
     <li><a href="brazil.html">Brazil</a></li>
     <li><a href="germany.html">Germany</a></li>
     <li><a href="poland.html">Poland</a></li>
  </ul>
</nav>


------------------------------

F67: - Failure of Success Criterion 1.1.1 and 1.2.1 due to providing long descriptions for non-text content that does not serve the same purpose or does not present the same information
Failure of Success Criterion 1.1.1 and 1.2.1 due to providing long descriptions for non-text content that does not serve the same purpose or does not present the same information

About this Technique
	- This technique relates to:
	- 1.1.1: Non-text Content (Failure)
	- 1.2.1: Audio-only and Video-only (Prerecorded) (Failure)
	- This failure applies to all technologies.

Description : The objective of this technique is to describe the failure that occurs when the long description for non-text content does not serve the same purpose or does not present the same information as the non-text content. This can cause problems for people who cannot interpret the non-text content because they rely on the long description to provide the necessary information conveyed by the non-text content. Without a long description that provides complete information, a person may not be able to comprehend or interact with the Web page.

Examples
An image showing the locations of venues for events at the Olympic Games displayed on a street map. The image also contains an icon for each type of sporting event held at each venue. The long description states, "Map showing the location of each Olympic venue. Skating, hockey and curling are held at the Winter Park Ice Arena, Downhill skiing and jumping are held at Snow Mountain, Gymnastics is held at the JumpUp Arena, Cross Country Skiing is held at the Kilometer Forest". While this description provides useful information, it does not convey the same information as the image because it provides no specific location information such as the address or the distance of each location from some fixed point. Note that long descriptions do not always need to be in prose form; sometimes the information may best be presented in a table or other alternate format.

Related techniques:
- G73: Providing a long description in another location with a link to it that is immediately adjacent to the non-text content
- G74: Providing a long description in text near the non-text content, with a reference to the location of the long description in the short description
- F13: Failure of Success Criterion 1.1.1 and 1.4.1 due to having a text alternative that does not include information that is conveyed by color differences in the image


------------------------------

F68: - Failure of Success Criterion 4.1.2 due to a user interface control not having a programmatically determined name
Failure of Success Criterion 4.1.2 due to a user interface control not having a programmatically determined name

About this Technique
	- This technique relates to 4.1.2: Name, Role, Value (Failure).
	- This failure applies to HTML controls.

Description : This failure describes a problem that occurs when a form control does not have a name exposed to assistive technologies. The result is that some users will not be able to identify the purpose of the form control. The name can be provided in multiple ways, including the label element. Other options include use of the title attribute and aria-label which are used to directly provide text that is used for the accessibility name or aria-labelledby which indicates an association with other text on a page that is providing the name. Button controls can have a name assigned in other ways, as indicated below, but in certain situations may require use of label, title, aria-label, or aria-labelledby. : Note : Elements that can use an explicitly-associated label element are: : input
	- textarea
	- select : The label element is not used for the following because labels for these elements are provided via the value attribute (for Submit and Reset buttons), the alt attribute (for image buttons), or element content itself (button): : Submit and Reset buttons (<input type="submit"> or <input type="reset">)
	- Image buttons (<input type="image">)
	- Hidden input fields (<input type="hidden">)
	- Buttons (button elements or <input type="button">)

Examples
Example 1

The following example demonstrates a form that visually presents labels for form controls, but does not use the label element to associate them with their controls. The code example below is a failure because assistive technology may not be able to determine which label goes with which control.

<form>
  First name:
  <input type="text" name="firstname">
  <br>
  Last name: 
  <input type="text" name="lastname">
  <br>
  I have a dog <input type="checkbox" name="pet" value="dog">
  I have a cat <input type="checkbox" name="pet" value="cat">
</form>
Example 2

In the following code example, label elements are present, but they are not programmatically linked to the corresponding input controls and may therefore not be properly determined by assistive technology.

<form> 
  <p> 
    <label>First Name</label>
    <input type="text" name="firstname"> 
    <label>Last Name</label> 
    <input type="text" name="lastname"> 
  </p> 
</form>
Example 3

The search text box in the following code example does not have a programmatically determinable name. The name can be supplied with any of the approaches mentioned above.

<input type="text" value="Type your search here">
<input type="submit" value="Search">

Related techniques:
- H44: Using label elements to associate text labels with form controls
- H65: Using the title attribute to identify form controls when the label element cannot be used
- G167: Using an adjacent button to label the purpose of a field
- ARIA6: Using aria-label to provide labels for objects
- ARIA9: Using aria-labelledby to concatenate a label from several text nodes
- ARIA16: Using aria-labelledby to provide a name for user interface controls
- ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used


------------------------------

F69: - Failure of Success Criterion 1.4.4 when resizing visually rendered text up to 200 percent causes the text, image or controls to be clipped, truncated or obscured
Failure of Success Criterion 1.4.4 when resizing visually rendered text up to 200 percent causes the text, image or controls to be clipped, truncated or obscured

About this Technique
	- This technique relates to 1.4.4: Resize Text (Failure).
	- This failure applies to HTML and CSS.

Description : The objective of this failure condition is to describe a problem that occurs when changing the size of text causes text to be clipped, truncated, or obscured, so that it is no longer available to the user. In general, this failure occurs when there is no way for a user agent's layout engine to honor all the layout hints in the HTML at the new font size. Some of the ways in which this can occur include: : Setting the overflow property of the enclosing element to hidden
	- Using absolutely positioned content
	- Creating popups that aren't big enough for their content at the new font size : Note : The Working Group has discovered many misunderstandings about how to test this failure. We are planning to revise this failure in a future update. Until then, if the content passes the success criterion using any of the listed sufficient techniques, then it does not meet this failure.

Examples
Example 1: Overflowing text

The font size is set in a scalable way, but the container is set to a fixed pixel size. A gray border shows the boundaries of the text container. When the text is resized, it spills out of its container, and obscures the next paragraph.

<div style="font-size:100%; width:120px; height:100px; border: thin solid gray;"> 
  Now is the time for all good men to come to the aid of their country. 
</div>
<p>The quick brown fox jumps over the lazy dog.</p>

Illustration of example 1:

Example showing text that spills outside of its container, obscuring other text on the page.
Example 2: Truncated text

This example is identical to the last one, except that the container is set to clip the text. The text is no longer bleeding into the next paragraph, but now it is truncated. This is also a failure.

<div style="font-size:100%; width:120px; height:100px; overflow: hidden; 
 border: thin solid gray;">
 Now is the time for all good men to come to the aid of their country. 
</div>
<p>The quick brown fox jumps over the lazy dog.</p>


Illustration of example 2:

Example showing text that truncated due to resized text.


------------------------------

F71: - Failure of Success Criterion 1.1.1 due to using text look-alikes to represent text without providing a text alternative
Failure of Success Criterion 1.1.1 due to using text look-alikes to represent text without providing a text alternative

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Failure).
	- This failure applies to any technology.

Description : The objective of this failure condition is to avoid substituting characters whose glyphs look similar to the intended character, for that intended character. The Unicode character set defines thousands of characters, covering dozens of writing systems. While the glyphs for some of these characters may look like the glyphs for other characters in visual presentation, they are not processed the same by text-to-speech tools. : For example, the characters U+0063 and U+03F2 both look like the letter "c", yet the first is from the Western alphabet and the second from the Greek alphabet and not used in Western languages. The characters U+0033 and U+04E0 both look like the number "3", yet the second is actually a letter from the Cyrillic alphabet. : Note : This failure also applies to the use of character entities. It is the incorrect character used because of its glyph representation that comprises a failure, not the mechanism by which that character is implemented.

Examples
Example 1: Characters

The following word looks, in browsers with appropriate font support, like the English word "cook", yet is composed of the string U+03f2 U+043E U+03BF U+006B, only one of which is a letter from the Western alphabet. This word will not be processed meaningfully, and a text alternative is not provided.

ϲоοk
Example 2: Character entities

The following example, like its predecessor, will look like the English word "cook" when rendered in browsers with appropriate font support. In this case, the characters are implemented with character entities, but the word will still not be processed meaningfully, and a text alternative is not provided.

&#x03F2;&#x043E;&#x03BF;&#x006B;

Working Example: "ϲоοk"


------------------------------

F72: - Failure of Success Criterion 1.1.1 due to using ASCII art without providing a text alternative
Failure of Success Criterion 1.1.1 due to using ASCII art without providing a text alternative

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Failure).
	- This failure applies to any technology.

Description : The objective of this failure condition is to avoid the use of ASCII art when a text alternative is not provided. Although ASCII art is implemented as a character string, its meaning comes from the pattern of glyphs formed by a visual presentation of that string, not from the text itself. Therefore ASCII art is non-text content and requires a text alternative. Text alternatives, or links to them, should be placed near the ASCII art in order to be associated with it.

Examples
Example 1: ASCII Art chart without a text alternative

The following ASCII art chart lacks a text alternative and therefore does not meet Success Criterion 1.1.1. Note this failure example does in fact cause this page to fail, but you may skip over the example.

  %   __ __ __ __ __ __ __ __ __ __ __ __ __ __   
100 |             *                             |
 90 |                *  *                       |
 80 |          *           *                    |
 70 |             @           *                 |
 60 |          @                 *              |
 50 |       *        @              *           |
 40 |                   @              *        |
 30 |    *  @              @  @           *     |
 20 |                                           |
 10 |    @                       @  @  @  @     |
      0  5 10 15 20 25 30 35 40 45 50 55 60 65 70
      Flash frequency (Hz)


------------------------------

F73: - Failure of Success Criterion 1.4.1 due to creating links that are not visually evident without color vision
Failure of Success Criterion 1.4.1 due to creating links that are not visually evident without color vision

About this Technique
	- This technique relates to 1.4.1: Use of Color (Failure).
	- This failure applies to any technology.

Description : The objective of this failure is to avoid situations in which people who cannot perceive color differences cannot identify links (when people with color vision can identify links). Link underlines or some other non-color visual distinction are required (when the links are discernible to those with color vision). : While some links may be visually evident from page design and context, such as navigational links, links within text are often visually understood only from their own display attributes. Removing the underline and leaving only the color difference for such links would be a failure because there would be no other visual indication (besides color) that it is a link. : Note : Red and pink are the same color (hue) but they have different lightness (which is not color). So red and pink would pass the requirement for "not distinguished by color (hue) alone" since they differ by lightness (which is not color) - as long as the difference in lightness (contrast) is 3:1 or greater. For example, if surrounding text is red and the link is pink it would pass. Similarly a light green and a dark red differ both by color and by lightness so they would pass if the contrast (lightness) difference is 3:1 or greater before focus or pointing. : There is no requirement that links be identifiable by people who cannot perceive color if they are not perceivable for those with color vision. (e.g. if the links are hidden for everyone – as in a game or test). : If the non-color cue only happens when the mouse hovers over the link or when the link receives focus, it is still a failure. : If the link is a different color and bold it would not fail because the boldness is not color dependent.

Examples
Example 1: Links with no underlines and similar contrast to body text

A Web page includes a large number of links within the body text. The links are styled so that they do not have underlines and are very similar in color to the body text. This would be a failure because users would be unable to differentiate the links from the body text.

Example 2: Removing the underline from a link in a sentence or paragraph without providing another visual cue besides color
<head>
  <style>
    p a:link {text-decoration: none}
    p a:visited {text-decoration: none}
    p a:active {text-decoration: none}
    p a:hover {text-decoration: underline; color: red;}
  </style>
</head>
<body>
  <p>There are many resources to find out more about the 
     <a href="rain-in-spain.html">rain in Spain</a>.
  </p>
</body>

Note

If the visual cue is only provided on hover (as in the example above), it would still fail.

Related techniques:
- G182: Ensuring that additional visual cues are available when text color differences are used to convey information
- G183: Using a contrast ratio of 3:1 with surrounding text and providing additional visual cues on hover for links or controls where color alone is used to identify them


------------------------------

F74: - Failure of Success Criterion 1.2.2 and 1.2.8 due to not labeling a synchronized media alternative to text as an alternative
Failure of Success Criterion 1.2.2 and 1.2.8 due to not labeling a synchronized media alternative to text as an alternative

About this Technique
	- This technique relates to:
	- 1.2.2: Captions (Prerecorded) (Failure)
	- 1.2.8: Media Alternative (Prerecorded) (Failure)
	- This failure applies to pages that provide synchronized media alternatives to text.

Description : The objective of this failure is to avoid situations in which synchronized media alternatives are not labeled with the text for which they are alternatives. Synchronized media alternatives provide enhanced access to users for whom synchronized media is a more effective format than text. Since they are alternatives to text, they do not need themselves to have redundant text alternatives. However, they need to be clearly labeled with the text for which they substitute, so users can find them and so users who normally expect text alternatives to synchronized media know not to look for them.

Examples
Example 1: Synchronized media alternatives provided elsewhere on page

A page with instructions to complete a tax form provides a prose description of the fields to complete, data to provide, etc. Additionally, a synchronized media alternative provides spoken instructions, with video of a person completing the section being discussed in the audio. Although both versions are provided on the page, the synchronized media version is provided elsewhere on the page and is not clearly labeled with the part of the text for which it is a substitute. This makes it difficult for users encountering the text to find it, and users encountering the video do not know where its text alternative is.


------------------------------

F75: - Failure of Success Criterion 1.2.2 by providing synchronized media without captions when the synchronized media presents more information than is presented on the page
Failure of Success Criterion 1.2.2 by providing synchronized media without captions when the synchronized media presents more information than is presented on the page

About this Technique
	- This technique relates to 1.2.2: Captions (Prerecorded) (Failure).
	- This failure applies to any technology.

Description : The objective of this failure is to avoid situations in which synchronized media alternatives provide more information than the text for which they are alternatives, but do not provide their own text alternatives to provide access to the extra information. Synchronized media alternatives provide enhanced access to users for whom synchronized media is a more effective format than text. Since they are alternatives to text, they do not need themselves to have redundant text alternatives in the form of captions, audio descriptions or full text alternatives. However, if they provide more information than the text for which they are an alternative, then they are not just alternatives but are synchronized media content in their own right. In this case they are subject to the full requirements of Success Criterion 1.2.2 to provide captions and to Success Criterion 1.2.3, and Success Criterion 1.2.5.


------------------------------

F78: - Failure of Success Criterion 1.4.11, 2.4.7 and 2.4.13 due to styling element outlines and borders in a way that removes or renders non-visible the visual focus indicator
Failure of Success Criterion 1.4.11, 2.4.7 and 2.4.13 due to styling element outlines and borders in a way that removes or renders non-visible the visual focus indicator

About this Technique
	- This technique relates to:
	- 1.4.11: Non-text Contrast (Failure)
	- 2.4.7: Focus Visible (Failure)
	- 2.4.13: Focus Appearance (Failure)
	- This failure applies to any technology.

Description : This describes a failure condition that occurs when the user agent's default visual indication of keyboard focus is turned off or rendered non-visible by other styling on the page without providing an author-supplied visual focus indicator. Turning off the focus indicator instructs the user agent not to present the focus indicator. Other styling may make it difficult to see the focus indicator even though it is present, such as outlines that look the same as the focus outline, or thick borders that are the same color as the focus indicator so it cannot be seen against them.

Examples
Example 1: The focus indicator is turned off with CSS

The following CSS example will remove the default focus indicator, which fails the requirement to provide a visible focus indicator.

:focus {outline: none}
Example 2: The outline of elements is visually similar to the focus indicator

The following CSS example will create an outline around links that looks the same as the focus indicator. This makes it impossible for users to determine which one in fact has the focus, even though the user agent does draw the focus indicator.

a {outline: thin dotted black}
Example 3: Elements have a border that occludes the focus indicator

The following CSS example creates a border around links that does not have enough contrast for the focus indicator to be seen when drawn on top of it. In this case the focus indicator is drawn just outside the border, but as both are black and the border is thicker than the focus indicator, it no longer meets the definition of "visible".

a {border: medium solid black}


------------------------------

F79: - Failure of Success Criterion 4.1.2 due to the focus state of a user interface component not being programmatically determinable or no notification of change of focus state available
Failure of Success Criterion 4.1.2 due to the focus state of a user interface component not being programmatically determinable or no notification of change of focus state available

About this Technique
	- This technique relates to 4.1.2: Name, Role, Value (Failure).
	- This failure applies to all technologies.

Description : Whether a user interface component has focus is a particularly important facet of its state. Many types of assistive technology rely on tracking the current keyboard focus. Screen readers will move the user's point of regard to the focused user interface component, and screen magnifiers will change the display of the content so that the focused component is visible. If assistive technology is not notified when focus moves to a new component, the user will become confused when they attempt to interact with the wrong component. : While user agents usually handle this functionality for standard controls, custom-scripted user interface components are responsible for using accessibility APIs to make focus information and notifications available.

Examples

A custom menu displays menu items by rendering them explicitly, handling mouse and key events directly and highlighting the currently selected menu item. The programmer does not expose the menu item that has focus via the Accessibility API, so assistive technology can only determine that focus is somewhere within the menu and cannot determine which menu item has focus.


------------------------------

F80: - Failure of Success Criterion 1.4.4 when text-based form controls do not resize when visually rendered text is resized up to 200%
Failure of Success Criterion 1.4.4 when text-based form controls do not resize when visually rendered text is resized up to 200%

About this Technique
	- This technique relates to 1.4.4: Resize Text (Failure).
	- This failure applies to HTML and CSS.

Description : The objective of this failure condition is to describe a problem that occurs when changing the size of text does not cause the text-based form controls to resize accordingly. This means that the user may have difficulty entering text and being able to read what they have entered because the text is not displayed at the text size required by the user. : Text-based form controls include input boxes (text and textarea) as well as buttons.

Examples
Example 1: A Contact Form

A Contact Us form has some introductory information and then form controls for users to enter their first name, last name, telephone number and email address. The heading, introductory text and form control labels have been implemented in a scalable way but the form controls themselves have not.

The HTML component:

<h1>Contact Us</h1>
<p>Please provide us with your details and we will contact you as soon as we can.
   Note that all of the form fields are required.</p>
<div>
  <label for="fname">First Name</label>
  <input type="text" name="fname" id="fname">
</div>
<div>
  <label for="lname">Last Name</label>
  <input type="text" name="lname" id="lname">
</div>
<div>
  <label for="phone">Telephone</label>
  <input type="text" name="phone" id="phone">
</div>
<div>
  <label for="email">Email</label>
  <input type="text" name="email" id="email">
</div>  
<input type="submit" name="Submit" value="Submit" id="Submit">

The CSS component:

h1 { font-size: 2em; }
p, label { font-size: 1em; }
input {font-size: 12pt;}


------------------------------

F81: - Failure of Success Criterion 1.4.1 due to identifying required or error fields using color differences only
Failure of Success Criterion 1.4.1 due to identifying required or error fields using color differences only

About this Technique
	- This technique relates to 1.4.1: Use of Color (Failure).
	- This failure applies to all technologies.

Description : This objective of this technique is to describe the failure that occurs when a required field or an error field is marked with color differences only, without an alternate way to identify the required field or error field. This can cause problems for people who are blind or colorblind, because they may not be able to perceive the color differences that indicate which field is required or which field is causing an error.

Examples
A user is completing an online form, and the phone number field is required. To indicate that the phone number field is required, the label "Phone Number" is displayed in a color different from the color used for optional fields, without any other indication that "Phone Number" is a required field. A blind or colorblind user may not be able to identify that "Phone Number" is a required field.
A user submits an online form and leaves a required field blank, resulting in an error. The form field that caused the error is indicated by red text only, without an additional non-color indication that the field caused an error.

Note

In both examples, the color could be used without failure if the text was sufficiently different in visual presentation (e.g. bold or in a different font) that it would be easily differentiated from the surrounding text if the color were removed. It would also not fail if the color chosen had sufficient luminosity difference (lightness) from the other text that it would be easily be seen as different if viewed in black and white. In these cases - the information would not be displayed in color (hue) alone but also in "presentation" or "lightness" respectively.


------------------------------

F82: - Failure of Success Criterion 3.3.2 by visually formatting a set of phone number fields but not including a text label
Failure of Success Criterion 3.3.2 by visually formatting a set of phone number fields but not including a text label

About this Technique
	- This technique relates to 3.3.2: Labels or Instructions (Failure).
	- This failure applies to any technology.

Description : This failure ensures that people with visual or cognitive disabilities will recognize phone number fields and understand what information to provide to fill in the fields. Phone numbers are frequently formatted in fixed, distinctive ways, and authors may feel that just providing visual formatting of the fields will be sufficient to identify them. However, even if all the fields have programmatically determined names, a text label must also identify the set of fields as a phone number.

Examples
Example 1

In the United States, phone numbers are broken into a three digit area code, a three digit prefix, and a four digit extension. A web page creates fixed length text input fields for the three parts of the phone number, surrounding the first field with parenthesis and separating the second and third fields with a dash. Because of this formatting, some users recognize the fields as a phone number. However, there is no text label for the phone number on the web page. This is because the label for each field will be the closest preceding text, so the three fields would be labeled "(", ")" , and "-" respectively.

Related techniques:
- H71: Providing a description for groups of form controls using fieldset and legend elements


------------------------------

F83: - Failure of Success Criterion 1.4.3 and 1.4.6 due to using background images that do not provide sufficient contrast with foreground text (or images of text)
Failure of Success Criterion 1.4.3 and 1.4.6 due to using background images that do not provide sufficient contrast with foreground text (or images of text)

About this Technique
	- This technique relates to:
	- 1.4.3: Contrast (Minimum) (Failure)
	- 1.4.6: Contrast (Enhanced) (Failure)
	- This failure applies to any technology.

Description : This failure occurs when people with low vision are not able to read text that is displayed over a background image. When there is not sufficient contrast between the background image and the text, features of the background image can be confused with the text making it difficult to accurately read the text. : To satisfy Success Criterion 1.4.3 and 1.4.6, there must be sufficient contrast between the text and its background. For pictures, this means that there would need to be sufficient contrast between the text and those parts of the image that are most like the text and behind the text.

Examples
Failure Example 1

Black text overlays an image with black lines. The lines cross behind the letters making F's look like E's etc.

Failure Example 2

Black text overlays an image with dark gray areas. Wherever the text crosses a dark gray area the contrast is so bad that the text cannot be read.


------------------------------

F84: - Failure of Success Criterion 2.4.9 due to using a non-specific link such as "click here" or "more" without a mechanism to change the link text to specific text.
Failure of Success Criterion 2.4.9 due to using a non-specific link such as "click here" or "more" without a mechanism to change the link text to specific text.

About this Technique
	- This technique relates to 2.4.9: Link Purpose (Link Only) (Failure).
	- This failure applies to HTML.

Description : This failure describes a common condition where links such as "click here" or "more" are used as anchor elements where you need to have the surrounding text to understand their purpose and where there isn't any mechanism to make the destination clear by itself, such as a button to expand the link text. : Many blind people who use screen readers call up a dialog box that has a list of links from the page. They use this list of links to decide where they will go. But if many of the links in that list simply say "click here" or "more" they will be unable to use this feature in their screen reader, which is a core navigation strategy. That's why it's a failure of 2.4.9 to not provide any way of allowing them to know the destination from the link text alone. It is also true for people who tab through links. If all they hear as they tab through the document is "click here, click here, click here etc." they will become confused.

Examples
Example 1
<a href="file110.html">Click here</a> for more information on the Rocky Mountains.
Example 2
<h2>News headlines</h2>
<p>Bishops Tickle Darwin's Monkey Theory</p>
<a href="btdmt.html">read more</a>


------------------------------

F85: - Failure of Success Criterion 2.4.3 due to using dialogs or menus that are not adjacent to their trigger control in the sequential navigation order
Failure of Success Criterion 2.4.3 due to using dialogs or menus that are not adjacent to their trigger control in the sequential navigation order

About this Technique
	- This technique relates to 2.4.3: Focus Order (Failure).
	- This failure applies to all technologies.

Description : This describes the failure condition that results when a web page opens a dialog or menu interface component embedded on the page in a way that makes it difficult for a keyboard user to operate because of its position in the sequential navigation order. When the user opens the dialog or menu embedded on the page by activating a button or link, their next action will be to interact with the dialog or menu. If focus is not set to the dialog or menu, or a logical focusable descendent of these widgets, and the widget or a focusable descendent is not next in the sequential navigation order, it will be difficult for the keyboard user to operate the dialog or menu. : Note : Dismissing a dialog or menu means to close it without taking any action on it. For example: a modal dialog opens on a web page and displays a sign-up form for a mailing list. A user dismisses the dialog by either pressing a "close" button or using the Escape key. : Note : Sometimes it's not possible to return focus to the control the user activated to open a dialog. For example: a blog post has a list of tags, each tag containing a delete button. Pressing a delete button opens a modal dialog that asks the user to confirm the deletion. On confirming the deletion, the tag is deleted, the modal dialog closes, and focus is placed on the next tag in the list of tags. Placing focus onto a different, but logical, control is not a failure of Success Criterion 2.4.3.

Examples
Example 1: Adding a dialog to the page at the end of the sequential navigation order

A non-native HTML dialog is created, with it being marked up at the end of the DOM (Document Object Model). Script was created to reveal the dialog, but no script was added to move focus to it. The dialog is visually positioned above the content of the page and the user's focus isn't moved to the dialog. Since the dialog is found at the end of the DOM, it is at the end of the keyboard navigation order. Because a user's focus isn't managed, or a keyboard mechanism isn't provided to allow them to immediately move to the invoked dialog, the user will need to tab through the rest of the web page before they can interact with the dialog.

Example 2: Setting focus to the document after dismissing a menu embedded on the page

When a menu is dismissed, it is removed or hidden from the web page and focus is set to the document. The user must tab from the beginning of the navigation sequence to reach the point from which the menu was opened.

Related techniques:
- SCR26: Inserting dynamic content into the Document Object Model immediately following its trigger element


------------------------------

F86: - Failure of Success Criterion 4.1.2 due to not providing names for each part of a multi-part form field, such as a US telephone number
Failure of Success Criterion 4.1.2 due to not providing names for each part of a multi-part form field, such as a US telephone number

About this Technique
	- This technique relates to 4.1.2: Name, Role, Value (Failure).
	- This failure applies to all technologies.

Description : This describes a failure condition of Success Criterion 4.1.2 where some or all of the parts of multi-part form field do not have names. Often there is a label for the multi-part field, which is either programmatically associated with the first part, or not programmatically associated with any parts. : Note : A name does not necessarily have to be visible, but is visible to assistive technologies.

Examples
Example 1

A US telephone number consists of a three-digit area code, a three-digit prefix, and a four-digit suffix. They are typically formatted as follows ([area code]) [prefix]-[suffix], such as (939) 555-0113. Often, forms asking for a telephone number will include three separate fields, but with a single label, such as:

Phone number: (<input type="text" size="3">) 
<input type="text" size="3">-<input type="text" size="4">

The failure occurs when there is not a name for each of the three fields in the Accessibility API. A user with assistive technology will experience these as three undefined text fields. Some assistive technologies will read the punctuation as identification for the text fields, which can be even more confusing. In the case of a three-field US phone number, some assistive technologies would name the fields "(", ")" and "-", which is not very useful.

Example 2

The same US telephone number. In this case, the label is not programmatically associated with any of the parts.

Phone number: (<input type="text" size="3">) 
<input type="text" size="3">-<input type="text" size="4">

A user with assistive technology will experience these as three undefined text fields.

Example 3

The same US telephone number. In this case, the label is programmatically associated with the first part.

<label for="area">Phone number:</label> (<input id="area" type="text" size="3">)
<input type="text" size="3">-<input type="text" size="4">

A user with assistive technology will be led to believe that the first field is for the entire phone number, and will experience the second and third fields as undefined text fields.

Related techniques:
- H44: Using label elements to associate text labels with form controls
- H71: Providing a description for groups of form controls using fieldset and legend elements
- H65: Using the title attribute to identify form controls when the label element cannot be used
- ARIA6: Using aria-label to provide labels for objects
- ARIA16: Using aria-labelledby to provide a name for user interface controls


------------------------------

F88: - Failure of Success Criterion 1.4.8 due to using text that is justified (aligned to both the left and the right margins)
Failure of Success Criterion 1.4.8 due to using text that is justified (aligned to both the left and the right margins)

About this Technique
	- This technique relates to 1.4.8: Visual Presentation (Failure).
	- This failure applies to all technologies.

Description : Many people with cognitive disabilities have a great deal of trouble with blocks of text that are justified (aligned to both the left and the right margins). The spaces between words create "rivers of white" running down the page, which can make the text difficult for some people to read. This failure describes situations where this confusing text layout occurs. The best way to avoid this problem is not to create text layout that is fully justified (aligned to both the left and the right margins).

Examples
Example 1

In the following example of a failure, the HTML align attribute is used to create justified text.

<p align="justify">
 Peter Piper picked a peck of pickled peppers
 A peck of pickled peppers Peter Piper picked
 If Peter Piper picked a peck of pickled peppers
 Where's the peck of pickled peppers Peter Piper picked?
</p>
Example 2

In this example of a failure, the CSS text-align property is used to create justified text.

p {text-align: justify}
<p>
 How much wood would a woodchuck chuck if a woodchuck could chuck wood?
 He would chuck, he would, as much as he could, and chuck as much wood
 As a woodchuck would if a woodchuck could chuck wood.
</p>

Related techniques:
- C22: Using CSS to control visual presentation of text


------------------------------

F89: - Failure of Success Criteria 2.4.4, 2.4.9 and 4.1.2 due to not providing an accessible name for an image which is the only content in a link
Failure of Success Criteria 2.4.4, 2.4.9 and 4.1.2 due to not providing an accessible name for an image which is the only content in a link

About this Technique
	- This technique relates to:
	- 2.4.4: Link Purpose (In Context) (Failure)
	- 2.4.9: Link Purpose (Link Only) (Failure)
	- 4.1.2: Name, Role, Value (Failure)
	- This failure applies to content that contains links.

Description : This failure condition occurs when a link contains only non-text content, such as an image, and that link cannot be identified by an accessible name. The accessible name for a link is defined according to the Accessible Name and Description Computation. : This also applies when both text and images are used separately on a page to link to the same target. In this case success technique H2: Combining adjacent image and text links for the same resource is the recommended approach to reduce the number of separate links and the undesirable redundancy.

Examples
Example 1: Search Results

A search site returns search results that include both a text link and an image link to the match site. The image has a null alt attribute, since the result already contains a link with a text description. However, the screen reader does not ignore the image link but uses heuristics to find some text that might describe the purpose of the link. For example, the screen reader might announce, "football dot gif Football Scorecard."

<a href="scores.html">
  <img src="football.gif" alt="">
</a>
<a href="scores.html">Football Scoreboard</a>

Related techniques:
- H2: Combining adjacent image and text links for the same resource
- H30: Providing link text that describes the purpose of a link for anchor elements
- ARIA7: Using aria-labelledby for link purpose
- ARIA8: Using aria-label for link purpose


------------------------------

F90: - Failure of Success Criterion 1.3.1 for incorrectly associating table headers and content via the headers and id attributes
Failure of Success Criterion 1.3.1 for incorrectly associating table headers and content via the headers and id attributes

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Failure).
	- This failure applies to HTML.

Description : One way for authors to explicitly associate header cells to data cells is by using the id and headers attributes. These allow the author to associate multiple header cells to a particular data cell, which can be necessary when complex data tables with more than one level of heading are used. : The failure occurs when the relationship between data cells and corresponding header cells cannot be programmatically determined correctly because the association of id and headers attributes is faulty. This can happen, for example, when copying code within tables and forgetting to update the code.

Examples

Note: The example below is based on the complex data table presented as example 1 of Technique H43: Using id and headers attributes to associate data cells with header cells in data tables.

Example 1: Table content not correctly associated to nested headers

In this example, nested headers are used, but the content cells are incorrectly associated via the id and headers attributes. All cells reference top level header 'Exams' (id="e") - this isn't correct for the last three columns which should reference header 'Projects'. Also, the referencing of the second level column headers has been accidentally swapped even though in this example this makes no difference as the contents (1, 2, Final) are repeated.

Example Code:

<table>
  <tr>
    <th rowspan="2" id="h">Homework</th>
    <th colspan="3" id="e">Exams</th>
    <th colspan="3" id="p">Projects</th>
  </tr>
  <tr>
    <th id="e1" headers="e">1</th>
    <th id="e2" headers="e">2</th>
    <th id="ef" headers="e">Final</th>
    <th id="p1" headers="p">1</th>
    <th id="p2" headers="p">2</th>
    <th id="pf" headers="p">Final</th>
  </tr>
  <tr>
    <td headers="h">15%</td>       
    <td headers="e p1">15%</td>  <!-- should be "e e1" -->
    <td headers="e p2">15%</td>  <!-- should be "e e2" -->
    <td headers="e pf">20%</td>  <!-- should be "e ef" -->
    <td headers="e e1">10%</td>  <!-- should be "p p1" -->
    <td headers="e e2">10%</td>  <!-- should be "p p2" -->
    <td headers="e ef">15%</td>  <!-- should be "p pf" -->
  </tr>
</table>

Failure example of table incorrectly associating headers attributes in table content (td) to table headers (th).

Related techniques:
- G115: Using semantic elements to mark up structure
- H43: Using id and headers attributes to associate data cells with header cells in data tables
- F46: Failure of Success Criterion 1.3.1 due to using th elements, … layout tables


------------------------------

F91: - Failure of Success Criterion 1.3.1 for not correctly marking up table headers
Failure of Success Criterion 1.3.1 for not correctly marking up table headers

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Failure).
	- This failure applies to HTML.

Description : This failure occurs when data tables do not use header elements (th) or other appropriate table mark-up (the scope attribute, headers and id or the ARIA columnheader and rowheader) roles to make the headers programmatically determinable from within table content. Making headers programmatically determinable is especially important when data cells are only intelligible together with header information. When screen reader users navigate through the table content horizontally or vertically, the headers that change can be read out to provide the necessary context for the information in the data cells.

Examples
Example 1: Headers not marked up appropriately

This table does not use th (or other appropriate header markup) for headers. Instead, it uses td elements for all cells. Navigating cell by cell, screen readers will often fail to read the header cells associated with content.

Example Code:

<table>
  <tr>
    <td>Name</td>
    <td>Age</td>
    <td>Height (cm)</td>
    <td>Weight (kg)</td>
  </tr>
  <tr>
    <td>Linda</td>
    <td>33</td>
    <td>169</td>
    <td>59</td>
  </tr>   
  <tr>
    <td>Jack</td>
    <td>37</td>
    <td>184</td>
    <td>74</td>
  </tr>    
  <tr>
    <td>Kira</td>
    <td>8</td>
    <td>120</td>
    <td>21</td>
  </tr>
  <tr>
    <td>Daniel</td>
    <td>3</td>
    <td>79</td>
    <td>14</td>
  </tr>  
</table>

View example 1 (opens in same browser window)

Related techniques:
- H43: Using id and headers attributes to associate data cells with header cells in data tables
- H51: Using table markup to present tabular information


------------------------------

F92: - Failure of Success Criterion 1.3.1 due to the use of role presentation on content which conveys semantic information
Failure of Success Criterion 1.3.1 due to the use of role presentation on content which conveys semantic information

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Failure).
	- This failure applies to HTML.

Description : This failure occurs when a role of presentation is applied to an element whose purpose is to convey information or relationships in the content. Elements such as table, can convey information about the content contained in them via their semantic markup. The WAI-ARIA role of presentation on the other hand, is intended to suppress semantic information of content from the accessibility API and prevent user agents from conveying that information to the user. Use of the presentation role for content which should convey semantic information may prevent the user from understanding that content.

Examples
Example 1

In this example, tabular data is marked up with role=presentation. Though design layout tables can be marked up in such a way, data tables need to retain their semantic information and should therefore not be marked up with role=presentation.

Example Code:

<table role="presentation">
  <caption>Fruits and their colors</caption>
  <tr>
    <th>Name</th>
    <th>Color</th>
  </tr>
  <tr>
    <td scope="row">banana</td>
    <td>yellow</td>
  </tr>
  <tr>
    <td scope="row">orange</td>
    <td>orange</td>
  </tr>
</table>


------------------------------

F93: - Failure of Success Criterion 1.4.2 for absence of a way to pause or stop an HTML5 media element that autoplays
Failure of Success Criterion 1.4.2 for absence of a way to pause or stop an HTML5 media element that autoplays

About this Technique
	- This technique relates to 1.4.2: Audio Control (Failure).
	- This failure applies to HTML.

Description : This failure occurs when an audio or video element with an audio track contains the autoplay attribute and does not contain the muted attribute, and no controls or commands have been provided to pause or stop the media resource. : When the autoplay attribute is present, the user agent will automatically begin playback of the media resource as soon as it can do so without stopping. When the muted attribute is present, the user agent will initially mute the media resource's audio output, overriding any user preference. : If the media element is shorter than 3 seconds, the failure does not occur. If the user agent provides user preferences to override autoplay behavior, the failure does not occur. : The HTML spec contains the following notes: : User agents do not need to support autoplay, and it is suggested that user agents honor user preferences on the matter. Authors are urged to use the autoplay attribute rather than using script to force the video to play, so as to allow the user to override the behavior if so desired.
	- Authors are urged to use the autoplay attribute rather than using script to trigger automatic playback, as this allows the user to override the automatic playback when it is not desired, e.g. when using a screen reader. Authors are also encouraged to consider not using the automatic playback behavior at all, and instead to let the user agent wait for the user to start playback explicitly.

Examples
Example 1: An auto-playing audio track

In this example, the advertising video contains an audio track. The video will play continuously because of the loop attribute, and the video will start automatically because of the autoplay attribute and because there does not appear to be any controls to allow the user to stop the video.

<video src="ads.cgi?kind=video" autoplay loop></video>


------------------------------

F94: - Failure of Success Criterion 1.4.4 due to incorrect use of viewport units to resize text
Failure of Success Criterion 1.4.4 due to incorrect use of viewport units to resize text

About this Technique
	- This technique relates to 1.4.4: Resize Text (Failure).

Description : The objective of this technique is to document the failure of text to re-scale when viewport units are used on text. As these units are relative to the viewport, it means they cannot be resized by zooming or adjusting text-size. : There are various methods to increase and decrease the size of text and other content, but viewport units applied to text (generally via font-size in CSS) prevent most available methods. Attempts to use browser controls to zoom or adjust text-size will not work. Only methods that completely override the CSS will work, and those could cause other issues such as layouts collapsing or text overlapping. : Some uses of viewport units may not prevent text-size adjustments, but if they are used as the primary method for defining text-size, they are likely to cause a failure of Success Criterion 1.4.4. : Note : If media queries were used to adjust the size of text or unit of measure at different screen sizes, it may not be a failure of Resize Text. On-page controls provided by the author are also a way of passing the resize text success criteria.

Examples
Failure example 1

The following CSS and HTML snippet uses VW units to size the text.

/* CSS */
.callout {
  font-size:1vw;
}

<p class="callout">Text that scales by viewport units</p>

Example page with an example of text sized in vh units.

Related techniques:
- G179: Ensuring that there is no loss of content or functionality when the text resizes and text containers do not change their width
- C12: Using percent for font sizes
- C13: Using named font sizes
- C14: Using em units for font sizes


------------------------------

F95: - Failure of Success Criterion 1.4.13 due to content shown on hover not being hoverable
Failure of Success Criterion 1.4.13 due to content shown on hover not being hoverable

About this Technique
	- This technique relates to 1.4.13: Content on Hover or Focus (Failure).
	- This failure applies to any technology that supports the display of additional content on pointer hover.

Description : The objective of this failure is to describe a situation where users find it difficult or impossible to move the pointer over additional content that appears on hover. For users of screen magnification software, the new content is often not fully visible in the current magnifed section. In order to perceive it, it is therefore critical for these users to be able to move the pointer away from the trigger and over the additional content, and thereby change the position of the magnified section, without this content disappearing.

Examples
A pop-up opens on pointer hover. Due to the chosen screen magnification, the content is only partially visible. However, as soon as the pointer is moved away from the trigger towards the pop-up content so it can be read, the pop-up automatically closes.
Hovering over a chart with data points, pop-ups open to show details of the respective data point, somewhat offset from the data point itself. When moving the pointer towards the pop-up so it can be fully read with magnification, the pointer travels over other data points that cause the appearance of other pop-ups that replace the particular pop-up the user wanted to see.


------------------------------

F96: - Failure due to the accessible name not containing the visible label text
Failure due to the accessible name not containing the visible label text

About this Technique
	- This technique relates to 2.5.3: Label in Name (Failure).
	- This failure applies to all technologies that include interactive controls (such as links or form inputs).

Description : The objective of this Failure is to describe situations where speech input users cannot reliably speak the name of a control because it differs from the visible label. : When speech input users interact with a web page, they usually speak a command followed by the reference to some visible label (like the text in a button or a link, or the text labelling some input). If the visible label does not match the accessible name of the control, speech users may be unable to directly activate that control. : There are techniques that go beyond the visible label text of elements. The idea is to provide more context for users of assistive technologies to whom the visible context may not be available. Examples are the use of accessible hidden (e.g., offscreen-positioned) text, the use of the aria-label attribute to overwrite the label text, or the use of the aria-labelledby attribute to compose a label text from one or more strings strings on the page. : When the use of these techniques results in an accessible name in which the exact string of the visible label does not occur in the accessible name, speech users may be unable to activate that control. Refer to the Accessible Name and Description Computation algorithm to work out the order of precedence in computing the accessible name of a control.

Examples
Example 1: Mismatch of visible button text and accessible name supplied via aria-label

The text in a search button reads "Go" but the accessible name provided in an aria-label attribute is "Find in this site"

<button id="sitesearch" aria-label="Find in this site">Go</button>

Example 2: Invisible link text disrupts visible label text string in accessible name

A download link reads "Download specification" but there is invisible link text so that the accessible name of that link is "Download gizmo specification". While the visible label text is contained in the accessible name, there is no string match which may prevent the link from being activated by speech input.

<a href="#">Download <span class="accessibly-hidden">gizmo</span> specification</a>
Example 3: Input with a hidden label carrying text that differs from the input's value attribute

An input of type="submit" with the value="search" which is exposed as visible label of the input, has a programmatically linked and accessibly hidden label enclosing the text "Find in this site" referenced by aria-labelledby. Because aria-labelledby takes precedence over the value of the input, the accessible name of the input in most browser / screen reader combinations will be "Find in this site". Speech users speaking a command such as "Click search" will be unable to activate the input.

<div id="hidden-label">Find in this site</div>
<input type="submit" aria-labelledby="hidden-label" value="search">

Related techniques:
- F111: Failure of Success Criteria 1.3.1, 2.5.3, and 4.1.2 due to a control with visible label text but no accessible name
- G131: Providing descriptive labels
- ARIA7: Using aria-labelledby for link purpose
- ARIA8: Using aria-label for link purpose
- ARIA9: Using aria-labelledby to concatenate a label from several text nodes
- ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used
- ARIA16: Using aria-labelledby to provide a name for user interface controls
- SCR30: Using scripts to change the link text


------------------------------

F97: - Failure due to locking the orientation to landscape or portrait view
Failure due to locking the orientation to landscape or portrait view

About this Technique
	- This technique relates to 1.3.4: Orientation (Failure).
	- This failure applies to all technologies that allow the viewing of content to be restricted to one orientation.

Description : The objective of this technique is to describe how restricting the view of content to a single orientation is a failure to allow content to be viewed in multiple orientations. When content is presented with a restriction to a specific orientation, users must orient their devices to view the content in the orientation that the author imposed. Some users have their devices mounted in a fixed orientation (e.g. on the arm of a power wheelchair), and if the content cannot be viewed in that orientation it creates problems for the user. : If a specific orientation is determined to be essential for the operation and viewing of the content, then this failure technique will not apply.

Examples
A news app always shows the content in portrait orientation. Users can view the content on a device which supports landscape and portrait display orientations. When the device is turned to landscape view, the content appears sideways to the user.

Related techniques:
- G214: Using a control to allow access to content in different orientations which is otherwise restricted


------------------------------

F98: - Failure due to interactions being limited to touch-only on touchscreen devices
Failure due to interactions being limited to touch-only on touchscreen devices

About this Technique
	- This technique relates to 2.5.6: Concurrent Input Mechanisms (Failure).
	- This failure applies to all technologies that include interactive controls (such as links, form inputs, or complex custom widgets) and that can detect the presence of different input modalities.

Description : The objective of this Failure is to describe situations where users on devices that have a touchscreen are unable to use other input modalities available to them (such as an additional/external mouse or keyboard). : There are various methods and heuristics for web content to determine if a user's device has a touchscreen. However, even when a touchscreen is present, other input modalities may be available to users. It is not necessarily the case that the user will be interacting with the web content (exclusively, or at all) using the touchscreen. : If, when a touchscreen is detected, web content is designed to be operated exclusively through touch, these users will be unable to operate the content using their other (possibly preferred) input mechanisms.

Examples
Example 1: Only using touch-specific JavaScript event listeners when a touchscreen is detected

These types of approaches have historically been popular for "mobile" specific development, to ensure that touchscreen interactions are more responsive and immediate (due to the way that touch interactions used to add a delay of approximately 300ms between a "tap" interaction and the generic click event being fired).


/* inferring the presence of a touchscreen based on
   support for the Touch Events API */

if (window.TouchEvent || ('ontouchstart' in window)) {
  /* set up event listeners for touch */
  target.addEventListener('touchend', ...);
  ...
}
else {
  /* set up event listeners for mouse/keyboard */
  target.addEventListener('click', ...);
  ...
}

/* inferring the presence of a touchscreen based on
   the CSS Media Queries 4 Interaction Media Features
   match for a "coarse" primary input mechanism */

if (window.matchMedia && window.matchMedia("(pointer:coarse)").matches) {
  /* set up event listeners for touch */
  target.addEventListener('touchend', ...);
  ...
}
else {
  /* set up event listeners for mouse/keyboard */
  target.addEventListener('click', ...);
  ...
}

Similarly, web content that omits relevant/necessary keyboard event listeners (e.g. for the correct keyboard interaction with a complex widget, such as a tab interface) when a touchscreen is detected - under the assumption that on a touch device, keyboard support won't be necessary.


/* inferring the presence of a touchscreen based on
   the navigator.maxTouchPoints property defined in
   the Pointer Events API */

if (window.PointerEvent && ('maxTouchPoints' in navigator) &&
    (navigator.maxTouchPoints > 0)) {
	/* no need to listen to keyboard - there's a touchscreen... */
	...
}
else {
	/* set up event listeners for keyboard interactions */
  target.addEventListener('keyup', ...);
  ...
}

Note

Generally, these approaches will also result in a failure of Success Criterion 2.1.1 Keyboard - but only in situations where a touchscreen interface was also detected.

Example 2: Hiding/omitting controls for mouse and keyboard users when a touchscreen is detected

Web content containing interactive widgets such as content carousels, with visible buttons to operate the widget (such as previous/next buttons, or a visible scrollbar/slider). These visible controls are hidden/omitted when a touchscreen is detected, under the assumption that users will simply use touch gestures to operate the widgets, and no other alternatives are then provided for keyboard or mouse users.

/* using CSS Media Queries 4 Interaction Media Features
   to hide particular elements in the page (such as a container
   with visible controls) when a "coarse" primary input is present */

@media (pointer: coarse) {
  #widget .controls { display: none; }
}

Depending on the specific implementation, authors may allow mouse interactions with widgets that mirror touch gestures - for instance, allowing mouse users to also drag/swipe carousels, rather than just relying on clickable previous/next controls or scrollbars. In these cases, hiding controls when a touchscreen is detected will still allow users to operate the widget with the mouse (unless this interaction has also been suppressed/omitted when the touchscreen was detected, as per the previous example). However, if the only keyboard-operable controls for the widget were hidden, and no alternative for keyboard users was provided (such as allowing cursor key operation), this situation would still fail Success Criterion 2.5.6.

Note

Generally, these approaches will also result in a failure of Success Criterion 2.1.1 Keyboard and (depending on the touch gesture that the user is expected to perform) Success Criterion 2.5.1 Pointer Gestures.


------------------------------

F99: - Failure of Success Criterion 2.1.4 due to implementing character key shortcuts that cannot be turned off or remapped
Failure of Success Criterion 2.1.4 due to implementing character key shortcuts that cannot be turned off or remapped

About this Technique
	- This technique relates to 2.1.4: Character Key Shortcuts (Failure).
	- This failure applies to web content that can be interacted with using a physical keyboard as input mechanism.

Description : When keyboard shortcuts using only character keys are implemented, voice commands can inadvertently trigger functionality. Character key shortcuts use a single key such as a letter key (including upper- and lower-case letters), punctuation, number, or symbol characters. : Content must either not implement single character key shortcuts, or offer settings to either turn off these shortcuts or to map them to keyboard shortcuts that employ an additional modifier key, such Alt or Ctrl. : Note : The use of a single key keyboard shortcut is not a failure if the shortcut is only active when a particular interface element has focus. For example, when a select element or a custom listbox has focus, the input of single character keys to navigate the list is a useful feature. : The test procedure suggests asking the author (often the developer of the site) whether keyboard shortcuts are used. If that information is trusted then the procedure can be simpler than pressing all the keys. : The success criterion does not apply when single key shortcuts are only active when interface elements have the focus, for example, a select element. Here, pressing a letter key is used for fast navigation within the select options. : Viewing page scripts and searching for typical keyboard event handlers like document.addEventListener('keydown' ...) or the presence of the .keycode attribute may establish the presence of scripts that intercept keyboard shortcuts without modification keys like ALT or Ctrl being held down at the same time. As there are several ways of implementing character key events, this method is not considered reliable. : Some browsers employ single key shortcuts with Shift. For example, Firefox opens a page search when pressing Shift + / and a search in page links when pressing Shift + '. In these cases, it will be necessary to press Esc or click an empty part of the page to remove the focus from the browser input.

Example

An application uses the single key shortcut S to bring up a search popup. There is no setting available to turn off or modify the shortcut.


------------------------------

F100: - Failure of Success Criterion 1.3.4 due to showing a message asking to reorient device
Failure of Success Criterion 1.3.4 due to showing a message asking to reorient device

About this Technique
	- This technique relates to 1.3.4: Orientation (Failure).
	- This failure applies to Cascading Style Sheet / HTML technologies.

Description : This describes the failure condition that results when an author, having detected a device orientation that is considered undesirable, displays a message telling the user to reorient the device -- instead of the author reorienting all the content. : Detecting and responding to a user's device orientation is not itself a problem. The author decision to only offer one orientation of content is what fails the requirements of Success Criterion (SC) 1.3.4 Orientation. It is inadequate to display only a message in the detected orientation, telling users to rotate their devices (when not essential to the underlying activity). The entirety of the author-controlled content needs to be re-oriented in order to meet the SC. : There are various methods for devices to determine if the content is in landscape or portrait orientation. One of these methods involves looking at the width-to-height aspect ratio of the viewport. In other words, checking if the width is smaller or larger than the height. The CSS orientation media feature is portrait when the value of the height media feature is greater than or equal to the value of the width media feature. Otherwise, orientation is landscape.

Examples
Example 1: Block an orientation ("door slam") by using HTML and CSS

The following example uses HTML and CSS to show a message asking to reorient the device if in landscape.

The message will disappear if the orientation is changed to portrait. When the portrait property matches the viewport space defined via media queries, the message will disappear or vice versa. This particular example uses the CSS landscape, portrait media query properties.

<style>
/* Orientation "door slam" Styling */

@media all and (orientation: landscape) {
  .rotate { display: block; }
  .content { display: none; }
}

@media all and (orientation: portrait) {
  .rotate { display: none; }
  .content { display: block; }
}

.rotate {
  text-align: center;
  font-size: 2rem;
  margin-top: 4rem;
}
</style>

<!-- Orientation "door slam" HTML -->

<div class="rotate">Please rotate your device!</div>

<div class="content">
  ...
</div>

Working example: Show message asking to reorient device


------------------------------

F101: - Failure of Success Criterion 2.5.2 due to activating a control on the down-event
Failure of Success Criterion 2.5.2 due to activating a control on the down-event

About this Technique
	- This technique relates to 2.5.2: Pointer Cancellation (Failure).
	- This failure applies to all technologies that include interactive controls that can be triggered using a pointer.

Description : The objective of this Failure is to describe situations where: : Controls are set to activate functionality on the down-event of a pointer;
	- No further mechanism to abort or undo is available;
	- The up-event does not reverse the outcome of the activation;
	- It is not essential for the functionality to execute and complete on the down-event. : Rather than taking advantage of the click event, authors may use down-events such as mousedown, touchstart or pointerdown. As a result, functionality will be executed as soon as a mouse button is pressed (but not released yet), or a finger or stylus makes contact with a touchscreen. : It is possible to use the down event and mitigate potential issues to avoid failing the Success Criterion. For example, provide a method to easily undo or abort the functionality, or reverse the outcome on the up-event (when the mouse button is released, or when the finger or stylus are lifted from the touchscreen). And note that some uses of the down-event are essential for the functionality (e.g., where the control simulates the operation of a musical instrument like a set of piano keys, or when the control is used as an on-screen control for a game where a fast and immediate response is required), in which case they would not fail this Success Criterion. : Note : The test procedure outlined below could be supplemented with automated or semi-automated tests to scan for JavaScript that registers event listeners such as mousedown, touchstart, or pointerdown. The automated test would not be sufficient to make a pass/fail determination, but it can help narrow down the number of potentially problematic controls.

Examples
Example 1: A close button that triggers on down-events

A modal dialog contains a lengthy form that a user needs to complete. The modal provides a simple "Close" control that closes the dialog and loses all information the user may already have entered in the form. However, instead of simply listening to the click event - which in most user agents is triggered on the up-event - the author decided to close the dialog on the down-event. This may lead to the user accidentally closing the dialog and losing all the data they entered into the form up to that point.

<!-- modal dialog with a form -->
...
<button id="close" type="button">Close</button>
...
const trigger = document.getElementById("close");

function closeDialog() {
  /* close the modal dialog */
  ...
}

trigger.addEventListener('mousedown', closeDialog);
trigger.addEventListener('touchstart', closeDialog);
trigger.addEventListener('pointerdown', closeDialog);


------------------------------

F102: - Failure of Success Criterion 1.4.10 due to content disappearing and not being available when content has reflowed
Failure of Success Criterion 1.4.10 due to content disappearing and not being available when content has reflowed

About this Technique
	- This technique relates to 1.4.10: Reflow (Failure).
	- This failure applies to all technologies.

Description : This document describes a failure that occurs when a change of the viewport width to 320px makes content disappear that was available at wider viewport widths. Some content available at wider widths may not be shown in the same way or at the same position at the viewport width of 320px, simply because there is less space (screen 'real estate') to display it. This content, however, should still be available after reflow to 320px viewport width, either by being repositioned in a single column view, or through some interaction offering the information in some other way, for example, in a disclosure area, a dialog, or via a link to another view.

Examples

The following examples demonstrate the failure to make content visible at a wider viewport width also available after a reflow to 320px:

A block of blog entry links in a side column disappears entirely after reflow (i.e., it is not available further down in the single column view).
Labels above text inputs are hidden and replaced by placeholder text after reflow, without a technique showing dedicated labels when focusing the fields.
Sections of content text disappear after reflow, without being available via some disclosure widget.
Information-carrying images disappear after reflow, without link or the availability of an equivalent alternative.
A global search field disappears after reflow, without an icon or menu option to reveal a search function or reach an equivalent search page.


------------------------------

F103: - Failure of Success Criterion 4.1.3 due to providing status messages that cannot be programmatically determined through role or properties
Failure of Success Criterion 4.1.3 due to providing status messages that cannot be programmatically determined through role or properties

About this Technique
	- This technique relates to 4.1.3: Status Messages (Failure).
	- This failure applies to technologies that support Accessible Rich Internet Applications (WAI-ARIA).

Description : The objective of this technique is to describe a failure where status messages are used in content but are not communicated to the user due to a lack of appropriate roles or properties. : The initial step in confirming a failure of Status Messages is to check that new dynamic content meets the definition of a status message. There are two criteria that determine if changed content on a page represents a status message: : the new content does not take focus (does not change context);
	- the new content provides information to the user on the outcome of an action, the state of an application, the progress of a process, or the existence of errors.
	- Where updated content does not conform to the definition of status messages, a failure of 4.1.3 has not taken place. : The second step in this failure technique involves examining code. Where dynamic content meets the definition of a status message, its container can be examined for an appropriate WAI-ARIA role or property which allows it to be programmatically determinable as a status message. Currently there are only a small number of techniques available to indicate status messages to assistive technologies. They are: : the HTML output element
	- role="status"
	- role="alert"
	- role="log"
	- the use of an aria-live attribute on an element, set to either "polite" or "assertive"
	- The absence of all of these techniques predicts a failure for the status message be announced to the user. Additionally, if the role or property is not set before the dynamic content is added, this also predicts a failure. : Since additional techniques may exist to alert an assistive technology, the final step of this failure technique is confirming whether an assistive technology (such as a screen reader) detects the dynamic content and exposes the information to users. Where a status message exists but is not surfaced by assistive technology, it is confirmation that a failure has taken place.

Examples
Example 1: Including a search results message without a status role

When a user carries out a search by pressing a Search button, the page content is updated with the results of the search, displayed in a section below the Search button. Since the search has no results, the change to content conveys the status message "0 results returned". This text is not given an appropriate role for a status message, and so a screen reader will not announce "Zero results returned" unless the user repositions to that text. Since the status message is not automatically presented to the user (i.e., instead, it must be manually discovered by the individual), it fails 4.1.3.

Working example: search results message without appropriate role


------------------------------

F104: - Failure of Success Criterion 1.4.12 due to clipped or overlapped content when text spacing is adjusted
Failure of Success Criterion 1.4.12 due to clipped or overlapped content when text spacing is adjusted

About this Technique
	- This technique relates to 1.4.12: Text Spacing (Failure).
	- This failure applies to text content created in markup languages that support text style properties.

Description : The purpose of this technique is to identify and test a failure condition where part of the content clips and is unreadable when the user overrides the spacing of the text within the boundaries set out in the Text Spacing success criterion. In general, this failure occurs when text is presented in a size-constrained block which does not expand if the size of the content increases. Some of the ways in which this can occur include: : Setting the overflow property of the enclosing element to hidden
	- Using absolutely positioned content
	- Creating borders that are not large enough for the content when using the new font spacing

Examples
Example 1: Text inside a box overflows and overlaps text below it when text spacing is implemented.

The code below is what is implemented in the DOM before the user implements any CSS test spacing overrides. The text renders correctly in the box and doesn't interfere with the next paragraph.

<div style="font-size:100%; width:130px; height:125px; border: thin solid gray;">
  <p style="margin:0;">Now is the time for all good men to come to 
   the aid of their country.</p>
</div>
<p style="margin:0;">The quick brown fox jumps over the lazy dog.</p>

Now is the time for all good men to come to the aid of their country.

The quick brown fox jumps over the lazy dog.

Here is the view AFTER the text spacing has been overridden by the user with the text spacing in the success criterion. The text overlaps the paragraph below it.

Now is the time for all good men to come to the aid of their country.

The quick brown fox jumps over the lazy dog.

Example 2: Text inside a box is clipped when text spacing is implemented.

The code below is what is implemented in the DOM before the user implements any CSS test spacing overrides. The text renders correctly in the box and doesn't interfere with the next paragraph.

<div style="font-size:100%; width:130px;
 height:95px; overflow:hidden; border:thin solid gray;">
  <p>Now is the time for all good men to come to the aid of their country.</p>
</div>
<p>The quick brown fox jumps over the lazy dog.</p>

Here is the default view before the text spacing has been overridden by the user, The text renders properly in the box.

Now is the time for all good men to come to the aid of their country.

The quick brown fox jumps over the lazy dog.

Here is the view AFTER the text spacing has been overridden by the user with the maximum text spacing in the success criterion, the text is clipped.

Now is the time for all good men to come to the aid of their country.

The quick brown fox jumps over the lazy dog.

Related techniques:
- F69: Failure of Success Criterion 1.4.4 when resizing visually rendered text up to 200 percent causes the text, image or controls to be clipped, truncated or obscured


------------------------------

F105: - Failure of Success Criterion 2.5.1 due to providing functionality via a path-based gesture without simple pointer alternative
Failure of Success Criterion 2.5.1 due to providing functionality via a path-based gesture without simple pointer alternative

About this Technique
	- This technique relates to 2.5.1: Pointer Gestures (Failure).
	- This failure applies to all technologies that include interactive controls that can be triggered using a pointer.

Description : The objective of this Failure is to describe situations where authors have implemented a function that is operated via a path-based gesture, and no alternative ways of operating this function via simple pointer gestures exist. : If you did not create the content and functionality you can find path-based gestures by exploring the content on a touch screen, or checking the page code for the existence of specific event handlers such as touchstart or touchend. See the Understanding document for Pointer Gestures for more on the path-based gestures. : Note: For functionality implemented with a path-based gesture, the possibility of also operating it via the keyboard is beneficial (and may serve to meet Success Criterion 2.1.1 Keyboard). The point of Success Criterion 2.5.1, however, is to ensure that pointer users who on many devices will have no keyboard available, have alternative ways of operating the function via simple pointer input.

Examples
Example 1
A web application implements an interface where drawing a "Z" on the screen undoes the last action. There is no other way to undo the action.
A swipe-to-reveal control displays a set of options when swiping an item to the left, and another set of options when swiping an item to the right. One or more of these options are not available after the item is first opened with a single tap or click.

Related techniques:
- F101: Failure of Success Criterion 2.5.2 due to activating a control on the down-event
- G216: Providing single point activation for a control slider


------------------------------

F106: - Failure due to inability to deactivate motion actuation
Failure due to inability to deactivate motion actuation

About this Technique
	- This technique relates to 2.5.4: Motion Actuation (Failure).
	- This failure applies to content using technologies that can support the detection of device or user motion such as shaking or tilting and use these motions as a means of input.

Description : This describes the failure condition that results when motion actuation can not be deactivated. People who may accidentally activate sensors due to tremors or other motor impairments need the ability to turn off motion actuation to prevent such accidental triggering of functions. : Note : The type of motion covered by the Motion Actuation Success Criterion does not relate to the movement of users through space as registered by geolocation sensors or beacons, or events observed by the device other than intentional gesturing by the user. It also does not cover indirect motion associated with operating a keyboard, pointer, or assistive technology.

Examples
Example 1: Motion Activated Slider

A slider which uses tilting motion to increase or decrease the value of an input, with no mechanism to deactivate the motion detection.

Working example of a motion activated slider that can not be deactivated

Related techniques:
- G213: Provide conventional controls and an application setting for motion activated input


------------------------------

F107: - Failure of Success Criterion 1.3.5 due to incorrect autocomplete attribute values
Failure of Success Criterion 1.3.5 due to incorrect autocomplete attribute values

About this Technique
	- This technique relates to 1.3.5: Identify Input Purpose (Failure).
	- This failure applies to form inputs created in HTML which collect information about the user of the form.

Description : The purpose of this technique is to identify a failure condition where form inputs do not have the correct autocomplete attribute values for inputs that request information about the user of the form. : Success Criterion 1.3.5 uses a fixed list of tokens in Input Purposes for user interface components (based on the HTML 5.2 autocomplete attribute's fixed list of token values) because the programmatic association of specified token values (metadata) allows for other machine processing, such as expressing the input label in different modalities. : Another important part of this Success Criterion is that the token values are associated with inputs that are scoped directly to the primary end user.

Examples
Example 1: Incorrect attribute

An online form used to collect the user's name and birthday which uses incorrect autocomplete attributes. The correct attribute value for the first control is name, and for the second control the made-up attribute value birthday was used instead of bday.

<h2>Your details:</h2>
<label for="uname">Name:</label>
<input autocomplete="email" id="uname" type="text"> 
<label for="ubirthday">Birthday:</label>
<input autocomplete="birthday" id="ubirthday" type="text">

Related techniques:
- H98: Using HTML 5.2 autocomplete attributes


------------------------------

F108: - Failure of Success Criterion 2.5.7 Dragging Movements due to not providing a single pointer method for the user to operate a function that does not require a dragging movement
Failure of Success Criterion 2.5.7 Dragging Movements due to not providing a single pointer method for the user to operate a function that does not require a dragging movement

About this Technique
	- This technique relates to 2.5.7: Dragging Movements (Failure).
	- This failure applies to content using any technology which supports pointer input.

Description : The objective of this failure is to avoid situations in which people with motor impairments who cannot operate content because the only way to actuate a function is by dragging a target element from its initial position to some other position. The failure occurs when there is no alternative single pointer input available to actuate the function. The alternative may involve a series of single pointer interactions (for example, activating a target to be moved; opening a dropdown menu; and selecting a drop destination from the list of menu items offered).

Examples
Example 1: List re-ordering

A list of items can be re-ordered by picking up an item and dragging it upwards or downwards. Other elements move dynamically to open a gap where the picked-up target can be dropped. There is no alternative way to re-order the list that can be executed via a single pointer input.

Example 2: Kanban board

In a Kanban implementation for process management, tasks can be dragged horizontally across from one ‘swimming lane’ to another in order to change the status of tasks (for example, to change the status of a task from “in process” to “completed”). There is no alternative way to move targets between lanes that can be executed via a single pointer input.


------------------------------

F109: - Failure of Success Criterion 3.3.8 and 3.3.9 due to preventing password or code re-entry in the same format
Failure of Success Criterion 3.3.8 and 3.3.9 due to preventing password or code re-entry in the same format

About this Technique
	- This technique relates to:
	- 3.3.8: Accessible Authentication (Minimum) (Failure)
	- 3.3.9: Accessible Authentication (Enhanced) (Failure)
	- This failure applies to all technologies that require authentication.

Description : Requiring users to authenticate by entering a password or code in a different format from which it was originally created is a failure to meet Success Criteria 3.3.8 and 3.3.9 (unless alternative authentication methods are available). The string to be entered could include a password, verification code, or any string of characters the user has to remember or record to authenticate. : If a user is required to enter individual characters across multiple fields in a way that prevents pasting the password in a single action, it prevents use of a password manager or pasting from local copy of the password. This means users cannot avoid transcription, resulting in a cognitive function test. This applies irrespective of whether users are required to enter all characters in the string, or just a subset.

Examples

These examples would prevent a user from entering a password or code in the same format in which it was originally created:

A fieldset that prompts a user to "Enter the 2nd, 6th and last characters of your password", with separate input fields for each character.
A fieldset that prompts a user to enter each digit of a verification code in a separate input (unless the user can paste the entire code in the first input, and the remaining inputs are populated automatically).
A password input fieldset composed of <select> elements that requires a user to select each character of a fixed-length password from individual dropdown fields.


------------------------------

F110: - Failure of Success Criterion 2.4.11 Focus Not Obscured (Minimum) due to a sticky footer or header completely hiding focused elements
Failure of Success Criterion 2.4.11 Focus Not Obscured (Minimum) due to a sticky footer or header completely hiding focused elements

About this Technique
	- This technique relates to 2.4.11: Focus Not Obscured (Minimum) (Failure).
	- This failure applies to content using any technology which supports keyboard interfaces.

Description : The objective of this failure is to avoid situations in which people using a keyboard interface (e.g. tabbing through links and controls) cannot see where the indicator is due to other authored content. : Any 'sticky' content that moves with the viewport can potentially obscure other elements on the page, including controls the user may tab to.

Examples
Example 1: Sticky footer

A Web page has a sticky footer, an element that stays visible at the bottom of the viewport as the user scrolls the page. The footer is tall enough to completely cover the element in focus as a user tabs down the page.

Failure example of sticky footer that completely cover elements in focus as a user tabs down the page.

Example 2: Sticky header

A Web page has a sticky header, an element that stays visible at the top of the viewport as the user scrolls the page. The header is tall enough to completely cover the element in focus as a user tabs up the page.

Failure example of sticky header that completely cover elements in focus as a user tabs up the page.


------------------------------

F111: - Failure of Success Criteria 1.3.1, 2.5.3, and 4.1.2 due to a control with visible label text but no accessible name
Failure of Success Criteria 1.3.1, 2.5.3, and 4.1.2 due to a control with visible label text but no accessible name

About this Technique
	- This technique relates to:
	- 1.3.1: Info and Relationships (Failure)
	- 2.5.3: Label in Name (Failure)
	- 4.1.2: Name, Role, Value (Failure)
	- This failure applies to all technologies that include interactive controls (such as links or form inputs).

Description : The objective of this Failure is to describe situations where speech input users cannot reliably speak the name of a control because although it has a visible label, it lacks an accessible name. : When speech input users interact with a web page, they usually speak a command followed by the reference to some visible label (like the text in a button or a link, or the text labelling some input). If the control lacks an accessible name, speech users won't be able to activate the control using its visible label.

Examples
Example 1: A text input with a visible label, but without an accessible name

The text input is preceded by a visible text label "Enter name", but the text is not marked up as a <label> for the input, and there is no alternative way (e.g., aria-label) to provide the input with an accessible name at all.


					<p>Enter name</p>
					<input type="text">
        
Example 2: A text input with a visible label and aria-labelledby pointing to a non-existent id

The text input is preceded by a visible text label "Enter name". The text's container has an id of nameEntry, but the input has an aria-labelledby referencing a non-existent name-entry id. As a result, the input lacks an accessible name altogether.


					<p id="nameEntry">Enter name</p>
					<input type="text" aria-labelledby="name-entry" >

Related techniques:
- F96: Failure due to the accessible name not containing the visible label text
- G131: Providing descriptive labels
- ARIA7: Using aria-labelledby for link purpose
- ARIA8: Using aria-label for link purpose
- ARIA9: Using aria-labelledby to concatenate a label from several text nodes
- ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used
- ARIA16: Using aria-labelledby to provide a name for user interface controls
- SCR30: Using scripts to change the link text

--------------------------------------------------

File: general.json
==================================================

G1: - Adding a link at the top of each page that goes directly to the main content area
Adding a link at the top of each page that goes directly to the main content area

About this Technique
	- This technique relates to 2.4.1: Bypass Blocks (Sufficient when used for creating links to skip blocks of repeated material).
	- This technique applies to all technologies that contain links.

Description : The objective of this technique is to provide a mechanism to bypass blocks of material that are repeated on multiple Web pages by skipping directly to the main content of the Web page. The first interactive item in the Web page is a link to the beginning of the main content. Activating the link sets focus beyond the other content to the main content. This technique is most useful when a Web page has one main content area, rather than a set of content areas that are equally important, and when there are not multiple navigation sections on the page. : Note : It is preferable for links to be visible at all times, since users navigating via the keyboard include switch users, those using techniques that generate keyboard strokes slowly, screen magnification software users, screen reader users working with sighted colleagues, keyboard only users and those navigating using voice recognition software. However, Success Criterion 2.4.1 does not require that they be visible when they do not have focus, and links that are visible only when they have focus can meet this success criterion.

Examples
Example 1: An online newspaper

An on-line newspaper contains many sections of information: a search function, a corporate banner, sidebars, minor stories, how to contact the newspaper, etc. The lead story is located in the middle of the page. The first link that the user reaches when tabbing through the page is titled "Skip to Lead Story". Activating the link moves visual focus to the story. Pressing tab again takes the user to the first link in the main story.

Example 2: A "Skip to main content" link

A Web page includes a variety of navigation techniques on each page: a bread crumb trail, a search tool, a site map, and a list of related resources. The first link on the page is titled "Skip to Main Content". A user activates the link to skip over the navigation tools.

Related techniques:
- ARIA11: Using ARIA landmarks to identify regions of a page
- G123: Adding a link at the beginning of a block of repeated content to go to the end of the block
- G124: Adding links at the top of the page to each area of the content


------------------------------

G4: - Allowing the content to be paused and restarted from where it was paused
Allowing the content to be paused and restarted from where it was paused

About this Technique
	- This technique relates to:
	- 2.2.1: Timing Adjustable (Sufficient)
	- 2.2.2: Pause, Stop, Hide (Sufficient)
	- This technique applies to any technology that includes moving or scrolling content.

Description : The objective of this technique is to provide a way to pause movement or scrolling of content. If the user needs to pause the movement, to reduce distraction or to have time to read it, they can do so, and then restart it as needed. This mechanism can be provided either through interactive controls that conform to WCAG or through keyboard shortcuts. If keyboard shortcuts are used, they are documented.

Examples
A site contains a scrolling news banner at the top of the page. Users who need more time to read it can press the Escape key to pause the scrolling. Pressing Escape again restarts it.
A Web page contains a link labeled "How to tie a shoe" which links to an animation. Text immediately preceding the link informs the user that pressing the spacebar will pause the animation and restart it again.

Related techniques:
- G75: Providing a mechanism to postpone any updating of content
- G76: Providing a mechanism to request an update of the content instead of updating automatically
- G186: Using a control in the Web page that stops moving, blinking, or auto-updating content
- SCR33: Using script to scroll content, and providing a mechanism to pause it


------------------------------

G5: - Allowing users to complete an activity without any time limit
Allowing users to complete an activity without any time limit

About this Technique
	- This technique relates to 2.2.3: No Timing (Sufficient).
	- This technique applies to any technologies or methods supporting the implementation of an activity which does not require timed interaction for its functionality.

Description : The objective of this technique is to provide users with all the time they need to complete an activity. This technique involves providing a specified activity which does not require timed interaction. Users are allowed as much time as they need to interact with the activity.

Examples
An interactive exam for a course provides all questions on one Web page. Users can take as much time as they need to complete it.
In an interactive game, users can take as much time as they like on their turn instead of having to complete their move within a limited amount of time.
In an online auction, each bidder can submit only one bid rather than submitting multiple competitive bids based on timing. The bidding is open for a full day, providing enough time for anyone to complete the simple bid form. Once bidding is closed, the best bid wins.

Related techniques:
- G75: Providing a mechanism to postpone any updating of content
- G76: Providing a mechanism to request an update of the content instead of updating automatically
- G80: Providing a submit button to initiate a change of context
- G198: Providing a way for the user to turn the time limit off


------------------------------

G8: - Providing a movie with extended audio descriptions
Providing a movie with extended audio descriptions

About this Technique
	- This technique relates to:
	- 1.2.3: Audio Description or Media Alternative (Prerecorded) (Sufficient using a more specific technique)
	- 1.2.5: Audio Description (Prerecorded) (Sufficient using a more specific technique)
	- 1.2.7: Extended Audio Description (Prerecorded) (Sufficient using a more specific technique)
	- This technique applies to any technology that supports audio and video.

Description : The objective of this technique is to provide a second version of video content that provides extended audio descriptions. One of the difficult things about creating traditional audio descriptions is that the narrator sometimes has to provide a lot of information during very short pauses in dialogue. Extended audio description temporarily pauses the audio and video to allow critical information to be delivered when pauses in dialogue are insufficient for adequate description. : Providing a second version of the movie with extended audio descriptions will make this content accessible for blind people who need to hear not only the dialogue but also the context and other aspects of the video that are not communicated by the characters' dialogue alone, and for which there is insufficient time during the natural dialogue. : Because it disrupts viewing for those who do not need the additional description, techniques that allow you to turn the feature on and off are often provided. Alternately, versions with and without the additional description can be provided.

Examples
Example 1

An alternate version of an online video of a family escaping from a burning building: there is a continuous dialogue between the husband and wife about where the children are. Meanwhile, in the background, a wall caves in. This is important information in the story because it will block their exit from that part of the building. The video track halts (same frame is repeated) while a narrator gives the details about the wall falling and the video continues.

Example 2

A training film has narrative that runs almost continuously throughout. An alternate version is available for people who have difficulty viewing the video portion. The alternate version freezes the video and provides audio description of key information.

Related techniques:
- G78: Providing a second, user-selectable, audio track that includes audio descriptions
- G69: Providing an alternative for time based media
- G173: Providing a version of a movie with audio descriptions
- SM1: Adding extended audio description in SMIL 1.0
- SM2: Adding extended audio description in SMIL 2.0
- SM6: Providing audio description in SMIL 1.0
- SM7: Providing audio description in SMIL 2.0


------------------------------

G9: - Creating captions for live synchronized media
Creating captions for live synchronized media

About this Technique
	- This technique relates to:
	- 1.2.4: Captions (Live) (Sufficient, together with G93: Providing open (always visible) captions)
	- 1.2.4: Captions (Live) (Sufficient, together with G87: Providing closed captions)
	- 1.2.4: Captions (Live) (Sufficient, together with G87: Providing closed captions using a more specific technique)
	- This technique applies to all technologies that present audio visual information.

Description : The objective of this technique is to allow users who cannot hear to be able to access real-time synchronized media broadcasts. It is more difficult to create accurate real-time captions because there is little time to correct mistakes or to listen a second time or consult someone to be sure the words are accurately reproduced. It is also harder to simplify or paraphrase information if it is flowing too quickly. : Real-time typing text entry techniques exist using stenographic and rapid typing technologies. Re-voicing speech-to-text (where a person listens to speech and then carefully re-voices it into a computer trained to their speech) is used today for telephone relay services and may be used in the future for captioning. Eventually speech-to-text with correction will be possible.

Examples
Example 1

A television studio uses a real-time captioning service to create captions for its evening news online.

Example 2

A user watches an online seminar on their mobile device, including captioning provided through the use of Communication Access Real-time Translation (CART). The captions provided also benefit in-person participants who need captioning and can view the information on their own device.

Related techniques:
- G87: Providing closed captions
- G93: Providing open (always visible) captions
- G157: Incorporating a live audio captioning service into a Web page


------------------------------

G10: - Creating components using a technology that supports the accessibility API features of the platforms on which the user agents will be run to expose the names and roles, allow user-settable properties to be directly set, and provide notification of changes
Creating components using a technology that supports the accessibility API features of the platforms on which the user agents will be run to expose the names and roles, allow user-settable properties to be directly set, and provide notification of changes

About this Technique
	- This technique relates to 4.1.2: Name, Role, Value (Sufficient using a more specific technique).
	- This technique applies to programming technologies that have standard components programmed to interface with accessibility APIs.

Description : The objective of this technique is to allow assistive technology to understand Web content so that it can convey equivalent information to the user through an alternate user interface. : Sometimes content is not created using markup language but rather using a programming language or tools. In many cases, these technologies have interface components that are already programmed to interface with accessibility APIs. If an author uses these components and fills in the properties (e.g., name, etc.), the resulting user interface components in the content will be accessible to assistive technology. : However, if an author wants to create a user interface component that is new and they cannot use standard components, then they need to be sure to add the accessibility provisions themselves - and implement them in a way that is compatible with the accessibility API. : After completion, the custom component should be tested for Accessibility Support.

Examples
A Web page uses java to create an applet. A group of authors wants to create an entirely new type of interface component so they cannot use existing Java objects. They use Java swing classes to create their component because the Java swing classes already have provisions for connecting to different accessibility APIs. Using the Java swing classes they are able to create an interface component that exposes its name and role, is able to be set by AT and alerts AT to any updates.

Related techniques:
- H91: Using HTML form controls and links


------------------------------

G11: - Creating content that blinks for less than 5 seconds
Creating content that blinks for less than 5 seconds

About this Technique
	- This technique relates to 2.2.2: Pause, Stop, Hide (Sufficient).
	- This technique applies to technologies that support blinking content.

Description : The objective of this technique is to minimize the distraction caused by blinking content and enable users to re-focus on the other content on the page. : Blinking content can be created using a variety of technologies, many of which include options to loop blinking content continuously or to otherwise specify the amount of time the blinking content is displayed. Limiting the blinking of content to five seconds minimizes the distraction that blinking can cause. This will benefit people with certain types of learning disabilities and people with low vision.

Examples
An animated image is used to highlight items on sale. Within a list of items for purchase, an image of a red tag followed by the phrase "On sale" is used to indicate items being offered at a reduced price. The image of the red tag blinks on loading of the page and stops within five seconds.

Related techniques:
- G152: Setting animated gif images to stop blinking after n cycles (within 5 seconds)
- G186: Using a control in the Web page that stops moving, blinking, or auto-updating content
- G191: Providing a link, button, or other mechanism that reloads the page without any blinking content
- SCR22: Using scripts to control blinking and stop it in five seconds or less


------------------------------

G13: - Describing what will happen before a change to a form control that causes a change of context to occur is made
Describing what will happen before a change to a form control that causes a change of context to occur is made

About this Technique
	- This technique relates to:
	- 3.2.2: On Input (Sufficient)
	- 3.3.2: Labels or Instructions (Advisory)
	- This technique applies to all technologies.

Description : The objective of this technique is to provide information to users about what will happen when a change to a form control results in a change of context. Because changing the value of a form control does not typically result in a change of context, it is important that authors provide instructions that make the user aware of the behavior in advance. Where possible, it is a good idea to programmatically associate the instructions describing the change with the form control itself. : The following are some examples of how to provide the instruction in different situations. : Provide instruction on the Web page with reading order that precedes the user interface element that causes change of context by change of setting.
	- For a multi-step process where users must complete particular steps in order to reach the user interface element where changes of setting would cause a change of context, provide the instruction as part of the process prior to the step where they would encounter the change of context.
	- In the case of an intranet where user training is required prior to the use of a Web application where user interface elements that cause changes of context when settings are changed, instruction is provided as part of the training.

Examples
A series of radio buttons at the top of a page include options for German, French and Spanish. Instructions precede the buttons that instruct the user that the language will be changed upon selecting an option.
A 50 question online survey displays one question at a time. Instructions appear at the beginning of the survey that explain that users will be taken to the next question of the survey upon selecting an answer to each question.

Related techniques:
- G80: Providing a submit button to initiate a change of context


------------------------------

G14: - Ensuring that information conveyed by color differences is also available in text
Ensuring that information conveyed by color differences is also available in text

About this Technique
	- This technique relates to 1.4.1: Use of Color (Sufficient).
	- This technique applies to all technologies that support color and text.

Description : The objective of this technique is to ensure that when color differences are used to convey information, such as required form fields, the information conveyed by the color differences are also conveyed explicitly in text.

Examples
Example 1: A color-coded schedule

The schedule for sessions at a technology conference is organized into three tracks. Sessions for Track 1 are displayed over a blue background. Sessions in Track 2 are displayed over a yellow background. Sessions in Track 3 are displayed on a green background. After the name of each session is a code identifying the track in text: T1 for Track 1, T2 for Track 2, and T3 for Track 3.

Example 2: A color-coded schedule with icons

The schedule for sessions at a technology conference is organized into three tracks. Next to the title of each session is an icon consisting of a colored circle with a number in the middle showing what track it belongs to: blue circles with the number 1 represent track 1, yellow circles with the number 2 represent Track 2, and green circles with the number 3 represent Track 3. Each icon is associated with a text alternative reading "Track 1," "Track 2," or "Track 3," as appropriate.

Example 3: A form with required fields

A form contains several required fields. The labels for the required fields are displayed in red. In addition, at the end of each label is an asterisk character, *. The instructions for completing the form indicate that "all required fields are displayed in red and marked with an asterisk *", followed by an example.

Note

Asterisks may not be read by all screen readers (in all reading modes) and may be difficult for users with low vision because they are rendered in a smaller size than default text. It is important for authors to include the text indicating that asterisk is used and to consider increasing the size of the asterisk that is presented.

Example 4: A form with a green submit button

An on-line loan application explains that green buttons advance in the process and red buttons cancel the process. A form contains a green button containing the text Go. The instructions say "Press the button labeled Go to submit your results and proceed to the next step."

Related techniques:
- G205: Including a text cue for colored form control labels
- G138: Using semantic markup whenever color cues are used
- G182: Ensuring that additional visual cues are available when text color differences are used to convey information
- G183: Using a contrast ratio of 3:1 with surrounding text and providing additional visual cues on hover for links or controls where color alone is used to identify them


------------------------------

G15: - Using a tool to ensure that content does not violate the general flash threshold or red flash threshold
Using a tool to ensure that content does not violate the general flash threshold or red flash threshold

About this Technique
	- This technique relates to 2.3.1: Three Flashes or Below Threshold (Sufficient).
	- This technique applies to any technology.

Description : The purpose of testing for violations of the general and red flash thresholds is to allow people who have photosensitive seizures to view Web sites without encountering material that is likely to cause a seizure. Warnings can be provided but people may miss them and children may not be able to read or understand them. With this technique all material is checked and if it violates flash or red flash thresholds it is either not put on the site or it is modified so that it does not violate the thresholds. : Note : There are some simple tests that can be run for particular simple types of flashing. For example: : If material flashes 3 times per second or less then the simple test in G19 can be used.
	- If material flashes in only one place on screen at a time and is quite small then the simple test in technique G176 can be used. : For all other types, a tool is needed to keep track of all the factors and apply them to the video on a time-continuous basis.

Examples
An animation of a thunderstorm shows six flashes of lightning. The flashes are so fast and large that the general flash threshold is violated when tested with a flash analysis tool. The animation is modified to create a short pause after each pair of lightning flashes. After the changes are made, the animation does not violate the general flash threshold.

Related techniques:
- G19: Ensuring that no component of the content flashes more than three times in any 1-second period
- G176: Keeping the flashing area small enough


------------------------------

G17: - Ensuring that a contrast ratio of at least 7:1 exists between text (and images of text) and background behind the text
Ensuring that a contrast ratio of at least 7:1 exists between text (and images of text) and background behind the text

About this Technique
	- This technique relates to 1.4.6: Contrast (Enhanced) (Sufficient).
	- This technique applies to any technology that produces visual output.

Description : The objective of this technique is to make sure that users can read text that is presented over a background. This technique goes beyond the 4.5:1 contrast technique to provide a higher level of contrast to make it easier for people with low vision to read. : If the background is a solid color (or all black or all white) then the contrast ratio of the text can be maintained by making sure that each of the text letters have a 7:1 contrast ratio with the background. : If the background or the letters vary in relative luminance (or are patterned), then the background around the letters can be chosen or shaded so that the letters maintain a 7:1 contrast ratio with the background behind them even if they do not have that contrast ratio with the entire background. : The contrast ratio can sometimes be maintained by changing the relative luminance of the letters as the relative luminance of the background changes across the page. : Another method is to provide a halo around the text that provides the necessary contrast ratio if the background image or color would not normally be sufficiently different in relative luminance.

Examples
A black background is chosen so that light colored letters that match the company's logo can be used.
Text is placed over a picture of the college campus. Since a wide variety of colors and darknesses appear in the picture the area behind the text is fogged white so that the picture is very faint and the maximum darkness is still light enough to maintain a 7:1 contrast ratio with the black text written over the picture.

Related techniques:
- G148: Not specifying background color, not specifying text color, and not using technology features that change those defaults
- G174: Providing a control with a sufficient contrast ratio that allows users to switch to a presentation that uses sufficient contrast


------------------------------

G18: - Ensuring that a contrast ratio of at least 4.5:1 exists between text (and images of text) and background behind the text
Ensuring that a contrast ratio of at least 4.5:1 exists between text (and images of text) and background behind the text

About this Technique
	- This technique relates to:
	- 1.4.3: Contrast (Minimum) (Sufficient)
	- 1.4.6: Contrast (Enhanced) (Sufficient)
	- This technique applies to any technology that produces visual output.

Description : The objective of this technique is to make sure that users can read text that is presented over a background. For Success Criterion 1.4.3, this technique describes the minimum contrast ratio for text that is less than 18 point (if not bold) and less than 14 point (if bold). For Success Criterion 1.4.6, this technique relaxes the 7:1 contrast ratio requirement for text that is at least 18 point (if not bold) or at least 14 point (if bold). : Note : When evaluating this success criterion, the font size in points should be obtained from the user agent or calculated on font metrics in the way that user agents do. Point sizes are based on the CSS pt size CSS3 Values. The ratio between sizes in points and CSS pixels is 1pt = 1.333px, therefore 14pt and 18pt are equivalent to approximately 18.5px and 24px. : If the background is a solid color (or all black or all white) then the relative luminance of the text can be maintained by making sure that each of the text letters have 4.5:1 contrast ratio with the background. : If the background or the letters vary in relative luminance (or are patterned) then the background around the letters can be chosen or shaded so that the letters maintain a 4.5:1 contrast ratio with the background behind them even if they do not have that contrast ratio with the entire background. : For example, if a letter is lighter at the top than it is a the bottom, it may be difficult to maintain the contrast ratio between the letter and the background over the full letter. In this case, the designer might darken the background behind the letter, or add a thin black outline (at least one pixel wide) around the letter in order to keep the contrast ratio between the letter and the background above 4.5:1. : The contrast ratio can sometimes be maintained by changing the relative luminance of the letters as the relative luminance of the background changes across the page. : For example, if a page is very light on one edge and fades to very dark on the other edge, there is no color that can run across the page and meet the contrast guidelines on both edges. One way of addressing this would be to change the lightness of the letters as well so that each letter always meets the contrast ratio for the background that is immediately behind the letter. : Another method is to provide a halo around the text that provides the necessary contrast ratio if the background image or color would not normally be sufficiently different in relative luminance.

Examples
A black background is chosen so that light colored letters that match the company logo can be used.

Text is placed over a picture of the college campus. Since a wide variety of colors and shades appear in the picture, the area behind the text is fogged white so that the picture is very faint and the maximum darkness is still light enough to maintain a 4.5:1 contrast ratio with the black text written over the picture.

See also the contrast samples in related resources.


------------------------------

G19: - Ensuring that no component of the content flashes more than three times in any 1-second period
Ensuring that no component of the content flashes more than three times in any 1-second period

About this Technique
	- This technique relates to:
	- 2.3.1: Three Flashes or Below Threshold (Sufficient)
	- 2.3.2: Three Flashes (Sufficient)
	- This technique applies to any technology.

Description : The objective of this technique is to avoid flashing at rates that are known to cause seizures if the flashes are bright and large enough. Since some users may be using screen enlargers, this technique limits the flashing of any size content to no more than three flashes in any 1-second period. : Note : This technique is stricter than the Level A Success Criteria but is easier to test and can be used to meet the Level A Success Criteria because all failure thresholds in the Level A Success Criteria involve flashing 3.5 flashes or more within one second. Most content does not flash at all and even content that blinks does not blink this fast except on rare occasions. Therefore, in order to avoid having to carry out the more complex testing specified by the Success Criteria, one could follow this technique to ensure that content only flashes one, two, or at most three times in any 1-second period. : Regarding 3.5 Flashes; if there are seven transitions from dark to light or light to dark, it would be 3.5 flashes, which is more than the allowed three flashes (six transitions). : Examples of 3.5 flashes or seven transitions: : STARTING DARK-LIGHT-DARK-LIGHT-DARK-LIGHT-DARK-LIGHT or
	- STARTING LIGHT-DARK-LIGHT-DARK-LIGHT-DARK-LIGHT-DARK.

Examples
Content has lightning flashes. Content is designed so that lightning only flashes two or three times without a pause in flashing.

Related techniques:
- G15: Using a tool to ensure that content does not violate the general flash threshold or red flash threshold


------------------------------

G21: - Ensuring that users are not trapped in content
Ensuring that users are not trapped in content

About this Technique
	- This technique relates to 2.1.2: No Keyboard Trap (Sufficient).
	- This technique applies to all technologies which support interactive operation.

Description : The objective of this technique is to ensure that keyboard users do not become trapped in a subset of the content that can only be exited using a mouse or pointing device. A common example is content rendered by plug-ins. Plug-ins are user agents that render content inside the user agent host window and respond to all user actions that takes place while the plug-in has the focus. If the plug-in does not provide a keyboard mechanism to return focus to the parent window, users who must use the keyboard may become trapped in the plug-in content. : This problem can be avoided by using one of the following mechanisms to provide a way for users to escape the subset of the content: : Ensuring that the keyboard function for advancing focus within content (commonly the tab key) exits the subset of the content after it reaches the final navigation location.
	- Providing a keyboard function to move the focus out of the subset of the content. Be sure to document the feature in an accessible manner within the subset.
	- If the technology used in the subset of the content natively provides a "move to parent" keyboard command, documenting that command before the user enters the plug-in so they know how to get out again. : If the author uses a technology that allows users to enter the sub-content with keyboard and does not allow users to exit the sub-content with keyboard by default (i.e., it is not a feature of the Web content technology or its user agents) then, in order to implement this technique the author would either build such a capability into their content or not use the technology.

Examples
Once a user tabs into an applet, further tabs are handled by the applet preventing the person from tabbing out. However, the applet is designed so that it returns keyboard focus back to the parent window when the person finishes tabbing through the tab sequence in the applet.
A page that includes content that is not accessibility-supported contains instructions about how to move focus back to the accessibility-supported content via the keyboard. The instructions precede the non accessibility-supported content.
The help information available from the content that is not accessibility supported documents how to move focus back to the accessibility-supported content via the keyboard, and the help information can be accessed via the keyboard.
The help information available for the Web page documents how to move focus from the content that is not accessibility supported to the accessibility-supported content via the keyboard, and the help information can be accessed via the keyboard.


------------------------------

G53: - Identifying the purpose of a link using link text combined with the text of the enclosing sentence
Identifying the purpose of a link using link text combined with the text of the enclosing sentence

About this Technique
	- This technique relates to 2.4.4: Link Purpose (In Context) (Sufficient).
	- This technique applies to all technologies that contain links.

Description : The objective of this technique is to identify the purpose of a link from the link and its sentence context. The sentence enclosing the link provides context for an otherwise unclear link. The description lets a user distinguish this link from links in the Web page that lead to other destinations and helps the user determine whether to follow the link. Note that simply providing the URI of the destination is generally not sufficiently descriptive. : Note : These descriptions will be most useful to the user if the additional information needed to understand the link precedes the link. If the additional information follows the link, there can be confusion and difficulty for screen reader users who are reading through the page in order (top to bottom).

Examples
Example 1

A Web page contains the sentence "To advertise on this page, click here."

Although the link phrase 'click here' is not sufficient to understand the link, the information needed precedes the link in the same sentence.

Example 2

In the news summary containing the sentence "The Smallville Times reports that the School Board chose a 2007 school calendar that starts on August 27.", the words "reports that" are a link to an article in the Smallville Times about the School Board meeting.

Note

Although this example satisfies the Success Criterion, putting information needed to understand the link after the link in this way is awkward for those who are reading through the document with a screen reader.

Related techniques:
- G91: Providing link text that describes the purpose of a link
- H2: Combining adjacent image and text links for the same resource
- H30: Providing link text that describes the purpose of a link for anchor elements
- H33: Supplementing link text with the title attribute
- H77: Identifying the purpose of a link using link text combined with its enclosing list item
- H78: Identifying the purpose of a link using link text combined with its enclosing paragraph
- H79: Identifying the purpose of a link in a data table using the link text combined with its enclosing table cell and associated table header cells
- H80: Identifying the purpose of a link using link text combined with the preceding heading element
- H81: Identifying the purpose of a link in a nested list using link text combined with the parent list item under which the list is nested
- C7: Using CSS to hide a portion of the link text
- ARIA1: Using the aria-describedby property to provide a descriptive label for user interface controls


------------------------------

G54: - Including a sign language interpreter in the video stream
Including a sign language interpreter in the video stream

About this Technique
	- This technique relates to 1.2.6: Sign Language (Prerecorded) (Sufficient).
	- This technique applies to all technologies that present synchronized media information.

Description : The objective of this technique is to allow users who cannot hear or read text rapidly to be able to access synchronized media material. : For those who communicate primarily in sign language it is sometimes less preferable and sometimes not possible for them to read and understand text at the rate it is presented in captions. For these latter individuals it is important to provide sign language presentation of the audio information. : One universally compatible way of doing this is to simply embed a video of the sign language interpreter in the video stream. This has the disadvantage of providing a lower resolution image that cannot be easily enlarged without enlarging the entire image. : Note : If the video stream is too small, the sign language interpreter will be indiscernible. When creating a video stream that includes a video of a sign language interpreter, make sure there is a mechanism to play the video stream full screen in the accessibility-supported content technology. Otherwise, be sure the interpreter portion of the video is adjustable to the size it would be had the entire video stream been full screen. : Since sign language is not usually a signed version of the printed language, the author has to decide which sign language to include. Usually the sign language of the primary audience would be used. If intended for multiple audiences, multiple sign languages may be used. Refer to advisory techniques for multiple sign languages.

Examples
Example 1: A television station provides a sign language interpreter in the corner of or beside its on-line news video.

Related techniques:
- G81: Providing a synchronized video of the sign language interpreter that can be displayed in a different viewport or overlaid on the image by the player
- SM13: Providing sign language interpretation through synchronized video streams in SMIL 1.0
- SM14: Providing sign language interpretation through synchronized video streams in SMIL 2.0


------------------------------

G55: - Linking to definitions
Linking to definitions

About this Technique
	- This technique relates to:
	- 3.1.3: Unusual Words (Sufficient using a more specific technique when used with G101: Providing the definition of a word or phrase used in an unusual or restricted way)
	- 3.1.4: Abbreviations (Sufficient when used with G102: Providing the expansion or explanation of an abbreviation)
	- This technique applies to all technologies that include links.

Description : The objective of this technique is to make the definition of a word, phrase, or abbreviation available by providing the definition, either within the same Web page or in a different Web page, and establishing a link between the item and its definition. : Links are a powerful option for providing access to the definition of a word, phrase, or abbreviation. A user can use the link to find the definition quickly and easily, and then return to their place in the content via the user agent's Back button.

Examples
Example 1

Technical terms and abbreviations in an article about sports injuries are linked to definitions in a medical dictionary.

Example 2

A textbook contains a glossary of new vocabulary words introduced in each chapter. The first occurrence of each of these words is linked to its definition in the glossary.

Example 3

A general glossary of abbreviations is provided. All occurrences of abbreviations are linked directly to the appropriate definition within that glossary.

Example 4

The word jargon is linked to its definition in the WCAG2 Glossary.

Example 5

The word "modulo" is jargon used in Web content about mathematics. A definition for modulo is included within the Web page. Each occurrence of the word modulo is linked to its definition.

Example 6

A Japanese idiom is linked to its definition. This example uses a link within the page to navigate to the definition of an idiomatic expression.

<p>...<a href="#definition">さじを投げる</a>...</p>
<h3>脚注：</h3>
<dl>
  <dt id="definition">さじを投げる</dt>
  <dd>どうすることもできなくなり、あきらめること。</dd>
</dl>

Related techniques:
- G62: Providing a glossary
- G70: Providing a function to search an online dictionary
- G101: Providing the definition of a word or phrase used in an unusual or restricted way
- G102: Providing the expansion or explanation of an abbreviation
- G112: Using inline definitions
- H40: Using description lists
- H64: Using the title attribute of the iframe element


------------------------------

G56: - Mixing audio files so that non-speech sounds are at least 20 decibels lower than the speech audio content
Mixing audio files so that non-speech sounds are at least 20 decibels lower than the speech audio content

About this Technique
	- This technique relates to 1.4.7: Low or No Background Audio (Sufficient).
	- This technique applies to any technology.

Description : The objective of this technique is to allow authors to include sound behind speech without making it too hard for people with hearing problems to understand the speech. Making sure that the foreground speech is 20 db louder than the backgound sound makes the speech 4 times louder than the background audio. For information on Decibels (dB), refer to About Decibels.

Examples
Example 1: An announcer speaking over a riot scene
A narrator is describing a riot scene. The volume of the riot scene is adjusted so that it is 20 db lower than the announcer's volume before the scene is mixed with the narrator.
Example 2: Sufficient audio contrast between a narrator and background music

This example demonstrates a voice with music in the background in which the voice is the appropriate 20 DB above the background. The voice (foreground) is recorded at -17.52 decibels (average RMS) and the music (background) is at -37.52 decibels, which makes the foreground 20 decibels louder than the background.

Audio example

Audio Example: Foreground is 20 decibels above the background (mp3)

Transcript of audio example (good contrast)

"Usually the foreground refers to a voice that is speaking and should be understood. My speaking voice right now is 20 decibels above the background which is the music. This is an example of how it should be done.."

Visual example of the recording above

The audio example above is visually represented below in a snapshot of the file in an audio editor. A section is highlighted that contains foreground and background. It is a much larger wave than the section that contains only background.

Visual representation of sufficient contrast.
Example 3: Insufficient Audio Contrast between a narrator and background music
Audio example of the failure

This example demonstrates a voice with music in the background in which the voice is not 20 DB above the background. The voice (foreground) is at -18 decibels and the music (background) is at about -16 decibels making the foreground only 2 decibels louder than the background.

Audio Example: Foreground is less than 20 decibels above the background (mp3)

Transcript of audio example (bad contrast)

"This is an example of a voice that is not loud enough against the background. The voice which is the foreground is only about 2 decibels above the background. Therefore is difficult to understand for a person who is hard of hearing. It is hard to discern one word from the next. This is an example of what not to do."

Visual example of the failure

The highlighted section contains foreground and background. The wave is almost the same size the section that contains only background, which means the background is too loud in comparison to the foreground voice.

Visual representation of bad contrast.


------------------------------

G57: - Ordering the content in a meaningful sequence
Ordering the content in a meaningful sequence

About this Technique
	- This technique relates to:
	- 1.3.2: Meaningful Sequence (Sufficient)
	- 1.3.2: Meaningful Sequence (Sufficient using a more specific technique)
	- This technique applies to all technologies.

Description : The objective of this technique is to ensure that the order of content presented to assistive technologies allows the user to make sense of the content. Some techniques permit the content to be rendered visually in a meaningful sequence even if this is different from the order in which the content is encoded in the underlying source file. : For example, when mixing languages with different directionality in HTML, the bidirectional algorithm may position punctuation in the wrong location in the visual rendering. The visual rendering problem could be corrected by moving the punctuation in the content stream so that the bidirectional algorithm positions it as desired, but this would expose the incorrect content order to assistive technology. The content is both rendered in the correct order visually and exposed to assistive technology in the correct order by using markup to override the bidirectional algorithm. : When rendered visually, white space characters such as space or tab may not appear to be part of the content. However, when inserted into the content to control visual formatting, they may interfere with the meaning of the content. : At a larger granularity, controlling the placement of blocks of content in an HTML document using layout tables may produce a rendering in which related information is positioned together visually, but separated in the content stream. Since layout tables are read row by row, if the caption of an illustration is placed in the row following the illustration, it may be impossible to associate the caption with the image.

Examples
Example 1

A Web page from a museum exhibition contains a navigation bar containing a long list of links. The page also contains an image of one of the pictures from the exhibition, a heading for the picture, and a detailed description of the picture. The links in the navigation bar form a meaningful sequence. The heading, image, and text of the description also form a meaningful sequence. CSS is used to position the elements on the page.

HTML
<h1>My Museum Page</h1>
<ul id="nav">
  <li><a href="#">Link 1</a></li>
  ...
  <li><a href="#">Link 10</a></li>
</ul>
<div id="description">
  <h2>Mona Lisa</h2>
  <div>
    <img src="img.png" alt="Mona Lisa">
  </div>
  <p>...detailed description of the picture...</p>
</div>
CSS
ul#nav {
  float: left;
  width: 9em;
  list-style-type: none;
  margin: 0;
  padding: 0.5em;
  color: #fff;
  background-color: #063;
}

ul#nav a {
  display: block;
  width: 100%;
  text-decoration: none;
  color: #fff;
  background-color: #063;
}
div#description {
  margin-left: 11em;
}

Related techniques:
- G59: Placing the interactive elements in an order that follows sequences and relationships within the content
- C6: Positioning content based on structural markup
- C27: Making the DOM order match the visual order
- F1: Failure of Success Criterion 1.3.2 due to changing the meaning of content by positioning information with CSS
- F49: Failure of Success Criterion 1.3.2 due to using an HTML layout table that does not make sense when linearized


------------------------------

G58: - Placing a link to the alternative for time-based media immediately next to the non-text content
Placing a link to the alternative for time-based media immediately next to the non-text content

About this Technique
	- This technique relates to:
	- 1.2.3: Audio Description or Media Alternative (Prerecorded) (Sufficient when used with G69: Providing an alternative for time based media)
	- 1.2.8: Media Alternative (Prerecorded) (Sufficient when used with G69: Providing an alternative for time based media)
	- This technique is not technology specific and can be used in any technology that supports links.

Description : With this technique, a link to the collated document of captions and audio description is provided. The collated document could be at another location on the same Web page or at another URI. A link to the collated document is immediately adjacent to the non-text content. The link can be immediately before or after the synchronized media content. If the collated document is on the same Web page as other content then put "End of document" at the end so that they know when to stop reading and return to their previous place. If a Back button will not take the person back to the point from which they jumped, then a link back to the non-text content location is provided.

Examples
Example 1: A .MOV Document in an HTML Document

Code on a page called "olympic-sports.html"

<p id="olympic-wrestling">
  <a href="/movies/olympic-wrestling.mov">Olympic wrestling movie</a>, 
  <a href="/transcripts/olympic-wrestling-transcript.html">Olympic 
   wrestling collated transcript</a>
</p>
Example 2: The link back to the .MOV Document in an HTML Document

Code on the page olympic-wrestling-transcript.html

<p>Sports announcer 1: This is a great battle tonight between England's "Will Johnson"
   and "Theodore Derringo" from Argentina.</p>
<p>Scenery: There is a mat set out in the middle of the stadium with 500 people in the 
   stands...</p>
<p>...more dialogue...<p>
<p>...more scenery...</p>
<p>...etc...</p>
<p>Sports announcer 2: And that is all for tonight, thank you for joining us tonight
   where Will Johnson is the new Gold Medalist. 
<a href="../movies/olympic-sports.html#olympic-wrestling">Return to movie page</a></p>

Related techniques:
- G69: Providing an alternative for time based media
- G159: Providing an alternative for time-based media for video-only content
- H53: Using the body of the object element


------------------------------

G59: - Placing the interactive elements in an order that follows sequences and relationships within the content
Placing the interactive elements in an order that follows sequences and relationships within the content

About this Technique
	- This technique relates to 2.4.3: Focus Order (Sufficient).
	- This technique applies to all technologies that contain interactive elements and define a default tab order for interactive elements.

Description : The objective of this technique is to ensure that interactive elements receive focus in an order that follows sequences and relationships in the content. When designing the content, the interactive elements such as links and form controls are placed in the content so that the default tab order follows the sequences and relationships in the content. Each technology defines its default tab order, so the mechanism for placing the controls in the content will depend on the technology used. : As an example, in HTML, the default focus order follows the order in which elements appear in the content source. When the order of the HTML source matches the visual order of the Web page, tabbing through the content follows the visual layout of the content. When the source order does not match the visual order, the tab order through the content must reflect the logical relationships in the content that are displayed visually.

Examples
A form contains two text input fields that are to be filled in sequentially. The first text input field is placed first in the content, the second input field is placed second.
A form contains two, side-by-side sections of information. One section contains information about an applicant; the other section contains information about the applicant's spouse. All the interactive elements in the applicant section receive focus before any of the elements in the spouse section. The elements in each section receive focus in the reading order of that section.

Related techniques:
- G57: Ordering the content in a meaningful sequence
- C27: Making the DOM order match the visual order
- SCR26: Inserting dynamic content into the Document Object Model immediately following its trigger element
- SCR27: Reordering page sections using the Document Object Model
- H102: Creating modal dialogs with the HTML dialog element


------------------------------

G60: - Playing a sound that turns off automatically within three seconds
Playing a sound that turns off automatically within three seconds

About this Technique
	- This technique relates to 1.4.2: Audio Control (Sufficient).
	- This technique applies to all technologies except those for voice interaction.

Description : The purpose of this technique is to allow authors to play a sound on their Web page but avoid the problem of users not being able to use their screen readers due to interference by the content sound. It also allows the author to avoid putting controls on the Web page to control the sound - and the problem faced by users with screen readers in finding the control (when unable to hear their screen reader). : The technique is simple. The sound plays for 3 or less seconds and stops automatically.

Examples
Example 1: A Web page opens with a trumpet fanfare and then goes silent
Example 2: A homepage opens with the chairman saying "Binfor, where quality is our business." then going silent.
Example 3: A Web page opens with instructions on how to get started: "To begin, press the enter key."
Example 4: A Web page opens with a warning and then goes silent.

Related techniques:
- G170: Providing a control near the beginning of the Web page that turns off sounds that play automatically
- G171: Playing sounds only on user request


------------------------------

G61: - Presenting repeated components in the same relative order each time they appear
Presenting repeated components in the same relative order each time they appear

About this Technique
	- This technique relates to 3.2.3: Consistent Navigation (Sufficient).
	- This technique applies to any technologies.

Description : The objective of this technique is to make content easier to use by making the placement of repeated components more predictable. This technique helps maintain consistent layout or presentation between Web pages by presenting components that are repeated in these Web units in the same relative order each time they appear. Other components can be inserted between them, but their relative order is not changed. : This technique also applies to navigational components that are repeated. Web pages often contain a navigation menu or other navigational component that allows the user to jump to other Web pages. This technique makes the placement of navigational components more predictable by presenting the links or programmatic references inside a navigational component in the same relative order each time the navigational component is repeated. Other links can be removed or inserted between the existing ones, for example to allow navigation inside a subsection of a set of Web pages, but the relative order is not changed.

Examples
A Web site has a logo, a title, a search form and a navigation bar at the top of each page; these appear in the same relative order on each page where they are repeated. On one page the search form is missing but the other items are still in the same order.
A Web site has a left-hand navigation menu with links to the major sections of the site. When the user follows a link to another section of the site, the links to the major sections appear in the same relative order in the next page. Sometime links are dropped and other links are added, but the other links always stay in the same relative order. For example, on a Web site of a company that sells products and offers training, when a user moves from the section on products to the section on training, the links to individual products are removed from the navigation list, while links to training offerings are added.


------------------------------

G62: - Providing a glossary
Providing a glossary

About this Technique
	- This technique relates to:
	- 3.1.3: Unusual Words (Sufficient when used with G101: Providing the definition of a word or phrase used in an unusual or restricted way)
	- 3.1.4: Abbreviations (Sufficient when used with G102: Providing the expansion or explanation of an abbreviation)
	- 3.1.6: Pronunciation (Sufficient)
	- This technique applies to any technology containing text.

Description : The objective of this technique is to make the definition of a word, phrase, or abbreviation available by providing the definition in a glossary. A glossary is an alphabetical list of words, phrases, and abbreviations with their definitions. Glossaries are most appropriate when the words, phrases, and abbreviations used within the content relate to a specific discipline or technology area. A glossary can also provide the pronunciation of a word or phrase. : The glossary is included at the end of the Web page or the glossary is located via one of the mechanisms for locating content within a set of Web pages. (See Understanding Success Criterion 2.4.5.) : If the glossary contains several definitions for the same word, phrase, or abbreviation, simply providing the glossary is not sufficient to satisfy this Success Criterion. A different technique should be used to find the correct definition. This is especially important if the uses of the word, phrase, or abbreviation are not unique within the Web page, that is, if different occurrences of the item have different definitions.

Examples
Example 1

Users of on line chat forums have created several acronyms and abbreviations to speed up typing conversations on the computer. For example, LOL refers to "laughing out loud" and FWIW abbreviates "for what it's worth". The site provides a glossary page that lists the expansions for the commonly used acronyms and abbreviations.

Example 2

A Web page discussing mathematical theory includes a glossary of commonly used mathematical terms, abbreviations and acronyms.

Example 3

A textbook contains a glossary of new vocabulary words introduced in each chapter.

Example 4

Dutch text uses the phrase ' Hij ging met de kippen op stok ' (He went to roost with the chickens). The glossary explains that this phrase means ' Hij ging vroeg naar bed ' (He went to bed early).

Example 5: A glossary of idiomatic expressions

The American novel "The Adventures of Huckleberry Finn" includes many idiomatic expressions that were used in the southwestern United States in the 1840s. In an online edition designed for students, each idiomatic expression is linked to an item in the glossary.

Related techniques:
- G55: Linking to definitions
- G70: Providing a function to search an online dictionary
- H40: Using description lists


------------------------------

G63: - Providing a site map
Providing a site map

About this Technique
	- This technique relates to:
	- 2.4.5: Multiple Ways (Sufficient when combined with other techniques)
	- 2.4.8: Location (Sufficient)
	- This technique applies to all technologies.

Description : This is one of a series of techniques for locating content that are sufficient for addressing Success Criterion 2.4.5. A site map is a Web page that provides links to different sections of the site. To make the site map available within the site, at a minimum every page that is listed in the site map contains a link to the site map. : The site map serves several purposes. : It provides an overview of the entire site.
	- It helps users understand what the site contains and how the content is organized.
	- It offers an alternative to complex navigation bars that may be different at different parts of the site. : There are different types of site maps. The simplest and most common kind of site map is an outline that shows links to each section or sub-site. Such outline views do not show more complex relationships within the site, such as links between pages in different sections of the site. The site maps for some large sites use headings that expand to show additional detail about each section. : A site map describes the contents and organization of a site. It is important that site maps be updated whenever the site is updated. For example, a Web page is not a valid site map when any one of the following is true: : it does not link to all the sections of a site, or
	- it presents an organization that is different from the site's organization, or
	- it contains links that are no longer valid.

Examples
Example 1

The Web Accessibility Initiative provides a WAI site map that lists different sections of its Web site. The site map shows the different sections of the Web site, and shows some of the substructure within those sections.

Example 2

The site map for an on-line magazine lists all the sections of the magazine and the subsections in each section. It also include links for Help, How to Contact Us, Privacy Policy, Employment Opportunities, How to Subscribe, and the home page for the magazine.

Related techniques:
- G64: Providing a Table of Contents
- G125: Providing links to navigate to related Web pages
- G126: Providing a list of links to all other Web pages
- G185: Linking to all of the pages on the site from the home page


------------------------------

G64: - Providing a Table of Contents
Providing a Table of Contents

About this Technique
	- This technique relates to 2.4.5: Multiple Ways (Sufficient when combined with other techniques).
	- This technique applies to all technologies.

Description : This is one of a series of techniques for locating content that are sufficient for addressing Success Criterion 2.4.5. A table of contents provides links to sections and subsections of the same document. The information in the document is usually organized hierarchically, and is intended to be read sequentially. Just as there could be many books in a library, each with its own table of contents, a Web site may contain many documents, each with its own table of contents. : The table of contents serves two purposes: : It gives users an overview of the document's contents and organization.
	- It allows readers to go directly to a specific section of an on-line document. : The table of contents typically includes only major sections of the document, though in some cases an expanded table of contents that provides a more detailed view of a complex document may be desirable. : The sections of the document could be located on the same Web page or divided into multiple Web pages. A table of contents is particularly useful when a document is divided into multiple Web pages. : There is a distinction between a table of contents and other Navigational elements such as a Navigation Bar or Site Map. A table of contents provides links to sections of the same document. Those sections could be located on the same Web page or spread across multiple Web pages. But together, they make a complete idea. To better understand this, consider a hard copy book which has sections. Each section belongs to the book. There could be many books in a library. In this example, the "library" is the entire Web site.

Examples
Example 1

The Web Content Accessibility Guidelines 2.0 contains a table of contents that is a hierarchical list of links to the sections and subsections of the document. The hierarchy of the table of contents reflects the organization of the sections, and each item in the table of contents is a link that takes the user directly to that section.

Example 2

The table of contents for Accessing PDF Documents with Assistive Technology: A Screen Reader User's Guide begins on the second page.

Related techniques:
- G63: Providing a site map
- G125: Providing links to navigate to related Web pages
- G126: Providing a list of links to all other Web pages


------------------------------

G65: - Providing a breadcrumb trail
Providing a breadcrumb trail

About this Technique
	- This technique relates to 2.4.8: Location (Sufficient).
	- This technique applies to all technologies.

Description : A breadcrumb trail (or 'breadcrumb navigation') helps the user to visualize how content has been structured and how to navigate back to previous web pages. Many even identify the current location in the series of web pages, commmonly as the last element in the trail and with a variation in its visual style. A breadcrumb trail either displays locations in the path the user took to reach the web page, or it displays the location of the current web page within the organization of the site. : Breadcrumb trails are implemented using links to the Web pages that have been accessed in the process of navigating to the current web page. They are placed in the same location within each web page in the set. : It can be helpful to users to separate the items in the breadcrumb trailing with a visible separator. Examples of separators include ">", "|", "/", and "→". Alternatively, one could use decorative iconography or create separators with CSS.

Examples
Example 1: Photographer's portfolio

A photographer's portfolio website has been organized into different galleries and each gallery has further been divided into categories. A user who navigates through the website to a particular page containing a photo of a Gentoo penguin would see the following breadcrumb trail at the top of the web page:

Home / Galleries / Antarctica / Penguins / Gentoo Penguin

The markup for this example implements all of the text items except "Gentoo Penguin" as links. To provide semantic structure to the breadcrumb trail, the links are contained within a list element, which is nested within a nav element with an aria-label. The current location, Gentoo Penguin, is included as the last item in the breadcrumb trail but it is not implemented as a link to visually and semantically differentiate it from the previous items in the trail.

The aria-current attribute is specified on the last list item in the trail to programmatically identify it as the item that reprsents the current web page. The markup would be styled using CSS to display the breadcrumb trail horizontally.

<nav aria-label="Breadcrumbs"> 
  <ul>
    <li><a href="/">Home</a> /</li>
    <li><a href="/galleries">Galleries</a> /</li> 
    <li><a href="/galleries/antarctica">Antarctica</a> /</li>
    <li><a href="/galleries/antarctica/penguins">Penguins</a> /</li>
    <li aria-current="page">Gentoo Penguin</li>
  </ul> 
</nav>


Working example: Breadcrumb example

Example 2: E-commerce site

The information architecture of an e-commerce website is categorized from general to increasingly more specific product subsections.

You are here: Acme Company → Electronics → Computers → Laptops

The trail begins with "You are here" and ends with the current page. Items in the trail are clickable or tappable links with the exception of "You are here", which is a static heading. This example uses a right arrow symbol (→) as a separator.

In this example a h2 element, a nav element with an aria-label attribute, and an unordered list are used to provide semantics. The markup would be styled using CSS to display the breadcrumb trail horizontally.

HTML
<nav aria-label="Breadcrumbs"> 
  <h2>You are here:</h2> 
  <ul>
    <li><a href="/">Acme Company</a> &#8594;</li> 
    <li><a href="/electronics/">Electronics</a> &#8594;</li>
    <li><a href="/electronics/computers/">Computers</a> &#8594;</li>
    <li><a href="/electronics/computers/laptops/" aria-current="page">Laptops</a></li>
  </ul> 
</nav>

CSS
h2, ul, ul li{ display: inline;}
nav > h2{ font-size: 1em; } 
ul { padding-left: 0em; }

Working example: Breadcrumb example

Related techniques:
- G63: Providing a site map
- G128: Indicating current location within navigation bars


------------------------------

G68: - Providing a short text alternative that describes the purpose of live audio-only and live video-only content
Providing a short text alternative that describes the purpose of live audio-only and live video-only content

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Sufficient).
	- This technique applies to all technologies.

Description : This technique provides a short text alternative for Live audio-only and live video-only content. This text may be used in combination with a full text alternative for time-based media (for audio or video), or in combination with audio description (for video). Those alternatives, however, are not part of this technique. The purpose of this technique is to ensure that the user can determine what the non-text content is, even if they cannot access it. NOTE: Even if full alternatives are also available, it is important that users be able to identify the non-text content when they encounter it so that they are not confused, and so that they can associate it with the full alternative when they encounter it.

Examples
Example 1
A live video feed of the east coast highway has the following descriptive label "Live video picture of East Coast Highway just south of the I-81 interchange showing current traffic conditions."
A live audio feed of the Mississippi House of Representatives has the following descriptive label "Live audio from the microphones in the Mississippi House of Representatives."

Related techniques:
- G100: Providing a short text alternative which is the accepted name or a descriptive name of the non-text content


------------------------------

G69: - Providing an alternative for time based media
Providing an alternative for time based media

About this Technique
	- This technique relates to:
	- 1.2.3: Audio Description or Media Alternative (Prerecorded) (Sufficient using a more specific technique)
	- 1.2.8: Media Alternative (Prerecorded) (Sufficient using a more specific technique)
	- This technique applies to all technologies.

Description : The purpose of this technique is to provide an accessible alternative way of presenting the information in a synchronized media presentation. : In a synchronized media presentation, information is presented in a variety of ways including: : dialogue,
	- sounds (natural and artificial),
	- the setting and background,
	- the actions and expressions of people, animals, etc.,
	- text or graphics,
	- and more. : In order to present the same information in accessible form, this technique involves creating a document that tells the same story and presents the same information as the synchronized media. Such a document is sometimes called a screenplay. It includes all the important dialogue and actions as well as descriptions of backgrounds etc. that are part of the story. : If an actual screenplay was used to create the synchronized media in the first place, this can be a good place to start. In production and editing however, the synchronized media usually changes from the screenplay. For this technique, the original screenplay would be corrected to match the dialogue and what actually happens in the final edited form of the synchronized media. : In addition, some special types of synchronized media include interaction that has to occur at particular places in the playing of the synchronized media. Sometimes it may result in an action taking place (e.g., something is purchased, sent, done, etc.). Sometimes it may change the course of the synchronized media (e.g., the synchronized media has multiple paths that are determined by user input). In those cases links or some other mechanism would be used in the alternative for time-based media to allow people using the alternative to be able to have the same options and abilities as those using the synchronized media.

Examples
A training film shows employees how to use a new piece of equipment. It involves a person talking throughout while they demonstrate the operation. The screenplay used to create the training film is used as a starting point. It is then edited and corrected to match the dialogue etc. The film and the resulting alternative for time-based media are then made available on the company Web site. Employees can then use either or both to learn how to use the machine.
An interactive shopping environment is created that allows users to steer themselves around in a virtual store and shop. An alternative for time-based media allows the users to access the same shopping in text with links to choose aisles and to purchase things instead of dragging them into a virtual shopping basket.

Related techniques:
- G8: Providing a movie with extended audio descriptions
- G58: Placing a link to the alternative for time-based media immediately next to the non-text content
- G78: Providing a second, user-selectable, audio track that includes audio descriptions
- G158: Providing an alternative for time-based media for audio-only content
- G159: Providing an alternative for time-based media for video-only content


------------------------------

G70: - Providing a function to search an online dictionary
Providing a function to search an online dictionary

About this Technique
	- This technique relates to:
	- 3.1.3: Unusual Words (Sufficient when used with G101: Providing the definition of a word or phrase used in an unusual or restricted way)
	- 3.1.4: Abbreviations (Sufficient when used with G102: Providing the expansion or explanation of an abbreviation)
	- This technique applies to all technologies.

Description : The objective of this technique is to provide the definition of words, phrases, jargon, or abbreviation expansions by adding a mechanism to access an on-line dictionary to the Web page. This technique uses existing resources on the Web to provide the definition rather than requiring the author to create a glossary or other mechanism within the site. By providing access from within the Web page, a user can easily locate the desired definition. This technique can only be used if the online dictionary returns the correct definition.

Examples
Example 1

A site that describes how a computer works would include a search feature on each Web page. The search would be performed against an on-line dictionary of computer terms, acronyms, and abbreviations. Since the dictionary is specialized for computer terms, the acronym expansion found should be more accurate than with a general dictionary.

Example 2

An online course in English grammar provides a paragraph of text which introduces new vocabulary words. Each of the vocabulary words is a link to an on-line dictionary to find the definition of the word. Activating a link will open up a new window to an online dictionary site with the specific vocabulary word defined.

Related techniques:
- G55: Linking to definitions
- G62: Providing a glossary
- G112: Using inline definitions


------------------------------

G71: - Providing a help link on every Web page
Providing a help link on every Web page

About this Technique
	- This technique relates to 3.3.5: Help (Sufficient).
	- This technique applies to all technologies.

Description : The objective of this technique is to provide context sensitive help for users as they enter data in forms by providing at least one link to the help information on each Web page. The link targets a help page with information specific to that Web page. Another approach is to provide a help link for every interactive control. Positioning this link immediately before or after the control allows users to easily tab to it if they have problems in the control. Displaying the help information in a new browser window ensures that any data that has already been entered into the form will not be lost. NOTE: A link is not the only means to provide help.

Examples
Example 1

The example below shows a label element that includes a help link. Including the help link within the label element allows screen reader users to have access to the help link when interacting with the input form control.

<form>
  <label for="serial-number"><span>Serial Number</span>
  <a href="help.html" target="_blank">Help</a></label>
  <input type="text" name="serial-number" id="serial-number">
</form>

Related techniques:
- G184: Providing text instructions at the beginning of a form or set of fields that describes the necessary input
- G193: Providing help by an assistant in the Web page


------------------------------

G73: - Providing a long description in another location with a link to it that is immediately adjacent to the non-text content
Providing a long description in another location with a link to it that is immediately adjacent to the non-text content

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Sufficient).
	- This technique applies to all technologies.

Description : The objective of this technique is to provide a way to link to remote long descriptions in technologies that do not have a long description feature built directly into them (e.g., longdesc) or where the feature is known to not be supported. : With this technique, the long description is provided in another location than the non-text content. This could be at another location within the same URI or at another URI. A link to that long description is provided that is immediately adjacent to the non-text content. The link can be immediately before or after the non-text content. If the description is located along with other text then put "End of description" at the end so that they know when to stop reading and return to the main content. If a "Back" button will not take the person back to the point from which they jumped, then a link back to the non-text content location is provided. : This technique was commonly used in HTML before 'longdesc' was added to the specification. In HTML it was called a D-Link because it was usually implemented by putting a D next to images and using the D as a link to the long description. This technique is not technology specific and can be used in any technology that supports links.

Examples
Example 1: Bar chart

There is a bar chart on a Web page showing the sales for the top three salespeople.

The short text alternative says "October sales chart for top three salespeople."

Immediately after the non-text content is a small image denoting a long description. The alternate text for the image is "Long description of chart". The image links to the bottom of the page where there is a section titled "Description of charts on this page". The link points to this specific description: "Sales for October show Mary leading with 400 units. Mike follows closely with 389. Chris rounds out our top 3 with sales of 350. [end of description]"

Example 2: Bar chart - in non-HTML technology where user agent "back" is not supported for security reasons.

There is a bar chart on a Web page showing the sales for the top three salespeople.

The short text alternative says "October sales chart for top three salespeople."

Immediately after the non-text content is a small image denoting the long description. The alternate text for the image is "Long description of chart". The image links to another page titled "Description of charts in October Sales Report". The description link points to this specific description: "Sales for October show Mary leading with 400 units. Mike follows closely with 389. Chris rounds out our top 3 with sales of 350. End of description. <link>Back to Sales Chart</link>"

Example 3: Caption used as link

There is a chart. The figure caption immediately below the chart serves as a link to the long description. The Title attribute of the link makes it clear that this is a link to a long description.

Example 4: Transcript of an audio-only file

There is a recording of a speech by Martin Luther King. Links to the audio file and the transcript appear side by side.

Related techniques:
- G74: Providing a long description in text near the non-text content, with a reference to the location of the long description in the short description


------------------------------

G74: - Providing a long description in text near the non-text content, with a reference to the location of the long description in the short description
Providing a long description in text near the non-text content, with a reference to the location of the long description in the short description

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Sufficient).
	- This technique applies to all technologies.

Description : The objective of this technique is to provide a long description without requiring the user to jump off to another location for the description. It also allows all users to see the description which may be useful to anyone who might miss some features in the non-text content. : With this technique, the long description is provided as part of the standard presentation (i.e., everyone receives it). The description is located near the non-text content but does not have to be the very next item. For example, there may be a caption under a chart with the long description provided in the following paragraph. : The location of this long description is then provided within the short text alternative so the user knows where to look for it if they cannot view the non-text content.

Examples
Example 1: Bar chart

There is a bar chart on a Web page showing the sales for the top three salespeople.

The short text alternative says: "October sales chart for top three salespeople. Details in text following the chart:"

The following is in the paragraph immediately below the chart. "Sales for October show Mary leading with 400 units. Mike follows closely with 389. Chris rounds out our top 3 with sales of 350."

Related techniques:
- G73: Providing a long description in another location with a link to it that is immediately adjacent to the non-text content


------------------------------

G75: - Providing a mechanism to postpone any updating of content
Providing a mechanism to postpone any updating of content

About this Technique
	- This technique relates to 2.2.4: Interruptions (Sufficient).
	- This technique applies to content that automatically updates itself.

Description : The objective of this technique is to ensure that users can postpone automatic updates of content, or other non-emergency interruptions. This can be accomplished either through a preference or by alerting users of an imminent update and allowing them to suppress it. If a preference is provided, automatic content update can be disabled by default and users can specify the frequency of automatic content updates if they choose to enable the setting.

Examples
A Web page provides stock quotes and automatically updates from time to time. The page provides a short form with a field "Refresh data frequency (minutes):" so users can adjust the frequency of the updating.

Related techniques:
- G76: Providing a mechanism to request an update of the content instead of updating automatically
- SCR14: Using scripts to make nonessential alerts optional


------------------------------

G76: - Providing a mechanism to request an update of the content instead of updating automatically
Providing a mechanism to request an update of the content instead of updating automatically

About this Technique
	- This technique relates to:
	- 2.2.4: Interruptions (Sufficient)
	- 3.2.5: Change on Request (Sufficient)
	- This technique applies to any technology or combination of technologies that support automatic updates.

Description : The objective of this technique is to let the user control if and when content is updated, in order to avoid confusion or disorientation caused by automatic refreshes that cause a change of context. Users of screen readers may find automatic updates confusing because it is not always clear what is happening. When a page is refreshed, the screen reader's “virtual cursor", which marks the user's current location on the page, is moved to the top of the page. People who use screen magnification software and people with reading disabilities may also be disoriented when pages are refreshed automatically. : Some content is frequently updated with new data or information. Some developers force automatic updates by inserting code in the content that causes the content to request a new copy of itself from the server. These updates and the frequency of these updates are not always under the user's control. Instead of triggering updates automatically, authors can provide a mechanism that allows the user to request an update of the content as needed.

Examples
Example 1: Providing a button to update content

In HTML, a developer can provide a button or link that allows the user to update the content. For example, on a page with news items.

<button type="button">Update this page</button>

Related techniques:
- G75: Providing a mechanism to postpone any updating of content
- SCR14: Using scripts to make nonessential alerts optional


------------------------------

G78: - Providing a second, user-selectable, audio track that includes audio descriptions
Providing a second, user-selectable, audio track that includes audio descriptions

About this Technique
	- This technique relates to:
	- 1.2.3: Audio Description or Media Alternative (Prerecorded) (Sufficient)
	- 1.2.5: Audio Description (Prerecorded) (Sufficient)
	- This technique applies to any technology that has a sound track and visual content.

Description : The objective of this technique is to provide an audio (spoken) version of information that is provided visually so that it is possible for people who cannot see to be able to understand audio-visual material. : Since most user agents today cannot merge multiple sound tracks, this technique adds the additional audio information to synchronized media by providing an option which allows users to replace the soundtrack with a new copy of the original soundtrack that has the additional audio description added. This added information focuses on actions, characters, scene changes and on-screen text (not captions) that are important to understanding the content. : Since it is not helpful to have this new information obscure key audio information in the original sound track (or be obscured by loud sound effects), the new information is added during pauses in dialogue and sound effects. This limits the amount of supplementary information that can be added to the program. : The soundtrack with the audio description (of visual information) can either be an alternate sound track that the user can choose, or it can be the standard sound track that everyone hears.

Examples
A travelogue of the northeast has additional audio description added during the gaps in the dialogue to let listeners who are blind know what the person is talking about at any point in time.
A video shows a woodpecker carving a nest in a tree. A button within the content allows users to turn the audio description track on or off.
A lecture has audio description added whenever the instructor says things like "and this is the one that is most important." The audio descriptions lets listeners who can not see the video know what "this" is.
A movie file has two audio tracks, one of which includes audio description. Users can choose either one when listening to the movie by selecting the appropriate track in their media player.

Related techniques:
- G69: Providing an alternative for time based media
- SM6: Providing audio description in SMIL 1.0
- SM7: Providing audio description in SMIL 2.0
- G173: Providing a version of a movie with audio descriptions


------------------------------

G79: - Providing a spoken version of the text
Providing a spoken version of the text

About this Technique
	- This technique relates to 3.1.5: Reading Level (Sufficient).
	- This technique applies to technologies that support links, audio formats.

Description : Some users who have difficulty sounding out (decoding) words in written text find it very helpful to hear the text read aloud. This service can now be provided easily using either recorded human speech or synthetic speech. For example, there are a number of products that authors can use to convert text to synthetic speech, then save the spoken version as an audio file. A link to the spoken version can then be provided within the content. Cost depends in part on the quality of the voice used and whether the text is likely to change frequently. : Spoken versions of short texts and static text content : This method is effective for small amounts of text and for longer documents that do not change often. : Make a recording of someone reading the text aloud, or use a tool that converts individual documents or selected passages into synthetic speech. Choose the clearest, most attractive voice if a choice is available.
	- Save the spoken version as an audio file. Use an audio format that is widely available and supported by media players.
	- Provide a link to the audio version.
	- Identify the audio format (for example, .MP3, .WAV, .AU, etc.).
	- Provide a link to a media player that supports the format. : Spoken versions of text that changes : Server-based methods may be best when pages change often or when user choice determines text content. Some server-based tools allow users to select any text they are interested in and listen to it. Typically, the user presses a button which starts the text-to-speech conversion and reads the text aloud.

Examples
Example 1: A Web site for a government agency

The Web site for a municipal housing authority has a button on every page labeled "Read this page aloud." The user selects the button and the page is spoken by a synthetic voice.


------------------------------

G80: - Providing a submit button to initiate a change of context
Providing a submit button to initiate a change of context

About this Technique
	- This technique relates to 3.2.2: On Input (Sufficient using a more specific technique).
	- This technique applies to content that includes forms.

Description : The objective of this technique is to provide a mechanism that allows users to explicitly request changes of context. Since the intended use of a submit button is to generate an HTTP request that submits data entered in a form, this is an appropriate control to use for causing a change of context and is a practice that does not create confusion for users.

Examples
Example 1

Example 1: A submit button is used for each form that causes a change in context.

Related techniques:
- H32: Providing submit buttons
- H84: Using a button with a select element to perform an action


------------------------------

G81: - Providing a synchronized video of the sign language interpreter that can be displayed in a different viewport or overlaid on the image by the player
Providing a synchronized video of the sign language interpreter that can be displayed in a different viewport or overlaid on the image by the player

About this Technique
	- This technique relates to 1.2.6: Sign Language (Prerecorded) (Sufficient using a more specific technique).
	- This technique applies to all synchronized media technologies that allow synchronization of multiple video streams.

Description : The objective of this technique is to allow users who cannot hear or read text rapidly to be able to access synchronized media material without affecting the presentation of the material for all viewers. : For those who communicate primarily in sign language it is sometimes less preferable and sometimes not possible for them to read and understand text at the rate it is presented in captions. For these latter individuals it is important to provide sign language presentation of the audio information. : This technique accomplishes this by providing the sign language interpretation as a separate video stream that is synchronized with the original video stream. Depending on the player, this secondary video stream can be overlaid on top of the original video or displayed in a separate window. It may also be possible to enlarge the sign language interpreter separately from the original video to make it easier to read the hand, body and facial movements of the signer. : NOTE: Since sign language is not usually a signed version of the printed language, the author has to decide which sign language to include. Usually the sign language of the primary audience would be used. If intended for multiple audiences, multiple languages may be used. See advisory technique for multiple sign languages.

Examples
Example 1

Example 1: A university provides a synchronized sign language interpreter video stream that can be displayed, at the viewer's option, along with any of their education programs.

Related techniques:
- G54: Including a sign language interpreter in the video stream
- SM13: Providing sign language interpretation through synchronized video streams in SMIL 1.0
- SM14: Providing sign language interpretation through synchronized video streams in SMIL 2.0


------------------------------

G82: - Providing a text alternative that identifies the purpose of the non-text content
Providing a text alternative that identifies the purpose of the non-text content

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Sufficient).
	- This technique applies to all technologies.

Description : The purpose of this technique is to provide useful information via the text alternative even if the full function of the non-text content cannot be provided. : Sometimes, a text alternative cannot serve the same purpose as the original non-text content (for example an applet meant to develop two dimensional rapid targeting skills and eye hand coordination.) In these cases this technique is used. With this technique a description of the purpose of the non-text content is provided.

Examples
Example 1
An eye-hand coordination development applet has the following text alternative "Applet that uses the mouse and moving targets to develop eye-hand coordination"
A camera applet that has a round disk where you push on the edges to control a remote camera and a slider in the middle for zooming has the following text alternative "Control for aiming and zooming remote video camera".

Related techniques:
- G196: Using a text alternative on one item within a group of images that describes all items in the group
- H36: Using alt attributes on images used as submit buttons
- H37: Using alt attributes on img elements
- H53: Using the body of the object element
- H86: Providing text alternatives for emojis, emoticons, ASCII art, and leetspeak


------------------------------

G83: - Providing text descriptions to identify required fields that were not completed
Providing text descriptions to identify required fields that were not completed

About this Technique
	- This technique relates to:
	- 3.3.1: Error Identification (Sufficient)
	- 3.3.2: Labels or Instructions (Sufficient when used with G131: Providing descriptive labels)
	- 4.1.3: Status Messages (Sufficient when used with ARIA19: Using ARIA role=alert or Live Regions to Identify Errors)
	- This technique applies to content that includes mandatory fields in user input.

Description : The objective of this technique is to notify the user when a field that must be completed has not been completed. When users fail to provide input for any mandatory form fields, information is provided in text to enable the users to identify which fields were omitted. One approach is to use client-side validation and provide an alert dialog box identifying the mandatory fields which were omitted. Another approach, using server-side validation, is to re-display the form (including any previously entered data), with either a text description at the location of the omitted mandatory field, or a text description that identifies the omitted mandatory fields. : Note : The best practice is to include a message or alert, as some users may not be aware that an error has occurred and could assume that the form is not functioning correctly. It is also best practice to include an error notification in the page title (title element) since a screen reader user is likely to believe the page was submitted correctly and continue to navigate to another page as soon as the new page is returned instead of reading the main content area of the page again.

Examples
A user attempts to submit a form but has neglected to provide input or select a choice in one or more mandatory fields. Using client-side validation, the omission is detected and an alert dialog appears informing the user that mandatory fields have not been completed. The labels of the fields with this problem are changed to identify the problem field, and links to the problem fields are inserted in the document after the submit button so the user can move to them after dismissing the alert.
A user attempts to submit a form but has neglected to provide input or select a choice in one or more mandatory fields. Using server-side validation, the omission is detected and the form is re-displayed with a text description at the top informing which mandatory fields were omitted. Each omitted mandatory field is also identified using a text label so that the user does not have to return to the list at the top of the form to find the omitted fields.

A user is completing a form that contains mandatory fields. The labels of the fields indicate whether or not they are mandatory. The user tabs to a mandatory field, and tabs out of the field without entering any data or selecting a choice. A client-side script modifies the label of the field to indicate that leaving it blank was an error.

Note

Some screen readers may not notice and announce the change to the label so screen reader users may be unaware of the error.

Related techniques:
- G85: Providing a text description when user input falls outside the required format or values
- SCR18: Providing client-side validation and alert


------------------------------

G84: - Providing a text description when the user provides information that is not in the list of allowed values
Providing a text description when the user provides information that is not in the list of allowed values

About this Technique
	- This technique relates to:
	- 3.3.1: Error Identification (Sufficient)
	- 3.3.3: Error Suggestion (Sufficient)
	- 4.1.3: Status Messages (Sufficient when used with ARIA19: Using ARIA role=alert or Live Regions to Identify Errors)
	- This technique applies to content that collects user input where a limited set of values must be input.

Description : When users enter input that is validated, and errors are detected, the nature of the error needs to be described to the user in manner they can access. One approach is to present an alert dialog that describes fields with errors when the user attempts to submit the form. Another approach, if validation is done by the server, is to return the form (with the user's data still in the fields) and a text description at the top of the page that indicates the fact that there was a validation problem, describes the nature of the problem, and provides ways to locate the field(s) with a problem easily. The "in text" portion of the Success Criterion underscores that it is not sufficient simply to indicate that a field has an error by putting an asterisk on its label or turning the label red. A text description of the problem should be provided. : When input must be one of a set of allowed values, the text description should indicate this fact. It should include the list of values if possible, or suggest the allowed value that is most similar to the entered value.

Examples
The user inputs invalid data on a form field. Before the user submits the form, an alert dialog appears that describes the nature of the error so the user can fix it.
The user inputs invalid data on a form field and submits the form. The server returns the form, with the user's data still present, and indicates clearly in text at the top of the page that there were input errors. The text describes the nature of the error(s) and clearly indicates which field had the problem so the user can easily navigate to it to fix the problem.


------------------------------

G85: - Providing a text description when user input falls outside the required format or values
Providing a text description when user input falls outside the required format or values

About this Technique
	- This technique relates to:
	- 3.3.1: Error Identification (Sufficient)
	- 3.3.3: Error Suggestion (Sufficient)
	- 4.1.3: Status Messages (Sufficient when used with ARIA19: Using ARIA role=alert or Live Regions to Identify Errors)
	- This technique applies to content that accepts user data input, with restrictions on the format, value, and/or type of the input.

Description : The objective of this technique is to provide assistance in correcting input errors where the information supplied by the user is not accepted. When users enter data input that is validated, and input errors are detected, information about the nature and location of the input error is provided in text to enable the users to identify the problem. One approach is to use client-side validation and provide an alert dialog box that describes the error immediately when users enter invalid data in field. Another approach, using server-side validation, is to re-display the form (including any previously entered data), and a text description at the top of the page that indicates the fact that there was an error, describes the nature of the problem, and provides ways to easily locate the field(s) with a problem. : However the text description is provided, it should do one of the following things to assist the user: : Provide examples of the correct data entry for the field,
	- Describe the correct data entry for the field,
	- Show values of the correct data entry that are similar to the user's data entry, with instructions to the user as to how to enter one of these correct values should the user choose to do so.

Examples
The user inputs invalid data on a form field. When the user exits the field, an alert dialog appears that describes the nature of the error so the user can fix it.
The user inputs invalid data on a form field and submits the form. The server returns the form, with the user's data still present, and indicates clearly in text at the top of the page that there were input errors. The text describes the nature of the error(s) and clearly indicates which field had the problem so the user can easily navigate to it to fix the problem.
The user inputs invalid data on a form field and attempts to submit the form. Client side scripting detects the error, cancels the submit, and modifies the document to provide a text description after the submit button describing the error, with links to the field(s) with the error. The script also modifies the labels of the fields with the problems to highlight them.

Related techniques:
- SCR18: Providing client-side validation and alert


------------------------------

G86: - Providing a text summary that can be understood by people with lower secondary education level reading ability
Providing a text summary that can be understood by people with lower secondary education level reading ability

About this Technique
	- This technique relates to 3.1.5: Reading Level (Sufficient).
	- This technique applies to all technologies.

Description : The objective of this technique is to provide a summary of complex content. The summary is provided in addition to the original content. : Users with disabilities that make it difficult to decode words and sentences are likely to have trouble reading and understanding complex text. This technique provides a short statement of the most important ideas and information in the content. The summary is easier to read because it uses shorter sentences and more common words than the original. : The following steps can be used to prepare the summary: : Identify the most important ideas and information in the content.
	- Write one or more paragraphs that use shorter sentences and more common words to express the same ideas and information. (The number of paragraphs depends on the length of the original.)
	- Measure the readability of the summary.
	- Edit the summary. Consider dividing longer sentences into two or replacing long or unfamiliar words with shorter, more common terms.
	- Repeat steps 3 and 4 as needed.

Examples
Example 1: A technical article with a readable summary

An article describes a technical innovation. The first item after the title of the article is a section with the heading, “Summary." The average length of the sentences in the summary is 16 words (compared to 23 words for sentences in the article), and it uses short, common words instead of the technical jargon in the article. A readability formula is applied; the summary requires reading ability less advanced than the lower secondary education level.

Related techniques:
- G79: Providing a spoken version of the text
- G103: Providing visual illustrations, pictures, and symbols to help explain ideas, events, and processes
- G153: Making the text easier to read
- G160: Providing sign language versions of information, ideas, and processes that must be understood in order to use the content


------------------------------

G87: - Providing closed captions
Providing closed captions

About this Technique
	- This technique relates to:
	- 1.2.2: Captions (Prerecorded) (Sufficient)
	- 1.2.2: Captions (Prerecorded) (Sufficient using a more specific technique)
	- 1.2.4: Captions (Live) (Sufficient, together with G9: Creating captions for live synchronized media)
	- 1.2.4: Captions (Live) (Sufficient, together with G9: Creating captions for live synchronized media using a more specific technique)
	- This technique applies to any audiovideo technology where there are user agents that support closed captions.

Description : The objective of this technique is to provide a way for people who have hearing impairments or otherwise have trouble hearing the dialogue in synchronized media material to be able to view the material and see the dialogue and sounds - without requiring people who are not deaf to watch the captions. With this technique all of the dialogue and important sounds are embedded as text in a fashion that causes the text not to be visible unless the user requests it. As a result they are visible only when needed. This requires special support for captioning in the user agent. : NOTE: Captions should not be confused with subtitles. Subtitles provide text of only the dialogue and do not include important sounds.

Examples
Example 1

In order to ensure that users who are deaf can use their interactive educational materials, the college provides captions and instructions for turning on captions for all of their audio interactive educational programs.

Example 2

The online movies at a media outlet all include captions and are provided in a format that allows embedding of closed captions.

Example 3

Special caption files including synchronization information are provided for an existing movie. Players are available that can play the captions in a separate window on screen, synchronized with the movie window.

Example 4

A video of a local news event has captions provided that can be played over the video or in a separate window depending on the player used.

Related techniques:
- G93: Providing open (always visible) captions
- SM11: Providing captions through synchronized text streams in SMIL 1.0
- SM12: Providing captions through synchronized text streams in SMIL 2.0


------------------------------

G88: - Providing descriptive titles for Web pages
Providing descriptive titles for Web pages

About this Technique
	- This technique relates to 2.4.2: Page Titled (Sufficient using a more specific technique).
	- This technique applies to all technologies.

Description : The objective of this technique is to give each Web page a descriptive title. Descriptive titles help users find content, orient themselves within it, and navigate through it. A descriptive title allows a user to easily identify what Web page they are using and to tell when the Web page has changed. The title can be used to identify the Web page without requiring users to read or interpret page content. Users can more quickly identify the content they need when accurate, descriptive titles appear in site maps or lists of search results. When descriptive titles are used within link text, they help users navigate more precisely to the content they are interested in. : The title of each Web page should: : Identify the subject of the Web page
	- Make sense when read out of context, for example by a screen reader or in a site map or list of search results
	- Be short : It may also be helpful for the title to : Identify the site or other resource to which the Web page belongs
	- Be unique within the site or other resource to which the Web page belongs

Examples
Example 1: A title that lists the most important identifying information first

A Web page is published by a group within a larger organization. The title of the Web page first identifies the topic of the page, then shows the group name followed by the name of the parent organization.

<title>Working with us: The Small Group: The Big Organization</title>
Example 2: A synchronized media presentation with a descriptive title

A synchronized media presentation about the 2004 South Asian tsunami is titled "The Tsunami of 2004."

Example 3: A Web page with a descriptive title in three parts

A Web page provides guidelines and suggestions for creating closed captions. The Web page is part of a "sub-site" within a larger site. The title is separated into three parts by dashes. The first part of the title identifies the organization. The second part identifies the sub-site to which the Web page belongs. The third part identifies the Web page itself.

<title>Computer Hardware Corporation - Laptop Division - Laptop FAQs</title>
Example 4: A newspaper Web page

A Web site that only permits viewing of the current edition titles its Web page "National News, Front Page". A Web site that permits editions from different dates to be viewed titles its Web page, "National News, Front Page, Oct 17, 2005".

Related techniques:
- H25: Providing a title using the title element


------------------------------

G89: - Providing expected data format and example
Providing expected data format and example

About this Technique
	- This technique relates to:
	- 3.3.2: Labels or Instructions (Sufficient when used with G131: Providing descriptive labels)
	- 3.3.5: Help (Sufficient)
	- This technique applies to pages that collect information from users, and restrict the format the user can use.

Description : The objective of this technique is to help the user avoid input errors by informing them about restrictions on the format of data that they must enter. This can be done by describing characteristics of the format or providing a sample of the format the data should have. : Note : For data formats with common variations, such as dates and times, it may be useful to provide a preference option so users can use the format that is most comfortable to them.

Examples
Example 1: Date text input

The following HTML form control for a date indicates in the label that the date must be in day-month-year format, not month-day-year as many users in the United States may assume.

<label for="date">Date (dd-mm-yyyy)</label>
<input type="text" name="date" id="date">

Related techniques:
- G184: Providing text instructions at the beginning of a form or set of fields that describes the necessary input


------------------------------

G90: - Providing keyboard-triggered event handlers
Providing keyboard-triggered event handlers

About this Technique
	- This technique relates to 2.1.1: Keyboard (Sufficient using a more specific technique).
	- This technique applies to all technologies where content includes functionality.

Description : The objective of this technique is to permit individuals who rely on a keyboard or keyboard interface to access the functionality of the content. To do this, make sure that all event handlers triggered by non-keyboard UI events are also associated with a keyboard-based event, or provide redundant keyboard-based mechanisms to accomplish the functionality provided by other device-specific functions.

Examples
Example 1: A drag and drop feature A photo application includes a "drag" and "drop" feature to allow users to re-order photographs in an on-line album for presentation as a slide show. It also includes a feature that allows users to select a photo and 'cut' and 'paste' the items into the list at the appropriate point using only the keyboard.
Example 2: A reorder feature A Web application that allows users to create surveys by dragging questions into position includes a list of the questions followed by a text field that allows users to re-order questions as needed by entering the desired question number.

Related techniques:
- SCR2: Using redundant keyboard and mouse event handlers
- SCR20: Using both keyboard and other device-specific functions
- SCR35: Making actions keyboard accessible by using the onclick event of anchors and buttons


------------------------------

G91: - Providing link text that describes the purpose of a link
Providing link text that describes the purpose of a link

About this Technique
	- This technique relates to:
	- 2.4.4: Link Purpose (In Context) (Sufficient)
	- 2.4.4: Link Purpose (In Context) (Sufficient using a more specific technique)
	- 2.4.9: Link Purpose (Link Only) (Sufficient)
	- This technique applies to all technologies that contain links.

Description : The objective of this technique is to describe the purpose of a link in the text of the link. The description lets a user distinguish this link from links in the Web page that lead to other destinations and helps the user determine whether to follow the link. The URI of the destination is generally not sufficiently descriptive.

Examples
Example 1: Describing the purpose of a link in HTML in the text content of the a element
<a href="routes.html">Current routes at Boulders Climbing Gym</a>

Related techniques:
- H30: Providing link text that describes the purpose of a link for anchor elements


------------------------------

G92: - Providing long description for non-text content that serves the same purpose and presents the same information
Providing long description for non-text content that serves the same purpose and presents the same information

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Sufficient).
	- This technique applies to all technologies.

Description : The objective of this technique is to provide a long text alternative that serves the same purpose and presents the same information as the original non-text content when a short text alternative is not sufficient. : Combined with the short text alternative, the long description should be able to substitute for the non-text content. The short alternative identifies the non-text content; the long alternative provides the information. If the non-text content were removed from the page and substituted with the short and long descriptions, the page would still provide the same function and information. : In deciding what should be in the text alternatives, the following questions are helpful. : Why is this non-text content here?
	- What information is it presenting?
	- What purpose does it fulfill?
	- If I could not use the non-text content, what words would I use to convey the same function and/or information?

Examples
Example 1

A chart showing sales for October has a short text alternative of "October sales chart". The long description would read "Bar Chart showing sales for October. There are 6 salespersons. Maria is highest with 349 units. Frances is next with 301. Then comes Juan with 256, Sue with 250, Li with 200 and Max with 195. The primary use of the chart is to show leaders, so the description is in sales order."

Example 2

A line graph that shows average winter temperatures from the past 10 years includes a short text alternative of "Average winter temperatures 1996-2006." The long description includes the data table that was used to generate the line graph.

Related techniques:
- G94: Providing short text alternative for non-text content that serves the same purpose and presents the same information as the non-text content


------------------------------

G93: - Providing open (always visible) captions
Providing open (always visible) captions

About this Technique
	- This technique relates to:
	- 1.2.2: Captions (Prerecorded) (Sufficient)
	- 1.2.4: Captions (Live) (Sufficient, together with G9: Creating captions for live synchronized media)
	- This technique applies to any synchronized media technology, even ones that do not support closed captions.

Description : The objective of this technique is to provide a way for people who are deaf or otherwise have trouble hearing the dialogue in audio visual material to be able to view the material. With this technique all of the dialogue and important sounds are embedded as text in the video track. As a result they are always visible and no special support for captioning is required by the user agent. : NOTE: Captions should not be confused with subtitles. Subtitles provide text of only the dialogue and do not include important sounds.

Examples
In order to ensure that everyone can view their online movies, even if users do not know how to turn on captions in their media player, a library association puts the captions directly into the video.
A news organization provides open captions on all of its material.

Related techniques:
- G87: Providing closed captions


------------------------------

G94: - Providing short text alternative for non-text content that serves the same purpose and presents the same information as the non-text content
Providing short text alternative for non-text content that serves the same purpose and presents the same information as the non-text content

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Sufficient).
	- This technique applies to all technologies.

Description : The objective of this technique is to create a text alternative that serves the same purpose and presents the same information as the original non-text content. As a result, it is possible to remove the non-text content and replace it with the text alternative and no functionality or information would be lost. This text alternative should not necessarily describe the non-text content. It should serve the same purpose and convey the same information. This may sometimes result in a text alternative that looks like a description of the non-text content. But this would only be true if that was the best way to serve the same purpose. : If possible, the short text alternative should completely convey the purpose and information. If it is not possible to do this in a short phrase or sentence, then the short text alternative should provide a brief overview of the information. A long text alternative would be used in addition to convey the full information. : The text alternative should be able to substitute for the non-text content. If the non-text content were removed from the page and substituted with the text, the page would still provide the same function and information. The text alternative would be brief but as informative as possible. : In deciding what text to include in the alternative, it is often a good idea to consider the following questions: : Why is this non-text content here?
	- What information is it presenting?
	- What purpose does it fulfill?
	- If I could not use the non-text content, what words would I use to convey the same function and/or information? : When non-text content contains words that are important to understanding the content, the alt text should include those words. If the text in the image is more than can fit in a short text alternative then it should be described in the short text alternative and a long text alternative should be provided as well with the complete text.

Examples
A search button uses an image of a magnifying glass. The text alternative is "search" and not "magnifying glass".
A picture shows how a knot is tied including arrows showing how the ropes go to make the knot. The text alternative describes how to tie the knot, not what the picture looks like.
A picture shows what a toy looks like from the front. The text alternative describes a front view of the toy.
An animation shows how to change a tire. A short text alternative describes what the animation is about. A long text alternative describes how to change a tire.
A logo of the TechTron company appears next to each product in a list that is made by that and has a short text alternative that reads, "TechTron."
A chart showing sales for October has an short text alternative of "October sales chart". It also has a long description that provides all of the information on the chart.
A heading contains a picture of the words, "The History of War" in stylized text. The alt text for the picture is "The History of War".
An image of a series of books on a shelf contains interactive areas that provide the navigation means to a Web page about the particular book. The text alternative "The books available to buy in this section. Select a book for more details about that book." describes the picture and the interactive nature.

Related techniques:
- G92: Providing long description for non-text content that serves the same purpose and presents the same information
- G95: Providing short text alternatives that provide a brief description of the non-text content
- G196: Using a text alternative on one item within a group of images that describes all items in the group
- H2: Combining adjacent image and text links for the same resource
- H24: Providing text alternatives for the area elements of image maps
- H36: Using alt attributes on images used as submit buttons
- H37: Using alt attributes on img elements
- H53: Using the body of the object element
- H86: Providing text alternatives for emojis, emoticons, ASCII art, and leetspeak


------------------------------

G95: - Providing short text alternatives that provide a brief description of the non-text content
Providing short text alternatives that provide a brief description of the non-text content

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Sufficient).
	- This technique applies to all technologies.

Description : This technique is used when the text needed to serve the same purpose and present the same information as the original non-text content is too lengthy or when this goal cannot be achieved with text alone. In that case this technique is used to provide a short text alternative that briefly describes the non-text content. (A long text alternative is then provided using another technique such that the combination serves the same purpose and presents the same information as the original non-text content.) : In deciding what text to include in the alternative, it is often a good idea to consider the following questions: : Why is this non-text content here?
	- What information is it presenting?
	- What purpose does it fulfill?
	- If I could not use the non-text content, what words would I use to convey the same function and/or information?

Examples
A chart showing sales for October has an short text alternative of "October sales chart". It also has a long description that provides all of the information on the chart.

Related techniques:
- G74: Providing a long description in text near the non-text content, with a reference to the location of the long description in the short description
- G73: Providing a long description in another location with a link to it that is immediately adjacent to the non-text content
- G92: Providing long description for non-text content that serves the same purpose and presents the same information
- G94: Providing short text alternative for non-text content that serves the same purpose and presents the same information as the non-text content


------------------------------

G96: - Providing textual identification of items that otherwise rely only on sensory information to be understood
Providing textual identification of items that otherwise rely only on sensory information to be understood

About this Technique
	- This technique relates to 1.3.3: Sensory Characteristics (Sufficient).
	- This technique applies to all technologies that present description of a content rendering to the user.

Description : The objective of this technique is to ensure that items within a Web page are referenced in the content not only by shape, size, sound or location, but also in ways that do not depend on that sensory perception. For example, a reference may also describe the function of the item or its label.

Examples
Example 1: Button referenced by shape and accessible name

A round button is provided on a form to submit the form and move onto the next step in a progression. The button is labeled with the text "go". The instructions state, "to submit the form press the round button labeled go". This includes both shape and textual information to locate the button.

Example 2: A section of navigation links referenced by location and heading

Instructions for a Web page providing on-line training state, "Use the list of links to the right with the heading, 'Class Listing' to navigate to the desired on-line course." This description provides location as well as textual clues to help find the correct list of links.

Example 3: Button referenced by position and accessible name

The following layout places a button in the lower right corner and indicates it by position. An indication of the text label clarifies which button to use for users for which the position is not meaningful.

The HTML
<form class="wrapper">
  <h1>Sign up to our mailing list</h1>
    <div role="note">
      Complete the form and then press the lower-right (<i>sign up</i>) button.
    </div>
  <div class="form-group">
    <label for="full-name">Your name</label>
    <input autocomplete="name" id="full-name" type="text">
  </div>
  <div class="form-group">
    <label for="email">Your email address</label>
    <input autocomplete="email" id="email" type="text">
  </div>
  <button type="reset">Cancel</button>
  <button type="submit">Sign up</button>
</form>
The CSS
.wrapper{
  border:1px solid #aeaeae;
  display:grid;
  gap:1rem;
  grid-template-columns:1fr 1fr;
  padding:1rem;
  width:50vw;
 }
 
 label{
  display:block;
 }
 
 input, button{
  font:inherit;
 }
 
 h1, [role=note]{
  grid-column:1 / -1;
 }
 
 .form-group{
  grid-column:1;
 }
 
 input{
  width:100%;
 }
 
 button[type=reset]{
  grid-column:1;
 }
 
 button[type=submit]{
  grid-column:2;
 }


------------------------------

G97: - Providing the first use of an abbreviation immediately before or after the expanded form
Providing the first use of an abbreviation immediately before or after the expanded form

About this Technique
	- This technique relates to 3.1.4: Abbreviations (Sufficient when used with G102: Providing the expansion or explanation of an abbreviation).
	- This technique applies to any technology containing text.

Description : The objective of this technique is to make the expanded form of an abbreviation available by associating the expanded form with its abbreviation the first time it occurs within a Web page. The expansion of any abbreviation can be found by searching the Web page for the first use. : For English, when shortening a word, phrase or name by means of an abbreviation, initialism, acronym, or other shortened form, it is advisable to provide the full form before providing the abbreviated form. This makes the text easier to read and is advised by many style guides. Other languages may have different conventions. : Note that some abbreviations require explanations rather than expansions. This technique is not appropriate for such abbreviations. : This technique is applied to the first occurrence of an abbreviation in a Web page. When combining multiple resources into a single Web page, the abbreviation would be expanded at the beginning of each resource. In this case, however, using a different technique for providing the expanded form may be more appropriate.

Examples
Example 1

"The United Nations High Commissioner for Human Rights (UNHCR) was established in 1950 to provide protection and assistance to refugees."

"The WAI (Web Accessibility Initiative) demonstrates the W3C commitment to accessibility."

Related techniques:
- G55: Linking to definitions
- G102: Providing the expansion or explanation of an abbreviation
- H28: Providing definitions for abbreviations by using the abbr element


------------------------------

G98: - Providing the ability for the user to review and correct answers before submitting
Providing the ability for the user to review and correct answers before submitting

About this Technique
	- This technique relates to 3.3.4: Error Prevention (Legal, Financial, Data) (Sufficient).
	- This technique applies to sites that collect data from users that is specific to the moment it is submitted, such as test data, and cannot be changed once it is submitted.

Description : The objective of this technique is to provide users with a way to ensure their input is correct before completing an irreversible transaction. Testing, financial, and legal applications permit transactions to occur which cannot be "undone". It is therefore important that there be no errors in the data submission, as the user will not have the opportunity to correct the error once the transaction has been committed. : On a simple, 1-page form this is easy because the user can review the form before submitting. On a form that spans multiple Web pages, however, data is collected from the user in multiple steps before the transaction is committed. The user may not recall all of the data that was entered in previous steps before the step which commits the transaction. : One approach is to cache the results of each individual step and allow the user to navigate back and forth at will to review all data entered. Another approach is to provide a summary of all data collected in all steps for the user to review prior to the final commitment of the transaction. : Before the final step that commits the transaction to occur, instructions are provided to prompt the user to review the data entered and confirm. Once the user confirms, the transaction is completed.

Examples

An online banking application provides multiple steps to complete a transfer of funds between accounts as follows:

Select "transfer from" account
Select "transfer to" account
Enter transfer amount

A summary of the transaction is provided showing the from and to accounts and the transfer amount. The user can select a button to either complete the transaction or cancel it.

A testing application provides multiple pages of questions. At any time, the user can choose to return to previously completed sections to review and change answers. A final page is displayed providing buttons to either submit the test answers or review answers.

Related techniques:
- G155: Providing a checkbox in addition to a submit button
- G168: Requesting confirmation to continue with selected action
- SCR18: Providing client-side validation and alert


------------------------------

G99: - Providing the ability to recover deleted information
Providing the ability to recover deleted information

About this Technique
	- This technique relates to 3.3.4: Error Prevention (Legal, Financial, Data) (Sufficient).
	- This technique applies to content where user actions cause content to be deleted.

Description : When a Web application provides the capability of deleting information, the server can provide a means to recover information that was deleted in error by a user. One approach is to delay deleting the data by merely marking it for deletion or moving it to a holding area (such as a trash can) and waiting some period of time before actually deleting it. During this time period, the user can request that the data be restored or can retrieve it from the holding area. Another approach is to record all delete transactions in such a way that data can be restored if requested by the user, such as in the edit history stored by wikis and source control applications.The retrievable information that is stored should be that which would be needed to correct the transaction.

Examples
A Web application allows users to set up folders and store data within them. Each folder and data item is accompanied by a checkbox to mark it for action, and two buttons, one to move and one to delete. If the user selects the delete button by mistake, large amounts of data could be lost. The application presents the data as deleted to the user right away, but schedules it for actual deletion in one week. During the week, the user may go into a "deleted items" folder and request any folder or data item awaiting actual deletion to be restored.


------------------------------

G100: - Providing a short text alternative which is the accepted name or a descriptive name of the non-text content
Providing a short text alternative which is the accepted name or a descriptive name of the non-text content

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Sufficient).
	- This technique applies to all technologies.

Description : The objective of this technique is to allow users to identify the non-text content even if the non-text content is intended to provide a specific sensory experience. For example, a deaf person may want to know what an audio instrumental file is - even if they cannot hear it. Similarly, a blind person may want to know what the subject of a visual image is - even if they cannot see it.

Examples
Example 1
A painting of the Mona Lisa has an alternate text of "Mona Lisa, by Leonardo da Vinci".
A sound file has an alternate text of "5 Grade children playing a Theramin".
A famous modern art piece is labeled "Red, Blue and Yellow, by Piet Mondrian".

Related techniques:
- G68: Providing a short text alternative that describes the purpose of live audio-only and live video-only content


------------------------------

G101: - Providing the definition of a word or phrase used in an unusual or restricted way
Providing the definition of a word or phrase used in an unusual or restricted way

About this Technique
	- This technique relates to 3.1.3: Unusual Words (Sufficient using a more specific technique).
	- This technique applies to any technology containing text.

Description : The objective of this technique is to provide a definition for any word used in an unusual or restricted way. : A word is used in an unusual or restricted way when: : dictionaries give several definitions of the word but one specific definition must be used in order to understand the content;
	- a specific definition must be used in order to understand the content and dictionaries list that definition as rare, archaic, obsolete, etc.;
	- the author creates a new definition that must be used in order to understand the content. : This technique can also be used to provide definitions for jargon, that is, the specialized vocabulary used in a particular profession or technical field and understood by people in that field but not by people outside the field. : The technique can also be used to define idiomatic expressions. For example, speakers of a language who live in a particular region may use idiomatic expressions that are accepted by everyone in the region but not by people from other regions where the same language is spoken.

Examples
Example 1: A term used in a restricted way

The word "technology" is widely used to cover everything from the stone tools used by early humans to contemporary digital devices such as cell phones. But in WCAG 2.0, the word technology is used in a more restricted way: it means a mechanism for encoding instructions to be rendered, played or executed by user agents, including markup languages, data formats, and programming languages used in producing and delivering Web content.

Example 2: A word used according to an obsolete definition

The word "ether" is defined as a substance that filled interplanetary space: "He believed that sound traveled through the ether."

Example 3: Jargon

The word "driver" is defined as software that contains specific instructions for a printer: "It may be necessary to update the driver for your printer."

Example 4: An idiomatic expression

Some people say "spill the beans" when they mean "reveal a secret", e.g., "In the police station, Joe spilled the beans about the plot to kidnap the prime minister."

Example 5: An idiomatic expression in Japanese

This example uses parentheses to provide the definition of an idiomatic expression in Japanese. The phrase in Japanese says that "he throws a spoon." It means that there was nothing he can do and finally he gives up.

さじを投げる（どうすることもできなくなり、あきらめること）。

Example 6: An unfamiliar adopted foreign word in English

Users may not understand the meaning of an unfamiliar word adopted from another language: "We need to leave town pronto (quickly).

Example 7: Unfamiliar adopted words in Japanese

In Japanese, Kata-kana is used for adopted foreign words. If words are unfamiliar to users, provide the meaning or translation so that users can understand them.

アクセシビリティ（高齢者・障害者を含む全ての人が利用できること）は、Webサイトに不可欠である。

English translation: "Accessibility" (it can be accessed by all users including elderly people and people with disabilities) is an essential aspect of the Websites.

レイアウトテーブルとCSSの併用をハイブリッド（複合型）という。

English translation: Using both layout table and CSS is called "hybrid" (combination of multiple forms).

Related techniques:
- G55: Linking to definitions
- G62: Providing a glossary
- G70: Providing a function to search an online dictionary
- G112: Using inline definitions


------------------------------

G102: - Providing the expansion or explanation of an abbreviation
Providing the expansion or explanation of an abbreviation

About this Technique
	- This technique relates to 3.1.4: Abbreviations (Sufficient using a more specific technique).
	- This technique applies to any technology containing text.

Description : The objective of this technique is to provide information necessary to understand an abbreviation. : An abbreviation is the shortened form of a word, phrase, or name. For most abbreviations, providing the full word, phrase, or name is sufficient. : Some abbreviations represent words or phrases that are borrowed from a foreign language. For instance, many commonly used abbreviations in English are derived from Latin phrases, such as the short list of examples given below. The expanded form is only provided here as background information. For this category of abbreviations, providing an explanation is more helpful than the original expanded form, and the explanation of the abbreviation is provided instead of the expansion. : Abbreviation	Latin expansion	Explanation
	- a.m.	ante meridiem	before noon; in the morning
	- p.m.	post meridiem	after noon; in the afternoon
	- e.g.	exempli gratia	for example
	- cf	confer/conferatur	compare : If abbreviations do not need an expansion (for example, because the original expansion has been rejected by the organization that it refers to or if the abbreviation has become part of the language), provide an explanation, if appropriate, or treat the abbreviation as a word that does not require explanation.

Examples
Example 1: ADA

Some abbreviations have more than one meaning, and the meaning depends on the context. For example, ADA means "American Dental Association" in one context and "Americans with Disabilities Act" in another. Only the expansion relevant to the context needs to be provided.

Example 2: English abbreviations for phrases borrowed from Latin

In the following sentence, the explanation "for example" would be provided for "e.g.": Students participating in team sports, e.g., basketball or football, must set their schedules around team practice time.

Example 3: ABS

Some languages (including English and Dutch) borrowed the acronym ABS (Antiblockiersystem: anti-lock brakes) from German. An explanation (anti-lock brakes) is provided, rather than the expansion

Example 4: acronyms with no expansion

Examples of acronyms which no longer have expansions include

SIL, which used to mean Summer Institute of Linguistics, is now a name in its own right. See SIL history.
IMS, which used to mean Instructional Management Systems, is now a name in its own right.

For this category of examples, a short explanation of what the organization is or does is sufficient.

Example 5: Phrases that were once abbreviations, but have become part of the language

The Dutch fragment "'s nachts" meaning "at night" was originally an abbreviation for "des nachts". In the current Dutch language, the word "des" is rarely used anymore and perceived as archaic. Providing an expansion could be confusing. For "'s nachts" an expansion is not provided.

The English phrase "o'clock" was originally an abbreviation for "of the clock". Since then, "o'clock" has become part of the English language and an expansion does not need to be provided.

Related techniques:
- G55: Linking to definitions
- G62: Providing a glossary
- G70: Providing a function to search an online dictionary
- G97: Providing the first use of an abbreviation immediately before or after the expanded form
- H28: Providing definitions for abbreviations by using the abbr element


------------------------------

G103: - Providing visual illustrations, pictures, and symbols to help explain ideas, events, and processes
Providing visual illustrations, pictures, and symbols to help explain ideas, events, and processes

About this Technique
	- This technique relates to 3.1.5: Reading Level (Sufficient).
	- This technique applies to all technologies.

Description : The objective of this technique is to provide visual illustrations that help users with reading disabilities understand difficult text that describes concepts or processes. The illustrations are provided in addition to the text. : Users with disabilities that make it difficult to decode words and sentences are likely to have trouble reading and understanding complex text. Charts, diagrams, animations, photographs, graphic organizers, or other visual materials often help these users. For example: : Charts and graphs help users understand complex data.
	- Diagrams, flowcharts, videos, and animations help users understand processes.
	- Concept maps and other graphic organizers help users understand how ideas are related to each other.
	- Photographs, drawings, and videos can help users understand natural or historical events or objects.

Examples
Example 1: An annual report for a company

An annual report discusses multiple factors that influenced the company's performance in the past year. The report also includes charts and graphs that illustrate how these factors interact. Each chart or graph has a text alternative as required by Success Criterion 1.1.1. Each one also has a number in its caption (e.g., “Figure 7"). These numbers are used in the text to reference the charts or graphs.

Example 2: Screen shots in technical documentation

Online documentation for a product includes step by step instructions. Each step is illustrated by a screen shot that shows the visual appearance of the screen. Each screen shot has text alternatives as required by Success Criterion 1.1.1.

Example 3: Illustrations of a complex natural event

A Web site discusses the tsunami of 2004. The site describes how the tsunami affected different places around the Indian Ocean. Photographs of the devastation in each area are included. Each photograph has a text alternative as required by Success Criterion 1.1.1. The site also explains what happens underwater during a tsunami. The explanation is accompanied by an animation that shows how a tsunami occurs and spreads over the ocean. The animation has a text alternative as required by Success Criterion 1.1.1.


------------------------------

G105: - Saving data so that it can be used after a user re-authenticates
Saving data so that it can be used after a user re-authenticates

About this Technique
	- This technique relates to 2.2.5: Re-authenticating (Sufficient when used for Providing options to continue without loss of data).
	- This technique applies to web pages that require user authentication and limit the time available for submitting data.

Description : Web servers that require user authentication often terminate the session after a set period of time if there is no activity from the user. If the user is unable to input the data quickly enough and the session times out before they submit, the server will require re-authentication before proceeding. When this happens, the server stores the data in a temporary cache while the user logs in, and when the user has re-authenticated, the data is made available from the cache and the form is processed as if there had never been a session time-out. The server does not keep the cache indefinitely, merely long enough to ensure success after re-authentication in a single user session, such as one day.

Examples
A user logs in to use a forum and replies to a post. The time taken to write the reply is longer than the time allowed by the server for a session of inactivity. The user submits the reply and is informed of the time out and prompted to log in again to submit the response. The user's post reply is retained by the server and if the user log-in is successful the reply is processed as normal. If the log-in cannot be successfully completed the reply is discarded.
A user logs in to a secure area and fills out a form. The session times out for security reasons. The form data is retained by the server and the user is informed of the time out and is prompted to log-in again. If the user logs in correctly, the form is presented to the user with all of the data previously entered and user can submit the form. If the log-in cannot be successfully completed the form data is discarded.

Related techniques:
- G181: Encoding user data as hidden or encrypted data in a re-authorization page


------------------------------

G107: - Using "activate" rather than "focus" as a trigger for changes of context
Using "activate" rather than "focus" as a trigger for changes of context

About this Technique
	- This technique relates to 3.2.1: On Focus (Sufficient).
	- This technique applies to all technologies.

Description : The objective of this technique is to provide a method for activating things that is predictable by the user. Users with cognitive disabilities and people using screen readers or screen magnifiers may be confused by an unexpected event such as automatic form submission or activation of a function that causes a change of context. : With this technique, all changes of context would be triggered only by a specific action on the part of the user. Further, that action would be one that usually causes changes in context, such as clicking on a link or pressing a submit button. Actions that simply move the focus to an element would not cause a change of context.

Examples
Example 1
A page pops up a new window only when the user clicks(or uses spacebar) on a button rather than using onfocus to pop up a new window.
A submit button is used to move on to the next data entry screen rather than having the next screen appear automatically when the user tabbed onto a 'done' button.


------------------------------

G108: - Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes
Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes

About this Technique
	- This technique relates to 4.1.2: Name, Role, Value (Sufficient using a more specific technique).
	- This technique applies to markup technologies where it is possible to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes.

Description : The objective of this technique is to allow assistive technology to understand Web content so that it can convey equivalent information to the user through an alternate user interface and allow them to operate controls through the AT. : This technique involves using standard, documented and supported features to expose these properties to AT. It relies on the fact that these standard controls in standard browsers meet the requirements. : For HTML these assumptions are good. They may also be appropriate for some other technologies. : Even when the components support accessibility, it is essential that some information be provided by the author. For example, a control may have the ability to provide a name but the author still has to provide the name. The role attribute however may already be provided since it is a standard component with a fixed role.

Examples
Example 1

Example 1: A Web page written in HTML uses standard form controls, and identifies the form control using the title attribute. The user agent makes information about these controls, including the name, available to assistive technology through the DOM and through a platform-specific Accessibility API.

Related techniques:
- G135: Using the accessibility API features of a technology to expose names and … notification of changes
- H44: Using label elements to associate text labels with form controls
- H88: Using HTML according to spec
- H91: Using HTML form controls and links


------------------------------

G110: - Using an instant client-side redirect
Using an instant client-side redirect

About this Technique
	- This technique relates to 3.2.5: Change on Request (Sufficient using a more specific technique).
	- This technique applies to all technologies.

Description : The objective of this technique is to enable redirects on the client side without confusing the user. Redirects are preferably implemented on the server side (see Implementing automatic redirects on the server side instead of on the client side), because a server-side redirect does not cause new content to be displayed before the server sends the content located at the new URI. However, authors do not always have control over server-side technologies; in that case, they can use a client-side redirect. A client-side redirect is implemented by code inside the content that instructs the user agent to retrieve content from a different URI. It is important that the redirecting page or Web page only contains information related to the redirect.

Examples
Example 1: HTML: meta Refresh With a URI and No Timeout

In HTML, it is possible to implement a client-side redirect using the meta element: see Using meta refresh to create an instant client-side redirect.

Related techniques:
- H76: Using meta refresh to create an instant client-side redirect
- SVR1: Implementing automatic redirects on the server side instead of on the client side


------------------------------

G111: - Using color and pattern
Using color and pattern

About this Technique
	- This technique relates to 1.4.1: Use of Color (Sufficient).
	- This technique applies to all technologies that support images.

Description : The objective of this technique is to ensure that when color differences are used to convey information within non-text content, patterns are included to convey the same information in a manner that does not depend on color.

Examples
Example 1

A real estate site provides a bar chart of average housing prices in several regions of the United States. The bar for each region is displayed with a different solid color and a different pattern. The legend uses the same colors and patterns to identify each bar.

Example 2

An on-line map of a transportation system displays each route in a different color. The stops on each route are marked with a distinctive icon such as a diamond, square, or circle to help differentiate each route.

Example 3

A flow chart describes a set of iterative steps to complete a process. It uses dashed, arrowed lines with a green background to point to the next step in the process when the specified condition passes. It uses dotted arrowed lines with a red background to point to the next step in the process when the specified condition fails.

Example 4

The content includes an interactive game. The game pieces for the 4 players are distinguished from one another using both color and pattern.

Related techniques:
- G14: Ensuring that information conveyed by color differences is also available in text


------------------------------

G112: - Using inline definitions
Using inline definitions

About this Technique
	- This technique relates to 3.1.3: Unusual Words (Sufficient using a more specific technique when used with G101: Providing the definition of a word or phrase used in an unusual or restricted way).
	- This technique applies to any technology containing text.

Description : The objective of this technique is to provide a definition in context for any word used in an unusual or restricted way. The definition is provided in the text, either just before or just after the word is used. The definition may be included in the same sentence as the word that is being defined, or in a separate sentence.

Examples
Example 1: Ether

He believed that sound traveled through the ether, which was thought to be a substance that filled interplanetary space.

Example 2: Driver

It may be necessary to update the driver for your printer (the driver is software that contains specific instructions for your printer).

Example 3: W3C key words

Definition: The key words "must", "must not", "required", "shall", "shall not", "should", "should not", "recommended", "may", and "optional" in this specification are to be interpreted as described in RFC 2119.

Example 4: A Japanese idiomatic expression defined in context

This example uses parentheses to provide the definition of an idiomatic expression in Japanese. The phrase in Japanese says that "he throws a spoon." It means that there was nothing he can do and finally he gives up.

さじを投げる（どうすることもできなくなり、あきらめること）。

Related techniques:
- G55: Linking to definitions
- G62: Providing a glossary
- G70: Providing a function to search an online dictionary
- H54: Using the dfn element to identify the defining instance of a word


------------------------------

G115: - Using semantic elements to mark up structure
Using semantic elements to mark up structure

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Sufficient, together with H49: Using semantic markup to mark emphasized or special text).
	- This technique applies to markup languages, including HTML.

Description : The objective of this technique is to mark up the structure of the Web content using the appropriate semantic elements. In other words, the elements are used according to their meaning, not because of the way they appear visually. : Using the appropriate semantic elements will make sure the structure is available to the user agent. This involves explicitly indicating the role that different units have in understanding the meaning of the content. The nature of a piece of content as a paragraph, header, emphasized text, table, etc. can all be indicated in this way. In some cases, the relationships between units of content should also be indicated, such as between headings and subheadings, or amongst the cells of a table. The user agent can then make the structure perceivable to the user, for example using a different visual presentation for different types of structures or by using a different voice or pitch in an auditory presentation. : In HTML, for example, phrase-level elements such as em, abbr, and cite add semantic information within sentences, marking text for emphasis and identifying abbreviations and citations, respectively. MathML, a markup language designed to maintain important distinctions between structure and presentation in mathematics, includes special "presentation" markup for the complex notations used to represent mathematical ideas as well as "content" (semantic) markup for the mathematical ideas themselves.

Examples
Example 1: Linking to another page

A paragraph contains a hyperlink to another page. The hyperlink is marked up using the a element.

<p>Do you want to try our new tool yourself? A free demonstration
  version is available in our <a href="download.html">download section</a>
</p>
Example 2: Using cite and blockquote to reference a book and a quotation from it

A page about the history of marriage uses a quotation from Jane Austen's novel, Pride and Prejudice, as an example. The reference to the book is marked up using the cite element and the quotation itself is marked up using the blockquote element.

<p>Marriage was considered a logical step for a bachelor, as can be seen in the
   first chapter of the novel <cite>Pride and Prejudice</cite>:</p>
<blockquote>
  <p>It is a truth universally acknowledged, that a single man in
   possession of a good fortune, must be in want of a wife.</p>
  <p>However little known the feelings or views of such a man may
   be on his first entering a neighbourhood, this truth is so well
   fixed in the minds of the surrounding families, that he is considered
   the rightful property of some one or other of their daughters.</p>
</blockquote>
Example 3: Using the strong element to emphasize important text

A car manual explains how to start the engine. The instructions include a warning to make sure the gear is in neutral. The author feels the warning is so important that it should be emphasized so the warning is marked up using the strong element.

<h1>How to start the engine</h1>
<p>Before starting the engine, <strong>make sure the gear is in neutral</strong>
   Next, turn the key in the ignition. The engine should start.</p>
Example 4: Using the em and strong elements to emphasize text
<p>What the user <em>really</em> meant to say was, 
   <q>This is not ok, it is <strong>excellent</strong>!</q>
</p>
Example 5: Using highlighting and background color to visually and semantically identify important information
<style>
.vocab {
  background-color:cyan;
  font-style:normal;
}
</style>
...
<p>New vocabulary words are emphasized and highlighted with a cyan background.</p>
<p>The <em class="vocab">scathing</em> review of the play seemed a bit too harsh.</p>

Related techniques:
- H39: Using caption elements to associate data table captions with data tables
- H42: Using h1-h6 to identify headings
- H44: Using label elements to associate text labels with form controls
- H48: Using ol, ul and dl for lists or groups of links
- H49: Using semantic markup to mark emphasized or special text
- H51: Using table markup to present tabular information
- H71: Providing a description for groups of form controls using fieldset and legend elements


------------------------------

G117: - Using text to convey information that is conveyed by variations in presentation of text
Using text to convey information that is conveyed by variations in presentation of text

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Sufficient).
	- This technique applies to technologies that support variations in the visual presentation of text.

Description : The objective of this technique is to ensure that information conveyed through variations in the formatting of text is conveyed in text as well. When the visual appearance of text is varied to convey information, state the information explicitly in the text. Variations in the visual appearance can be made by changes in font face, font size, underline, strike through and various other text attributes. When these types of variations convey information, that information needs to be available elsewhere in the content via text. Including additional sections in the document or an inline description where the variation in presentation of text occurs can be used to convey the information.

Examples
Example 1: Indicating new content with boldface and a text indicator

The following example shows a list of accessibility standards. WCAG 2.2 is new, so is indicated in bold face. To avoid conveying information solely by presentation, the word "(new)" is included after it as well.

<h2>Web Accessibility Guidelines</h2>
<ul>
  <li><strong>WCAG 2.2 (New)</strong></li>
  <li>WCAG 2.1</li>
  <li>WCAG 2.0</li>
  <li>Section 508</li>
  <li>JIS X 8341-3</li>
  ...
</ul>
Example 2: Font variations and explicit statements.

An online document has gone through multiple drafts. Insertions are underlined and deletions are struck through. At the end of the draft a "change history" lists all changes made to each draft.

Example 3: Providing an alternate way to know which words in the text have been identified by using a different font.

An on-line test requires students to write a short summary of a longer document. The summary must contain certain words from the original document. When a sentence in the original document contains a word or phrase that must be used in the summary, the word or phrase is shown in a different font than the rest of the sentence. A separate section also lists all the words and phrases that must be used in the summary.

Related techniques:
- H49: Using semantic markup to mark emphasized or special text
- C22: Using CSS to control visual presentation of text


------------------------------

G120: - Providing the pronunciation immediately following the word
Providing the pronunciation immediately following the word

About this Technique
	- This technique relates to 3.1.6: Pronunciation (Sufficient).
	- This technique applies to all technologies.

Description : The objective of this technique is to make the pronunciation of a word available by providing the pronunciation after the word at least the first time it occurs within a Web page. : When a Web page contains words with the same spelling but different pronunciations, this technique is not appropriate for providing the pronunciation unless it is provided for each instance. : This technique is applied to the first occurrence of an abbreviation in a Web page. When combining multiple resources into a single Web page, the abbreviation would be expanded at the beginning of each resource. In this case, however, using a different technique for providing the expanded form may be more appropriate.

Examples
Example 1

In the following example of Japanese text, the information giving the pronunciation in Han characters (Kanji) is rendered in parentheses immediately following the text.

<p>慶應大学 (けいおうだいがく)</p>

Related techniques:
- G121: Linking to pronunciations
- G163: Using standard diacritical marks that can be turned off
- H62: Using the ruby element


------------------------------

G121: - Linking to pronunciations
Linking to pronunciations

About this Technique
	- This technique relates to 3.1.6: Pronunciation (Sufficient).
	- This technique applies to all technologies that include links.

Description : The objective of this technique is to make the pronunciation of a word available by providing information about the pronunciation, either within the same Web page or in a different Web page, and establishing a link between the item and its pronunciation.

Examples
Example 1

A word is linked to its entry in a dictionary that includes pronunciation information.

Example 2

A word is linked to a sound file that will speak the pronunciation.

Example 3

A word in linked to its entry in a pronouncing dictionary.

Example 4

A word is linked to an International Phonetic Alphabet (IPA) representation of its pronunciation.

Example 5

A word is linked to an unambiguous phonetic spelling of the pronunciation.

Related techniques:
- G62: Providing a glossary
- G120: Providing the pronunciation immediately following the word
- G163: Using standard diacritical marks that can be turned off
- H62: Using the ruby element


------------------------------

G123: - Adding a link at the beginning of a block of repeated content to go to the end of the block
Adding a link at the beginning of a block of repeated content to go to the end of the block

About this Technique
	- This technique relates to 2.4.1: Bypass Blocks (Sufficient when used for creating links to skip blocks of repeated material).
	- This technique applies to all technologies that contain links.

Description : The objective of this technique is to provide a mechanism to bypass a block of material by skipping to the end of the block. The first link in the block or the link directly preceding the block moves focus to the content immediately after the block. Activating the link advances the keyboard focus past the block. When there are multiple blocks to be skipped, the user skips from block to block via these links.

Examples
Example 1: Skip navigation links

The pages on an organization's Web site include a navigation bar or main menu containing links to major sections of the site, the site map, information about the organization, and how to contact the organization. The first link in this area is titled "Skip Navigation Links". A user activates the link to skip over these links.

Example 2: A book index

A book contains an index that is divided into a set of pages. In the content at the beginning of each page of the index are links for each letter of the alphabet, linking into the index where the entries start with that letter. The first link in the set is titled "Skip Links into Index". A user activates this link to skip over the links.

Example 3: Several sets of links

All the pages on a Web site include a section containing links to the site map, information about the organization, and how to contact the organization. All the pages in each section of the site also contain a set of links to its subsections. The first link in the first block is titled "Skip Navigation Links" and skips over the first set of links. The first link in the second block is titled "Skip Section Links" and skips over the subsection links.

Example 4: HTML page with several blocks of navigation

This example demonstrates both the use of heading elements at the beginning of each section (H69) and links that skip to the end of each section. This allows people to skip blocks of repeated content using keyboard navigation or using heading navigation, depending on the capabilities of their user agents.

<a href="#content">skip navigation</a>
<h2><span id="main-label">Main</span> Navigation</h2>
<nav aria-labelledby="main-label">
  <ul>
    <li><a href="#subnav">Sub Navigation</a></li>
    <li><a href="/a/">Link A</a></li>
    <li><a href="/b/">Link B</a></li>
    <li><a href="/c/">Link C</a></li>
  </ul>
<nav>

<h2 id="subnav"><span id="sub-label">Sub</span> Navigation</h2>
<nav aria-labelledby="sub-label">
  <ul>
    <li><a href="#ultranav">Ultra Sub Navigation</a></li>
    <li><a href="/suba/">Sub A</a></li>
    <li><a href="/subb/">Sub B</a></li>
    <li><a href="/subc/">Sub C</a></li>
  </ul>
</nav>

<main id="content">
  <h1>Content title</h1>
  <p>Now that I have your attention...</p>
</main>

Related techniques:
- G1: Adding a link at the top of each page that goes directly to the main content area
- G124: Adding links at the top of the page to each area of the content


------------------------------

G124: - Adding links at the top of the page to each area of the content
Adding links at the top of the page to each area of the content

About this Technique
	- This technique relates to 2.4.1: Bypass Blocks (Sufficient when used for creating links to skip blocks of repeated material).
	- This technique applies to all technologies that contain links.

Description : The objective of this technique is to provide a mechanism to bypass blocks of material by providing a list of links to the different sections of the content. The links in this list, like a small table of contents at the beginning of the content, set focus to the different sections of the content. This technique is particularly useful for pages with many independent sections, such as portals. It may also be combined with other techniques for skipping blocks within a section.

Examples
Example 1

The Web pages on a site all start with three links that navigate to the main content of that Web page, the search field, and the navigation bar.

Related techniques:
- ARIA11: Using ARIA landmarks to identify regions of a page
- G1: Adding a link at the top of each page that goes directly to the main content area
- G123: Adding a link at the beginning of a block of repeated content to go to the end of the block


------------------------------

G125: - Providing links to navigate to related Web pages
Providing links to navigate to related Web pages

About this Technique
	- This technique relates to 2.4.5: Multiple Ways (Sufficient when combined with other techniques).
	- This technique applies to all technologies that contain links.

Description : The objective of this technique is to make it possible for users to locate additional information by providing links to related Web pages. It is one of a series of techniques for locating content that are sufficient for addressing Success Criterion 2.4.5. Links are a basic component of the World Wide Web. They are the mechanism that makes the Web an interconnected Web of content. Most authors employ this technique automatically when creating Web pages.

Examples
Example 1

The Web Content Accessibility Guidelines 2.0 contains links to definitions of terms used in guidelines and Success Criteria, links to documents explaining how to meet different Success Criteria, a table of contents for each section containing links to different subsections of that section, and a Comparison of WCAG 1.0 checkpoints to WCAG 2.0. As users browse the document, they can follow these links to find related information.

Related techniques:
- G63: Providing a site map
- G64: Providing a Table of Contents
- G126: Providing a list of links to all other Web pages
- G185: Linking to all of the pages on the site from the home page


------------------------------

G126: - Providing a list of links to all other Web pages
Providing a list of links to all other Web pages

About this Technique
	- This technique relates to 2.4.5: Multiple Ways (Sufficient when combined with other techniques).
	- This technique applies to all technologies that contain links.

Description : The objective of this technique is to provide a list of links to all the Web pages in the set on each Web page. It is one of a series of techniques for locating content that are sufficient for addressing Success Criterion 2.4.5. This technique is only effective for small sets of Web pages; if the list of links is longer than the rest of the content in the Web page, it may make the Web page more difficult for users to understand and use. : Note : Success Criterion 2.4.1 requires a technique for skipping this list of links.

Examples
Example 1

A family Web site contains home pages for all the members of the family. Each page contains a list of links to the home pages of the other family members.

Example 2

An electonic book is broken into separate Web pages for each chapter. Each Web page starts with a small table of contents that contains links to all the chapters in the book.

Related techniques:
- G1: Adding a link at the top of each page that goes directly to the main content area
- G63: Providing a site map
- G64: Providing a Table of Contents
- G123: Adding a link at the beginning of a block of repeated content to go to the end of the block
- G125: Providing links to navigate to related Web pages


------------------------------

G127: - Identifying a Web page's relationship to a larger collection of Web pages
Identifying a Web page's relationship to a larger collection of Web pages

About this Technique
	- This technique relates to:
	- 2.4.2: Page Titled (Advisory)
	- 2.4.8: Location (Sufficient)
	- This technique applies to all technologies.

Description : The objective of this technique is to enable users to identify the relationship between the current Web page and other Web pages in the same collection (e.g., on the same Web site). In some cases this can be done programmatically—for example by using the rel attribute of the link element in HTML. In other cases the information is provided by including the relevant information in the title of the Web page.

Examples
Example 1: The title of a Web page includes the name of the sub-site

A large Web site includes tutorials and reference materials for numerous technologies. The title of each Web page includes the name of the sub-site as well as the organization that produces the site.

Example 2: Including identifying information in metadata

A Web page includes metadata that identifies it as the table of contents for a collection of documents. The metadata for each document in the collection identifies the document's position in the collection and provides a reference to the table of contents.

Example 3: Chapters in an online textbook

An online textbook is divided into chapters. The title of each Web page includes the number and title of the chapter as well as the title of the textbook.

Related techniques:
- G65: Providing a breadcrumb trail
- G88: Providing descriptive titles for Web pages


------------------------------

G128: - Indicating current location within navigation bars
Indicating current location within navigation bars

About this Technique
	- This technique relates to 2.4.8: Location (Sufficient).
	- This technique applies to all technologies.

Description : The objective of this technique is to help orient the user by providing information about the current location via the navigational user interface component. This technique is especially useful when the Web pages are steps in a task that must be processed in order. Providing this indication helps the user to better understand their place in the sequence. The location may be indicated by adding an icon or text, or by changing the state of the item.

Examples
Example 1

A Web page implements tab panel style navigation. A list of panel tabs is displayed horizontally across the page. The current content is displayed in a panel below the list of panel tabs. When the user navigates to and selects a particular panel tab the content in the panel is updated to reflect the topic of the selected tab. In addition, the background color of the selected tab is changed from the default color and a check mark icon is displayed next to the tab panel text to indicate it is the active panel. The check mark icon includes an appropriate text alternative.

Example 2

The navigation bar for a site is implemented as a list of links. The navigation bar appears on all Web pages within a collection of Web pages. As the user gives focus to or hovers over a particular link in the navigation bar the background color of the link is changed. This change in styling on mouseover or focus is specified via the cascading style sheet for the Web page. When focus is removed from the link the style is reset to the normal link style. When the link is activated to change the contents of the page, the selected link within the navigation bar is disabled since the result of following this link is the Web page currently being displayed. Changing the background color gives sighted users visual notification of the link to be selected. Disabling the link provides information to all users that it is the currently selected topic.

Related techniques:
- G14: Ensuring that information conveyed by color differences is also available in text
- G205: Including a text cue for colored form control labels
- G182: Ensuring that additional visual cues are available when text color differences are used to convey information
- G183: Using a contrast ratio of 3:1 with surrounding text and providing additional visual cues on hover for links or controls where color alone is used to identify them


------------------------------

G130: - Providing descriptive headings
Providing descriptive headings

About this Technique
	- This technique relates to 2.4.6: Headings and Labels (Sufficient).
	- This technique applies to all technologies.

Description : The objective of this technique is to make section headings within Web content descriptive. Descriptive headings and titles (see Providing descriptive titles for Web pages) work together to give users an overview of the content and its organization. Descriptive headings identify sections of the content in relation both to the Web page as a whole and to other sections of the same Web page. : Descriptive headings help users find specific content and orient themselves within the Web page. : Authors may also want to consider putting the most important information at the beginning of each heading. This helps users "skim" the headings to locate the specific content they need, and is especially helpful when browsers or assistive technology allow navigation from heading to heading.

Examples
Example 1: An HTML page that describes the range of tasks for disaster preparation
<h1>Disaster preparation</h1>
<h2>Flood preparation</h2>
<h2>Fire preparation</h2>

Note that the level 2 headings have the distinguishing information at the beginning (i.e., instead of "Preparation for floods", "Preparation for fires", etc).

Example 2: An article

A short article about the history of a town that explains about the founding and expansion of the town and then goes into some depth about the current situation. The title of the Web page is "History of Ourtown". The first section is called "The founding of Ourtown". The second section is called "Expansion of Ourtown". The third section is called "Ourtown today" which has the following subsections: "People in Ourtown", "Organizations in Ourtown" and "Buildings in Ourtown".


------------------------------

G131: - Providing descriptive labels
Providing descriptive labels

About this Technique
	- This technique relates to:
	- 2.4.6: Headings and Labels (Sufficient)
	- 3.3.2: Labels or Instructions (Sufficient using a more specific technique)
	- This technique applies to all technologies.

Description : The objective of this technique is to ensure that the label for any interactive component within Web content makes the component's purpose clear. Using the appropriate technology-specific techniques for technologies for associating labels with interactive controls allows assistive technology to recognize the label and present it to the user, therefore allowing the user to identify the purpose of the control.The label may also be used to include text or a text symbol indicating that input is required.

Examples
Example 1: Online maps with controls for zooming in and out

A Web application presents maps of a city. Users can “zoom in" to view part of the map in greater detail, and can “zoom out" to make it show a larger part of the city. The controls can be operated using either a mouse or a keyboard. The controls are labeled “Zoom in (Ctrl + Shift + L)" And “Zoom out (Ctrl + Shift + R)."

Example 2: A form asking the name of the user

A form asks the name of the user. It consists of two input fields to ask for the first and last name. The first field is labeled "First name", the second is labeled "Last name".

Example 3: A form with required fields

A purchasing form includes several fields that are required. In addition to identifying the field, the label for each required field includes the word “required" in parentheses.

Related techniques:
- H90: Indicating required form controls using label or legend


------------------------------

G133: - Providing a checkbox on the first page of a multipart form that allows users to ask for longer session time limit or no session time limit
Providing a checkbox on the first page of a multipart form that allows users to ask for longer session time limit or no session time limit

About this Technique
	- This technique relates to 2.2.1: Timing Adjustable (Sufficient).
	- This technique applies to content that includes multipart forms.

Description : The objective of this technique is to minimize the risk that users with disabilities will lose their work by providing a checkbox to request additional time to complete multipart forms. The checkbox can allow the user to request a specific amount of additional time (for example 15 minutes) or an indefinite extension. (Note that allowing an indefinite extension would be inappropriate if it jeopardized user privacy or network security.)

Examples
Example 1: A checkbox for requesting a specific extension

A Web page contains the first part of a five-part form. Immediately following the general instructions for completing the form is a checkbox with the label, “Allow an additional 15 minutes to complete each part of this form."

Example 2: Requesting an indefinite extension

A Web page contains the first part of a three-part form. Each part of the form includes more than 10 items. Some items require users to follow links for additional information. Immediately following the general instructions for completing the form is a checkbox with the label, “Allow as much time as I need to complete this form. I understand that I must close (quit) the Web browser if I choose to stop before completing the last part of the form."


------------------------------

G135: - Using the accessibility API features of a technology to expose names and roles, to allow user-settable properties to be directly set, and to provide notification of changes
Using the accessibility API features of a technology to expose names and roles, to allow user-settable properties to be directly set, and to provide notification of changes

About this Technique
	- This technique relates to 4.1.2: Name, Role, Value (Sufficient using a more specific technique).
	- This technique applies to programming technologies that have standard components that are programmed to interface with accessibility APIs.

Description : The objective of this technique is to allow assistive technology to understand Web content so that it can convey equivalent information to the user through an alternate user interface. : Sometimes content is not created using markup language but rather using a programming language or tools. In many cases, these technologies have interface components that are already programmed to interface with accessibility APIs. If an author uses these components and fills in the properties (e.g., name, etc) the resulting user interface components in the content will be accessible to assistive technology.

Examples
Example 1
A Web page uses java to create an applet. Java swing objects (e.g., pushbutton) are used because they have accessibility properties built in that can be accessed from assistive technology written in Java and, with the Java Access Bridge, those written in other languages that use the Accessibility API of the operating system. The author fills in the values for the components and the result is accessible to AT.


------------------------------

G136: - Providing a link at the beginning of a nonconforming Web page that points to a conforming alternate version
Providing a link at the beginning of a nonconforming Web page that points to a conforming alternate version

About this Technique
	- This technique is not referenced from any Understanding document.
	- This technique applies to primary content does not conform to WCAG but alternate versions exist that do conform to WCAG. This technique can only be used if a technology makes it possible to create an accessible link to an alternate version.

Description : The objective of this technique is to enable users to access alternate content that conforms to WCAG if the primary content, or the default content that users encounter when visiting a particular URI, does not conform. The alternate page, or conforming alternate version, may make some design or functionality compromises in order to conform, but must meet the requirements described in the definition in order to be a conforming alternate version. The definition of "conforming alternate version" is: : When using this techique, placing a WCAG-conforming link to alternate content at the top of the page allows users to find the link quickly and to move to the conforming alternate version. To ensure users can always find the alternate version, regardless of where they enter the site, each page that does not conform at the specified level would include a link to the conforming alternate version.

Examples
On a Web site, for each page that does not conform to WCAG at the declared level, the first link on the page is called "Accessible version" (or using other link text that properly conveys the purpose of the link). The target of this link is the alternate version of the page that conforms to WCAG at the declared level.

Related techniques:
- SVR2: Using .htaccess to ensure that the only way to access non-conforming content is from conforming content
- SCR38: Creating a conforming alternate version for a web page designed with progressive enhancement


------------------------------

G138: - Using semantic markup whenever color cues are used
Using semantic markup whenever color cues are used

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Sufficient when used for making information and relationships conveyed through presentation programmatically determinable).
	- This technique applies to all technologies that support color and text.

Description : The objective of this technique is to combine color and semantic markup to convey information. Most users can quickly scan the content to locate information conveyed by using color. For users who cannot see color, semantic markup can provide a different type of cue. User agents can then make this type of structure perceivable to the user, for example using a different visual presentation for different types of structures or by using a different voice or pitch in an auditory presentation. : Most user agents will visually distinguish text that has been identified using semantic markup. Some assistive technologies provide a mechanism for determining the characteristics of content that has been created using proper semantic markup.

Examples
Example 1: Color and strong emphasis for required form fields

An HTML form contains several required fields. The labels for the required fields are displayed in red. In addition, the text of each label is marked up with the STRONG element for stronger emphasis. The instructions for completing the form indicate that "all required fields are displayed in red and are emphasized", followed by an example.

Related techniques:
- G205: Including a text cue for colored form control labels
- H49: Using semantic markup to mark emphasized or special text


------------------------------

G139: - Creating a mechanism that allows users to jump to errors
Creating a mechanism that allows users to jump to errors

About this Technique
	- This technique relates to:
	- 3.3.1: Error Identification (Advisory)
	- 3.3.3: Error Suggestion (Advisory)
	- This technique applies to content that accepts user data input, with restrictions on the format, value, and/or type of the input.

Description : The objective of this technique is to help users find input errors where the information supplied by the user is not accepted. This includes fields with missing required information and fields with incorrect information. When users enter data input that is checked, and input errors are detected, a link to that error is provided so that the user does not have to search for it. One approach is to use server-side validation, and to re-display the form (including any previously entered data), and a text description at the top of the page that indicates the fact that there was an input error, describes the nature of the problem, and provides a link the field(s) with a problem.

Examples
Example 1: Server-side error checking

The user inputs invalid data on a form field and submits the form. The server returns the form, with the user's data still present, and indicates clearly in text at the top of the page that there were not accepted. The text describes the nature of the error(s) and provides a link to the field that had the problem so the user can easily navigate to it to fix the problem.

Example 2: Client-side error checking with a popup

The user inputs invalid data on a form field and attempts to submit the form. Client-side scripting detects the error, cancels the submit, and modifies the document to provide a text message describing the error, with links to the field(s) with the error. The script also modifies the labels of the fields with the problems to highlight them.

Example 3: Client-side error checking with no popup

When the user submits a form, instead of taking them to a new page, a script automatically sets focus to a text link that says "Errors have occurred." The link goes to the first item in an ordered list of descriptive error messages. Each list item is a link to the control where the error had occurred. And there is a link from the error back to the ordered list of descriptive error messages. The process is repeated as needed.

Related techniques:
- G83: Providing text descriptions to identify required fields that were not completed
- G85: Providing a text description when user input falls outside the required format or values
- SCR18: Providing client-side validation and alert


------------------------------

G140: - Separating information and structure from presentation to enable different presentations
Separating information and structure from presentation to enable different presentations

About this Technique
	- This technique relates to:
	- 1.3.1: Info and Relationships (Sufficient)
	- 1.4.5: Images of Text (Sufficient)
	- 1.4.9: Images of Text (No Exception) (Sufficient)
	- This technique applies to any technology.

Description : The objective of this technique is to facilitate the interaction of assistive technology with content by logically separating the content's structural encoding from the presentational encoding. Structural encoding is the indication of elements such as headings, paragraphs, lists, tables, etc., and is done by using technology features reserved for the purpose. By contrast, presentational encoding is the indication of formatting effects, such as typeface, color, size, position, borders, etc., and is also supported by technology features. : While presentational features visually imply structure — users can determine headings, paragraphs, lists, etc. from the formatting conventions used — these features do not encode the structure unambiguously enough for assistive technology to interact with the page effectively. Providing separate structure, functionality, and presentation layers allows the semantics implied by the formatting to become programmatically determined via the structure layer. : Following this technique allows user agents to: : Perform meaningful structure transformations based on the existing structure of the content, such as reordering sections or generating a list of sections or a list of links.
	- Support interaction with content based on structural characteristics that cannot be determined by assistive technology on the basis of presentational information alone. For instance, it may be desirable to provide special interactions with lists by indicating the number of list items or skipping to the end, but this is only possible if the list structure is encoded in addition to the list presentation.
	- Modify the presentation of content by substituting alternate presentation rules attached to structural features.

Examples
Example 1: HTML with CSS

An HTML document uses the structural features of HTML, such as paragraphs, lists, headings, etc., and avoids presentational features such as font changes, layout hints, etc. CSS is used to format the document based on its structural properties. Well-crafted "class" attributes in the HTML extend the semantics of the structural markup if needed to allow more flexible formatting with CSS. Assistive technologies can substitute or extend the CSS to modify presentation, or ignore the CSS and interact directly with the structural encoding.

Example 2: Tagged PDF

A PDF document consists mostly of the content embedded with formatting information. Information about the structure is provided in a separate section of the document using XML-like tags; this is called "tagged PDF". The information in these tags can be used by assistive technologies to perform meaningful structure transformations (e.g., generating a list of sections) or to support interaction with content based on structural characteristics (e.g., jumping to the start of forms).

Related techniques:
- C29: Using a style switcher to provide a conforming alternate version


------------------------------

G141: - Organizing a page using headings
Organizing a page using headings

About this Technique
	- This technique relates to:
	- 1.3.1: Info and Relationships (Advisory)
	- 2.4.10: Section Headings (Sufficient)
	- This technique applies to pages with content organized into sections.

Description : The objective of this technique is to ensure that sections have headings that identify them. Success Criterion 1.3.1 requires that the headings be marked such that they can be programmatically identified. : In HTML, this could be done using the HTML heading elements (h1, h2, h3, h4, h5, and h6). These allow user agents to automatically identify section headings. Other technologies use other techniques for identifying headers. To facilitate navigation and understanding of overall document structure, authors should use headings that are properly nested (e.g., h1 followed by h2, h2 followed by h2 or h3, h3 followed by h3 or h4, etc.).

Examples
Example 1: Headings used to organize an HTML page

A page on cooking techniques uses a h1 element for the overall title, and h2 elements for major sections on cooking with oil vs cooking with butter, and h3 elements for sub-sections on oil-cooking techniques.

<!doctype html>
<html lang="en">
  <head>
    <title>Cooking techniques</title>
  </head>
  <body>
    <h1>Cooking techniques</h1>
    ... some text here ...
    <h2>Cooking with oil</h2>
    ... text of the section ...
    <h3>Sautéeing</h3>
    ...
    <h3>Deep frying</h3>
    <h2>Cooking with butter</h2>
    ... text of the section ...
  </body>
</html>

Related techniques:
- ARIA12: Using role=heading to identify headings
- H42: Using h1-h6 to identify headings
- H69: Providing heading elements at the beginning of each section of content


------------------------------

G142: - Using a technology that has commonly-available user agents that support zoom
Using a technology that has commonly-available user agents that support zoom

About this Technique
	- This technique relates to 1.4.4: Resize Text (Sufficient).
	- This technique applies to all technologies with user agent provided zoom capability.

Description : The objective of this technique is to ensure content can be scaled uniformly by using a Web technology supported by user agents that change text size via a Zoom tool. : Content authored in technologies that are supported by user agents that can scale content uniformly (that is, zoom into content) satisfy this Success Criterion. Because this technique relies completely on user agent functionality, it is critical to test with a wide variety of user agents. : This technique requires that the zoom function preserve all spatial relationships on the page and that all functionality continues to be available.

Examples
Most modern browsers provide a zoom function that scales HTML/CSS page content uniformly.
To allow users to resize text, Adobe Reader provides a magnification tool that scales PDF pages uniformly.


------------------------------

G143: - Providing a text alternative that describes the purpose of the CAPTCHA
Providing a text alternative that describes the purpose of the CAPTCHA

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Sufficient, together with G144: Ensuring that the Web Page contains another CAPTCHA serving the same purpose using a different modality).
	- This technique applies to all technologies.

Description : The purpose of this technique is to provide information via the text alternative that identifies the non-text content as a CAPTCHA. Such tests often involve asking the user to type in text that is presented in an obscured image or audio file. From the text alternative, the user can tell that the CAPTCHA requires completing a task and what type of task it is. : When an alternate version of a CAPTCHA is available, the text alternative should include instructions about how to find the alternate version.

Examples
A CAPTCHA test asks the user to type in text that is displayed in an obscured image. The text alternative is "Type the word in the image".
A CAPTCHA test asks the user to type in text that is played in an audio file. The text alternative is "Type the letters spoken in the audio".

Related techniques:
- G144: Ensuring that the Web Page contains another CAPTCHA serving the same purpose using a different modality


------------------------------

G144: - Ensuring that the Web Page contains another CAPTCHA serving the same purpose using a different modality
Ensuring that the Web Page contains another CAPTCHA serving the same purpose using a different modality

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Sufficient, together with G143: Providing a text alternative that describes the purpose of the CAPTCHA).
	- This technique applies to all technologies.

Description : The purpose of this technique is to reduce occasions in which a user with a disability cannot complete a CAPTCHA task. Because there are alternate CAPTCHA tasks that use different modalities, a user is more likely to be able to complete one of the tasks successfully.

Examples
A Web page that includes a CAPTCHA test that must be completed successfully before the user can advance to the next step in a process. The page includes both a visual task, such as typing words displayed in a image, and an audio task, such as typing letters spoken in an audio file. A user with hearing disabilities who cannot pass the audio CAPTCHA may be able to pass the visual CAPTCHA.
A blog comment form includes a visual CAPTCHA that must be completed before a user can submit comments. In addition to the visual CAPTCHA, it includes a CAPTCHA with a form field that asks, "What is two plus seven?" with a text entry field that allows users to enter the correct answer.

Related techniques:
- G143: Providing a text alternative that describes the purpose of the CAPTCHA


------------------------------

G145: - Ensuring that a contrast ratio of at least 3:1 exists between text (and images of text) and background behind the text
Ensuring that a contrast ratio of at least 3:1 exists between text (and images of text) and background behind the text

About this Technique
	- This technique relates to 1.4.3: Contrast (Minimum) (Sufficient).
	- This technique applies to any technology that produces visual output.

Description : The objective of this technique is to make sure that users can read text that is presented over a background. This technique relaxes the 4.5:1 contrast ratio requirement for text that is at least 18 point (if not bold) or at least 14 point (if bold). : Note : When evaluating this success criterion, the font size in points should be obtained from the user agent or calculated on font metrics in the way that user agents do. Point sizes are based on the CSS pt size CSS3 Values. The ratio between sizes in points and CSS pixels is 1pt = 1.333px, therefore 14pt and 18pt are equivalent to approximately 18.5px and 24px. : If the background is a solid color (or all black or all white) then the contrast ratio of the larger-scale text can be maintained by making sure that each of the text letters have a 3:1 contrast ratio with the background. : If the background or the letters vary in relative luminance (or are patterned), then the background around the letters can be chosen or shaded so that the letters maintain a 3:1 contrast ratio with the background behind them even if they do not have that contrast ratio with the entire background. : The contrast ratio can sometimes be maintained by changing the relative luminance of the letters as the relative luminance of the background changes across the page. : Another method is to provide a halo around the text that provides the necessary contrast ratio if the background image or color would not normally be sufficiently different in relative luminance.

Examples

A black background is chosen so that light colored letters that match the company's logo can be used.

Larger-scale text is placed over a picture of the college campus. Since a wide variety of colors and darknesses appear in the picture, the area behind the text is fogged white so that the picture is very faint and the maximum darkness is still light enough to maintain a 3:1 contrast ratio with the black text written over the picture.


------------------------------

G146: - Using liquid layout
Using liquid layout

About this Technique
	- This technique relates to:
	- 1.4.4: Resize Text (Sufficient when used for techniques for text container resizing)
	- 1.4.8: Visual Presentation (Sufficient using a more specific technique)
	- This technique applies to all technologies.

Description : The objective of this technique is to be able to present content without introducing horizontal scroll bars by using layout techniques that adapt to the available horizontal space. Liquid layouts define layout regions that both resize with text, and reflow as needed to display the region on the screen. Although the exact layout therefore varies, the relationship of elements and the reading order remains the same. This is an effective way to create designs that present well on different devices and for users with different font size preferences. : The basic principles of liquid layouts are to: : Define the size of layout regions using units that will cause the region to scale relative to text, so they enlarge or shrink as text is enlarged or shrunk;
	- Position the layout regions as a row of adjacent floating boxes, which wrap to new rows as needed in much the same way as words in a paragraph wrap. : Complex liquid layouts may be achieved by nesting layout regions, thus creating localized liquid layouts within a larger liquid layout. Even simple liquid layouts require design finesse to achieve good-looking results at a wide range of text sizes, but well-designed liquid layouts can be the most effective page design.

Examples
Example 1: Simple liquid layout in HTML and CSS

The following fairly simple example uses HTML and CSS to create a liquid layout. The three columns adjust their size as text size is adjusted. When the total horizontal width exceeds the available width of the columns, the last column wraps to be positioned below, rather than beside, the previous column. The font size can be increased without either clipping or introducing horizontal scrolling until the longest word no longer fits in a column. This particular example uses percent sizes for the columns and defines them as floating regions using the "float" property.

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Example of Basic Liquid Layout</title>
  <style>
  .column {
    border-left: 1px solid green;
    padding-left:1%;
    float: left;
    width: 32%;
  }

  .column:nth-of-type(1){
    border:0;
  }
	
  footer {
    border-top: 1px solid green;
    clear: both;
  }
  </style>
  </head>
  <body>
    <h1>WCAG Example</h1>
    <h2>Text in Three Columns</h2>
    <div class="column">
      <h3>Block 1</h3>
      <p>The objective of this technique is to be able to present content 
        without introducing horizontal scroll bars by using layout 
        techniques that adapt to the available horizontal space.</p>
    </div>
    <div class="column">
      <h3>Block 2</h3>
      <p>This is a very simple example of a page layout that adapts as the
	text size changes.</p>
    </div>
    <div class="column">
      <h3>Block 3</h3>
      <p>For techniques that support more complex page layouts, see the
	Resources listed below.</p>
    </div>
    <footer>
      <p>Footer text</p>
    </footer>
  </body>
</html>

Related techniques:
- C12: Using percent for font sizes
- C13: Using named font sizes
- C14: Using em units for font sizes


------------------------------

G148: - Not specifying background color, not specifying text color, and not using technology features that change those defaults
Not specifying background color, not specifying text color, and not using technology features that change those defaults

About this Technique
	- This technique relates to:
	- 1.4.3: Contrast (Minimum) (Sufficient)
	- 1.4.6: Contrast (Enhanced) (Sufficient)
	- 1.4.8: Visual Presentation (Sufficient)
	- This technique applies to any technology where text and background color are specified separately and browsers can control default colors.

Description : The objective of this technique is to make sure that users can read text that is presented over a background. With this technique the author avoids having to do any contrast measures by simply not specifying the text color and not specifying the background. As a result the colors of both are completely determined by the user agent. : Some people who have vision disabilities set their user agent to override certain colors that they have trouble seeing. This technique will help avoid a situation where the user agent and web site conflict with each other over the foreground and/or background colors resulting in the same color for text and background, which would make it invisible for user who set their own colors in their browser or Assistive Technology.

Examples
Example 1

The author specifies neither text color nor background, and does not use CSS. As a result the user can set their browser defaults to provide the colors and contrasts that work well for them.

Related techniques:
- G18: Ensuring that a contrast ratio of at least 4.5:1 exists between text (and images of text) and background behind the text
- G156: Using a technology that has commonly-available user agents that can change the foreground and background of blocks of text


------------------------------

G149: - Using user interface components that are highlighted by the user agent when they receive focus
Using user interface components that are highlighted by the user agent when they receive focus

About this Technique
	- This technique relates to 2.4.7: Focus Visible (Sufficient).
	- This technique applies to all technologies with user agent provided focus highlighting.

Description : The objective of this technique is to ensure that the focused component can be visually identified by the user by relying on user agent support. It is common for user agents to highlight standard controls in some way when they receive focus. UAAG-conformant user agents do so when they satisfy checkpoint 10.2 "Highlight selection, content focus, enabled elements, visited links". When authors use standard controls for which the user agent provides this support, users are informed of the focus location in a standard, predictable way.

Examples
When html text input fields receive focus, browsers display a blinking vertical bar at the insertion point in the text field.
When html links receive focus, they are surrounded by a dotted focus highlight rectangle.


------------------------------

G150: - Providing text based alternatives for live audio-only content
Providing text based alternatives for live audio-only content

About this Technique
	- This technique relates to 1.2.9: Audio-only (Live) (Sufficient).
	- This technique applies to all technologies that present live audio-only information.

Description : The objective of this technique is to allow users who cannot hear to be able to access real-time audio broadcasts. It is more difficult to create accurate real-time alternatives because there is little time to correct mistakes, to listen a second time or to consult someone to be sure the words are accurately reproduced. It is also harder to simplify or paraphrase information if it is flowing too quickly. : Real-time typing text entry techniques exist using stenographic and rapid typing technologies. Re-voicing speech-to-text (where a person listens to speech and then carefully re-voices it into a computer trained to their speech) is used today for telephone relay services and may be used in the future for captioning. Eventually speech-to-text with correction will be possible.

Examples
A radio station uses Web based captioning services to provide alternatives for live sporting events; the output from the service is incorporated in a viewport of the Web page which also includes a streaming audio control.

Related techniques:
- G9: Creating captions for live synchronized media


------------------------------

G151: - Providing a link to a text transcript of a prepared statement or script if the script is followed
Providing a link to a text transcript of a prepared statement or script if the script is followed

About this Technique
	- This technique relates to 1.2.9: Audio-only (Live) (Sufficient).
	- This technique applies to all technologies that present live audio-only information.

Description : The objective of this technique is to provide a transcript or script if the live audio content is following a set script. Because it is prepared in advance, the script can be more accurate and complete than live transcription. However, the script will not be synchronized with the audio as it plays. Live audio should not deviate from the script for this technique. : With this technique, a link to the transcript or script is provided and should conform to WCAG 2.0 and could either be included at another location on the same Web page or at another URI.

Examples
A live radio play of a fringe theatre group is being broadcast to the Web. As the actors stick largely to a set script, and the budget for the program is small, the producers provide a link (with the playwright's permission) to the script of the play in HTML.
A member of the government broadcasts an important policy speech on the Web. A transcript of the speech is made available on the Web site when the speech starts.

Related techniques:
- G150: Providing text based alternatives for live audio-only content
- G58: Placing a link to the alternative for time-based media immediately next to the non-text content
- G69: Providing an alternative for time based media
- G157: Incorporating a live audio captioning service into a Web page


------------------------------

G152: - Setting animated gif images to stop blinking after n cycles (within 5 seconds)
Setting animated gif images to stop blinking after n cycles (within 5 seconds)

About this Technique
	- This technique relates to 2.2.2: Pause, Stop, Hide (Sufficient).
	- This technique applies to any technology that supports animated gif (GIF89a).

Description : The objective of this technique is to ensure that animated gif images stop blinking within five seconds. There are three aspects of the design of animated gif images that work together to determine how long the image blinks (or otherwise animates): : the number of frames in the image, which are discrete images in the animation sequence;
	- the frame rate, which is how long each image is displayed;
	- the number of repetitions, which is how many times the entire animation is performed; : At its simplest, the duration of the animation is the number of frames times the frame rate times the number of repetitions. For example, a simple blinking image with 2 frames, a frame rate of .5 seconds, and 3 repetitions will have a duration of (2 * 0.5 * 3) seconds, or exactly 3 seconds. : Many animated gif images have a constant frame rate, i.e., the amount of time each frame is displayed is the same. However, it is possible to set a different frame rate for each frame, to allow certain frames to be displayed longer than others. In this case, the duration of the animation is the sum of the frame rates times the number of repetitions. For example, a simple image with two frames, the first of which displays for .75 seconds and the second for .25 seconds, and three repetitions will have a duration of ((.75 + .25) * 3) seconds, also exactly 3 seconds. : For an image to stop blinking within 5 seconds, one of the three variables must be adjusted. Most commonly, set the number of repetitions to five seconds divided by the product of the number of frames times the frame rate (or by the sum of the frame rate). Truncate this number down to the nearest integer, do not round up to the next integer, to ensure that the image will stop within five seconds. : If even one repetition results in more than five seconds of animation, one of the other factors must be adjusted. Reduce the number of frames in the image, or increase the frame rate. Be careful when increasing the frame rate that the resulting image does not fail the requirement not to exceed the general flash or red flash thresholds; attention to this is especially important for large images.

Examples
A simple blinking image. An image has 2 frames, a frame rate of .5 seconds, and 3 repetitions. The animation has a duration of (2 * 0.5 * 3) seconds, or exactly 3 seconds, and therefore meets the requirements of the success criterion.


------------------------------

G153: - Making the text easier to read
Making the text easier to read

About this Technique
	- This technique relates to 3.1.5: Reading Level (Sufficient).
	- This technique applies to all technologies.

Description : The objective of this technique is to ensure that the text of the Web page is not difficult to read. Users with disabilities that make it difficult to decode words and sentences are likely to have trouble reading and understanding complex text. If the text does not require reading ability more advanced than the lower secondary education level, no supplements or alternative versions are needed. : In order to reduce the complexity of the text: : Develop a single topic or subtopic per paragraph.
	- Use the simplest sentence forms consistent with the purpose of the content. For example, the simplest sentence form for English consists of Subject-Verb-Object, as in John hit the ball or The Web site conforms to WCAG 2.1.
	- Use sentences that are no longer than the typical accepted length for secondary education. (Note: In English that is 25 words.)
	- Consider dividing longer sentences into two.
	- Use sentences that contain no more than two conjunctions.
	- Indicate logical relationships between phrases, sentences, paragraphs, or sections of the text.
	- Avoid professional jargon, slang, and other terms with a specialized meaning that may not be clear to people.
	- Replace long or unfamiliar words with shorter, more common terms.
	- Remove redundant words, that is, words that do not change the meaning of the sentence.
	- Use single nouns or short noun phrases.
	- Remove complex words or phrases that could be replaced with more commonly used words without changing the meaning of the sentence.
	- Use bulleted or numbered lists instead of paragraphs that contain long series of words or phrases separated by commas.
	- Make clear pronoun references and references to other points in the document.
	- Use the active voice for documents written in English and some other Western languages, unless there is a specific reason for using passive constructions. Sentences in the active voice are often shorter and easier to understand than those in the passive voice.
	- Use verb tenses consistently.
	- Use names and labels consistently.

Examples
The help pages for a Web application are written in language that is not more advanced than the lower secondary education level.


------------------------------

G155: - Providing a checkbox in addition to a submit button
Providing a checkbox in addition to a submit button

About this Technique
	- This technique relates to 3.3.4: Error Prevention (Legal, Financial, Data) (Sufficient).
	- This technique applies to any technology.

Description : The objective of this technique is to provide a checkbox that users must select to indicate they have reviewed their input and are ready for it to be committed. This is important when the nature of the transaction is such that it may not be reversible if input errors are subsequently discovered or when the result of an action is that data is deleted. The author provides a checkbox that is not selected when the page loads, with a label like "I confirm that the input is correct and am ready to submit" or "I confirm that I wish to delete this data". The checkbox should be located near the submit button to help the user notice it during the submission process. If the checkbox is not selected when the form is submitted, the input is rejected and the user is prompted to review their entry, select the checkbox, and resubmit. Only if the checkbox is selected will the input be accepted and the transaction processed. : This checkbox helps to guard against the consequences of an accidental form submission, and also serves to prompt the user to be sure they have entered accurate data. This is more secure than simply putting a label on the submit button like "input is correct, submit". Providing the checkbox as a separate control from the submit button forces the user to "double-check", as they must both select the checkbox and activate the submit button for the transaction to proceed. As such, this is a mechanism for reviewing, confirming, and correcting information before finalizing the submission. : Note : When users submit information without selecting the checkbox, they should not lose the information that they have entered when they return to the form to resubmit.

Examples
An online bank service allows users to transfer money between accounts in different currencies. Because exchange rates are constantly in flux, the money cannot be re-exchanged at the same rate if the user discovers an error in their input after the transaction has been carried out. In addition to the "account from", "account to", and "amount" fields, there is a checkbox with a label "I have checked that the amount I wish to transfer is correct". If this checkbox is not selected when the user submits the form, the transaction is not carried out and the user is notified. If the checkbox is selected, the (irreversible) transaction is carried out.
An online payment system stores user bank account information in order to process payments. There is an elaborate procedure for users to enter new accounts and verify that they are the owner. There is the facility to delete old accounts, but if an account is accidentally deleted, it would be difficult to reinstate it, and the transaction history with that account would be lost. Therefore, on pages that allow users to delete accounts, there is a checkbox with the label "I confirm that I wish to delete this account." If this checkbox is not selected when the user submits the form, the account is not deleted and the user is given an error message. Only if the checkbox is selected is the account deleted.
A checkout form on a shopping site includes a form that collects order, shipping and billing information. After submitting the form, the user is taken to a page where the information they have submitted is summarized for review. Below the summary, a checkbox with the label "I have reviewed and confirmed that this data is correct" is shown. The user must mark the checkbox and activate a "complete order" button in order to complete the transaction.

Related techniques:
- G98: Providing the ability for the user to review and correct answers before submitting
- G99: Providing the ability to recover deleted information


------------------------------

G156: - Using a technology that has commonly-available user agents that can change the foreground and background of blocks of text
Using a technology that has commonly-available user agents that can change the foreground and background of blocks of text

About this Technique
	- This technique relates to:
	- 1.4.3: Contrast (Minimum) (Advisory)
	- 1.4.6: Contrast (Enhanced) (Advisory)
	- 1.4.8: Visual Presentation (Sufficient)
	- This technique applies to all technologies.

Description : Some people with cognitive disabilities require specific color combinations of foreground text and background to help them successfully understand the contents of the Web page. Most popular browsers provide the option to change colors settings globally within the browser. In this case the colors selected by the user override the foreground and background colors specified by the Web author. : In order to meet this success criterion, the Web author would design the page so that it works with browsers that have these controls, and the author does not override these controls. : Note that overriding the foreground and background colors of all text on a page may hide visual clues to the grouping and organization of the Web page, making it much more difficult to understand and use. This technique may not be appropriate when background colors are used to delineate areas of the page. This technique may be appropriate for technologies and user agents that do not alter border colors when background colors are overridden. If background colors are used to delineate areas of the page, "Specifying text and background colors of secondary content such as banners, features and navigation in CSS while not specifying text and background colors of the main content" may be used to permit the user to control the colors of the main text while retaining the visual structure of the Web page.

Examples
A Web page is designed using HTML and CSS to specify the foreground and background colors. The user sets their own colors in the browser and they can view the content with their chosen foreground and background colors.
A Web page is designed using HTML and CSS. There is a link on the page to instructions on how to set colors in various browsers.


------------------------------

G157: - Incorporating a live audio captioning service into a Web page
Incorporating a live audio captioning service into a Web page

About this Technique
	- This technique relates to 1.2.9: Audio-only (Live) (Sufficient).
	- This technique applies to all technologies that present live audio-only information.

Description : The objective of this technique is to use a real-time caption service to provide a text version of live audio content. Such services use a trained human operator who listens in to what is being said and uses a special keyboard to enter the text with only a small delay. They are able to capture a live event with a high degree of fidelity, and also to insert notes on any non spoken audio which is essential to understanding the event. The viewport containing the caption text is available on the same Web page as the live audio content.

Examples
An internet radio station provides a viewport on its Web page for its news services. Live news reports, especially emergency reports, are transcribed by a real-time caption service and displayed in the viewport.
A conferencing or screen-sharing service includes a window with running real-time transcription of the verbal presentation. This is achieved by arranging ahead of time with a remote relay audio-teleconference captioning service. The online web conferencing or screen-sharing service needs to be designed with this possible usage in mind because using a separate window for the live text would be a significant usability barrier.
A recurring audio conference uses an online hand-raising utility to assist with queuing. In order to facilitate use of this product in conjunction with an on-line relay conference captioning service, the queuing utility is designed to be fully operational in a narrow viewport. For additional enhancement, a website is created to bring up both viewports within a single Web page.

Related techniques:
- G150: Providing text based alternatives for live audio-only content
- G58: Placing a link to the alternative for time-based media immediately next to the non-text content
- G69: Providing an alternative for time based media


------------------------------

G158: - Providing an alternative for time-based media for audio-only content
Providing an alternative for time-based media for audio-only content

About this Technique
	- This technique relates to 1.2.1: Audio-only and Video-only (Prerecorded) (Sufficient).
	- This technique applies to all technologies.

Description : The purpose of this technique is to provide an accessible alternative way of presenting the information in an audio-only presentation. : In an audio-only presentation, information is presented in a variety of ways including dialogue and sounds (both natural and artificial). In order to present the same information in accessible form, this technique involves creating a document that tells the same story and presents the same information as the prerecorded audio-only content. In this technique, the document serves as long description for the content and includes all of the important dialogue and as well as descriptions of background sounds etc. that are part of the story. : If an actual script was used to create the audio-only content in the first place, this can be a good place to start. In production and editing however, the content often varies somewhat from the script. For this technique, the original script would be corrected to match the dialogue and what actually happens in the final edited form of the audio presentation.

Examples
A podcast includes a description of new features in a recent software release. It involves two speakers informally discussing the new and updated features and describing how they are used. One of the speakers works from a list of questions that was used to outline the discussion prior to recording. After the recording is complete, the outline is then edited and supplemented to match the dialogue etc. The resulting transcript is then made available on the speakers Web site along with the audio-only file. The text alternative that identifies the audio only content reads, "Episode 42: Zap Version 12 (text transcript follows)" and the link to the transcript is provided immediately following the audio-only content.

Related techniques:
- G69: Providing an alternative for time based media
- G159: Providing an alternative for time-based media for video-only content


------------------------------

G159: - Providing an alternative for time-based media for video-only content
Providing an alternative for time-based media for video-only content

About this Technique
	- This technique relates to:
	- 1.2.1: Audio-only and Video-only (Prerecorded) (Sufficient)
	- 1.2.8: Media Alternative (Prerecorded) (Sufficient)
	- This technique applies to all technologies.

Description : The purpose of this technique is to provide an accessible alternative way of presenting the information in a video-only presentation. : In a video-only presentation, information is presented in a variety of ways including animation, text or graphics, the setting and background, the actions and expressions of people, animals, etc. In order to present the same information in accessible form, this technique involves creating a document that tells the same story and presents the same information as the prerecorded video-only content. In this technique, the document serves as a long description for the content and includes all of the important information as well as descriptions of scenery, actions, expressions, etc. that are part of the presentation. : If a screenplay for the video-only content was used to create the content in the first place, this can be a good place to start. In production and editing however, the final version often varies somewhat from the screenplay. To use the screenplay, it would need to be corrected to match the final edited form of the video-only presentation.

Examples
An animation shows how to assemble a woodworking project. There is no audio, but the animation includes a series of numbers to represent each step in the process as well as arrows and picture-in-picture highlights illustrating how the assembly is completed. It also includes short outtake animations illustrating what will happen if assembly is done incorrectly. A text alternative that identifies the video-only content reads, "Breadbox assembly video (text description follows)," and the text description of the video includes a full text description of each step in the video.

Related techniques:
- G69: Providing an alternative for time based media
- G158: Providing an alternative for time-based media for audio-only content
- G78: Providing a second, user-selectable, audio track that includes audio descriptions


------------------------------

G160: - Providing sign language versions of information, ideas, and processes that must be understood in order to use the content
Providing sign language versions of information, ideas, and processes that must be understood in order to use the content

About this Technique
	- This technique relates to 3.1.5: Reading Level (Sufficient).
	- This technique applies to all technologies.

Description : For some people who are deaf or have certain cognitive disabilities, sign language may be their first language. A sign language version of the page may be easier for them to understand than a written language version. The objective of this technique is to provide sign language versions of content that help signing users understand difficult text that describes concepts or processes. The sign language content is provided in addition to the text. : Since this is supplemental content (and not sign language for speech in content) it should be viewed as separate from the content and would not necessarily be synchronized. Although there may be occasions when that would be useful, it is not required. : To make the sign language version available with the rest of the Web page contents, the video may be embedded in the Web page directly or the Web page may include a link that brings up a video player in a separate window. The sign language version could also be provided via a link to a separate Web page that displays the video. : Sign language is a three-dimensional, visual language that uses the hands, arms, shoulders, head, face, lips and tongue of the signer. For viewers to understand what is being signed, the video must record the sign language completely. Generally speaking, the signer should be as close to the camera as possible without risking cut-offs (such as hands moving outside the video). : Information on how to find sign language interpreters is listed in the resources section below. : Note : If the video stream is too small, the sign language interpreter will be indiscernible. When creating a video stream that includes a video of a sign language interpreter, make sure there is a mechanism to play the video stream full screen in the accessibility-supported content technology. Otherwise, be sure the interpreter portion of the video is adjustable to the size it would be had the entire video stream been full screen. : Since sign language is not usually a signed version of the printed language, the author has to decide which sign language to include. Usually the sign language of the primary audience would be used. If intended for multiple audiences, multiple sign languages may be used. Refer to advisory techniques for multiple sign languages.

Examples
The information about how to contact support or send questions about a Web site is provided in a sign language video as well as in text.
Help pages for a Web application are provided in sign language as well as in text.
A company Web site provides sign language videos describing the technical details of each product.
A religious Web site includes American Sign Language among the different languages in which it makes its site available.

Related techniques:
- G54: Including a sign language interpreter in the video stream
- G81: Providing a synchronized video of the sign language interpreter that can be displayed in a different viewport or overlaid on the image by the player


------------------------------

G161: - Providing a search function to help users find content
Providing a search function to help users find content

About this Technique
	- This technique relates to 2.4.5: Multiple Ways (Sufficient when combined with other techniques).
	- This technique applies to all technologies that include forms.

Description : Providing a search function that searches your Web pages is a design strategy that offers users a way to find content. Users can locate content by searching for specific words or phrases, without needing to understand or navigate through the structure of the Web site. This can be a quicker or easier way to find content, particularly on large sites. : Some search companies offer sites free access to their search applications. Search engines are available that can be installed on your own server. Some web hosting companies offer search scripts that customers can include on their web pages. Most services also offer paid versions of their tools with more advanced features. : Implementing a search function that will spell-check the terms, include different endings for the terms (stemming), and allow for the use of different terminology (synonyms) will further increase the accessibility of the search function. : The search functionality is added by either including a simple form on the Web page, usually a text field for the search term and a button to trigger the search or by adding a link to a page that includes a search form. The search form itself must be accessible, of course. : Techniques that are used to optimize search engine results for external searches also support internal search engines and make them more effective: use keywords, META tags, and an accessible navigation structure. Search sites provide guidance on how to create content that is optimized for search, for instance Google Webmaster Guidelines, and Yahoo! Search Content Quality Guidelines.

Examples
Example 1: A Shopping Site

A shopping site organizes its products into different categories, such as women's clothes, men's clothes, and children's clothes. These have subcategories, such as tops, pants, shoes, and accessories. Each page also contains a search form. Users can type the product number or product description into the search field and go directly to that product, rather than needing to navigate the product categories to find it.

Example 2: A Help Center

A Help Center contains thousands of pages of Help information about a company's products. A search form allows users to search just the Help Center pages to find articles that contain the search terms.

Related techniques:
- G63: Providing a site map
- G64: Providing a Table of Contents
- G125: Providing links to navigate to related Web pages
- G126: Providing a list of links to all other Web pages


------------------------------

G162: - Positioning labels to maximize predictability of relationships
Positioning labels to maximize predictability of relationships

About this Technique
	- This technique relates to:
	- 1.3.1: Info and Relationships (Advisory)
	- 2.5.3: Label in Name (Advisory)
	- 3.3.2: Labels or Instructions (Sufficient when used with G131: Providing descriptive labels)
	- This technique applies to all technologies that support forms.

Description : When labels for form fields are positioned where the user expects them visually, it is easier to understand complex forms and to locate specific fields. Labels for most fields are positioned immediately before the field, that is, for left-to-right languages, either to the left of the field or above it, and for right-to-left languages, to the right of the field or above it. Labels for radio buttons and checkboxes are positioned after the field. : These positions are defined because that is the usual (and therefore most predictable) position for the label for fields, radiobuttons and checkboxes. : Labels are positioned before input fields since the fields sometimes vary in length. Positioning them before allows the labels to line up. It also makes labels easier to locate with a screen magnifier since they are immediately before the field and also can be found in a vertical column (when the start of the fields line up vertically). Finally, if the field has data in it, it is easier to understand or check the data if one reads the label first and then the content rather than the other way around. : Checkboxes and radio buttons have a uniform width while their labels often do not. Having the radio button or checkbox first therefore allows both the buttons and the labels to line up vertically.

Examples
Example 1: Labels above text fields
Example 2: Labels to the left of text fields
Example 3: Labels to the right of radio buttons

Related techniques:
- H44: Using label elements to associate text labels with form controls
- H71: Providing a description for groups of form controls using fieldset and legend elements
- H65: Using the title attribute to identify form controls when the label element cannot be used
- G131: Providing descriptive labels
- G167: Using an adjacent button to label the purpose of a field


------------------------------

G163: - Using standard diacritical marks that can be turned off
Using standard diacritical marks that can be turned off

About this Technique
	- This technique relates to 3.1.6: Pronunciation (Sufficient).
	- This technique applies to all technologies.

Description : The objective of this technique is to provide users with a mechanism for turning standard diacritical marks on or off. : Many languages use diacritical marks or diacritics to indicate the pronunciation of words or to help distinguish between words. Some languages may use diacritics to denote vowels, to indicate consonant doubling, to indicate the absence of a vowel or a consonant, or for other purposes. Although text without such diacritics can be readable, the addition of diacritics can improve readability.

Examples
Example 1

A Web page in Hawaiian displays all diacritical marks by default and provides links that allow users to select the level of display of diacritical marks:

Display no diacritical markings
Use the footmark (‘) for the ʻokina, but do not display macrons
Show all diacritical markings

Visitors select the level they prefer, and this preference is stored into a session cookie. All subsequent pages during that same session have access to the cookie, and show or hide diacritics according to the selected level.

On the server side, content is stored with all diacritical markings. If a visitor prefers fewer or no diacritics, a server-side function replaces or removes diacritics as desired before sending the response.

Example at Hawaiian language online.


------------------------------

G164: - Providing a stated time within which an online request (or transaction) may be amended or canceled by the user after making the request
Providing a stated time within which an online request (or transaction) may be amended or canceled by the user after making the request

About this Technique
	- This technique relates to 3.3.4: Error Prevention (Legal, Financial, Data) (Sufficient).
	- This technique applies to all technologies that provide forms.

Description : The objective of this technique is to allow users to recover from errors made when placing an order by providing them with a period of time during which they can cancel or change the order. In general, a contract or an order is a legal commitment and cannot be canceled. However, a Web site may choose to offer this capability, and it provides a way for users to recover from errors. : The Web content would need to tell the user how long the cancellation period is after submitting the form and what the procedure would be to cancel the order. The cancellation procedure may not be possible online. It may, for instance, require written notice be sent to an address listed on the Web page. : After submitting the form, the user is informed of the length of the cancellation period and the procedure for canceling the transaction. It's best to provide the cancellation procedure at the same website where the transaction was submitted so that it is as easy to cancel as it was to submit and to accommodate users who may be unable to use other mechanisms. But, if necessary, the cancellation procedure may be provided through some other mechanism or combination of mechanisms as long as it has equivalent cross-disability accessibility. In this case, users are warned prior to submitting the form that they will not be able to cancel their order online.

Examples
Example 1: Online shopping

An online shopping Web site lets users cancel purchases up to 24 hours after they have been made. The Web site explains their policy, and includes a summary of the policy on the purchase receipt emailed to the user. After 24 hours, the purchase will be shipped to the user and can no longer be canceled.

Example 2: Custom orders

A Web site sells custom sports jackets that are made to order. The customer chooses the fabric and provides body measurements for the tailor. The Web site gives customers up to three days to change or cancel an order. Once the material has been cut to the customer's specifications, it is no longer possible to change or cancel the order. The company policy is described on its Web site.

Related techniques:
- G98: Providing the ability for the user to review and correct answers before submitting
- G155: Providing a checkbox in addition to a submit button
- G168: Requesting confirmation to continue with selected action


------------------------------

G165: - Using the default focus indicator for the platform so that high visibility default focus indicators will carry over
Using the default focus indicator for the platform so that high visibility default focus indicators will carry over

About this Technique
	- This technique relates to 2.4.7: Focus Visible (Sufficient).
	- This technique applies to technologies that contain focusable elements.

Description : Operating systems have a native indication of focus, which is available in many user agents. The default rendering of the focus indicator isn't always highly visible and may even be difficult to see against certain backgrounds. However, many platforms allow the user to customize the rendering of this focus indicator. Assistive technology can also change the appearance of the native focus indicator. If you use the native focus indicator, any system-wide settings for its visibility will carry over to the Web page. If you draw your own focus indicator, for example by coloring sections of the page in response to user action, these settings will not carry over, and AT will not usually be able to find your focus indicator.

Examples
Example 1

The default focus indicator on Microsoft Windows is a one-pixel, black dotted line around the focused element. On a page with a dark background, this can be very difficult to see. The creator of the page uses the default, and the user customizes it in Windows to make it a bright color.

Example 2

In HTML, form elements and links can be focused by default. In addition, any element with a tabindex attribute >= 0 can take focus. Both types of focused elements use the system focus indicator and will pick up platform changes in the focus indicator style.

Related techniques:
- G149: Using user interface components that are highlighted by the user agent when they receive focus
- C15: Using CSS to change the presentation of a user interface component when it receives focus
- SCR31: Using script to change the background color or border of the element with focus
- C15: Using CSS to change the presentation of a user interface component when it receives focus
- G195: Using an author-supplied, visible focus indicator
- C40: Creating a two-color focus indicator to ensure sufficient contrast with all components
- C45: Using CSS :focus-visible to provide keyboard focus indication


------------------------------

G166: - Providing audio that describes the important video content and describing it as such
Providing audio that describes the important video content and describing it as such

About this Technique
	- This technique relates to 1.2.1: Audio-only and Video-only (Prerecorded) (Sufficient).
	- This technique applies to all technologies that can contain video content.

Description : Video-only content is inaccessible to people who are blind and to some who have low vision. Therefore, it is important for them to have an audio alternative. One way of doing this is to provide an audio track describing the information in the video. The audio should be a common audio format used on the internet, such as MP3.

Examples
Example 1

A Web page has a link to a video-only presentation of a spaceship landing on Mars. The link to the video is a picture of a spaceship. Near the video is a link to an audio file of a person describing the video. This would look something like the following code example in HTML.

<a href="../video/marslanding.mp4">
  <img src="../images/spaceship.jpg" alt="Mars landing, video-only"
   width="193" height="255"/>
</a>
<p><a href="mars-landing-audio.mp3">Audio description of "Mars Landing"</a></p>

Related techniques:
- G159: Providing an alternative for time-based media for video-only content


------------------------------

G167: - Using an adjacent button to label the purpose of a field
Using an adjacent button to label the purpose of a field

About this Technique
	- This technique relates to 3.3.2: Labels or Instructions (Sufficient).
	- This technique applies to all technologies that support forms.

Description : When a button invokes a function on an input field, has a clear text label or name, and is rendered adjacent to the input field, the button also acts as a label for the input field. This label helps users understand the purpose of the field without introducing repetitive text on the web page. Buttons that label single text fields typically follow the input field. : Note : The field must also have a programmatically determined name, per Success Criterion 4.1.2.

Examples
Example 1: A search function

A web page contains a text field where the user can enter search terms and a button labeled "Search" for performing the search. The button is positioned right after the text field so that it is clear to the user that the text field is where to enter the search term.

Alternatively, a button visually labeled with a "loupe" or "magnify glass" icon, with the alternative text of "search", could be used instead of a button with a text label. Variants of this icon are used to identify search inputs across not just websites, but user interfaces of non-web software as well.

Example 2: A "reply" or "send message" field

A chat or email web application will often present users a single or multi-line text field used for composing a message. The field does not have a visible text label, but the purpose of the field - to compose a message to send - is indicated by its pairing with a button represented by a "send message" icon. The icon serving the dual purpose of visually labelling the button, as well as the text field.

Example 3: Picking a form

A user in the United States must fill in a form. Since the laws and requirements are different in different states within the United States, the user must select the version of a form for their state of residence. A dropdown list allows the user to pick a state. The adjacent button is labeled "Get Form for State." Pressing the button takes the user to the web page containing the form for the selected state.

Related techniques:
- G131: Providing descriptive labels
- H44: Using label elements to associate text labels with form controls
- H65: Using the title attribute to identify form controls when the label element cannot be used
- H71: Providing a description for groups of form controls using fieldset and legend elements


------------------------------

G168: - Requesting confirmation to continue with selected action
Requesting confirmation to continue with selected action

About this Technique
	- This technique relates to 3.3.4: Error Prevention (Legal, Financial, Data) (Sufficient).
	- This technique applies to all technologies.

Description : This technique is to seek confirmation from the user that the selected action is their intended action. Use this technique in situations where the action can not be undone after it has been followed through. This will help users avoid submitting a form or deleting data by mistake. : For example, this may occur when the user expects the 'submit' and 'cancel' buttons to occur in an order contrary to what is provided and selects a button too quickly to notice the unexpected order. Presenting the user with a confirmation request allows the user to recognize the error and either stop the submission of data or stop the loss of entered data. : The request for confirmation should inform the user of the action that was selected and the consequences of continuing with the action.

Examples
Example 1: Airline travel

An online travel Web site lets users create travel itineraries that reserve seats with different airlines. Users may look up, amend and cancel their current itineraries. If the user needs to cancel their travel plans, they find the itinerary on the Web page and delete it from their list of current itineraries. This action results in the cancellation of their seat reservations and is not reversible. The user is informed that the selected action will cancel their current seat reservations and that it may not be possible to make a comparable booking on the same flights once this action has been taken. The user is asked to confirm or cancel the deletion of the itinerary.

Example 2: Webmail

A Webmail application stores a user's email on a server, so that it can be accessed from anywhere on the web. When a user deletes an email message, it is moved to a trash folder from which it can be retrieved if it was deleted by accident. There is an "empty trash" command for deleting the messages in the trash folder from the server. Once the trash folder has been emptied, the messages can no longer be retrieved. Before emptying the trash folder, the user is asked to confirm or cancel deletion of the email in the trash folder.

Example 3: An online test

A form is used to collect answers for a test. When the 'submit' or 'reset' button is selected the user is presented with a web page that informs them of their choice and asks for confirmation to continue. Example 1: "You have selected to reset the form. This will delete all previously entered data and will not submit any answers. Would you like to reset the form? [yes button] [no button]" Example 2: "You have selected to submit the form. This will submit entered data as your final answers and can not be changed. Would you like to submit the form? [yes button] [no button]"

Example 4: Trading stocks

A brokerage site allows users to buy and sell stocks and other securities. If the user makes a transaction during trading hours, a dialog is presented informing the user that the transaction is immediate and irreversible, and has buttons that say "continue" and "cancel."

Related techniques:
- G98: Providing the ability for the user to review and correct answers before submitting
- G99: Providing the ability to recover deleted information
- G155: Providing a checkbox in addition to a submit button


------------------------------

G169: - Aligning text on only one side
Aligning text on only one side

About this Technique
	- This technique relates to 1.4.8: Visual Presentation (Sufficient).
	- This technique applies to all technologies.

Description : Many people with cognitive disabilities have a great deal of trouble with blocks of text that are justified (aligned to both the left and the right margins). The spaces between words create "rivers of white" running down the page, which can make the text difficult for some people to read. This failure describes situations where this confusing text layout occurs. The best way to avoid this problem is not to create text layout that is fully justified.

Examples
Example 1

For most technologies, simply leave out any alignment declarations. For example, the following text will be justified to the left by default in HTML where the language of the page is left to right.

<p>Lorem ipsum dolor sit amet, ...</p>
Example 2

A Web page includes sections with mixed alignment. Paragraphs in the body of the page are aligned to the left margin. The text also includes a number of pulled quotations which are aligned to the right margin.

Related techniques:
- C22: Using CSS to control visual presentation of text
- F88: Failure of Success Criterion 1.4.8 due to using text that is justified (aligned to both the left and the right margins)


------------------------------

G170: - Providing a control near the beginning of the Web page that turns off sounds that play automatically
Providing a control near the beginning of the Web page that turns off sounds that play automatically

About this Technique
	- This technique relates to 1.4.2: Audio Control (Sufficient).
	- This technique applies to all technologies where sound can be played automatically.

Description : The intent of this technique is to allow a user to turn off sounds that start automatically when a page loads. The control to turn off the sounds should be located near the beginning of the page to allow the control to be easily and quickly discovered by users. This is useful for those who utilize assistive technologies (such as screen readers, screen magnifiers, switch mechanisms, etc.) and those who may not (such as those with cognitive, learning and language disabilities). : In this technique, an author includes a control that makes it possible for users to turn off any sounds that are played automatically. The control should be keyboard operable, located early in the tab and reading order, and clearly labeled to indicate that it will turn off the sounds that are playing.

Examples
Example 1

A Web page contains a time-based media presentation that includes an audio track as well as an animated video describing how to repair a lawnmower engine. The page contains 2 buttons that say "Pause" and "Stop", which give the user control over when and if the time-based media plays.

Example 2

A Web page contains an embedded short film. The page contains a button that says "Pause the movie", which allows the user to pause the film.

Example 3

A Web page contains a presentation that includes video and audio. The page contains a button that says "Turn off multimedia", which allows the user to stop any video and audio from playing.

Related techniques:
- G60: Playing a sound that turns off automatically within three seconds
- G171: Playing sounds only on user request


------------------------------

G171: - Playing sounds only on user request
Playing sounds only on user request

About this Technique
	- This technique relates to 1.4.2: Audio Control (Sufficient).
	- This technique applies to all technologies that can play sound.

Description : The intent of this technique is to allow a user to control the use of sounds in Web content. Someone that uses a screen reader may find it very distracting and difficult to listen to their screen reader if there are also sounds coming from Web content. Providing a way to play sounds only upon request will give a user the control needed to listen to any sounds or other audio without interfering with the output from a screen reader.

Examples
Example 1

A Web page from a grey whale conservation society has a looping background sound of grey whales singing. There are also sounds of water splashing. The sounds do not start automatically. Instead, the Web content provides a link at the top of the page to allow the user to start the sounds manually. The button says "Turn sounds on." After pressing the "turn sounds on" button, the sounds are heard. The user is then presented with an option to "turn sounds off."

Example 2

A link is provided to a sound file that includes the sounds of the grey whales. The link text says, "Hear the song of the grey whale (mp3)."

Related techniques:
- G60: Playing a sound that turns off automatically within three seconds
- G170: Providing a control near the beginning of the Web page that turns off sounds that play automatically


------------------------------

G172: - Providing a mechanism to remove full justification of text
Providing a mechanism to remove full justification of text

About this Technique
	- This technique relates to 1.4.8: Visual Presentation (Sufficient).
	- This technique applies to all technologies.

Description : The objective of this technique is to provide a version of the page that does not have full justification (justified both left and right). : There may be circumstances when for layout purposes an author may want to have the text fully justified. In these cases, it is sufficient to provide a feature that removes the justification of text. The control should be easy to find and access and near the beginning of the page. : Note : This technique can be used in combination with a style switching technique to present a page that is a conforming alternate version for non-conforming content. Refer to C29: Using a style switcher to provide a conforming alternate version and Understanding Conforming Alternate Versions for more information.

Examples
Example 1

A classic novel online is on a site that attempts to duplicate the look of the originally published work, which includes full justification. A button is provided near the top of the page saying "remove full justification" and a style switching technique is used to swap out the style sheet. The new style sheet aligns the text only on the left.

Related techniques:
- C19: Specifying alignment either to the left or right in CSS


------------------------------

G173: - Providing a version of a movie with audio descriptions
Providing a version of a movie with audio descriptions

About this Technique
	- This technique relates to:
	- 1.2.3: Audio Description or Media Alternative (Prerecorded) (Sufficient using a more specific technique)
	- 1.2.5: Audio Description (Prerecorded) (Sufficient using a more specific technique)
	- This technique applies to any technology that supports audio and video.

Description : The objective of this technique is to provide a second version of video content that provides audio desciptions so that it is possible for people who cannot see to be able to understand audio-visual material. : Since most user agents today cannot merge multiple sound tracks, this technique adds the additional audio information to synchronized media by providing a second version of the movie where the original soundtrack and additional audio description have been combined in a single track. This additional information focuses on actions, characters, scene changes and on-screen text (not captions) that are important to understanding the content. : Since it is not helpful to have this new information obscure key audio information in the original sound track (or be obscured by loud sound effects), the new information is added during pauses in dialogue and sound effects. This limits the amount of supplementary information that can be added to program. : Providing a second version of the movie that includes audio descriptions as the primary sound track will make this content accessible for blind people who need to hear not only the dialogue, but also the context and other aspects of the video that are not communicated by the characters' dialogue alone.

Examples
Two versions of a video of an opera are available. The first version includes only the music. The second version includes both the music and voice describing the actions of the performers on stage.
A video of juggler performing in front of group of children includes a version with audio description. The narrator of the audio description describes the number and type of items the juggler is juggling as well as the reactions the children have during the performance.

Related techniques:
- G78: Providing a second, user-selectable, audio track that includes audio descriptions
- G69: Providing an alternative for time based media
- SM6: Providing audio description in SMIL 1.0
- SM7: Providing audio description in SMIL 2.0


------------------------------

G174: - Providing a control with a sufficient contrast ratio that allows users to switch to a presentation that uses sufficient contrast
Providing a control with a sufficient contrast ratio that allows users to switch to a presentation that uses sufficient contrast

About this Technique
	- This technique relates to:
	- 1.4.3: Contrast (Minimum) (Sufficient)
	- 1.4.6: Contrast (Enhanced) (Sufficient)
	- 1.4.11: Non-text Contrast (Sufficient)
	- This technique applies to any technology.

Description : When the contrast between the text and its background for some portion of the page has not been designed to meet the contrast level for Success Criterion 1.4.3 or 1.4.6, it is possible to meet these guidelines using the "Alternate Version" clause in the conformance requirements (Conformance Requirement 1). A link or control on the page can either change the page so that all aspects conform, or it could take the viewer to a new version of the page that does conform at the desired level. Placing the link or control prominently on the page will assist users in accessing the conforming content readily. : For this technique to be used successfully, three things must be true: : The link or control on the original page must itself meet the contrast requirement of the desired SC. (If the user cannot see the control they may not be able to use it to go to the new page.)
	- The new page must contain all the same information and functionality as the original page.
	- The new page must conform to all of the SC for the desired level of conformance. (i.e., the new page cannot just have the desired level of contrast but otherwise not conform). : This technique can be used to meet Success Criterion 1.4.3 by having text (or images of text) on the alternate version of the page be 4.5:1 contrast and any large text (or images of large text) be 3:1 contrast with its background. If the alternate version of the page has all text (or images of text) with 7:1 contrast and large text (or images of large text) with 4.5:1 contrast then it would satisfy both Success Criterion 1.4.3 and 1.4.6. : Note : This technique can be used in combination with a style switching technique to present a page that is a conforming alternate version for non-conforming content. Refer to C29: Using a style switcher to provide a conforming alternate version and Understanding Conforming Alternate Versions for more information.

Examples
A page with some headlines that do not meet the 3:1 contrast requirements has a high contrast (5:1) link at the top of the page that takes the user to a new version of the page with minimum 4.5:1 contrast on all text and images of text.
A page uses shaded backgrounds for effect but results in text to background contrast of 4:1. A control at the top of the page says "high contrast". Clicking on it causes different styles to be used and dropping the background colors to achieve 7:1 contrast.

Related techniques:
- G17: Ensuring that a contrast ratio of at least 7:1 exists between text (and images of text) and background behind the text
- G18: Ensuring that a contrast ratio of at least 4.5:1 exists between text (and images of text) and background behind the text
- G145: Ensuring that a contrast ratio of at least 3:1 exists between text (and images of text) and background behind the text
- G148: Not specifying background color, not specifying text color, and not using technology features that change those defaults


------------------------------

G175: - Providing a multi color selection tool on the page for foreground and background colors
Providing a multi color selection tool on the page for foreground and background colors

About this Technique
	- This technique relates to 1.4.8: Visual Presentation (Sufficient).
	- This technique applies to any technology that allows users to store preferences for reuse on other pages.

Description : The objective of this technique is to include a control on a Web page or set of Web pages that allows users to specify preferred foreground and background colors for the content. This technique can be implemented using any technology that allows users to store preferences that can be used across pages. Using this technique, an author includes a color picker control on the site which allows users to select and save foreground and background color preferences for use on other pages in a site. Pages are designed to look for these preferences and adapt accordingly when saved settings are found. : Many users with cognitive disabilities have trouble with standard black text on a white background. Sometimes, they can read the text a lot better using different colors for the text and background and sometimes these color combinations are very specific and not what would be expected by someone else (for instance brown on blue). : Some of these users will have difficulty setting colors using the browser's color settings or the operating systems color settings. Providing a tool on the web page that provides a wide range of foreground and background colors will allow them to easily change the colors without digging into the browser settings.

Examples
Example 1

The user may type hex values into the text fields. The "pick" link will open a color selection tool for the adjoining field.

Screenshot showing the foreground and background color controls, which are text fields containing hex values. Each field has a link which opens a color picker control positioned between the label and the text field.

The color selection tool opened for selecting a color.

Screenshot showing the color selection tool with the color picker opened to select a color for the foreground. The user is presented with a choice of 216 colors.

Here is a working example of this technique implemented using PHP, Javascript, CSS and HTML: Color Picker Example.

Related techniques:
- G148: Not specifying background color, not specifying text color, and not using technology features that change those defaults
- G156: Using a technology that has commonly-available user agents that can change the foreground and background of blocks of text
- C25: Specifying borders and layout in CSS to delineate areas of a Web page while not specifying text and text-background colors


------------------------------

G176: - Keeping the flashing area small enough
Keeping the flashing area small enough

About this Technique
	- This technique relates to 2.3.1: Three Flashes or Below Threshold (Sufficient).
	- This technique applies to all general Web content including special cases like material that is specifically designed for a display in a foyer.

Description : The purpose of this technique is to provide an easy way to pass the success criterion for things that flash, but are small. : If you have something that flashes more than 3 times in a one second period (so G19 can't be used), but the area that is flashing is less than 25% of 10 degrees of visual field (which represents the central area of vision in the eye), then it would automatically pass. : The 10 degree of visual field represents the central area of vision in the eye. This area is highly packed with visual sensors. Flashes in this area are transmitted to the visual cortex. For those with photosensitivity, this flashing of activity on the visual cortex can cause seizures. Flashing on other areas of the eye (which have far fewer sensors) has much less effect on the cortex. Hence, the focus on just the 10 degrees of central vision. : If the content is for general Web use, you can use Formula 1: Small Safe Area for Web Content.
	- If the content is for a known display (e.g., in a company foyer) then Formula 2: Small Safe Area for Known Displays should be used. : Formula 1: Small Safe Area for Web Content : Most Web authors do not know how to translate visual field to pixels, which is what they generally can deal with. This technique provides that translation. : At this point in time, the most prevalent display is 1024 x 768 and about 15-17 inches diagonally. When viewed at a typical viewing distance (22-26 inches) a 10 degree visual field will capture an area approximately 341 x 256 pixels. This is not circular, but neither is the central vision of most users, and the difference is so small (and at the edge of the central vision where sensors are fewer) that it is not important. : Since the criterion is 25% of any 10 degree visual field, any single flashing event on a screen (there is no other flashing on screen) that is smaller than a contiguous area of 21,824 sq pixels (any shape), would pass the General and Red Flash Thresholds. : 1024 x 768 was chosen because it represents the most common screen size. It also works with higher resolution screens since the tighter pixel density would result in a smaller and safer image size. : Users with lower resolution displays or that enlarge or view their screens closely would have a higher risk depending on the viewing distance. To address the needs of this group, G19 should be used since it is independent of screen resolution or viewing distance. : Formula 2: Small Safe Area for Known Displays : To calculate the small safe area (in pixels) on the screen when the screen size, resolution, and viewing distance is known, use the following procedure. : Note : For a number of reasons (distribution of central vision sensors often non-circular, simplicity, computational convenience, historical), a 4:3 rectangular approximation of the central 10 degree of visual field is used that is 10 degrees wide and 7.5 degrees high. This has an area of 75 square degrees, vs the 78.5 square degree area of a true circle of 10 degrees. : To convert viewing distance to rectangle size, multiply the viewing distance by 0.1745 (10 * Pi / 180) to get the width of the rectangle, and multiply the viewing distance by 0.1309 (7.5 * Pi / 180) to get the height of the rectangle. (This calculation can be done in inches, or millimeters, or any other unit of length.) : Determine size of 10 degree angle of view in pixels. : To do this, multiply the width and height of the rectangle from step 1 by the resolution of the screen, in pixels per unit length, to get the horizontal and vertical size of the rectangle in pixels. : For a 1080p widescreen display (which is 1920 by 1080 pixels), the resolution of the screen in pixels per inch is 2203 divided by the diagonal screen size, in inches.
	- For a 720p widescreen display (which is usually 1365 by 768 pixels), the resolution of the screen in pixels per inch is 1566 divided by the diagonal screen size, in inches.
	- For an LCD computer monitor which specifies the pixel pitch in millimeters / pixel, the resolution of the screen in pixels per inch is 25.4 divided by the pixel pitch in millimeters. : For any display, if you know the actual diagonal screen size in inches, and the horizontal and vertical resolution of the display in pixels, then the resolution of the screen in pixels per inch is the square-root of ( (horizontal resolution in pixels) * (horizontal resolution in pixels) + (vertical resolution in pixels) * (vertical resolution in pixels) ). : Multiply the width of the rectangle by the height and divide by 4.

Examples
An author creates an animation that will be displayed on a screen in the entrance lounge at a company. Using the size and resolution of the display and the closest distance that a person can stand when viewing the display, they calculate the size of 25% of the 10 degree of central vision in pixels (using the formula above). This would be the small safe area. They then are careful to never flash any area larger than the small safe area.

Related techniques:
- G15: Using a tool to ensure that content does not violate the general flash threshold or red flash threshold
- G19: Ensuring that no component of the content flashes more than three times in any 1-second period


------------------------------

G177: - Providing suggested correction text
Providing suggested correction text

About this Technique
	- This technique relates to:
	- 3.3.3: Error Suggestion (Sufficient)
	- 4.1.3: Status Messages (Sufficient when used with ARIA19: Using ARIA role=alert or Live Regions to Identify Errors)
	- This technique applies to content that accepts user data input, with restrictions on the format, value, and/or type of the input.

Description : The objective of this technique is to suggest correct text where the information supplied by the user is not accepted and possible correct text is known. The suggestions may include correct spelling or similar text from a known pool of possible text. : Depending on the form, suggestions could be located next to the field where the error was identified, elsewhere on the page or via a search mechanism or reference where results would be listed on another URI. Where possible, suggestions for correction should be incorporated in a way that is easy for the user. For example, an incorrect submission may return a list of possible corrections where the user can select a checkbox or radio button to indicate which option was intended. Suggestions or links to the suggestions should be placed close to the form fields they are associated with, such as at the top of the form, preceding the form fields, or next to the form fields requiring correction.

Examples
A form field requires the user to input a length of time that could range from days to years. The user enters the number "6". The server returns the form as the user had submitted it and also includes a suggested text next to the form field: "Error detected. Did you mean: 6 days, 6 weeks, 6 months or 6 years?"
The user enters an incorrectly spelled city name. The server returns the form as the user had submitted it and also includes a message at the top of the form informing the user of the error and a link to a list of city names that the user may have meant, as determined by comparing their original input to a database of city names.
A bus route trip planner allows users to enter their origin an destination, allowing users to enter street addresses, intersections and city landmarks. When a user enters "Kohl," they are prompted with a list of search results with similar matches that reads, "Your search for 'Kohl' returned the following". A select box follows the prompt lists, "Kohl Center," "Kohl's Dept. Store-East" and "Kohl's Dept. Store-West" as options the user can choose from.
A search runs a spell check on input and provides a link of alternatives if a spelling error is detected. When the user clicks on the link, the search is automatically resubmitted with the correct spelling.

Related techniques:
- SCR18: Providing client-side validation and alert
- G84: Providing a text description when the user provides information that is not in the list of allowed values
- G85: Providing a text description when user input falls outside the required format or values


------------------------------

G178: - Providing controls on the Web page that allow users to incrementally change the size of all text on the page up to 200 percent
Providing controls on the Web page that allow users to incrementally change the size of all text on the page up to 200 percent

About this Technique
	- This technique relates to 1.4.4: Resize Text (Sufficient).
	- This technique applies to all technologies.

Description : The purpose of this technique is to provide a mechanism on the Web page to incrementally increase the size of text. Many people with low vision do not use magnifying software, and they may not be familiar with their browser's text size adjustments. This may be particularly true of older people who are learning about computers later in life and who may be experiencing age related vision loss. It may also be true of some people with cognitive disabilities who require increased font size. : This technique provides a mechanism that some users will find easier to use. The mechanism may include links or buttons that will switch the visual presentation to a different style sheet or use scripts to change the text size dynamically. : To implement this technique, an author provides controls that allow the user to incrementally increase or decrease the text size of all of the text on the page to a size up to 200% of the default text size. : This can be achieved by providing links, buttons or linked images and the controls themselves should be as easy to find (e.g. prominently positioned within the page, presented in a larger text size, high contrast, etc.) as possible. : This technique can also be used in circumstances where scalable fonts cannot be used, such as legacy code situations. : Note : This technique can be used in combination with a style switching technique to present a page that is a conforming alternate version for non-conforming content. Refer to C29: Using a style switcher to provide a conforming alternate version and Understanding Conforming Alternate Versions for more information.

Examples
A newspaper article has two buttons near the top of the page. The "increase text size" button has a big letter "T" with an upward arrow and the "decrease text size" button has a small letter "T" with a down arrow. There is alt text on each button.
A site has a number of style sheets with different text size. The user can choose any of the style sheets if their browser provides this functionality. Each page also includes the links "Increase text size" and "Decrease text size" that will change the style sheet currently applied to the appropriate alternate style sheet.
A site includes the text "Change text size:" followed by text links "Up" and "Down" on every Web page. The links trigger a Javascript that alters the value of the text-size property accordingly.
A site includes a link on every page that reads "Change text size." The resulting page includes a series of links that includes options representing the available sizes. The links read, "Smallest font size," "Small font size," "Default font size," "Large font size," etc. Instructions preceding the list direct users to choose a link to change to the desired font size.


------------------------------

G179: - Ensuring that there is no loss of content or functionality when the text resizes and text containers do not change their width
Ensuring that there is no loss of content or functionality when the text resizes and text containers do not change their width

About this Technique
	- This technique relates to 1.4.4: Resize Text (Sufficient).
	- This technique applies to all technologies that reflow text when windows are resized.

Description : Some user agents support changing the size of text without changing other dimensions of the text container. Loss of content or functionality can occur when the text overflows the space that was allocated for it. However, the layout properties may provide a way to continue to display the content effectively. The block sizes may be defined wide enough that the text does not overflow when resized by 200%. Text may wrap when it no longer fits within the block, and the block may be tall enough that all the text continues to fit in the block. The block may provide scrollbars when the resized text no longer fits.

Examples
Example 1: A multi-column page layout

HTML and CSS are used to create a two-column layout for a page of text. Using the default value of the white-space property, normal, causes text to wrap. So as the size of the text is increased to 200%, the text reflows and the column of text grows longer. If the column is too long for the viewport, the user agent provides scrollbars so the user can scroll text into view because the author has specified the CSS rule overflow:scroll or overflow:auto.

Example 2

A newspaper layout with blocks of text in columns. The blocks have a fixed width, but no height set. When the text is resized in the browser, the text wraps and makes the blocks taller.

Related techniques:
- G146: Using liquid layout
- C28: Specifying the size of text containers using em units
- SCR34: Calculating size and position in a way that scales with text size


------------------------------

G180: - Providing the user with a means to set the time limit to 10 times the default time limit
Providing the user with a means to set the time limit to 10 times the default time limit

About this Technique
	- This technique relates to 2.2.1: Timing Adjustable (Sufficient).
	- This technique applies to all technologies.

Description : The objective of this technique is to give people with disabilities enough time to complete tasks which may take them longer than someone without those challenges. Some mechanism such as a preference setting or a control on the page lets the user change the time limits to at least 10 times the default time limit. Preferably, the mechanism would have a variable adjustment that lets the user change the time limit to any value in its range, but could also provide ways to change the time limit by discrete increments. The user changes the time limit at the beginning of their session, before any activity that has a time limit.

Examples
An airline has an online ticket purchasing application. By default, the application has a 1 minute time limit for each step of the purchase process. At the beginning of the session, a Web page includes information that says, "We expect that each step in the purchasing process will take users one minute to complete. Would you like to adjust the time limit?" followed by several radio buttons "1 minute, 2 minutes, 5 minutes, 10 minutes."
A Web based email application automatically logs users out when there has been no activity for 30 minutes. The application includes a preference that allows users to adjust the amount of time to any value.

Related techniques:
- G133: Providing a checkbox on the first page of a multipart form that allows users to ask for longer session time limit or no session time limit
- SCR1: Allowing the user to extend the default time limit
- SCR16: Providing a script that warns the user a time limit is about to expire


------------------------------

G181: - Encoding user data as hidden or encrypted data in a re-authorization page
Encoding user data as hidden or encrypted data in a re-authorization page

About this Technique
	- This technique relates to 2.2.5: Re-authenticating (Sufficient when used for Providing options to continue without loss of data).
	- This technique applies to pages that require user authentication where the time available for submitting data is limited.

Description : Web servers that require user authentication often terminate the session after a set period of time if there is no activity from the user. If the user is unable to input the data quickly enough and the session times out before they submit, the server will require re-authentication before proceeding. When this happens, the server passes (as hidden data) the information from the form into the page that is used for re-authentication. Then, when the user re-authenticates, the server can use the information passed on from the re-authentication page to submit the form directly or to present a page that includes the data that is to be submitted for review. In this technique, the server does not have to store any user-submitted data on server. This is an important technique for those cases where it is either illegal or a security risk for the server to store information temporarily. It also is useful in that it frees the server from having to maintain the stored information and reconnect it with the newly authenticated session. : Note : If the data users are submitting is sensitive or presents a security risk, authors should consider the process used to pass the data to the re-authentication page and, after re-authentication, to the page that will process the original data in order to ensure that the data is protected.

Examples
A user has logged in to use a wiki and begins editing a page. The time taken to complete the edits exceeds the time allowed by the server for session inactivity. When the user submits the edits, the user is notified that the session has timed out and is redirected to a login page. The script that handles the original form submission passes the edits as a variable to the login page and when the user successfully logs in, passes the users edits back to the script that handles form submissions and the edits are processed as though no session timeout had occurred.
A user had logged in to a secure shopping site and fills out some of the information on an order form. For security reasons, the session times out after 30 minutes, but the user does not submit the form until 45 minutes after loading the page. The user is informed of the time out and is prompted to log-in again. If the user logs in correctly, the order form is presented to the user with all of the data previously entered and the user is able to review their submission and submit the form. If the log-in is not successfully completed, then the form data is discarded by the server.

Related techniques:
- G105: Saving data so that it can be used after a user re-authenticates


------------------------------

G182: - Ensuring that additional visual cues are available when text color differences are used to convey information
Ensuring that additional visual cues are available when text color differences are used to convey information

About this Technique
	- This technique relates to 1.4.1: Use of Color (Sufficient).
	- This technique applies to colored text when the color is used to convey information such as:
	- Words that are links in a paragraph
	- Items in a list where some are different than others and are presented in colored text

Description : The intent of this technique is to provide a redundant visual cue for users who may not be able to discern a difference in text color. Color is commonly used to indicate the different status of words that are part of a paragraph or other block of text or where special characters or graphics cannot be used to indicate which words have special status. For example, scattered words in text may be hypertext links that are marked as such by being printed in a different color. This technique describes a way to provide cues in addition to color so that users who may have difficulty perceiving color differences or have low vision can identify them. : To use this technique, an author incorporates a visual cue in addition to color for each place where color alone is used to convey information. Visual cues can take many forms including changes to the font style, the addition of underlines, bold, or italics, or changes to the font size. : Note : While this technique is sufficient to meet the visual requirements of Success Criterion 1.4.1, the information conveyed by the color must also be available programmatically to satisfy Success Criterion 1.3.1. See How to Meet 1.3.1.

Examples
The default formatting for links on a page includes presenting them both in a different color than the other text on the page underlining them to make the links identifiable even without color vision.
An article comparing the use of similar elements in different markup languages uses colored text to identify the elements from each language. Elements from the first markup language are identified using BLUE, bolded text. Elements from the second are presented as RED, italicized text.
A news site lists links to the articles appearing on its site. Additional information such as the section the article appears in, the time the article was posted, a related location or an indication that it is accompanied by live video appears in some cases. The links to the articles are in a different color than the additional information but the links are not underlined, and each link is presented in a larger font than the rest of the information so that users who have problems distinguishing between colors can identify the links more easily.
Short news items sometimes have sentences that are also links to more information. Those sentences are printed in color and use a sans-serif font face while the rest of the paragraph is in black Times-Roman.

Related techniques:
- G14: Ensuring that information conveyed by color differences is also available in text
- G205: Including a text cue for colored form control labels
- G183: Using a contrast ratio of 3:1 with surrounding text and providing additional visual cues on hover for links or controls where color alone is used to identify them


------------------------------

G183: - Using a contrast ratio of 3:1 with surrounding text and providing additional visual cues on hover for links or controls where color alone is used to identify them
Using a contrast ratio of 3:1 with surrounding text and providing additional visual cues on hover for links or controls where color alone is used to identify them

About this Technique
	- This technique relates to 1.4.1: Use of Color (Sufficient).
	- This technique applies to colored text when color alone is used to convey information such as words that are links in a paragraph.

Description : The intent of this technique is to provide a redundant visual cue for users who may not be able to discern a difference in text color. Color (generally defined as a combination of hue, saturation and luminance) is commonly used to indicate words that are links within a paragraph or other block of text. For example, scattered words in text may be hypertext links that are identified only by a difference in color with surrounding text. This technique describes a way to provide a difference in contrast rather than relying on hue. : To meet success criterion 1.4.1: Use of Color a relative luminance (lightness) difference of 3:1 or greater with the text around can be used. This technique goes beyond the success criterion and asks for visual highlights when the user hovers over each link, such as an underline, a change in font style such as bold or italics, or an increase in font size. Such a hover effect provides confirmation to pointer users that the text is a link, similar to how the link alters its appearance for keyboard users when it receives focus, in order to meet 2.4.7 Focus Visible. : While using this technique is sufficient to meet this success criterion, it is not the preferred technique to differentiate link text. This is because links that use the relative luminance of color alone may not be obvious to people with low vision. If there are not a large number of links in the block of text, underlines are recommended for links in blocks of text. : Note : This technique is about the use of color in addition to luminosity. In this technique, the contrast ratio refers to the contrast between a link and the words around it. In Success Criterion 1.4.3 and 1.4.6, contrast ratio refers to the contrast between a word and its background. The difference is that this technique is about the ability for users to tell the difference (a noticeable difference) between different pieces of text whereas the contrast ratio used in success criterion 1.4.3 and 1.4.6 is about the readability of the text with its background for different color and vision disabilities. : If an author wants to use the color portion of this technique (i.e., using different colors for the words where the colors have sufficient contrast with each other) and the author also wants to conform to SC 1.4.3 (contrast of both words with their backgrounds) the following colors can be used. (e.g., black text in a paragraph on a white background with the links shown as one of the colors in example 1 below. : If assistive technology or Web browsers at some point all provide an option to underline all links on Web pages for users, this could be used instead of an author-provided link highlighting mechanism.

Examples
Example 1: Colors that would provide 3:1 contrast with black words and 4.5:1 contrast with a white background

Refer to Links with a 3:1 contrast ratio with surrounding text

Example 2

The hypertext links in a document are medium-light blue (#3366CC) and the regular text is black (#000000). Beyond the difference in color, the links have no other styles differences compared with the regular text. Because the blue text is light enough, it has a contrast of 3.9:1 with the surrounding text and can be identified as being different from the surrounding text by people with all types of color blindness, including those individuals who cannot see color at all. In addition to the contrast difference, the links have :focus and :hover styles that reintroduce the underline when the links receive keyboard focus or when a mouse pointer hovers over them. Hover or focus style changes alone are not sufficient to meet the criterion.

Related techniques:
- G14: Ensuring that information conveyed by color differences is also available in text
- G205: Including a text cue for colored form control labels
- G145: Ensuring that a contrast ratio of at least 3:1 exists between text (and images of text) and background behind the text
- G182: Ensuring that additional visual cues are available when text color differences are used to convey information


------------------------------

G184: - Providing text instructions at the beginning of a form or set of fields that describes the necessary input
Providing text instructions at the beginning of a form or set of fields that describes the necessary input

About this Technique
	- This technique relates to:
	- 3.3.2: Labels or Instructions (Sufficient when used with G131: Providing descriptive labels)
	- 3.3.5: Help (Sufficient)
	- This technique applies to all technologies.

Description : The objective of this technique is to help the user avoid input errors by informing them ahead of time about restrictions on the format of data that they must enter. Instructions on such restrictions are provided at the top of forms. This technique works best for forms that have a small number of fields or those where many form fields require data in the same format. In these cases, it is more efficient to describe the format once in instructions at the top of the form rather than repeating the same information for each field that has the same restricted format requirement.

Examples
Example 1

A business networking site allows users to post descriptions of jobs they have held. The form to gather the information includes fields for the company name, job title, from and to dates, and job description. At the top of the form are the following instructions:

Enter requested information about the position you wish to add to your profile. Dates should be entered in mm/dd/yyyy format."
Example 2

A corporate directory allows users to customize information such as telephone number and job responsibilities by editing their profile. At the top of the form are the following instructions:

You can modify the information in any field. When you select Finish, your changes will be saved and you will have the opportunity to publish your profile. Should you decide that you don't want to keep your changes, select the Cancel button.
You cannot edit the information that is displayed as system text in your profile (i.e., not contained in a field). This information has been obtained from an corporate human resources information. If you find something is incorrect or out of date that you cannot edit, select the help icon next to the information to find out how to correct it.
Phone numbers may contain numbers and dashes (-) only.
Required fields are marked with an asterisk (*) and must be filled in to complete the form.

Related techniques:
- G89: Providing expected data format and example


------------------------------

G185: - Linking to all of the pages on the site from the home page
Linking to all of the pages on the site from the home page

About this Technique
	- This technique relates to 2.4.5: Multiple Ways (Sufficient when combined with other techniques).
	- This technique applies to all technologies that contain links.

Description : The objective of this technique is to make it possible for users to locate all the information in a small Web site by providing links to all Web pages from the home page. When the number of pages in the site is small enough, the home page can contain site map information directly. The other pages in the Web site contain links to the home page. : In this way, the home page serves as two mechanisms in one. It provides the usual navigation to pages. It also is a de facto site map to the site. : All the Web pages in the site may contain links to all the other pages, and those sets of links satisfy Success Criterion 3.2.3 (Consistent Navigation).

Examples
A small commercial Web site for a consultant contains a home page, a Contacts page for contacting the consultant, a page describing the consultant's background, and a page with examples of the consultant's work. Each page contains a navigation bar that links to all the other pages in the site.

Related techniques:
- G61: Presenting repeated components in the same relative order each time they appear
- G63: Providing a site map
- G64: Providing a Table of Contents
- G125: Providing links to navigate to related Web pages
- G126: Providing a list of links to all other Web pages


------------------------------

G186: - Using a control in the Web page that stops moving, blinking, or auto-updating content
Using a control in the Web page that stops moving, blinking, or auto-updating content

About this Technique
	- This technique relates to 2.2.2: Pause, Stop, Hide (Sufficient).
	- This technique applies to all technologies.

Description : The objective of this technique is to provide the user a control that allows him to stop moving or blinking content. Since the control is in the web page, the control itself meets the appropriate level of WCAG conformance e.g., it has appropriate contrast, it has a name that identifies it, it is keyboard accessible. The control is either at the top of the page or adjacent to the moving content. A single control may stop all moving or blinking content on the page, or there may be separate controls for separate parts of the content.

Examples
Example 1: Stock Market Ticker Tape

A Web page displays the latest stock market results in a "ticker tape" that automatically scrolls across the bottom of the screen. A "Pause" button lets the user stop the ticker tape. When the ticker tape is unpaused, it resumes displaying the current stock market information.

Example 2: Teleconferencing Tool

A teleconferencing Web page displays a speaker queue of people who wish to speak. A checkbox on the page lets the user choose whether the display of the queue should be updated automatically when a new person is added or removed, or whether it should only be updated when the user presses the "Refresh" button. When the queue is being updated automatically, the Refresh button is deactivated.

Related techniques:
- G4: Allowing the content to be paused and restarted from where it was paused
- G191: Providing a link, button, or other mechanism that reloads the page without any blinking content
- SCR22: Using scripts to control blinking and stop it in five seconds or less


------------------------------

G188: - Providing a button on the page to increase line spaces and paragraph spaces
Providing a button on the page to increase line spaces and paragraph spaces

About this Technique
	- This technique relates to 1.4.8: Visual Presentation (Sufficient).
	- This technique applies to any technology.

Description : Many people with cognitive disabilities have trouble reading text that is single spaced. A button that increases the line height will help them read the content. In order to retain the separation of paragraphs, the space between paragraphs should also increase so that it is at least 1.5 times as high as the line spacing. : Note : This technique can be used in combination with a style switching technique to present a page that is a conforming alternate version for non-conforming content. Refer to C29: Using a style switcher to provide a conforming alternate version and Understanding Conforming Alternate Versions for more information.

Examples
Example 1

Use standard style page switching and have a button or link on the page that switches the stylesheet. The new stylesheet contains a rule to increase the line height and a class to increase the paragraph spacing.

p {
  line-height: 1.5;
  margin-bottom: 2em;
}

Related techniques:
- C21: Specifying line spacing in CSS
- C22: Using CSS to control visual presentation of text
- C29: Using a style switcher to provide a conforming alternate version


------------------------------

G189: - Providing a control near the beginning of the Web page that changes the link text
Providing a control near the beginning of the Web page that changes the link text

About this Technique
	- This technique relates to:
	- 2.4.4: Link Purpose (In Context) (Sufficient when used for allowing the user to choose short or long link text)
	- 2.4.9: Link Purpose (Link Only) (Sufficient when used for allowing the user to choose short or long link text)
	- This technique applies to all technologies that contain links.

Description : The objective of this technique is to provide the user with a control near the beginning of the page that takes the user to a conforming alternate version of the Web page where the link text alone of each link is sufficient to determine its purpose out of context. : Some users prefer to have links that are self-contained, where there is no need to explore the context of the link. Other users find including the context information in each link to be repetitive and to reduce their ability to use a site. Among users of assistive technology, the feedback to the working group on which is preferable has been divided. This technique allows users to pick the approach that works best for them. Users who need or prefer potentially longer but complete link text use this version. : If the control for switching to the alternate version is a link, it must always be possible to understand the purpose of the control directly from its link text. : This technique provides the alternate version for the current page view. It is also possible, and in some cases would be advisable, to save this preference in a cookie or server-side user profile, so that users would only have to make the selection once per site and would automatically be taken to their preferred version. : Note : This technique can be used in combination with a style switching technique to present a page that is a conforming alternate version for non-conforming content. Refer to C29: Using a style switcher to provide a conforming alternate version and Understanding Conforming Alternate Versions for more information.

Examples
Example 1: Providing a Link to another Version

A Web page lists books for download in different formats. Alternate versions of the Web page use just the book format as the link text or the book title and format type.

Version with short link text:

<h1>Books for download</h1>
<p><a href="books-full-links.html">Full link Version</a></p>
<ul>
  <li>The History of the Web: 
    <a href="history.docx">Word</a>, 
    <a href="history.pdf">PDF</a>, 
    <a href="history.html">HTML</a>
  </li>
</ul>
Version with full link text:
<h1>Books for download</h1>
<p><a href="books-short-links.html">Short link Version</a></p>
<ul>
  <li>The History of the Web: 
    <a href="history.docx" class="hist">The History of the Web (Word)</a>, 
    <a href="history.pdf" class="hist">The History of the Web (PDF)</a>, 
    <a href="history.html" class="hist">The History of the Web (HTML)</a>
  </li>
</ul>

Related techniques:
- G91: Providing link text that describes the purpose of a link
- H30: Providing link text that describes the purpose of a link for anchor elements
- H24: Providing text alternatives for the area elements of image maps
- C7: Using CSS to hide a portion of the link text
- SCR30: Using scripts to change the link text
- G136: Providing a link at the beginning of a nonconforming Web page that points to a conforming alternate version
- C29: Using a style switcher to provide a conforming alternate version


------------------------------

G190: - Providing a link adjacent to or associated with a non-conforming object that links to a conforming alternate version
Providing a link adjacent to or associated with a non-conforming object that links to a conforming alternate version

About this Technique
	- This technique is not referenced from any Understanding document.
	- This technique applies to all technologies.

Description : It is better for all objects on a page to conform, but there are certain circumstances where that may not be possible. There may be situations when an object or section of content targets people with certain disabilities while those same attributes make it inaccessible for someone else. There may also be other reasons not to have a conforming object on the Web page. When an object does not conform, then a link to a conforming alternate version is adjacent to the non-conforming object in the linear reading order or is associated with the non-conforming content. The conforming alternate version conveys the same information as the non-conforming version.

Examples
Example 1: A video of a rap song where audio descriptions would interfere with the artistic integrity of the music

A video of a rap song named "The Hip Hop Kid" has a musical background. Introducing "Audio Description" speaking parts during the pauses in the song would interfere with the guitar lines and drum grooves that the artist is trying to convey. On the Web page, immediately following the video object, there is a link that says, "Audio described version of 'The hip hop kid'" which contains a version of the video containing audio descriptions of what is happening visually in the video.

Example 2: An image of a historical document

A Web page about the Declaration of Independence contains an image of the document. There is not sufficient contrast between the text and the background, and the handwriting on the document is difficult to read. A link takes the user to an HTML version of the document.

Example 3: An animation that is not accessibility supported

An interactive animation created using a Web technology that is not accessibility supported is displayed on a Web page. A link to a conforming alternate version of the animation is adjacent to the non-conforming content.

Related techniques:
- G136: Providing a link at the beginning of a nonconforming Web page that points to a conforming alternate version


------------------------------

G191: - Providing a link, button, or other mechanism that reloads the page without any blinking content
Providing a link, button, or other mechanism that reloads the page without any blinking content

About this Technique
	- This technique relates to 2.2.2: Pause, Stop, Hide (Sufficient).
	- This technique applies to all technologies.

Description : This is a general technique for allowing people who cannot use a page with blinking content to turn the blinking content off. Conformance Requirement 1 allows for conforming alternate pages to be used to meet conformance. This technique is an example of that approach applied to success criteria 2.2.2. : It is important that the page without blinking content contain all of the information that was on the page with blinking content. : Note : Removing the content that was blinking from the page would only be satisfactory if the blinking content was redundant with non blinking content in the original page. : This technique can be used in combination with a style switching technique to present a page that is a conforming alternate version for non-conforming content. Refer to Using a style switcher to provide a conforming alternate version and Understanding Conforming Alternate Versions for more information.

Examples
A page has blinking text at the top warning users that they should not submit the page without first registering. A link at the very top of the page reloads the page with the blinking text replaced with text that is styled to be highly visible but does not blink.

Related techniques:
- G4: Allowing the content to be paused and restarted from where it was paused
- G11: Creating content that blinks for less than 5 seconds
- G152: Setting animated gif images to stop blinking after n cycles (within 5 seconds)
- G186: Using a control in the Web page that stops moving, blinking, or auto-updating content
- SCR22: Using scripts to control blinking and stop it in five seconds or less
- SCR33: Using script to scroll content, and providing a mechanism to pause it


------------------------------

G193: - Providing help by an assistant in the Web page
Providing help by an assistant in the Web page

About this Technique
	- This technique relates to:
	- 3.3.5: Help (Sufficient)
	- 4.1.3: Status Messages (Sufficient, together with ARIA22: Using role=status to present status messages)
	- This technique applies to all technologies.

Description : The purpose of this technique is to provide help using a multimedia avatar that provides assistance in using the Web page. An avatar can be particularly helpful to people with cognitive disabilities who may have trouble reading text. The use of visuals will help some people to focus on the material presented. : Note : The multimedia avatar must also satisfy relevant Success Criterion in Guideline 1.2.

Examples
The home page of an online banking application has an embedded avatar named Vanna. She gives new online banking clients a tour of the features provided in the application. The assistant can be started and stopped and paused. The client can rewind and fast forward through the material. A text alternative of the information is available from a link next to the avatar.
A volunteer site has a welcoming page for new volunteers. In it there is an application form. On the right side of the page there an interactive multimedia file with an avatar that explains all the features and sections of the application form.

Related techniques:
- G71: Providing a help link on every Web page
- G103: Providing visual illustrations, pictures, and symbols to help explain ideas, events, and processes
- H89: Using the title attribute to provide context-sensitive help


------------------------------

G194: - Providing spell checking and suggestions for text input
Providing spell checking and suggestions for text input

About this Technique
	- This technique relates to:
	- 3.3.5: Help (Sufficient)
	- 4.1.3: Status Messages (Sufficient when used with ARIA19: Using ARIA role=alert or Live Regions to Identify Errors)
	- This technique applies to all technologies.

Description : In this technique spell checking and suggestions for text are provided. Often people with cognitive disabilities have trouble spelling a word, but may be able to get the spelling approximately correct. A spell checking program will save them time-consuming research on how to spell the word. This may also be true for blind and low vision users who might make a mistake when typing. It will also help people with dexterity disabilities who may be using a head pointer, or who may have scanning software which makes it very slow and difficult to type. A spell-checking solution that provides word suggestion(s) and a simple mechanism to select one and input it into the text input field provides important help for these users and others.

Examples
A search engine has a form field for search terms. When the form is submitted, a server-side application checks the spelling. If the spelling doesn't match any words for that language, it sends back a page with a text message at the top saying "Did you mean ..." with a link to the suggested word. If the user clicks on the link the suggested term is entered into the form field and is resubmitted.
An airline has a on online ticket purchasing application. When a user types the name of a city into the form field a dropdown menu shows the closest match to the city in the top of the menu and other suggestions below.

Related techniques:
- G71: Providing a help link on every Web page
- G103: Providing visual illustrations, pictures, and symbols to help explain ideas, events, and processes
- G120: Providing the pronunciation immediately following the word
- G121: Linking to pronunciations
- H89: Using the title attribute to provide context-sensitive help


------------------------------

G195: - Using an author-supplied, visible focus indicator
Using an author-supplied, visible focus indicator

About this Technique
	- This technique relates to:
	- 1.4.11: Non-text Contrast (Sufficient)
	- 2.4.7: Focus Visible (Sufficient)
	- 2.4.13: Focus Appearance (Sufficient)
	- This technique applies to all technologies.

Description : The objective of this technique is enhance the focus indicator in the browser, by creating a visible one in the content. The default focus indicator in some browsers is a thin, dotted, black line. It can be difficult to see the line when it is around a form element which already has an outline, when the focused element is inside a table cell, when the focused element is very small, or when the background of the page is a dark color. Some browsers use a pale blue outline, which can be difficult to see on some backgrounds. : In this technique, when the user places focus on an element using the keyboard, the application makes that focus more visible, using a combination of a highly contrasting color, a thick line, and other visual indicators such as a glow.

Examples
Example 1: Links

A Web page has a dark background color and light text and links. When focus lands on a link, the link is outlined with a bright yellow line, 3 pixels wide.

Example 2: Form Elements

A Web page includes a form inside a table. The borders of both the table and the form elements are thin, black lines. When focus lands on a form element, the element is outlined with a 5 pixel red line that is partially transparent. The red is equivalent to a hex color of #FF3838, providing a 3.6:1 contrast ratio with the white background.

Example 3: Menus

A Web page includes an interactive menu with sub-menus. A user can move focus in the menu using the arrow keys. As focus moves, the currently focused menu item changes its background to a different color, which has a 3:1 contrast ratio with the surrounding items and a 4.5:1 contrast ratio with its own text.

Related techniques:
- G149: Using user interface components that are highlighted by the user agent when they receive focus
- G165: Using the default focus indicator for the platform so that high visibility default focus indicators will carry over
- C15: Using CSS to change the presentation of a user interface component when it receives focus
- SCR31: Using script to change the background color or border of the element with focus
- C40: Creating a two-color focus indicator to ensure sufficient contrast with all components
- C45: Using CSS :focus-visible to provide keyboard focus indication


------------------------------

G196: - Using a text alternative on one item within a group of images that describes all items in the group
Using a text alternative on one item within a group of images that describes all items in the group

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Sufficient).
	- This technique applies to any technology where a grouping of non-text content is used to present information or functionality.

Description : The objective of this technique is to avoid unnecessary duplication that occurs when a grouping of adjacent non-text content is used to present information or functionality. : In some cases, pages will present a group of images to convey information. When presented together or in a specific combination these groupings can convey different types of information. For example, two images of a star where one is presented in black and white and the other is colored can be used in combination to represent a user rating. For example, three filled stars followed by two unfilled stars might represent a rating of three out of five stars. : To use this technique, an author provides a text alternative that serves the equivalent purpose for the entire group and associates it with one item in the group. The other items in the group are then marked in a way that can be ignored by assistive technologies. In this way, the user is able to more efficiently identify the purpose of the group and can avoid duplication or confusion that may result had a text alternative been provided for each item in the group.

Examples
Example 1: A rating system in HTML

In the following example, a rating is shown as three filled stars and two empty stars. While a text alternative could have been provided for each of the five images, the author has instead provided the rating in the form "3 out of 5 stars" for the first image and has marked the others using null alt text.

<p>Rating: 
  <img src="star-filled" alt="3 out of 5 stars">
  <img src="star-filled" alt="">
  <img src="star-filled" alt="">
  <img src="star-empty" alt="">
  <img src="star-empty" alt="">
</p>
Example 2: Buttons created with groups of images in HTML

In this example, each button has a set of images to indicate the level of conformance to WCAG being claimed. This approach makes it possible for assistive technologies to avoid announcing things like, "Image A, Image A, Image A" etc.

<p>Conformance Level:</p>
<button name="A" type="button">
  <img src="a.png" alt="A">
</button>
<button name="AA" type="button">
  <img src="a.png" alt="AA">
  <img src="a.png" alt="">
</button>
<button name="AAA" type="button">
  <img src="a.png" alt="AAA">
  <img src="a.png" alt="">
  <img src="a.png" alt="">
</button>

Related techniques:
- G94: Providing short text alternative for non-text content that serves the same purpose and presents the same information as the non-text content
- H2: Combining adjacent image and text links for the same resource
- H67: Using null alt text and no title attribute on img elements for images that assistive technology should ignore


------------------------------

G197: - Using labels, names, and text alternatives consistently for content that has the same functionality
Using labels, names, and text alternatives consistently for content that has the same functionality

About this Technique
	- This technique relates to 3.2.4: Consistent Identification (Sufficient).
	- This technique applies to all content.

Description : The purpose of this technique is to help users with cognitive disabilities, blindness and vision loss to understand what will happen when they interact with a function on a Web page. If there are different labels on user interface components (i.e., elements, links, JavaScript objects, etc.) that have the same function, the user will not know that they have encountered a component with the same function and will not know what to expect. This could lead to many unnecessary errors. It is also recommended that this approach to consistent labelling be applied across the Web site.

Examples
A Web page has a form field at the top of the page labeled "Search". On the bottom of the page is another form field which provides the same function. It is also labeled "Search."
A picture of a question mark is used to steer users to sections of the page that provide additional information. Each time the picture of the question mark appears it has the same text alternative "more information."
A link to the Contact Us page of a Web site has the link text "Contact". At the bottom of the page there is a link that also goes to the Contact Us page. It also has the link text "Contact".

Related techniques:
- H44: Using label elements to associate text labels with form controls
- H65: Using the title attribute to identify form controls when the label element cannot be used


------------------------------

G198: - Providing a way for the user to turn the time limit off
Providing a way for the user to turn the time limit off

About this Technique
	- This technique relates to 2.2.1: Timing Adjustable (Sufficient).
	- This technique applies to all technologies.

Description : The objective of this technique is to provide a mechanism for people who cannot complete tasks within a specified time limit to turn off the time limit. : It is essential that the mechanism for turning off the time limit can be completed without a time limit itself and before the time limit for the page expires. To do this - the mechanism should be available at or near the top of the page so that it can be found and activated quickly by people with a wide range of disabilities.

Examples
A page has a listing of news headlines that automatically update every minute. At the top of the page is a link that turns off the updating.

Related techniques:
- G133: Providing a checkbox on the first page of a multipart form that allows users to ask for longer session time limit or no session time limit
- G180: Providing the user with a means to set the time limit to 10 times the default time limit
- SCR16: Providing a script that warns the user a time limit is about to expire
- G4: Allowing the content to be paused and restarted from where it was paused
- SCR33: Using script to scroll content, and providing a mechanism to pause it
- SCR36: Providing a mechanism to allow users to display moving, scrolling, or auto-updating text in a static window or area


------------------------------

G199: - Providing success feedback when data is submitted successfully
Providing success feedback when data is submitted successfully

About this Technique
	- This technique relates to:
	- 3.3.1: Error Identification (Advisory)
	- 3.3.3: Error Suggestion (Advisory)
	- 3.3.4: Error Prevention (Legal, Financial, Data) (Advisory)
	- 4.1.3: Status Messages (Sufficient when used with ARIA22: Using role=status to present status messages)
	- This technique applies to content that accepts user data input.

Description : The objective of this technique is to reduce the effort required for users to confirm that an action, such as submitting a Web form, was completed successfully. This can be accomplished by providing consistently presented feedback that explicitly indicates success of an action, rather than requiring a user to navigate through content to discover if the action was successful. : Significant effort can be expended by users who can not easily scan through information to confirm their action (such as that data submitted has been successfully entered into a database, sent to a person, or added to content being edited).

Examples
A user logs into a system and gets a response indicating that: "You have successfully logged in," so they do not need to navigate through the screen to find an indicator that they are logged in, such as finding their user name, or perhaps the login link replaced with a logout link. Finding these cues can be time consuming.
A user fills in a quiz or test and submits it. The response informs them that the test was successfully submitted, so that they don't need to navigate through data, such as a list of submitted tests, to confirm that the test is listed there.
A visitor creates an account on a Web site. After submission of the form, feedback suggests that "Registration was successfully submitted ...," If they are automatically logged in after registration, the response also says "...and you have been logged in." If confirmation is required, the feedback includes a message such as "...an email has been sent to you to which you must reply to confirm your registration."
A user submits a form with information directed at support staff. The feedback indicates that the "The message was successfully sent, and you should receive a reply within the next 48 hours."


------------------------------

G200: - Opening new windows and tabs from a link only when necessary
Opening new windows and tabs from a link only when necessary

About this Technique
	- This technique relates to:
	- 3.2.1: On Focus (Advisory)
	- 3.2.5: Change on Request (Advisory)
	- This technique applies to pages that open new windows.

Description : The objective of this technique is to limit the use of links or buttons that open new windows or tabs within Web content. In general, it is better not to open new windows and tabs since they can be disorienting for people, especially people who have difficulty perceiving visual content. However there are some situations where it is preferable from an accessibility perspective to open a new window or tab. Here are two such situations: : Opening a page containing context-sensitive information, such as help instructions, or an alternate means of completing a form, such as a calendar-based date picker, will significantly disrupt a multi-step workflow, such as filling in and submitting a form, if the page is opened in the same window or tab.
	- The user is logged into a secured area of a site, and following a link to a page outside of the secured area would terminate the user's logon. In this case opening external links in an external window allows the user to access such references while keeping their login active in the original window. : It is recommended that when links are opened to a new window, there is advance warning.

Examples
Example 1: Online Form

An online form provides extensive context-sensitive help for each form field on a separate page because there is too much text to include within the form. The links to the context-sensitive help open in new windows or tabs to prevent the loss of any form data that has already been entered.

Example 2: Secure Web site

A page on a secure Web site includes a link to an external page that is outside of the secure session. The link opens in a new window or tab since opening the link in the same window will break or destroy the secure session.

Example 3: Date Picker

An online form includes a date field that allows the user to manually type in the date or select a date from a calendar-based date picker on a separate page. The link to the calendar-based date picker opens in a new window or tab to prevent the loss of any form data that has already been entered.

Related techniques:
- H83: Using the target attribute to open a new window on user request and indicating this in link text
- SCR24: Using progressive enhancement to open new windows on user request


------------------------------

G201: - Giving users advanced warning when opening a new window
Giving users advanced warning when opening a new window

About this Technique
	- This technique relates to:
	- 3.2.1: On Focus (Advisory)
	- 3.2.2: On Input (Advisory)
	- This technique applies to pages that open new windows.

Description : The objective of this technique is to provide a warning before automatically opening a new window or tab. Opening new windows automatically when a link is activated can be disorienting for people who have difficulty perceiving visual content, and for some people with cognitive disabilities, if they are not warned in advance. Providing a warning allows the user to decide it they want to leave the current window, and the warning will help them find their way back, if they do decide they would like to go to the new window. It will help them understand that the "back" button will not work and that they have to return to the last window they had open, in order to find their previous location.

Examples
Example 1: Including the warning in the text describing a control

The name or label that describes a control can include the warning about opening in a new window.

<a href="knitting.html" rel="noopener" target="_blank">
  All about Knitting (opens in new window)
</a>
Example 2: Using CSS to provide a warning before opening a new window

The code below uses CSS to provide a warning before opening a new window.

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Link opens in new window notification</title>
  <style>
    body {
      background:#fff;
      color: #000;
      font: 1rem/1.5 system-ui, "Segoe UI", Roboto, Helvetica, sans-serif;
    }

    [hidden] {
      display:none;
    }

    .new-window-icon {
      fill:currentColor;
      height:0.75rem;
      margin-inline-start:0.3em;
      vertical-align:middle;
      width:0.75rem;
    }
  </style>
</head>
<body>
  <svg hidden>
    <symbol id="new-window-icon" viewBox="0 0 12 12">
      <title id="new-win-desc">opens in a new window</title>			
      ...
    </symbol>
  </svg>

  <h1>Link opens in new window notification</h1>
  <p>This is an example of an 
     <a aria-describedby="new-win-desc" href="https://example.com" rel="noopener" 
     target="_blank">external link<svg class="new-window-icon" aria-hidden="true"
     role="img"><use href="#new-window-icon"></use></svg></a></p>
  </body>
</html>

A working example of Using CSS to provide a warning before opening a new window is available.

Related techniques:
- H83: Using the target attribute to open a new window on user request and indicating this in link text
- SCR24: Using progressive enhancement to open new windows on user request
- G200: Opening new windows and tabs from a link only when necessary


------------------------------

G202: - Ensuring keyboard control for all functionality
Ensuring keyboard control for all functionality

About this Technique
	- This technique relates to 2.1.1: Keyboard (Sufficient).
	- This technique applies to all technologies that support interactive operation.

Description : The objective of this technique is to provide keyboard operation for all the functionality of the page. When all functionality of content can be operated through a keyboard or keyboard interface, it can be operated by those with no vision as well as by those who must use alternate keyboards or input devices that act as keyboard emulators like speech input software or on-screen keyboards. : A keyboard interface allows users to provide keystroke input to programs even if the computing device that they are using does not contain a hardware keyboard. For example, many mobile devices have keyboard interfaces within their operating system as well the option to connect external wireless keyboards. Applications can use the interface to obtain keyboard input either from an external keyboard or from other services that provide simulated keyboard output, such as switch devices, handwriting interpreters or speech-to-text applications. : To implement this technique, first determine what functionality is available to users on the page. In this step, it is important to consider functions performed using both the mouse and the keyboard together. Examples of functionality include the use of physical controls such as links, menus, buttons, checkboxes, radio buttons and form fields as well as the use of features like drag and drop, selecting text, resizing regions or bringing up context menus. Other examples of functionality may based on tasks such as adding or removing an item from a shopping cart or initiating a chat session with a sales representative. : Once the functionality of the content has been determined, the author verifies that each of the functions identified can be performed using only the keyboard. : Note : This does not necessarily mean that each of the individual controls can be used from the keyboard as long as there are multiple methods to perform the same function available on the page. Authors are advised to consider how users will discover any keyboard equivalents which are available.

Examples
A page with images used as links changes when the user hovers over the image with a mouse. To provide keyboard users with a similar experience, the image is also changed when a user tabs to it.
A page that allows users to click and drag items in a list to reorder them also includes a series of controls that allows keyboard users to move items up, down or to the beginning and end of the list.
The mobile version of a web site includes a menu button that is tapped to open a site menu, which is implemented as a floating overlay. To provide access to people using external keyboards or ability switches with their mobile device, the menu button and the site menu are both implemented such that they can be operated via the mobile device's keyboard interface.

Related techniques:
- G90: Providing keyboard-triggered event handlers


------------------------------

G203: - Using a static text alternative to describe a talking head video
Using a static text alternative to describe a talking head video

About this Technique
	- This technique relates to:
	- 1.2.3: Audio Description or Media Alternative (Prerecorded) (Sufficient)
	- 1.2.5: Audio Description (Prerecorded) (Sufficient)
	- This technique applies to videos of only a speaker.

Description : The purpose of this technique is to provide an alternative to audio description for synchronized media that has no important time based information contained in the video portion of the media. This particularly applies to "talking head" videos where a person is talking in front of an unchanging background, such as a press conference, company president talk, or government announcement, etc. In this case there are no "important visual details" which would warrant audio description. : Audio description is not necessary when there is one person speaking against an unchanging background because there is no time-based visual information in the video that is "important" to the understanding of the content. The environment is static and therefore can be described in a non-multimedia static format such as alternative text that is programmatically associated with the video. : All that is necessary in this case is a static text alternative which would contain a general description of the context of the environment, any opening/closing credits, any text that appears in the bottom of the video with the name of the speaker, and other basic information, if these are seen on the screen and cannot be heard in the audio. : This technique does NOT apply to a situation where there are multiple speakers and where the identity of each new speaker is not evident in the audio track but is identified on screen with visual text as they speak. In this case, audio description should be used, and this technique would not apply.

Examples
Example 1: A video of a CEO speaking to shareholders

A CEO is speaking to shareholders from their office. The video has a title page at the beginning of the video giving the date. When the speaker begins, there is a strip of text at the bottom of the video saying "Jane Doe, President of XYZ Cooperation". At the end of the video are title credits that say "produced by the Honest TV Productions Ltd."

As an alternative, there is a paragraph below the video which is associated with the video file using aria-describedby which says: "July 22, 2011, Jane Doe, President of XYZ cooperation, speaking from her office. Video produced by the Honest TV Productions Ltd."


------------------------------

G204: - Not interfering with the user agent's reflow of text as the viewing window is narrowed
Not interfering with the user agent's reflow of text as the viewing window is narrowed

About this Technique
	- This technique relates to 1.4.8: Visual Presentation (Sufficient).
	- This technique applies to all technologies.

Description : This technique helps avoid situations where horizontal scrolling may occur. Many people with cognitive disabilities and low vision users who do not use assistive technology have a great deal of trouble with blocks of text that require horizontal scrolling. It involves not interfering with the reflow of text if the window is narrowed. One of the best ways to do this is to define widths of text block containers in percentages. : HTML user agents automatically reflow text as the browser window is narrowed as long as the author does not specify widths using absolute measurements such as pixels or points.

Examples
Example 1

A newspaper site includes articles with columns that adjust with the user agents window width. Users with cognitive disabilities can narrow the column to a width that makes it easier to read.

Related techniques:
- C20: Using relative measurements to set column widths so that lines can average 80 characters or less when the browser is resized


------------------------------

G205: - Including a text cue for colored form control labels
Including a text cue for colored form control labels

About this Technique
	- This technique relates to 1.4.1: Use of Color (Sufficient).
	- This technique applies to all technologies that support color and text.

Description : The objective of this technique is to combine color and text or character cues to convey information. Most users can quickly scan the content to locate information conveyed by using color differences. Users who cannot see color can look or listen for text cues; people using Braille displays or other tactile interfaces can detect text cues by touch. : The text cue must be included as part of the programmatically determinable name for the control.

Examples
Example 1: Required fields in an HTML form

The instructions for an online form say, "Required fields are shown in red and marked with (required)." The cue "(required)" is included within the label element.

<style>
  .required {
    color:#ec0000;
  }
</style>
<label for="lastname" class="required">Last name (required):</label>
<input autocomplete="family-name" id="lastname" type="text" value="">

Related techniques:
- G14: Ensuring that information conveyed by color differences is also available in text


------------------------------

G206: - Providing options within the content to switch to a layout that does not require the user to scroll horizontally to read a line of text
Providing options within the content to switch to a layout that does not require the user to scroll horizontally to read a line of text

About this Technique
	- This technique relates to:
	- 1.4.8: Visual Presentation (Sufficient)
	- 1.4.10: Reflow (Sufficient)
	- This technique applies to all technologies that support style switching.

Description : There may be situations where an author needs to use a layout that requires horizontal scrolling. In that case, it is sufficient to provide options within the content that switch to a layout that does not require the user to scroll horizontally to read a line of text. This may be achieved using standard style switching technology. : It should be noted that it is also sufficient to lay out the content in such a way that horizontal scrolling is required to access content, but that it is not necessary to scroll horizontally in order to read a line of text. : For instance, a spreadsheet that requires horizontal scrolling is acceptable if no horizontal scrolling is necessary for each column individually (i.e., scrolling is only necessary to see other columns, but not for the left or right edges of each individual column). : Note : This technique can be used in combination with a style switching technique to present a page that is a conforming alternate version for non-conforming content. Refer to C29: Using a style switcher to provide a conforming alternate version and Understanding Conforming Alternate Versions for more information.

Examples
Example 1

A real estate company has an online annual report that has an identical layout to that of their print version, and as such, requires horizontal scrolling to read a line of text. A control is on the page that switches the stylesheet and provides a layout that does not require horizontal scrolling.

Example 2

A financial spreadsheet is online. It includes text explaining changes in the housing market in January. Off-screen to the right, there is a column with an explanation of changes to the market in September. The user can horizontally scroll to the September area and read each line of text without any further scrolling when the window size is maximized.

Related techniques:
- C20: Using relative measurements to set column widths so that lines can average 80 characters or less when the browser is resized


------------------------------

G207: - Ensuring that a contrast ratio of 3:1 is provided for icons
Ensuring that a contrast ratio of 3:1 is provided for icons

About this Technique
	- This technique relates to 1.4.11: Non-text Contrast (Sufficient).
	- This technique applies to all technologies that support graphical icons.

Description : The objective of this technique is to ensure graphical icons provide enough contrast for people with vision impairments. Not all graphics are within the scope of SC 1.4.11 Non-text contrast but if the icons are required to understand the content, then the icons need to have a contrast ratio of at least 3:1. : The success criteria for non-text contrast uses the term "graphical object" to cover small simple graphics, and parts of larger complex graphics. This technique focuses on solid color icons used on solid or gradient backgrounds. : When choosing the colors for graphics, consider the color(s) adjacent to that graphic, and test that the contrast ratio is at least 3:1. : Note : A selection of tools and applications for testing contrast ratios can be found in Understanding SC 1.4.3 Contrast (minimum).

Examples
Example 1: Solid icon color against the background

A solid icon such as a telephone symbol uses orange on a white background. The color orange (#E3660E) is tested against the white background (#FFFFFF) and it has a contrast ratio of 3.4:1.

Example 2: Solid icon color against a custom background

A solid icon such as a telephone symbol used within an orange background. The orange and white colors are the same as in example 1, in this case the contrast against the white background is not relevant, the white icon within the orange background is what provides the information in the icon and as a result needs to meet the contrast requirement.

Example 3: Solid icon with a gradient background

A solid icon such as a telephone symbol using a dark blue icon on a white-to-blue gradient background. The first test of the icon should be against the darkest (least contrasting) background that is adjacent to the icon color. If that is at least 3:1, it passes the success criterion.

Example 4: Solid icon with gradient background overlapping in contrast

A solid icon on a gradient background can overlap in contrast if the graphic is still understandable where it does not have contrast against all of the background. If you find the part of the gradient where it does not meet a 3:1 ratio with the graphic and treat that part as if it was removed, does the icon still convey the appropriate meaning?

A method of visualizing this is to remove the non-contrasting area and check that you can still understand the icon. If so, it is sufficient. The images below shows an icon on a gradient background, and a second version where it removes the area of the icon that does not meet the 3:1 contrast ratio. It is still recognizable as a phone icon, so passes the success criterion.

Related techniques:
- G18: Ensuring that a contrast ratio of at least 4.5:1 exists between text (and images of text) and background behind the text
- G145: Ensuring that a contrast ratio of at least 3:1 exists between text (and images of text) and background behind the text


------------------------------

G208: - Including the text of the visible label as part of the accessible name
Including the text of the visible label as part of the accessible name

About this Technique
	- This technique relates to 2.5.3: Label in Name (Sufficient).
	- This technique applies to all web technologies that include interactive controls (such as links or form inputs).

Description : The objective of this technique is to ensure that speech input users can operate web content reliably. : When speech input users interact with a web page, they usually speak a command followed by the reference to some visible label (like text in a button, the link text, or the text labelling input fields). For example, they may speak "click search" to activate a search button. : When speech recognition software processes speech input and looks for matches, it uses the "accessible name" of controls, which can be different from the visible label. For example, a button following a search input field may contain the text "go" but uses an invisible aria-label attribute with the value "search". Since aria-label takes precedence over the text included in the button, the accessible name of this button will be "search", not "go". The Accessible Name and Description Computation defines how the accessible name is constructed. : In situations where the visible label is considered inadequate as the accessible name, it is possible to supplement text in the accessible name. However, in order to meet 2.5.3 Label in Name, the text string that makes up the visible label must occur in its entirety in the accessible name. In most situations, where it is felt that additional context is needed, it is recommended that the visible text should precede the additional text. When authors make sure that the visible label of a control is included, intact, in the accessible name of that control, speech input users can be confident that their input will be correctly interpreted. : Note : Additional context may be more appropriately included using the Accessible Description (including through use of aria-describedby). This has the signficant benefit of improving context for some users of assistive technology without altering the accessible name.

Examples
Example 1: Link text matches the beginning of the accessible name

A link contains visible text and hidden link text. Both together make up the link's accessible name. The visible text comes first. The idea is to make the link more descriptive for users of assistive technologies.

<p>Go to <a href="code-of-conduct.html">Code of conduct <span class="hidden_accessibly"> of ACME Corporation</span></a><p>
Example 2: Generic link text concatenated with heading

A generic link is combined with the heading of the paragraph to give context. It is a variation on the first example, this time using aria-labelledby. The advantage of this implementation is that it uses existing visible text on the page, and so is more likely to be properly translated during any localization transformations.

<h4 id="poor">Insufficient Link Names Invade Community</h4>
<p>Citizens are reeling from the growing invasion of useless "read more" links appearing in their online resources. <a href="poor.html" aria-labelledby="generic poor"><span id="generic">More...</span></a>
Insufficient Link Names Invade Community

[The following link opens nothing] Citizens are reeling from the growing invasion of useless "read more" links appearing in their online resources. More...

Example 3: Link text included in aria-label

Where two strings cannot be grammatically or seamlessly combined using aria-labelledby, aria-label can be used to make a new name which includes the visible label.

...end of news story. <a href="poor.html" aria-label="Read more about Insufficient link names">Read more</a>
Example 4: The visible button text matches the beginning of the accessible name

The visible text inside a button element matches the beginning of accessible name, which also includes hidden text. The idea of the hidden text is to make the button more descriptive for users of assistive technologies.

<button>Send <span class="accessibly-hidden"> Mail</span></button>

Related techniques:
- ARIA7: Using aria-labelledby for link purpose
- ARIA8: Using aria-label for link purpose
- ARIA9: Using aria-labelledby to concatenate a label from several text nodes
- ARIA16: Using aria-labelledby to provide a name for user interface controls
- SCR30: Using scripts to change the link text


------------------------------

G209: - Provide sufficient contrast at the boundaries between adjoining colors
Provide sufficient contrast at the boundaries between adjoining colors

About this Technique
	- This technique relates to 1.4.11: Non-text Contrast (Sufficient).
	- This technique applies to for graphics which use multiple colours adjacent to each other.

Description : The objective of this technique is to ensure people with moderately low vision can distinguish boundaries between adjoining segments of color. : The success criteria for non-text contrast uses the term "graphical object" to cover small simple graphics, and parts of larger complex graphics. This technique focuses on solid color segments where the boundaries between colors convey meaning. : When selecting colors for graphics with multiple colors, consider adjoining colors and test that the contrast ratio is at least 3:1. If adjoining colors have less than 3:1 color contrast ratio difference add a border with at least a 3:1 color contrast with each color.

Examples
Example 1: Pie chart with alternative light/dark colors
The contrast between adjoining segments of the pie chart range from 5.8 to 9.4.
Example 2: Pie chart with borders between segments
The contrast between the segments of the pie chart range from 1.1 to 1.8. A border has been added with at least a 3:1 contrast ratio with the colors to distinguish between segments. .
Example 3: Map with border boundaries
The color contrast of areas within the map range between 1.3 and 1.8. A boundary line is added with a color contrast ratio of at least 3:1 with the area colors.
Example 4: Pie chart with black and white borders
The colored areas in the chart are both dark and light. A black and white boundary line is added to ensure sufficient contrast between both light and dark colors.

Related techniques:
- G207: Ensuring that a contrast ratio of 3:1 is provided for icons


------------------------------

G210: - Ensuring that drag-and-drop actions can be cancelled
Ensuring that drag-and-drop actions can be cancelled

About this Technique
	- This technique relates to 2.5.2: Pointer Cancellation (Sufficient).
	- This technique applies to any technology that supports pointer input (e.g. supporting any or all of the following: mouse pointer, touch on touch screen or trackpad, stylus input, or laser pointer input).

Description : The objective of this technique is to ensure that users who use a path-based drag-and-drop action to move an item from the initial location to a drop target can abort the action after picking up the target. This can be done either by releasing the item outside a drop area, or by moving the item back to its original position in a separate action that undoes the first action. A third option is to have a step after the element is dropped onto target, either with a dialog asking for confirmation of the action when the item is dropped, or providing an undo command. : Note : This technique addresses pointer actions where support has been implemented by authors, not gestures provided by the user agent (such as horizontal swiping to move through the browser history or vertical swiping to scroll through page content) or the operating system (e.g., gestures to move between open apps, or call up contextual menus of assistive technologies when these are enabled). : User Agent and Assistive Technology Support Notes : On touch screen devices, author-supplied path-based and multipoint gestures usually do not work when OS level assistive technologies (AT) like a built-in screenreader is turned on. AT generally consumes path-based or multipoint gestures so they would not reach the authored content. For example, a horizontal drag gesture may not move a slider thumb as intended by the author, but move the screen reader focus to the next or previous element. Some gestures may work if the user operates "pass through gestures" which are often unreliable as they may depend on factors of hardware, operating system, operating system "skin", operating system setting, or user agent.

Examples
A site shows a file directory. Files can be picked up and moved over a trash can icon. When the picked-up file is released outside this target, it reverts to the old position.
A site shows a file directory. Files can be picked up and moved over a trash can icon to delete it. When the picked-up file is released over the trash can, a modal dialog asks the user to confirm or cancel the delete action.
A kanban implementation of a project planning site shows different columns for phases of an activity. Users can pick up and move icons representing planning items to another column. When an item has been picked up and now follows the pointer, it can be moved outside the drop targets (columns) and dropped there to cancel the action. The item will then jump back to the old position.
A kanban implementation of an issue tracking system shows columns that indicate different phases in handling issues (such as new / processed / done / closed). There is no screen space outside the kanban columns. Users can pick up and move icons representing issues between columns. When an item has been dropped in another column, the action can be reversed by dragging the icon back to the original column where it will return to its original position (defined by sorting preferences).


------------------------------

G211: - Matching the accessible name to the visible label
Matching the accessible name to the visible label

About this Technique
	- This technique relates to 2.5.3: Label in Name (Sufficient).
	- This technique applies to all web technologies that include interactive controls (such as links or form inputs).

Description : The objective of this technique is to ensure that speech input users can operate web content reliably while not adversely affecting other users of assistive technology. : When speech input users interact with a web page, they usually speak a command followed by the reference to some visible label (such as text beside an input field or inside a button or link). For example, they may say "click search" to activate a button labelled Search. When speech recognition software processes speech input and looks for matches, it uses the accessible name of controls. Where there is a mismatch between the text in the label and the text in the accessible name, it can cause issues for the user. The simplest way to enable speech input users and meet 2.5.3 Label in Name is to ensure that the accessible name matches the visible text label. : Determining the appropriate label : Sometimes more than one text string will be positioned in the vicinity of a control that could be considered a candidate for its label. For example, a set of inputs that each have their own labels may also be preceded by a heading, an instruction or a group label (such as an HTML legend/fieldset or an ARIA group or radiogroup). Note that the term "group label" means something different than "label", both programmatically and in regard to 2.5.3 Label in Name. : The Understanding 2.5.3 Label in Name document recommends that only the text string adjacent to or in close proximity to an input should be treated as the label when assessing a control's label for the purposes of meeting 2.5.3 (see the section "Identifying label text for components"). There are both practical and technical reasons for restricting the designation of an input's label in this way. The technical reasons are discussed in the Understanding document's section called Accessible Name and Description Computation specification.

Examples

Mapping a visible label to the accessible name is achieved in many technologies by meeting 1.3.1 Information and Relationships through the proper use of native semantics. Many controls derive accessible names by correct nesting of elements, while other elements have specific attributes which are a valid means of providing or referencing an accessible name.

The accessible name should be assigned through native elements and semantics where possible. That helps ensure an exact match between the visible label and name.

Example 1: Anchor text provides both the link's label and its accessible name

Using conventional HTML, the text between the a element's tags provides both the link's visible text and the accessible name "Code of conduct":

<p>Go to our <a href="url-to-page-about-code.html">Code of conduct</a></p>
Non-working sample of anchor

Go to our Code of conduct

Example 2: Text in label element provides name for input via for attribute

The text between the label tags also serves as the checkbox input's accessible name "Notify me of delays" by using the for attribute which references the id of the input.

<input type="checkbox" id="notification" name="notify" value="delays">
<label for="notification">Notify me of delays</label>

Working sample of input
 Notify me of delays
Example 3: The button text provides the accessible name

The text inside a button element becomes both its visible label and its accessible name:

<button>Send</button>
Non-working sample of button
Send
Example 4: Simple Radio Button Group

Radio buttons typically appear in a group, where each button is labelled and the group of buttons is preceded by information which explains or categorizes the group.

Figure 1 "Call me when balance exceeds $10,000 radio group, with Yes and No choices

The label for each component should be restricted to "Yes" and "No". To meet 1.3.1 Information and Relationships and 3.3.2 Labels or Instructions, the "Call me…" text can be coded to convey the relationship to ATs, in this example by using a fieldset and legend.

If the label is not restricted to the string adjacent to the radio button, multiple interpretations of what constitutes the label can result in less uniform functionality. If "Yes" alone is not the label for the first radio button, is it "Call me when balance exceeds $10,000"? Or is it a combination of text strings, in which case is the order "Call me when balance exceeds $10,000 Yes" or "Yes, Call me when balance exceeds $10,000"? Decisions to combine text strings can have negative effects on screen reader users since the order of concatenation can affect meaning. In this example, "No, call me when balance exceeds $10,000" could be very confusing to a screen reader user.

<fieldset>
<legend>Call me when balance exceeds $10,000?</legend><br />
<input type="radio" id="yes" name="callme" value="yes">
<label for="yes">Yes</label>
<input type="radio" id="no" name="callme" value="no">
<label for="no">No</label>
</fieldset>


Working example of Simple Radio Button Group

Example 5: Checkbox Groupings

For checkbox groupings, implementations that attempt to incorporate more than just the immediate checkbox label into the accessible name can also be problematic if not isolated to the adjacent text string.

Figure 2 What do you value in our service? checkbox group, with 4 choices.

In Figure 2, there is a long text string that combines a group label and instruction, "What do you value in our service (check all that apply)?" Each of the checkboxes also has its own one- or two-word label. In regard to 2.5.3, the labels for the components should be restricted to "Courtesy", "Promptness", "Store Hours" and "Knowledge".

Attempting to include the preceding text as part of the accessible name can potentially make it more difficult to isolate a control by spoken commands for speech-input users. Such a construction will also negatively increase verbosity for screen reader users (with the combined text strings read out for each of the inputs before the input's state). The simplest solution is to restrict the accessible name to the text immediately beside the checkboxes, using similar techniques to those for the standard radio button group.

Example 6: Stacked Labels

Although labels for comboboxes, dropdown lists, text inputs, and other widgets are typically oriented immediately to the left of the component, there is an alternative established convention where labels are stacked above the inputs, aligned with their left edge.

Figure 3 Two inputs with the labels positioned above and to the left.

In Figure 3, the inputs are stacked and left-aligned, with the labels immediately preceding each input, also left-aligned. There is additional white space between the label and the preceding input so that the label is closest to its associated text input. Stacked labels are relatively common in mobile designs, where horizontal space is constrained.

Figure 4 shows a variation on stacked labels, where hints and guidance are included between the label and the input. This design does not provide an adjacent label. However, the "New Password" label is still considered to be in close enough proximity, especially given its size and boldness relative to the smaller and lower-contrast guidance text. The associations are reinforced programmatically, where the hint text is given a role of aria-describedby and the label is properly associated with the input.

Figure 4 New Password label positioned above input with a smaller-point text string about the password requirements positioned between the large label and the input.

The hint text in such implementations should be kept to a single line where possible, since accessibility issues can arise where a more lengthy hint separates the label from its input. Figure 4 illustrates that the concept of "adjacent text" is a guide for label interpretation, but cannot always serve as a hard rule.

<form>
<label class="label" for="example-2">
Password
</label>
<span id="example-2-hint" class="hint">
Passwords must be 10 or more characters, and contain at least one capital, numeric and non-alphanumeric.
</span>
<input class="input" id="example-2" name="example-2" type="text" aria-describedby="example-2-hint">
</form>


Working example of stacked labels

Example 7: Range of inputs with few labels

A less common disparity between labels and inputs can occur when a group of radio buttons is set up to elicit a choice across a range. The labels may only be located at each end of the range or may be interspersed at various points in the range.

Figure 6 Line of 5 radio buttons with Hated it and Loved it labels at each end

The two labels, "Hated it" and "Loved it", are adjacent to the first and last radio buttons, and should be their accessible names. Speech-input users can speak either of these labels to select a radio button, and then use arrow navigation (e.g., "Press right arrow") to modify the selection. "Rate your response" is the text describing the whole widget and can be associated as the group label (here using legend). The three middle radio buttons do not have visible labels. In the code example they are given title attributes of "Disliked", "So-so" and "Liked" in order to meet 3.3.2 Labels or Instructions.

<fieldset>
  <legend>Rate your response</legend>
  <label for="hated">Hated it</label>
  <input type="radio" name="meal" id="hated" value="hated">
  <input type="radio" name="meal" id="poor" value="poor" title="Disliked">
  <input type="radio" name="meal" id="neutral" value="neutral" title="So-so">
  <input type="radio" name="meal" id="okay" value="okay" title="Liked">
  <input type="radio" name="meal" id="loved" value="loved">
  <label for="loved">Loved it</label>
</fieldset>


Working example of range of inputs

Example 8: Text in parentheses and punctuation

Technique G211 is not intended to complicate existing conventions for the construction of accessible form inputs. As described in the Punctuation and capitalization and Text in parentheses subsections of the Understanding document, information does not always need to be included in the accessible name in an attempt to meet the Label in Name requirement, especially where the text would not normally be spoken when using speech recognition to navigate to controls. Where there are established ways of ensuring information and relationships conveyed visually are present programmatically, it is acceptable to leave text in parentheses and punctuation out of the accessible name.

The following snippet demonstrates possible techniques mentioned in the Understanding document. Since the required field is programmatically indicated, and the input restrictions on the date are surfaced through aria-describedby, the asterisk and parenthetical information has been left out of the accessible name.


<label for="name">Name</label> *
<input type="text" name="name" id="name" required>
<label for="birth">Birth date</label> <span id="mask">(YYYY-MM-DD)</span>
<input type="text" name="birth" id="birth" aria-describedby="mask">
Working sample of inputs with simplified accessible names
Name *
Birthdate (YYYY-MM-DD)

<fieldset>
<legend>Rate your response</legend>
<label for="hated">Hated it</label>
<input type="radio" name="meal" id="hated" value="hated">
<input type="radio" name="meal" id="poor" value="poor" title="Disliked">
<input type="radio" name="meal" id="neutral" value="neutral" title="So-so">
<input type="radio" name="meal" id="okay" value="okay" title="Liked">
<input type="radio" name="meal" id="loved" value="loved">
<label for="loved">Loved it</label>
</fieldset>


Working example of range of inputs

Related techniques:
- H44: Using label elements to associate text labels with form controls
- H71: Providing a description for groups of form controls using fieldset and legend elements
- H85: Using optgroup to group option elements inside a select
- ARIA17: Using grouping roles to identify related form controls


------------------------------

G212: - Using native controls to ensure functionality is triggered on the up-event.
Using native controls to ensure functionality is triggered on the up-event.

About this Technique
	- This technique relates to 2.5.2: Pointer Cancellation (Sufficient).
	- This technique applies to nearly all technologies.

Description : The objective of this technique is to ensure that users who attempt to interact with a control do not trigger the action of the event accidentally. This can be accomplished most directly by relying on the pointer's up-event (for example, the onclick or mouseup event). : The easiest way to meet this success criterion is simply to use the default behavior of controls and not override that behaviour with an explicit down-event trigger. The up-event is the default behaviour for almost all controls and any programming or markup language. : In native languages where a control is fired on the down event it is usually for good reason and is easily recoverable. For instance, an HTML input element could have the cursor enter the editable area on the “pointer down” event, because the action is trivially reversible, and as such meets the requirements of the Pointer Cancellation SC. This is because if the user realizes they made a mistake after pressing down the control, they can simply move their pointer away from the hit area while still holding down the pointer, then release their pointer and the event is not triggered.

Examples
Example 1: Using an native onclick event in JavaScript

In JavaScript native onclick events are triggered on the up-event by default.

Example 2: Using a native button or link in HTML

In HTML native <button> or <a href ....> onclick events are triggered on the up-event by default.

Note

The <button> element doesn't do anything on its own (unless its part of a <form>, and does NOT have <type="button">, in which case it submits the form). Authors should rely on input-agnostic click handlers.

Example 3: Using a native button in iOS or Android

In native buttons in iOS and Android onclick events are triggered on the up-event by default.

Note

The WCAG standard itself applies to web pages, and therefore this example is provided as helpful supplementary advice for those looking to implement the WCAG2ICT for native applications.


------------------------------

G213: - Provide conventional controls and an application setting for motion activated input
Provide conventional controls and an application setting for motion activated input

About this Technique
	- This technique relates to 2.5.4: Motion Actuation (Sufficient).
	- This technique applies to web pages that detect device or user motion such as shaking or tilting and use this motion as a means of input. If the motion itself is essential to the application's function, then this technique does not apply.
	- This technique also does not relate to movement of users through space as registered by geolocation sensors or beacons, or events observed by the device other than intentional gesturing by the user. It also does not cover indirect motion associated with operating a keyboard, pointer, or assistive technology.

Description : The objective of this technique is to ensure that: : People who use mounted devices or who cannot precisely manipulate a device are able to provide inputs through more conventional user interface components, and
	- People who may accidentally activate sensors due to tremors or other motor impairments have the ability to turn off motion actuation to prevent such accidental triggering of functions. : When a device sensor such as an accelerometer or gyroscope is used to gather input: : A button, link, or other conventional control is provided that does not rely on sensor input, and
	- A setting is provided to allow the user to turn off the sensor data.

Examples
Example 1: Shake to undo

After text is entered in a field, shaking a device shows a dialog offering users to undo the entry. Supporting use of the backspace key and/or providing a clear button next to the text field offers the same functionality.

Shake to undo can be turned off in a settings page.

Example 2: Motion Activated Slider

A slider can be adjusted by tipping the device to the left and right. There are also buttons to achieve the same functionality, and a tick-box that prevents the motion from having an effect.

Working example of a slider with motion actuation.


------------------------------

G214: - Using a control to allow access to content in different orientations which is otherwise restricted
Using a control to allow access to content in different orientations which is otherwise restricted

About this Technique
	- This technique relates to 1.3.4: Orientation (Sufficient).
	- This technique applies to when the orientation of the page is locked, provide a button to allow a user to change the orientation.

Description : The objective of this technique is to allow users to access content in the way the user prefers. A content provider may expect that most users will view content using a specific device orientation or may expect that a user will want to maintain the original view within the device. As a result the provider then prevents the content from rotating. By providing a control to allow the user to rotate the content, someone who needs to use a particular orientation will be able to view the content in a comfortable manner. For example, a person who cannot hold the device and has it mounted attached to a wheelchair or bed. : Note : Many users will expect to use OS-level settings to prevent the orientation from changing. As a result, it is usually preferable to satisfy this Success Criterion by not restricting the content's ability to adapt to changes in orientation and allowing users to use the OS orientation lock when desired.

Examples
Example 1: An e-Reader application

Users of an e-Reader web application sometimes read when lying down on their side. In this situation, the device is viewed by the user in portrait mode even though the device is in the landscape orientation with regard to gravity. The developer locks the content into the portrait orientation to allow for this reading behavior, but also provides a control to allow users who have devices mounted in a specific orientation to achieve the desired viewing orientation.

Related techniques:
- F97: Failure due to locking the orientation to landscape or portrait view


------------------------------

G215: - Providing controls to achieve the same result as path based or multipoint gestures
Providing controls to achieve the same result as path based or multipoint gestures

About this Technique
	- This technique relates to 2.5.1: Pointer Gestures (Sufficient).
	- This technique applies to any technology that supports pointer input (e.g., supporting any or all of the following: mouse pointer, touch on touch screen or trackpad, stylus input, or laser pointer input).

Description : The objective of this technique is to ensure that users who have difficulties performing path-based gestures can operate a content slider with a single pointer (e.g., a single tap on a touch screen or a single mouse click). A content slider contains chunks of content in a row. Usually several chunks of content are hidden, and only one chunk is visible at any time. Left and right horizontal swiping over the visible part of the slider brings adjacent hidden chunks of content into view. Providing controls (for example, arrow buttons) as alternative means of input allows advancing the slider with single pointer input. : Note : On touch screen devices, author-supplied path-based gestures usually do not work when OS level assistive technologies (AT) like a built-in screenreader are turned on. This is because AT generally consumes a path-based gestures so they would not reach the authored content. For example, a horizontal swipe gesture over the content slider will not work as intended by the author, but move the screen reader focus to the next or previous element. Some gestures may work if the user operates "pass-through gestures" which are often unreliable as they may depend on factors of hardware, operating system, operating system "skin", operating system setting, or user agent. : Note : This technique addresses gestures where support has been implemented by authors, not gestures provided by the user agent (such as horizontal swiping to move through the browser history or vertical swiping to scroll through page content) or the operating system (e.g., gestures to move between open apps, or call up contextual menus of assistive technologies when these are enabled).

Example
A content slider allows users to swipe left and right to reveal adjacent chunks of content. There are also next and previous buttons that enable users to advance to the next or previous chunks of content.


------------------------------

G216: - Providing single point activation for a control slider
Providing single point activation for a control slider

About this Technique
	- This technique relates to 2.5.1: Pointer Gestures (Sufficient).
	- This technique applies to any technology that supports pointer input (e.g. supporting any or all of the following: mouse pointer, touch on touch screen or trackpad, stylus input, or laser pointer input).

Description : The objective of this technique is to ensure that users who have difficulties performing path-based gestures can operate a control slider. A control slider is a track with a "thumb" that you move along the track to set a value. : Screenshot of an example control slider showing the thumb in the middle of the track. : It allows a user to set a value in a certain range, e.g. setting the volume, changing the hue value of a color, putting in the amount of money needed in a loan calculator, or picking a sum to be donated to a charity. A slider that requires path-based gestures would use swiping left or right to change the value, or dragging the thumb of the slider in a specific direction to change the value. : A simple fallback for activation without a path-based gesture is to make the control slider track clickable. This way, a value can be specified using a single tap or click on the track. : Providing controls (e.g., arrow buttons) as alternative also allows incrementing or decrementing the value with taps or clicks. This can allow for a more fine-grained setting of the value. : Note : On touch screen devices, author-supplied path-based gestures usually do not work when an OS level Assistive Technology (AT) like a built-in screenreader are turned on. This is because AT generally consumes path-based gestures so they would not reach the authored content. When custom controls are built on top of native controls, however, these may also be operable with AT gestures such as vertical swiping to change the value (see example 1).

Example

A custom control slider built on top of a native slider (input type range) allows users to swipe left and right or drag the slider thumb to change the value of the slider. The slider track allows tapping or clicking to set the slider thumb to the activated position. Standard buttons on either side allow for incrementing and decrementing the slider value by tap, click or keyboard activation.

Working example of custom control slider


------------------------------

G217: - Providing a mechanism to allow users to remap or turn off character key shortcuts
Providing a mechanism to allow users to remap or turn off character key shortcuts

About this Technique
	- This technique relates to 2.1.4: Character Key Shortcuts (Sufficient).
	- This technique applies to any technology that supports scripting.

Description : Some authors provide shortcuts in their applications to allow for faster user interaction. However, where such shortcuts involve only character keys (letters, numbers, punctuation or symbol characters) without modifiers, they create challenges for speech input users as well as some keyboard users who lack the ability to type accurately. : To prevent accidental activation, authors must allow users to turn off or reconfigure shortcuts that are made up of only character keys. Reconfiguring the shortcut may involve the ability to add a modifier key such as Ctrl, or authors may elect to allow users to alter the character keys assigned in addition to adding a modifer. Providing a mechanism to turn off or reassign the shortcut ensures more users can successfully interact with the application. : Note : If the keyboard shortcut is only active when a particular user interface component has focus, then the author does not need to provide an override mechanism. For example, in a select element, it is expected behaviour that pressing a letter key will reposition to the next item within the select element that begins with that character. This shortcut is only triggered when the select element has focus, and so it does not interfere with a user's ability to interact with the rest of the page. : Locating and testing for character key shortcuts : An initial challenge for testers is identifying if author-created shortcuts exist, and then determining if existing shortcuts are triggered by character keys without modifiers. Where testers have access to the develop team, the existence and nature of shortcut keys can often be determined simply by asking involved designers and developers. Where reliable information from the authors is not available, the presence of shortcuts can possibly be identified by checking code (for example, in javascript, the presence of keydown, keyup and keypress listeners). Another means of identifying shortcuts is to review documentation. Where none of these strategies provide information on the presence of keyboard shortcuts, manual tests will need to be completed to search for the existence of character key shortcuts. Review the test procedure in failure technique F99 for guidance.

Examples
Example 1: Author provides a simple mechanism to disable shortcuts in a web-based email client

An email client contains single-character shortcuts so that keyboard users can more rapidly interact with the application (e.g., the R key replies to the current item in the inbox, the D key deletes it, the S key stars it). These keys do not apply while users are composing emails; however, users may become confused about whether the keyboard focus is in a compose pane or the inbox and, while in the inbox, inadvertently delete a message by trying to compose a word containing the letter D. To overcome this problem, the author provides a toggle button for the shortcuts, allowing users to easily turn them off or on.

Example 2: Author provides a menu option where users can remap shortcuts

A web-based application has single-character shortcuts for functions which are different than those a user regularly uses with a software application installed locally. Since the author has provided a menu where the user can reassign both the shortcut keys and the modifiers, the user is able to reassign the shortcut to a familiar combination.


------------------------------

G218: - Email link authentication
Email link authentication

About this Technique
	- This technique relates to:
	- 3.3.8: Accessible Authentication (Minimum) (Sufficient)
	- 3.3.9: Accessible Authentication (Enhanced) (Sufficient)
	- This technique applies to technologies that support authentication.

Description : The objective of this technique is to provide an easy way for users to authenticate without needing a password. This technique involves providing an authentication mechanism where the user can enter their email address, and they are sent an email with a link to click. When the user clicks the link in the email, they are directed back to the website and automatically logged in. : Note : The security of the email link mechanism is not the focus of this technique, but it generally involves sending a time limited token as part of the email.

Examples
Example 1: Author provides an email mechanism to login with a link

A social media website has a username and password based login mechanism. As part of the forgotten password feature, there is a separate link to login with an email. When the user enters their email and submits the form, the site sends an email to the user. Clicking the link in the email opens the website and the user is logged in.


------------------------------

G219: - Ensuring that an alternative is available for dragging movements that operate on content
Ensuring that an alternative is available for dragging movements that operate on content

About this Technique
	- This technique relates to 2.5.7: Dragging Movements (Sufficient).
	- This technique applies to content using any technology which supports pointer input.

Description : The objective of this Technique is to ensure that people with motor impairments who cannot carry out dragging movements are presented with an alternative single pointer interaction that does not involve dragging. : Some direct manipulation interfaces allow users to pick up targets and use dragging movements to move them to another position, for example, to change the position of an item in a priority list, or to move a task on a Kanban or planning board. : Such dragging movements are difficult or impossible to carry out for some users with motor disabilities. The alternative to dragging movements operates the underlying function by one or several single pointer activations that don't require dragging. A single tap or click may reveal controls (arrows) to move a target in a stepwise fashion; open a drop-down menu where the drop position can be selected; or allow moving it to an ajacent postion by a swipe gesture.

Examples
Example 1
A list of items can be re-ordered by picking up an item and dragging it upwards or downwards. Other elements move dynamically to open a gap where the picked-up target can be dropped. After a single pointer activation, the list items display up and down arrows which allow a step-wise re-ordering of the list via single pointer inputs (taps or clicks at the up or down arrow).
A vertical priority list indicates the priority of items listed. Each item can be ‘picked up’ with a pointer and dragged up or down to another position. The other list items rearrange dynamically. To the left of each list item, a number in a text field shows the current priority position. For any of the items, users can put in another number. This leads to a dynamic reordering and renumbering of the priority list.
In a Kanban implementation for process management, tasks can be dragged horizontally from one ‘swimming lane’ to another in order to change the status of tasks (for example, to change the status of a task from “in process” to “completed”). One or several items in a lane can be selected by a single tap or click. A single pointer activation of a drop-down menu labelled “Move selected items to” offers a selection of drop targets (other lanes). A further single pointer activation over the desired menu item moves targets to the specified lane.
In a radial control widget, the visual indicator of the current value of the control can be dragged to a different position. Users can also click or tap on another position of the radial control to change the value.

Related techniques:
- G215: Providing controls to achieve the same result as path based or multipoint gestures


------------------------------

G220: - Provide a contact-us link in a consistent location
Provide a contact-us link in a consistent location

About this Technique
	- This technique relates to 3.2.6: Consistent Help (Sufficient).
	- This technique applies to technologies that contain links.

Description : The objective of this technique is to provide a mechanism for finding contact details in a consistent location across pages to make it easier for users to find it. The interactive item in the Web page is a link to the contact details page. The programmatic and visual location is consistent on each page in the set of web pages, when viewed within the same size viewport. Activating the link brings users to a Web page with contact details such as a phone number and/or email address.

Examples
Example 1: A link at the top of the page

An on-line job application asks for many types of information from the user, such as their identification number, but they may have several and not know which one to enter. They may need more information from someone that can answer their question when the contextual help provided does not meet their needs. One of the first links that the user reaches when tabbing through the page is titled "Contact Us". This link is also visually in the same location on each page. Activating the link brings the user to the contact details page. The contact details page has an email address for a company representative or general information inbox which is then shared with appropriate personnel.

Example 2: A link in the footer region

A Web page's footer region contains links repeated on every page in a set of web pages. The visual and programmatic order are consistent when viewed in the same size display. One of the first links in the footer region is labeled visually and programmatically "Contact Us". A user activates the link and is brought to the contact details page. The contact details page has an email address for a company representative or general information inbox which is then shared with appropriate personnel.

Example 3: A link sometimes in a disclosure widget

On some pages in a set of web pages, there is a link to a help mechanism directly on the page. On one or more other pages in the set, the link is within a disclosure widget which is in the same relative order as the link that is directly on the page.

Note

Although this example technically passes the Success Criterion, it creates a less consistent user experience and is less preferable than consistently placing a link directly on the page.


------------------------------

G221: - Provide data from a previous step in a process
Provide data from a previous step in a process

About this Technique
	- This technique relates to 3.3.7: Redundant Entry (Sufficient).
	- This technique applies to any technology that supports user input.

Description : The objective of this technique is to provide information that was previously provided by the user or by the system, rather than requiring the user to remember and re-enter the information from a previous step. This improves success for individuals with cognitive and learning disabilities and memory impairments.

Examples
Example 1: Populate previously entered information with a trigger

An ecommerce site provides a checkbox that triggers the shipping address to be pre-populated based on the billing address the user had entered in a previous step.

Example 2: Automatically populate information based on previous answers

During a two-step process for setting up a business, the first step provides a business identification number after the user enters a name, and address. The second step requires creating a user profile. The business identification number, name and address are prepopulated.

Example 3: Display the information from a previous step

During a two-step process for setting up a business, the first step provides a business identification number after the user enters a name and address. The second step requires creating a user profile. The interface allows the user to select the business they just set up with all associated information.


------------------------------

G223: - Using an author-supplied, highly visible focus indicator
Using an author-supplied, highly visible focus indicator

About this Technique
	- This technique is not referenced from any Understanding document.
	- This technique applies to all technologies.

Description : The objective of this technique is enhance the focus indicator in the browser, by creating a highly visible one in the content. This technique is very similar to G195, but with a stronger indicator to meet Focus Appearance.

Examples
Example 1: Links

A Web page has a dark background color and light text and links. When focus lands on a link, the link is outlined with a bright yellow line, 3 pixels wide.

Example 2: Form Elements

A Web page includes a form inside a table. The borders of both the table and the form elements are thin, black lines. When focus lands on a form element, the element is outlined with a 5 pixel red line that is partially transparent. The red is equivalent to a hex color of #CA0000, providing a 6:1 contrast ratio with the white background.

Example 3: Menus

A Web page includes an interactive menu with sub-menus. A user can move focus in the menu using the arrow keys. As focus moves, the currently focused menu item changes its background to a different color, which has a 15:1 contrast ratio with the surrounding items (whilst maintaining text contrast).

Related techniques:
- G149: Using user interface components that are highlighted by the user agent when they receive focus
- G165: Using the default focus indicator for the platform so that high visibility default focus indicators will carry over
- C15: Using CSS to change the presentation of a user interface component when it receives focus
- SCR31: Using script to change the background color or border of the element with focus

--------------------------------------------------

File: html.json
==================================================

H2: - Combining adjacent image and text links for the same resource
Combining adjacent image and text links for the same resource

About this Technique
	- This technique relates to:
	- 1.1.1: Non-text Content (Sufficient)
	- 2.4.4: Link Purpose (In Context) (Advisory)
	- 2.4.9: Link Purpose (Link Only) (Advisory)
	- This technique applies to HTML documents that contain links.

Description : This objective of this technique is to provide both text and iconic representations of links without making the web page more confusing or difficult for keyboard users or assistive technology users. Since different users finding text and icons more usable, providing both can improve the accessibility of the link. : Many links have both a text and iconic representation adjacent to each other, but rendered in separate a elements. Visually they appear to be a single link, but many users encounter them as adjacent identical links. For a keyboard user, it is tedious to navigate through redundant links. For users of assistive technologies, it can be confusing to encounter successive identical links. When the text alternative for the icon is a duplicate of the link text, it is repetitive as screen readers read the description twice. : If the author omitted alternative text from the link image, it would fail Success Criterion 1.1.1 because the text alternative would not serve the same purpose as the graphical link. : This technique provides such links by putting the text and image together in one a element and providing null alternative text on the image to eliminate duplication of text. In this way, both representations of the link are provided, but keyboard users only encounter one link and assistive technology that provides users with link lists for a web page do not include duplicate links. : Sometimes the text and the icon link are rendered in separate, adjacent table cells to facilitate page layout. Although WCAG 2 does not prohibit the use of layout tables, CSS-based layouts are recommended in order to retain the defined semantic meaning of the HTML table elements and to conform to the coding practice of separating presentation from content. If CSS is used, this technique can be applied to combine the links.

Examples
Example 1

The icon and text are contained in the same a element.

<a href="products.html">
  <img src="icon.gif" alt="">Products page
</a>
Example 2

A link contains an icon and text, and the site help refers to the icon. The img has a text alternative which is the name used for the icon in the site help, which describes clicking the home page icon.

<a href="home.html">
  <img src="house.gif" alt="home page icon">Go to the home page
</a>

Related techniques:
- G91: Providing link text that describes the purpose of a link
- G94: Providing short text alternative for non-text content that serves the same purpose and presents the same information as the non-text content
- H30: Providing link text that describes the purpose of a link for anchor elements
- C9: Using CSS to include decorative images
- F89: Failure of Success Criteria 2.4.4, 2.4.9 and 4.1.2 due to not providing an accessible name for an image which is the only content in a link


------------------------------

H24: - Providing text alternatives for the area elements of image maps
Providing text alternatives for the area elements of image maps

About this Technique
	- This technique relates to:
	- 1.1.1: Non-text Content (Sufficient)
	- 2.4.4: Link Purpose (In Context) (Sufficient)
	- 2.4.9: Link Purpose (Link Only) (Sufficient)
	- This technique applies to HTML documents that contain area elements.

Description : The objective of this technique is to provide text alternatives that serve the same purpose as the selectable regions of an image map. An image map is an image divided into selectable regions defined by area elements. Each area is a link to another Web page or another part of the current Web page. The alt attribute of each area element serves the same purpose as the selectable area of the image.

Examples
Example 1

This example uses the alt attribute of the area element to provide text that describes the purpose of the image map areas.

<img src="welcome.gif" usemap="#map1" 
     alt="Areas in the library. Select an area for more information on that area."> 
<map id="map1" name="map1">
  <area shape="rect" coords="0,0,30,30" href="reference.html" alt="Reference">
  <area shape="rect" coords="34,34,100,100" href="media.html" alt="Audio visual lab">
</map>

Related techniques:
- G91: Providing link text that describes the purpose of a link
- H30: Providing link text that describes the purpose of a link for anchor elements


------------------------------

H25: - Providing a title using the title element
Providing a title using the title element

About this Technique
	- This technique relates to 2.4.2: Page Titled (Sufficient when used with G88: Providing descriptive titles for Web pages).
	- This technique applies to HTML.

Description : All HTML documents, including those in frames, have a title element in the head section that defines in a simple phrase the purpose of the document. This helps users to orient themselves within the site quickly without having to search for orientation information in the body of the page. : Note that the (mandatory) title element, which only appears once in a document, is different from the title attribute, which may be applied to almost every HTML element.

Examples
Example 1

This example defines a document's title.

<!doctype html>
<html lang="en">
  <head>
    <title>The World Wide Web Consortium</title>     
  </head>
  <body>
      ...   
  </body> 
</html>

Related techniques:
- G88: Providing descriptive titles for Web pages
- G127: Identifying a Web page's relationship to a larger collection of Web pages


------------------------------

H28: - Providing definitions for abbreviations by using the abbr element
Providing definitions for abbreviations by using the abbr element

About this Technique
	- This technique relates to 3.1.4: Abbreviations (Sufficient when used with G102: Providing the expansion or explanation of an abbreviation).
	- This technique applies to HTML.

Description : The objective of this technique is to provide expansions or definitions for abbreviations by using the abbr element. It is always appropriate to use the abbr element for any abbreviation, including acronyms and initialisms.

Examples
Example 1: Using abbr element to expand abbreviations
<p>Sugar is commonly sold in 5 <abbr title="pound">lb.</abbr> bags.</p>
<p>Welcome to the <abbr title="World Wide Web">WWW</abbr>!</p>
Example 2: Using dfn and abbr element to define abbreviations
<p>Tasini 
  <dfn id="etal"><abbr title="and others">et al.</abbr></dfn>
  <abbr title="versus">v.</abbr>
  The New York Times <abbr title="and others">et al.</abbr> is the landmark lawsuit 
  brought by members of the National Writers Union against ...
</p>
Example 3: Using the abbr element to expand an acronym
<p>Recent updates to the <abbr title="Cascading Style Sheets">CSS</abbr> color module ...</p>
Example 4: Using the abbr element to expand an initialism
<p><abbr title="British Broadcasting Corporation">BBC</abbr></p>

Related techniques:
- G102: Providing the expansion or explanation of an abbreviation


------------------------------

H30: - Providing link text that describes the purpose of a link for anchor elements
Providing link text that describes the purpose of a link for anchor elements

About this Technique
	- This technique relates to:
	- 1.1.1: Non-text Content (Sufficient)
	- 2.4.4: Link Purpose (In Context) (Sufficient)
	- 2.4.9: Link Purpose (Link Only) (Sufficient)
	- This technique applies to HTML documents that contain links, (<a href> elements).

Description : The objective of this technique is to describe the purpose of a link by providing descriptive text as the content of the a element. The description lets a user distinguish this link from other links in the Web page and helps the user determine whether to follow the link. The URI of the destination is generally not sufficiently descriptive. : When an image is the only content of a link, the text alternative for the image describes the unique function of the link. : When the content of a link contains both text and one or more images, if the text is sufficient to describe the purpose of the link, the images may have an empty text alternative. (See Using null alt text and no title attribute on img elements for images that assistive technology should ignore.) When the images convey information beyond the purpose of the link, they must also have appropriate alt text.

Examples
Example 1

Describing the purpose of a link in HTML in the text content of the a element.

<a href="routes.html">
  Current routes at Boulders Climbing Gym
</a>
Example 2

Using the alt attribute for the img element to describe the purpose of a graphical link.

<a href="routes.html">
  <img src="topo.gif" alt="Current routes at Boulders Climbing Gym"> 
</a> 
Example 3

Using an empty alt attribute when the anchor (a) element contains text that describes the purpose of the link in addition to the img element. Note that the link text will appear on the page next to the image.

<a href="routes.html">
  <img src="topo.gif" alt="">
  Current routes at Boulders Climbing Gym
</a>
Example 4

A site allows users to provide feedback on products by clicking on the "Feedback" link in a product detail page. Other users are able to provide a response to any feedback. When a response to the user's feedback is available, the feedback link displays an icon, with "response received" as its text alternative, after the "Feedback" text. The site's help document describes this icon as a speech bubble containing quotation marks and includes the icon, with its text alternative, as an example. The same text alternative is used in the product detail pages (when a response is available) to help ensure that users following the documentation can identify the image correctly as documented.

<a href="prod_123_feedback.html">
  Feedback 
  <img src="response.gif" width="15" height="15" alt="response received">
</a>
Example 5

A link contains text and an icon, and the icon provides additional information about the target.

<a href="WMFP.pdf">
  Woodend Music Festival Program
  <img src="pdficon.gif" alt="PDF format">
</a>
Example 6

The "MyCorp" company's annual report is made available on the corporate website as a PDF, and the annual corporate budget is made available as an Excel file on the web site.

Note

Many users prefer to know the file type when opening a file that results in opening a new application to view the file, so it is often regarded as useful to include this additional information. However, this is not required for compliance with this Success Criterion.

<ul>
  <li>
    <a href="2009mycorp_report.pdf">MyCorp 2009 Annual Report (PDF)</a>
  </li>
  <li>			
    <a href="2009mycorp_budget.xls">MyCorp 2009 Annual Budget (Excel)</a>
  </li>		
</ul>

Related techniques:
- G91: Providing link text that describes the purpose of a link
- H2: Combining adjacent image and text links for the same resource
- H24: Providing text alternatives for the area elements of image maps
- H67: Using null alt text and no title attribute on img elements for images that assistive technology should ignore


------------------------------

H32: - Providing submit buttons
Providing submit buttons

About this Technique
	- This technique relates to 3.2.2: On Input (Sufficient when used with G80: Providing a submit button to initiate a change of context).
	- This technique applies to content that includes form controls.

Description : The objective of this technique is to provide a mechanism that allows users to explicitly request changes of context. The intended use of a submit button is to generate an HTTP request that submits data entered in a form, so it is an appropriate control to use for causing a change of context.

Examples
Example 1: A basic example of a form with a submit button
<form action="/subscribe" method="post">
 <p>Enter your email address to subscribe to our mailing list.</p>
 <label for="address">Your email address:</label>
 <input autocomplete="email" id="address" name="address" type="text"> 
 <input type="submit" value="Subscribe">
</form>

Related techniques:
- G80: Providing a submit button to initiate a change of context
- H36: Using alt attributes on images used as submit buttons
- H84: Using a button with a select element to perform an action


------------------------------

H33: - Supplementing link text with the title attribute
Supplementing link text with the title attribute

About this Technique
	- This technique relates to:
	- 2.4.4: Link Purpose (In Context) (Sufficient when used for providing a supplemental description of the purpose of a link using one of the following techniques: )
	- 2.4.9: Link Purpose (Link Only) (Advisory)
	- This technique applies to HTML.

Description : The objective of this technique is to demonstrate how to use a title attribute on an anchor element to provide additional text describing a link. The title attribute is used to provide additional information to help clarify or further describe the purpose of a link. If the supplementary information provided through the title attribute is something the user should know before following the link, such as a warning, then it should be provided in the link text rather than in the title attribute. : Because of the extensive user agent limitations in supporting access to the title attribute, authors should use caution in applying this technique. For this reason, it is preferred that the author use technique C7: Using CSS to hide a portion of the link text or H30: Providing link text that describes the purpose of a link for anchor elements.

Examples
Example 1: Clarifying the purpose of a link
<a href="https://example.com/world/africa/kenya.elephants.ap/index.html" 
   title="Read more about failed elephant evacuation">
   Evacuation Crumbles Under Jumbo Load
</a>

Related techniques:
- C7: Using CSS to hide a portion of the link text
- H30: Providing link text that describes the purpose of a link for anchor elements


------------------------------

H34: - Using a Unicode right-to-left mark (RLM) or left-to-right mark (LRM) to mix text direction inline
Using a Unicode right-to-left mark (RLM) or left-to-right mark (LRM) to mix text direction inline

About this Technique
	- This technique relates to 1.3.2: Meaningful Sequence (Sufficient when used with G57: Ordering the content in a meaningful sequence).
	- This technique applies to HTML.

Description : The objective of this technique is to use Unicode right-to-left marks and left-to-right marks to override the HTML bidirectional algorithm when it produces undesirable results. This may be necessary, for instance, when placing neutral characters such as spaces or punctuation between different directional text runs. The concepts used in this technique are described in Inline markup and bidirectional text in HTML. : Unicode right-to-left marks and left-to-right marks can be entered directly or by means of character entities or numeric character references, as shown here. : left-to-right mark: &lrm; or &#x200e; (U+200E)
	- right-to-left mark: &rlm; or &#x200f; (U+200F) : Due to the bidi algorithm, a source code editor may not display character entities or numeric character references as expected.

Examples
Example 1

This example shows an Arabic phrase in the middle of an English sentence. The exclamation point is part of the Arabic phrase and should appear on its left. Because it is between an Arabic and Latin character and the overall paragraph direction is LTR, the bidirectional algorithm positions the exclamation mark to the right of the Arabic phrase.

The title is "مفتاح معايير الويب!" in Arabic.

Visually-ordered ASCII version (RTL text in uppercase, LTR in lower):

the title is "HCTIWS SDRADNATS BEW!" in arabic.

Inserting a Unicode right-to-left mark in the code immediately after the exclamation mark positions it correctly when you view the displayed text (see below). You can use a character escape or the (invisible) control character to insert the right-to-left mark.

The title is "مفتاح معايير الويب!‏" in Arabic.

Visually-ordered ASCII version:

the title is "!HCTIWS SDRADNATS BEW" in arabic.

Related techniques:
- H56: Using the dir attribute on an inline element to resolve problems with nested directional runs


------------------------------

H36: - Using alt attributes on images used as submit buttons
Using alt attributes on images used as submit buttons

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Sufficient).
	- This technique applies to content using image-based submit buttons.

Description : For input elements of type image, the alt attribute of the input element is used to provide a functional label. This label indicates the button's function, but does not attempt to describe the image. The label is especially important if there are multiple submit buttons on the page that each lead to different results.

Examples
Example 1: An input element with an alt attribute
<form action="/find" method="post" role="search">
  <label for="look-up">Find books<label>
  <input id="look-up" type="text">
  <input alt="Search" src="button.gif" type="image">
</form>

Related techniques:
- G94: Providing short text alternative for non-text content that serves the same purpose and presents the same information as the non-text content


------------------------------

H37: - Using alt attributes on img elements
Using alt attributes on img elements

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Sufficient).
	- This technique applies to images used within HTML documents.

Description : When using the img element, specify a short text alternative with the alt attribute. Note. The value of this attribute is referred to as "alt text". : When an image contains words that are important to understanding the content, the alt text should include those words. This will allow the alt text to play the same function on the page as the image. Note that it does not necessarily describe the visual characteristics of the image itself but must convey the same meaning as the image.

Examples
Example 1

An image on a Website provides a link to a free newsletter. The image contains the text "Free newsletter. Get free recipes, news, and more. Learn more." The alt text matches the text in the image.

<img src="newsletter.gif" alt="Free newsletter. 
 Get free recipes, news, and more. Learn more.">
Example 2

An image on a Web site depicts the floor plan of a building. The image is an image map with each room an interactive map area. The alt text is "The building's floor plan. Select a room for more information about the purpose or content of the room." The instruction to "select a room" indicates that the image is interactive.

Related techniques:
- G82: Providing a text alternative that identifies the purpose of the non-text content
- H2: Combining adjacent image and text links for the same resource
- H24: Providing text alternatives for the area elements of image maps
- H30: Providing link text that describes the purpose of a link for anchor elements


------------------------------

H39: - Using caption elements to associate data table captions with data tables
Using caption elements to associate data table captions with data tables

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Sufficient when used for making information and relationships conveyed through presentation programmatically determinable).
	- This technique applies to HTML data tables.

Description : The objective of this technique is to programmatically associate captions for data tables where captions are provided in the presentation. The caption for a table is a table identifier and acts like a title or heading for the table. : The caption element is the appropriate markup for such text and it ensures that the table identifier remains associated with the table, including visually (by default). In addition, using the caption element allows screen reading software to navigate directly to the caption for a table if one is present. : Note : Although WCAG 2 does not prohibit the use of layout tables, CSS-based layouts are recommended in order to retain the defined semantic meaning of the HTML table elements and to conform to the coding practice of separating presentation from content. If a table is used for layout, the caption element is not used. The purpose of a layout table is simply to control the placement of content; the table itself is "transparent" to the user. A caption would "break" this transparency by calling attention to the table. See F46 for details.

Examples
Example 1: An appointment calendar with a caption
<table>
  <caption>Schedule for the week of March 6</caption>
  ...
</table>

Related techniques:
- H51: Using table markup to present tabular information
- F46: Failure of Success Criterion 1.3.1 due to using th elements, … layout tables


------------------------------

H40: - Using description lists
Using description lists

About this Technique
	- This technique relates to 3.1.3: Unusual Words (Sufficient when used with G55: Linking to definitions).
	- This technique applies to HTML.

Description : The objective of this technique is to provide the description of names or terms by presenting them in a description list. The list is marked up using the dl element. Within the list, each term is put in a separate dt element, and its description goes in the dd element directly following it. Multiple terms can be associated with a single description, as can a single term with multiple descriptions, provided that semantic sequence is maintained. The title attribute can be used to provide additional information about the description list. Usage of description lists ensures that terms and their descriptions are semantically related even as presentation format changes, as well as ensuring that these terms and descriptions are semantically grouped as a unit. : Description lists are easiest to use when the descriptions are ordered alphabetically. A common use for description lists is a glossary of terms.

Examples
Example 1

A list of descriptions of nautical terms used on a Website about sailing.

<dl title="Nautical Terms">
  <dt>Knot</dt>
  <dd>
    A <i>knot</i> is a unit of speed equaling 1 
    nautical mile per hour (1.15 miles per hour or 1.852 
    kilometers per hour).
  </dd>
  <dt>Port</dt>
  <dd>
    <i>Port</i> is the nautical term (used on 
    boats and ships) that refers to the left side
    of a ship, as perceived by a person facing towards 
    the bow (the front of the vessel).
  </dd>
  <dt>Starboard</dt>
  <dd>
    <i>Starboard</i> is the nautical term (used 
    on boats and ships) that refers to the right 
    side of a vessel, as perceived by a person 
    facing towards the bow (the front of the vessel).
  </dd>
</dl>

Related techniques:
- G62: Providing a glossary


------------------------------

H42: - Using h1-h6 to identify headings
Using h1-h6 to identify headings

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Sufficient when used for making information and relationships conveyed through presentation programmatically determinable).
	- This technique applies to HTML.

Description : The objective of this technique is to use HTML heading markup to provide semantic code for headings in the content. Heading markup will allow assistive technologies to present the heading status of text to a user. A screen reader can recognize the code and announce the text as a heading with its level, beep or provide some other auditory indicator. Screen readers are also able to navigate heading markup which can be an effective way for screen reader users to more quickly find the content of interest. Assistive technologies that alter the authored visual display will also be able to provide an appropriate alternate visual display for headings that can be identified by heading markup.

Examples
Example 1: Hierarchical Heading Organization

In the following example, headings are used in a hierarchical layout with h3 as a subsection of h2, which is a subsection of h1.

<h1>Plant Foods that Humans Eat</h1>
<p>There are an abundant number of plants that humans eat ...</p>
<h2>Fruit</h2>
<p>A fruit is a structure of a plant that contains its seeds ...</p>
<h3>Apple</h3>
<p>The apple is the pomaceous fruit of the apple tree ...</p>
<h3>Orange</h3>
<p>The orange is a hybrid of ancient cultivated origin ...</p>
<h3>Banana</h3>
<p>Banana is the common name for herbaceous plants ...</p>
<h2>Vegetables</h2>
<p>A vegetable is an edible plant or part of a plant other than a sweet fruit ...</p>
<h3>Broccoli</h3>
<p>Broccoli is a plant of the mustard/cabbage family ...</p>
<h3>Brussels sprouts</h3>
<p>The Brussels sprout of the Brassicaceae family, is a Cultivar group 
   of wild cabbage ...</p>
<h3>Green beans</h3>
<p>Green beans have been bred for the fleshiness, flavor, or
   sweetness of their pods ...</p>
Example 2: Headings in a three-column layout

In this example, the main content of the page is in the middle column of a three-column page. The title of the main content matches the title of the page, and is marked as h1, even though it is not the first thing on the page. The content in the first and third columns is less important, and marked with h2.

Note

It is important to note that the example code below is not intended to prescribe what level of heading should be used for a particular section of the web page. In the example, the layout could be presented with the first heading in each column at the same logical level (such as an h1), or as found in the example, where the logical level reflects its importance in relation to the main content.

<!doctype html>
<html lang="en">
<head>
  <title>Stock Market Up Today</title>
</head>
<body>
  <!-- left nav -->
  <nav class="left-nav">
    <h2>Site Navigation</h2>
    <!-- content here -->
  </nav>

  <!-- main contents -->
  <main class="main">
    <h1>Stock Market up today</h1>
    <!-- content here -->
  </main>

  <!-- right panel -->
  <aside class="side-bar">
    <h2>Related links</h2>
    <!-- content here -->
  </aside>
</body>
</html>

Related techniques:
- H69: Providing heading elements at the beginning of each section of content
- G141: Organizing a page using headings
- F2: Failure of Success Criterion 1.3.1 due to using changes in text presentation to convey information without using the appropriate markup or text
- F43: Failure of Success Criterion 1.3.1 due to using structural markup in a way that does not represent relationships in the content


------------------------------

H43: - Using id and headers attributes to associate data cells with header cells in data tables
Using id and headers attributes to associate data cells with header cells in data tables

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Sufficient when used for making information and relationships conveyed through presentation programmatically determinable).
	- This technique applies to HTML.

Description : The objective of this technique is to associate each data cell (in a data table) with the appropriate headers. This technique adds a headers attribute to each data cell (td element). It also adds an id attribute to any cell used as a header for other cells. The headers attribute of a cell contains a list of the id attributes of the associated header cells. If there is more than one id, they are separated by spaces. : This technique is used when data cells are associated with more than one row and/or one column header. This allows screen readers to speak the headers associated with each data cell when the relationships are too complex to be identified using the th element alone or the th element with the scope attribute. Using this technique also makes these complex relationships perceivable when the presentation format changes. : This technique is not recommended for layout tables since its use implies a relationship between cells that is not meaningful when tables are used for layout.

Examples
Example 1: A table with multiple rows of headers
<table>
  <tr>
    <th rowspan="2" id="h">Homework</th>
    <th colspan="3" id="e">Exams</th>
    <th colspan="3" id="p">Projects</th>
  </tr>
  <tr>
    <th id="e1" headers="e">1</th>
    <th id="e2" headers="e">2</th>
    <th id="ef" headers="e">Final</th>
    <th id="p1" headers="p">1</th>
    <th id="p2" headers="p">2</th>
    <th id="pf" headers="p">Final</th>
  </tr>
  <tr>
    <td headers="h">15%</td>
    <td headers="e e1">15%</td>
    <td headers="e e2">15%</td>
    <td headers="e ef">20%</td>
    <td headers="p p1">10%</td>
    <td headers="p p2">10%</td>
    <td headers="p pf">15%</td>
  </tr>
</table>

Related techniques:
- H39: Using caption elements to associate data table captions with data tables
- H51: Using table markup to present tabular information
- H63: Using the scope attribute to associate header cells with data cells in data tables


------------------------------

H44: - Using label elements to associate text labels with form controls
Using label elements to associate text labels with form controls

About this Technique
	- This technique relates to:
	- 1.1.1: Non-text Content (Sufficient)
	- 1.3.1: Info and Relationships (Sufficient when used for making information and relationships conveyed through presentation programmatically determinable)
	- 3.3.2: Labels or Instructions (Sufficient)
	- 4.1.2: Name, Role, Value (Sufficient when used with G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes)
	- This technique applies to HTML controls that use external labels.

Description : The objective of this technique is to use the label element to explicitly associate a form control with a label. A label is attached to a specific form control through the use of the for attribute. The value of the for attribute must be the same as the value of the id attribute of the form control. : The id attribute may have the same value as the name attribute, but both must be provided, and the id must be unique in the Web page. : This technique is sufficient for Success Criteria 1.1.1 (Non-Text Content), 1.3.1 (Info and Relationships) and 4.1.2 (Name, Role, Value) whether or not the label element is visible. That is, it may be hidden using CSS. However, for Success Criterion 3.3.2 (Labels or Instructions), the label element must be visible since it provides assistance to all users who need help understanding the purpose of the field. : An additional benefit of this technique is a larger clickable area for the control, since clicking on the label or the control will activate the control. This can be helpful for users with impaired motor control. : Note that the label is positioned after input elements of type="checkbox" and type="radio". : Note : Elements that use explicitly associated labels are: : inputs for text entry:
	- input type="date"
	- input type="datetime-local"
	- input type="email"
	- input type="month"
	- input type="number"
	- input type="password"
	- input type="search"
	- input type="tel"
	- input type="text"
	- input type="time"
	- input type="url"
	- input type="week"
	- input type="checkbox"
	- input type="color"
	- input type="file"
	- input type="radio"
	- input type="range"
	- select
	- textarea : The label element is not used for the following elements: : button (the label is provided by the content)
	- input type="button" (the label is provided by the content)
	- input type="hidden"
	- input type="image" (the label is provided by the alt attribute)
	- input type="reset" (the label is label provided by the value attribute)
	- input type="submit" (the label is label provided by the value attribute)

Examples
Example 1: A text input field

The text field in this example has the explicit label of "First name:". The label element's for attribute matches the id attribute of the input element.

<label for="firstname">First name:</label> 
<input id="firstname" name="firstname" type="text">
Example 2: A checkbox
<input checked id="markuplang" name="computerskills" type="checkbox">
<label for="markuplang">HTML</label>
Example 3: A group of radio buttons

A small, related group of radio buttons with a clear description and labels for each individual element.

<h1>Doughnut Selection</h1>
<form action="/buy-doughnuts" method="post">
  <fieldset>
    <legend>Pick the doughnut you would like</legend>
    <input id="dn-choc" name="flavor" type="radio" value="chocolate">
    <label for="dn-choc">Chocolate</label>
    <input id="dn-cream" name="flavor" type="radio" value="cream">
    <label for="dn-cream">Cream Filled</label>
    <input id="dn-raspberry" name="flavor" type="radio" value="raspberry">
    <label for="dn-raspberry">Raspberry Filled</label>
  </fieldset>
  <input type="submit" value="Purchase Your Doughnut">
</form>

Related techniques:
- G167: Using an adjacent button to label the purpose of a field
- H65: Using the title attribute to identify form controls when the label element cannot be used
- H71: Providing a description for groups of form controls using fieldset and legend elements


------------------------------

H48: - Using ol, ul and dl for lists or groups of links
Using ol, ul and dl for lists or groups of links

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Sufficient when used for making information and relationships conveyed through presentation programmatically determinable).
	- This technique applies to HTML.

Description : The objective of this technique is to create lists of related items using list elements appropriate for their purposes. The ol element is used when the list is ordered and the ul element is used when the list is unordered. Description lists (dl) are used to group name-value pairs of information, for example: terms and definitions or questions and answers. Although the use of this markup can make lists more readable, not all lists need markup. For instance, sentences that contain comma-separated lists may not need list markup. : When markup is used that visually formats items as a list but does not indicate the list relationship, users may have difficulty in navigating the information. An example of such visual formatting is including asterisks in the content at the beginning of each list item and using br elements to separate the list items. : Some assistive technologies allow users to navigate from list to list or item to item. Style sheets can be used to change the presentation of the lists while preserving their integrity. : The list structure, commonly unordered lists, is also useful to group hyperlinks. When this is done, it helps screen reader users to navigate from the first item in a list to the end of the list or jump to the next list. This helps them to bypass groups of links if they choose to.

Examples
Example 1: A list showing steps in a sequence

This example uses an ordered list to show the sequence of steps in a process.

<ol>
  <li>Mix flour, eggs, milk, and seasoning in a bowl.</li>
  <li>Whisk until the batter is smooth.</li>
  <li>Rest the batter for at least 30 minutes before cooking.</li>
</ol>
Example 2: A grocery list

This example shows an unordered list of items to buy at the store.

<ul>
  <li>Milk</li>
  <li>Eggs</li>
  <li>Butter</li>
</ul>
Example 3: A word and its definition

This example uses a description list to group a definition with the term that is being defined.

<dl>
  <dt>blink</dt>
  <dd>turn on and off between 0.5 and 3 times per second</dd>
</dl>
Example 4: Contact information using a description list

This example uses a description list to mark up pairs of related items. The pairs themselves are a logically related list.

<dl>
  <div>
    <dt>Name:</dt>
    <dd>Taisha Silveri</dd>
  </div>
  <div>
    <dt>Tel:</dt>
    <dd>503-123-4567</dd>
  </div>
  <div>
    <dt>Email:</dt>
    <dd>taisha-silveri@example.com</dd>
  </div>
</dl>

This is shown in the working example of contact information using a description list.

Example 5: Using lists to group links

In this example the links are grouped using the ul and li elements.

<h2 id="product-categories">Product Categories</h2>
<nav aria-labelledby="product-categories">
  <ul>
    <li><a href="kitchen.html">Kitchen</a></li>
    <li><a href="bedbath.html">Bed &amp; Bath</a></li>
    <li><a href="dining.html">Fine Dining</a></li>
    <li><a href="lighting.html">Lighting</a></li>
    <li><a href="storage.html">Storage</a><li>
  </ul>
</nav>

Related techniques:
- H40: Using description lists


------------------------------

H49: - Using semantic markup to mark emphasized or special text
Using semantic markup to mark emphasized or special text

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Sufficient, together with G115: Using semantic elements to mark up structure).
	- This technique applies to HTML.

Description : The objective of this technique is to demonstrate how semantic markup can be used to mark emphasized or special text so that it can be programmatically determined. Using semantic markup to mark emphasized or special text also provides structure to the document. User agents can then make the structure perceivable to the user, for example using a different visual presentation for different types of structures or by using a different voice or pitch in an auditory presentation. : Most user agents will visually distinguish text that has been identified using semantic markup. Some assistive technologies provide a mechanism for determining the characteristics of content that has been created using proper semantic markup.

Examples

See rendered examples of semantic text.

Example 1: Using the em and strong elements to emphasize text

The em and strong elements are designed to indicate structural emphasis that may be rendered in a variety of ways (font style changes, speech inflection changes, etc.).

 ... What she <em>really</em> meant to say was, &quot;This is not OK, 
 it is <strong>excellent</strong>&quot;! ...
Example 2: Using the blockquote element to mark up long quotations from another source

This example also demonstrates the use of the cite element to specify a reference.

<p>The following is an excerpt from the <cite>The Story Of My Life</cite> 
   by Helen Keller:</p>
<blockquote>
  <p>Even in the days before my teacher came, I used to feel along the square stiff
     boxwood hedges, and, guided by the sense of smell, would find the first violets
     and lilies. There, too, after a fit of temper, I went to find comfort and to hide
     my hot face in the cool leaves and grass.</p>
</blockquote>
Example 3: Using the q element to mark up a shorter quotation from another source

Quotation marks aren't manually added to the quote because they are added by the user agent.

<p>Helen Keller said, <q>Self-pity is our worst enemy and if we yield to it, 
   we can never do anything good in the world</q>.</p>
Example 4: Using the sup and sub elements to mark up superscripts and subscripts

The sup and sub elements must be used only to mark up typographical conventions with specific meanings, not for typographical presentation for presentation's sake.

<p>Henry won 1<sup>st</sup> place in the 9<sup>th</sup> grade science competition.</p>
<p>The chemical notation for water is H<sub>2</sub>O.</p>
Example 5: Using the code element to mark up code

This example shows use of the code element to provide visual emphasis for a CSS rule:

<code>
.trial {
  background-image: url(30daytrial.jpg);
  background-position: left top;
  background-repeat: no-repeat;
  padding-top: 68px;
} 
</code>

Related techniques:
- G115: Using semantic elements to mark up structure


------------------------------

H51: - Using table markup to present tabular information
Using table markup to present tabular information

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Sufficient when used for making information and relationships conveyed through presentation programmatically determinable).
	- This technique applies to HTML.

Description : The objective of this technique is to present tabular information in a way that preserves relationships within the information even when users cannot see the table or the presentation format is changed. Information is considered tabular when logical relationships among text, numbers, images, or other data exist in two dimensions (vertical and horizontal). These relationships are represented in columns and rows, and the columns and rows must be recognizable in order for the logical relationships to be perceived. : Using the table element with the child elements tr, th, and td makes these relationships perceivable. Techniques such as inserting tabs to create columns or using the pre element are purely visual, and visually implied logical relationships are lost if the user cannot see the table or the visual presentation is changed. : Simple tables generally have only one level of headers for columns and/or one level of headers on the rows. : Usually, for simple tables, row 1 column 1 is either blank or describes the contents of the entire column 1. Row 1 columns are not blank (i.e., they contain "column headings"), describe the contents of the entire column, and allow the reader to distinguish the difference in meaning between that column and other columns. : Column 1 rows are usually not blank, they often contain "row headings" which describe the contents of the entire row, and allow the reader to distinguish the difference in meaning between that row and the other rows. Otherwise, the Column 1 would contain simple data.

Examples
Example 1: A schedule marked up as a simple data table with column and row headers

This example uses markup for a simple data table. The first row shows the days of the week. Time intervals are shown in the first column. These cells are marked with the th element. This identifies the days of the week as column headers and the time intervals as row headers.

Screen readers speak header information that changes as the user navigates the table. Thus, when screen reader users move to left or right along a row, they will hear the day of the week (the column header) followed by the appointment (if any). They will hear the time interval as they move up or down within the same column.

<table>
  <tr>
    <th>Time</th>
    <th>Monday</th>
    <th>Tuesday</th>
    <th>Wednesday</th>
    <th>Thursday</th>
    <th>Friday</th>
  </tr>
  <tr>
    <th scope="row">8:00-9:00</th>
    <td>Meet with Sam</td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <th scope="row">9:00-10:00</th>
    <td></td>
    <td></td>
    <td>Doctor Williams</td>
    <td>Sam again</td>
    <td>Leave for San Antonio</td>
  </tr>
</table>

Related techniques:
- H39: Using caption elements to associate data table captions with data tables
- H43: Using id and headers attributes to associate data cells with header cells in data tables
- H63: Using the scope attribute to associate header cells with data cells in data tables


------------------------------

H53: - Using the body of the object element
Using the body of the object element

About this Technique
	- This technique relates to:
	- 1.1.1: Non-text Content (Sufficient)
	- 1.2.3: Audio Description or Media Alternative (Prerecorded) (Sufficient when used for linking to the alternative for time-based media)
	- 1.2.8: Media Alternative (Prerecorded) (Sufficient when used for linking to the alternative for time-based media)
	- This technique applies to documents that load media with the object element.

Description : The objective of this technique is to provide a text alternative for content rendered using the object element. The body of the object element can be used to provide a complete text alternative for the object, or may contain additional non-text content with text alternatives. : Fallback content for the object element is only available to the user when the media loaded by the element is not rendered by the user agent, because the user agent does not support the media technology or the user has instructed the user agent not to render that technology. In these situations, the fallback content will be presented to the user. If the media is rendered without the fallback content, the media needs to be directly accessible. Authors can only rely on this technique to satisfy the success criterion if they are not relying on the direct accessibility of the media's technology in their conformance claim, and reasonably expect users will be able to access the fallback.

Examples
Example 1: An object includes a long description that describes it
<object classid="https://www.example.com/analogclock.py">
  <p>Here is some text that describes the object and its operation.</p>
</object>
Example 2: An object includes non-text content with a text alternative
<object classid="https://www.example.com/animatedlogo.py">
  <img src="staticlogo.gif" alt="Company Name">
</object>
Example 3: The image object has content that provides a brief description of the function of the image
<object data="companylogo.gif" type="image/gif">
  <p>Company Name</p>
</object>
Example 4

This example takes advantage of the fact the object elements may be nested to provide for alternative representations of information.

<object classid="java:Press.class" width="500" height="500">
  <object data="pressure.mpeg" type="video/mpeg">
    <object data="pressure.gif" type="image/gif">
      As temperature increases, the molecules in the balloon...
    </object>
  </object>
</object>

Related techniques:
- G92: Providing long description for non-text content that serves the same purpose and presents the same information


------------------------------

H54: - Using the dfn element to identify the defining instance of a word
Using the dfn element to identify the defining instance of a word

About this Technique
	- This technique relates to 3.1.3: Unusual Words (Sufficient when used with G112: Using inline definitions).
	- This technique applies to HTML.

Description : The objective of this technique is to use the dfn to mark the use of a word or phrase where it is defined. The dfn element is used to indicate the defining instance of the enclosed term. In other words, it marks the occurrence of the term where the term is defined. Note that it encloses the term, not the definition. This technique would be used in combination with Using inline definitions to provide the definition.

Examples
Example 1
<p>The Web Content Accessibility Guidelines require that non-text content
has a text alternative. <dfn>Non-text content</dfn> is content that is not a sequence
of characters that can be programmatically determined or where the sequence is
not expressing something in human language; this includes ASCII Art (which is a
pattern of characters), emoticons, leetspeak (which is character substitution), and
images representing text.</p>

Related techniques:
- G112: Using inline definitions


------------------------------

H56: - Using the dir attribute on an inline element to resolve problems with nested directional runs
Using the dir attribute on an inline element to resolve problems with nested directional runs

About this Technique
	- This technique relates to 1.3.2: Meaningful Sequence (Sufficient when used with G57: Ordering the content in a meaningful sequence).
	- This technique applies to HTML.

Description : The objective of this technique is to identify changes in the text direction of text that includes nested directional runs by providing the dir attribute on inline elements. A nested directional run is a run of text that includes mixed directional text, for example, a paragraph in English containing a quoted Hebrew sentence which in turn includes an English phrase. Use of the dir attribute on an enclosing span or other inline element may be necessary because the Unicode bidirectional algorithm can produce undesirable results when mixed directional text contains spaces or punctuation. The concepts used in this technique are described in What you need to know about the bidi algorithm and inline markup.

Examples
Example 1: Defining the text direction of a nested, mixed-direction phrase, in Hebrew and English, to be right-to-left

Because the whole quote is in Hebrew, and therefore runs right to left, the text "W3C" and the comma should appear to the left of (i.e., after) the Hebrew text, like this:

The title is "פעילות הבינאום, W3C" in Hebrew.

Visually-ordered ASCII version (RTL text in uppercase, LTR in lower):

the title is "w3c ,YTIVITCA NOITAZILANOITANRETNI" in Hebrew.

The Unicode bidirection algorithm alone is insufficient to achieve the right result, and leaves the text "W3C" on the right side of the quote:

The title is "פעילות הבינאום, W3C" in Hebrew.

Visually-ordered ASCII version:

the title is "YTIVITCA NOITAZILANOITANRETNI, w3c" in hebrew.

The following markup will produce the expected result:

<p>The title says "<span lang="he" dir="rtl">פעילות הבינאום, W3C</span>" in Hebrew.</p>

Related techniques:
- H34: Using a Unicode right-to-left mark (RLM) or left-to-right mark (LRM) to mix text direction inline


------------------------------

H57: - Using the language attribute on the HTML element
Using the language attribute on the HTML element

About this Technique
	- This technique relates to 3.1.1: Language of Page (Sufficient).
	- This technique applies to HTML.

Description : The objective of this technique is to identify the default language of a document by providing the lang attribute on the html element. : Identifying the language of the document is important for a number of reasons: : It allows braille translation software to substitute control codes for accented characters, and insert control codes necessary to prevent erroneous creation of Grade 2 braille contractions.
	- Speech synthesizers that support multiple languages will be able to orient and adapt to the pronunciation and syntax that are specific to the language of the page, speaking the text in the appropriate accent with proper pronunciation.
	- Marking the language can benefit future developments in technology, for example users who are unable to translate between languages themselves will be able to use machines to translate unfamiliar languages.
	- Marking the language can also assist user agents in providing definitions using a dictionary.

Examples
Example 1: Defining the content of an HTML document to be in French
<!doctype html>
<html lang="fr"> 
<head>
  <meta charset="utf-8">
  <title>document écrit en français</title>
</head>  
<body>     
  ... document écrit en français ...
</body>
</html>

Related techniques:
- H58: Using language attributes to identify changes in the human language


------------------------------

H58: - Using language attributes to identify changes in the human language
Using language attributes to identify changes in the human language

About this Technique
	- This technique relates to 3.1.2: Language of Parts (Sufficient).
	- This technique applies to HTML.

Description : The objective of this technique is to clearly identify any changes in language on a page by using the lang attribute. : Allowed values for the lang attribute are indicated in the resources referenced below. Language tags use a primary code to indicate the language, and optional sub-codes (separated by hyphen characters) to indicate variants of the language. For instance, English is indicated with the primary code "en"; British English and American English can be distinguished by using "en-GB" and "en-US", respectively. Use of the primary code is important for this technique. Use of sub-codes is optional but may be helpful in certain circumstances.

Examples
Example 1: The use of the lang attribute to define a quote written in German
<blockquote lang="de">
  <p>
    Da dachte der Herr daran, ihn aus dem Futter zu schaffen,
    aber der Esel merkte, daß kein guter Wind wehte, lief fort
    und machte sich auf den Weg nach Bremen: dort, meinte er,
    könnte er ja Stadtmusikant werden.
  </p>
</blockquote>

Related techniques:
- H57: Using the language attribute on the HTML element


------------------------------

H62: - Using the ruby element
Using the ruby element

About this Technique
	- This technique relates to 3.1.6: Pronunciation (Sufficient).
	- This technique applies to HTML.

Description : The objective of this technique is to use ruby annotation to provide information about the pronunciation and meaning of a run of text where meaning is determined by pronunciation. : There are many languages in which a run of text may mean different things depending on how the text is pronounced. This is common in East Asian languages as well as Hebrew, Arabic, and other languages; it also occurs in English and other Western European languages. : Ruby Annotation allows the author to annotate a "base text," providing a guide to pronunciation and, in some cases, a definition as well. Ruby is commonly used for text in Japanese and other East Asian languages. : There are two types of Ruby markup: simple and complex. Simple Ruby markup applies to a run of text such as a complete word or phrase. This is known as the "base" text (rb element). The Ruby annotation that indicates how to pronounce the term (the rt element, or Ruby text) is shown in a smaller font. (The term "Ruby" is derived from a small font used for this purpose in printed texts.) The Ruby text is usually rendered above or immediately before the base text, that is, immediately above horizontal text or immediately to the right of vertical text. Sometimes Japanese uses Ruby to provide the meaning of text on the other side of the base text (visually) from the phonetic annotation. Simple Ruby markup also provides a "fallback" option for user agents that do not support Ruby markup (that is, user agents that do not support HTML). : Complex Ruby markup makes it possible to divide the base text into smaller units, each of which may be associated with a separate Ruby annotation. Complex Ruby markup does not support the fallback option. : Ruby annotation is uncommon in languages such as Hebrew, where Unicode fonts can include diacritical marks that convey pronunciation. It is also uncommon in English and European languages. : Note: The primary reason for indicating pronunciation through Ruby or any other means is to make the content accessible to people with disabilities who could read and understand the language of the content if information about pronunciation were provided. It is not necessary to provide information about pronunciation for use by people who are not familiar with the language of the content.

Examples
Example 1: Ruby markup providing pronunciation information for an initialism

This example uses Ruby annotation to give the pronunciation of the initialism (acronym) formed by the first letters of the words Web Content Accessibility Guidelines. The letters WCAG are the base (the rb element), and the pronunciation information is shown by the Ruby text (the rt element). The Ruby parenthesis element rp is used for user agents that do not support Ruby annotations to indicate that the text in the rt element provides the pronunciation information. The pronunciation information is rendered in parentheses immediately following the base text. (User agents that support Ruby do not show the parentheses.)

<p>When we talk about these guidelines, we often just call them
  <ruby>
    <rb>WCAG</rb>
    <rp>(</rp>
      <rt>Wuh-KAG</rt>
    <rp>)</rp>
  </ruby>.
</p>
Example 2: Ruby annotation for Japanese

The following is an example in Japanese. For Japanese, the Ruby is used to give the reading of Han characters (Kanji). the Ruby parenthesis element rp is used for user agents that do not support Ruby annotations to indicate that the text in the rt element provides the pronunciation information. The pronunciation information is rendered in parentheses immediately following the base text. (User agents that support Ruby do not show the parentheses.)

<p>
  <ruby>
    <rb>慶應大学</rb>
    <rp>(</rp>
    <rt>けいおうだいがく</rt>
    <rp>)</rp>
  </ruby>
</p>

Related techniques:
- G102: Providing the expansion or explanation of an abbreviation


------------------------------

H63: - Using the scope attribute to associate header cells with data cells in data tables
Using the scope attribute to associate header cells with data cells in data tables

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Sufficient when used for making information and relationships conveyed through presentation programmatically determinable).
	- This technique applies to HTML.

Description : The objective of this technique is to associate header cells with data cells in complex tables using the scope attribute. The scope attribute may be used to clarify the scope of any cell used as a header. The scope identifies whether the cell is a header for a row, column, or group of rows or columns. The values row, col, rowgroup, and colgroup identify these possible scopes, respectively. : For simple data tables where the header is not in the first row or column, like the one in Example 1, this technique can be used. : Note : For simple tables that have the headers in the first row or column, it is sufficient to simply use the th elements without scope. : For complex tables use ids and headers as in Using id and headers attributes to associate data cells with header cells in data tables. : Some users may find it easier to work with several simple tables than one more complex table. Authors may wish to consider whether they can convert complex tables to one or more simple tables.

Examples
Example 1: A simple schedule

In the following example, the first column contains serial numbers for rows in the table, and the second column contains the key value for the row. The cells in the second column may then use scope="row". The cells in the first row too are marked up with td and use scope="col".

<table>
  <caption>Contact Information</caption>
  <tr>
    <td></td>
    <th scope="col">Name</th>
    <th scope="col">Phone Number</th>
    <th scope="col">City</th>
  </tr>
  <tr>
    <td>1.</td>
    <th scope="row">Charlotte Smith</th>
    <td>412-212-5421</td>
    <td>Pittsburgh</td>
  </tr>
  <tr>
    <td>2.</td>
    <th scope="row">Joetta Frere</th>
    <td>410-306-5400</td>
    <td>Baltimore</td>
  </tr>
  <tr>
    <td>3.</td>
    <th scope="row">David Walls</th>
    <td>281-511-6600</td>
    <td>New York</td>
  </tr>
</table>

Related techniques:
- H43: Using id and headers attributes to associate data cells with header cells in data tables
- H51: Using table markup to present tabular information


------------------------------

H64: - Using the title attribute of the iframe element
Using the title attribute of the iframe element

About this Technique
	- This technique relates to:
	- 2.4.1: Bypass Blocks (Sufficient when used for grouping blocks of repeated material in a way that can be skipped)
	- 4.1.2: Name, Role, Value (Sufficient when used with G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes)
	- This technique applies to HTML documents that use iframes.

Description : The objective of this technique is to demonstrate the use of the title attribute of the iframe element to describe its contents. This provides a label for the frame so users can determine which frame to enter and explore in detail. It does not label the content inside the iframe. : Note : The title attribute labels iframes, and is different from the title element which labels documents. Both should be provided, since the first facilitates navigation among iframes and the second clarifies the user's current page. : The title attribute is not interchangeable with the name attribute. The title labels the frame for users; the name labels it for scripting and window targeting. The name is not presented to the user, only the title is.

Examples
Example 1: Using the title attribute with an iframe to describe the iframe's content
<!doctype html>
<html lang="en">
<head>
   <title>A document using an iframe</title>
</head>
...
<iframe src="banner-ad.html" name="ad-iframe" title="Advertisement"></iframe>
...
</html>


------------------------------

H65: - Using the title attribute to identify form controls when the label element cannot be used
Using the title attribute to identify form controls when the label element cannot be used

About this Technique
	- This technique relates to:
	- 1.1.1: Non-text Content (Sufficient)
	- 1.3.1: Info and Relationships (Sufficient when used for making information and relationships conveyed through presentation programmatically determinable)
	- 4.1.2: Name, Role, Value (Sufficient when used with G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes)
	- This technique applies to HTML form controls that are not identified using value, alt, or element content.

Description : The objective of this technique is to use the title attribute to provide an accessible name for form controls when the visual design does not include text on the screen that can be associated with the control as a label. User agents, including assistive technology, can speak the title attribute.

Examples
Example 1: A pulldown menu that limits the scope of a search

A search form uses a pulldown menu to limit the scope of the search. The pulldown menu is immediately adjacent to the text field used to enter the search term. The relationship between the search field and the pulldown menu is clear to users who can see the visual design, which does not have room for a separate visible label. The title attribute is used to identify the select menu. The title attribute can be spoken by screen readers or displayed as a tool tip for people using screen magnifiers. There must be visual information on the page which allows sighted users to understand the purpose of the form controls and user agents.

<label for="search-term">Search for:</label>
<input id="search-term" name="search-term" type="text" value="">
<select title="Search in" id="scope">
  ...
</select> 
Example 2: Input fields for a phone number

A Web page contains controls for entering a phone number in the United States, with three fields for area code, exchange, and last four digits.

<fieldset>
  <legend>Phone number</legend>
  <input id="area-code" name="area-code" title="Area Code" 
   type="text" size="3" value="">
  <input id="exchange" name="exchange" title="First three digits of phone number" 
   type="text" size="3" value="">
  <input id="last-digits" name="last-digits" title="Last four digits of phone number" 
   type="text" size="4" value="">
</fieldset> 
Example 3: A Search Function

A Web page contains a text field where the user can enter search terms and a button labeled "Search" for performing the search. The title attribute is used to identify the form control and the button is positioned right after the text field so that it is clear to the user that the text field is where the search term should be entered.

<input type="text" title="Type search term here"> <input type="submit" value="Search">

Example 4: A data table of form controls

A data table of form controls needs to associate each control with the column and row headers for that cell. Without a title (or off-screen label) it is difficult for non-visual users to pause and interrogate for corresponding row or column header values using their assistive technology while tabbing through the form.

For example, a survey form has four column headers in first row: Question, Agree, Undecided, Disagree. Each following row contains a question and a radio button in each cell corresponding to answer choice in the three columns. The title attribute for every radio button contains the information necessary to identify the control.

Related techniques:
- H44: Using label elements to associate text labels with form controls
- H71: Providing a description for groups of form controls using fieldset and legend elements


------------------------------

H67: - Using null alt text and no title attribute on img elements for images that assistive technology should ignore
Using null alt text and no title attribute on img elements for images that assistive technology should ignore

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Sufficient).
	- This technique applies to HTML documents that load images.

Description : The purpose of this technique is to show how images can be marked so that they can be ignored by assistive technology. : If no title attribute is used, and the alt text is set to null (i.e., alt="") it indicates to assistive technology that the image can be safely ignored. : Note : Having a "null" alt attribute is not the same as having no alt attribute.

Examples
Example 1: Inserting a decorative image on a Web page
<img alt="" src="squiggle.gif" height="20" width="20">


------------------------------

H69: - Providing heading elements at the beginning of each section of content
Providing heading elements at the beginning of each section of content

About this Technique
	- This technique relates to:
	- 2.4.1: Bypass Blocks (Sufficient when used for grouping blocks of repeated material in a way that can be skipped)
	- 2.4.10: Section Headings (Sufficient)
	- This technique applies to HTML.

Description : The objective of this technique is to use section headings to convey the structure of the content. Heading markup can be used: : to indicate start of main content;
	- to mark up section headings within the main content area;
	- to demarcate different navigational sections like top or main navigation, left or secondary navigation and footer navigation;
	- to mark up images of text that are used as headings;
	- to allow users the ability to navigate a page by sections or skip repeated blocks of information. : Headings are designed to convey logical hierarchy. Skipping levels in the sequence of headings may create the impression that the structure of the document has not been properly thought through or that specific headings have been chosen for their visual rendering rather than their meaning. Authors are encouraged to nest headings hierarchically. When headings are nested hierarchically, the most important information is given the highest logical level, and subsections are given subsequent logical levels.(i.e., h2 is a subsection of h1). Providing this type of structure will help users understand the overall organization of the content more easily. : Since headings indicate the start of important sections of content, it is possible for users with assistive technology to jump directly to the appropriate heading and begin reading the content. This significantly speeds interaction for users who would otherwise access the content slowly. Headings create chunks of information that can be found easily by people with disabilities, such as a blind person using a screen reader, or a person with a cognitive disability who uses assistive technology that delineates groups of information, or someone with a communication disability or illiteracy, who uses a screen reader to assist them in their reading. : Note : All of our techniques assume that people needing special user agents (including assistive technology or special plug-ins) will get and be using that type of user agent (for example: a screen reader, or plug-in that allows keyboard navigation of properly marked up content, etc.).

Examples
Example 1: Organizing the sections of a search page

This example marks up each section heading using h2 elements.

<h1>Search Technical Periodicals</h1>
 <h2>Search</h2>
 <form action="/search" role="search">
  <label for="searchInput">Enter search topic:</label>
  <input id="searchInput" type="text">
  <input type="submit" value="Search">
 </form>
 <section>
   <h2>Available Periodicals</h2>
   <ul>
     <li><a href="https://example.com/pcoder">Professional Coder</a></li>
     <li><a href="https://example.com/algo">Algorithms</a></li>
     <li><a href="https://example.com/jse">Journal of Software Engineering</a></li>
   </ul>
 </section>
 <section>
   <h2>Search Results</h2>
   ... search results are returned in this section ...
 </section>
Example 2: Headings show the overall organization of the content

In this example, heading markup is used to make the navigation and main content sections perceivable.

<main>
  <h1>Why Monday Monkey Lives For The Weekend</h1>
  ... text, images, and other material making up the main content ...
</main>
<nav aria-labelledby="nav-heading">
  <h2 id="nav-heading">More About Monday Monkey, Ltd.</h2>
  <ul>
    <li><a href="/about">About us</a></li>
    <li><a href="/contact">Contact us</a></li>
    ...
  </ul>
</nav>
Example 3: Headings show the organization of material within the main content
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Cooking techniques</title>  
  </head>   
  <body>
    <main>
      <h1>Cooking techniques</h1>     
      <p>... some text here ...</p>
      <h2>Cooking with oil</h2> 
      <p>... text of the section ...</p>
      <h2>Cooking with butter</h2>       
      <p>... text of the section ...</p>
    </main>
  </body> 
</html>

Related techniques:
- H42: Using h1-h6 to identify headings
- H97: Grouping related links using the nav element
- F2: Failure of Success Criterion 1.3.1 due to using changes in text presentation to convey information without using the appropriate markup or text


------------------------------

H71: - Providing a description for groups of form controls using fieldset and legend elements
Providing a description for groups of form controls using fieldset and legend elements

About this Technique
	- This technique relates to:
	- 1.3.1: Info and Relationships (Sufficient when used for making information and relationships conveyed through presentation programmatically determinable)
	- 3.3.2: Labels or Instructions (Sufficient)
	- This technique applies to HTML.

Description : The objective of this technique is to provide a semantic grouping for related form controls. This allows users to understand the relationship of the controls and interact with the form more quickly and effectively. : Form controls can be grouped by enclosing them within the fieldset element. All controls within a given fieldset are then related. The first element inside the fieldset must be a legend element, which provides a label or description for the group. Authors should avoid nesting fieldsets unnecessarily, as this can lead to confusion. : Grouping controls is most important for related radio buttons and checkboxes. A set of radio buttons or checkboxes is related when they all submit values for a single named field. They work in the same way as selection lists, allowing the user to choose from a set of options, except selection lists are single controls while radio buttons and checkboxes are multiple controls. The individual label associated with each radio or checkbox control may not fully convey the group's descriptive context. In this situation, it is essential that they be grouped together semantically to facilitate being treated as a single control, as well as to provide an additional group level description. Often, user agents will present the value of the legend before the label of each control to provide this description, as well as to remind users that they are part of the same group. : It can also be useful to group other sets of controls less tightly related than radio buttons and checkboxes. For instance, several fields that collect a user's address might be grouped together with a legend of "Address", thus providing a group level description for these controls. As a rule of thumb, it can be said that where a group of controls within a larger form requires an additional heading to provide a description specific to that particular group, the use of fieldset and legend elements is appropriate. : However, when a group of related radio buttons or checkboxes (even having values for a single named field) includes clear instructions and distinct selections (i.e., where the individual label associated with each particular control provides a sufficient description), the use of the fieldset and legend elements is not required. H44 is sufficient in this case. : Authors sometimes avoid using the fieldset element because of the default display in the browser, which draws a border around the grouped controls. This visual grouping is also useful and authors should seriously consider retaining it (or some form of visual grouping). The visual effect can be modified in CSS by overriding the border property of the fieldset and the position property of the legend.

Examples
Example 1: A multiple choice test

This example shows a test item with one question and five possible answers. Each answer is represented by a radio button (input type="radio"). The radio buttons are contained within a fieldset. The test question is tagged with the legend element. Each field has the same name attribute, indicating these radio buttons are related, and should be grouped as shown. Also note that while the name attributes have the same value, the id attributes' values must be unique.

<fieldset>
  <legend>The play <cite>Hamlet</cite> was written by:</legend>
  <div>
    <input checked="checked" id="shakesp" name="hamlet" type="radio" value="a">
    <label for="shakesp">William Shakespeare</label>
  </div>
  <div>
    <input id="austen" name="hamlet" type="radio" value="b">
    <label for="austen">Jane Austen</label>
  </div>
  <div>    
    <input id="gbshaw" name="hamlet" type="radio" value="c">
    <label for="gbshaw">George Bernard Shaw</label>
  </div>
  <div>
    <input id="woolf" name="hamlet" type="radio" value="d">
    <label for="woolf">Virginia Woolf</label>
  </div>
  <div>
    <input id="dickens" name="hamlet" type="radio" value="e">
    <label for="dickens">Charles Dickens</label>
  </div>
</fieldset>
Example 2: A set of checkboxes

The User Profile page for a Web site allows users to indicate their interests by selecting multiple checkboxes. Each checkbox (input type="checkbox") has a label. The checkboxes are contained within a fieldset, and the legend element contains the prompt for the entire group of checkboxes.

<fieldset>
  <legend>I am interested in the following (check all that apply):</legend>
  <div>
    <input id="photo" name="interests" type="checkbox" value="ph">
    <label for="photo">Photography</label>
  </div>
  <div>    
    <input checked="checked" id="watercol" name="interests" type="checkbox" value="wa">
    <label for="watercol">Watercolor</label>
  </div>
  <div>  
    <input checked="checked" id="acrylic" name="interests" type="checkbox" value="ac">
    <label for="acrylic">Acrylic</label>
  </div>
</fieldset>
Example 3: Logically related controls

In this example, form fields for residential and postal addresses are distinguished by the value of the legend in each fieldset grouping.

<form action="/adduser" method="post">
  <fieldset>
    <legend>Your Residential Address</legend>
    <div>
      <label for="raddress">Address:</label>
      <input autocomplete="street-address" id="raddress" name="raddress" type="text">
    </div>
    <div>
      <label for="rzip">Postal/Zip Code:</label>
      <input autocomplete="postal-code" id="rzip" name="rzip" type="text">
    </div>    
  </fieldset>
  <fieldset>
    <legend>Your Postal Address</legend>
    <div>    
      <label for="paddress">Address:</label>
      <input autocomplete="street-address" id="paddress" name="paddress" type="text">
    </div>
    <div>      
      <label for="pzip">Postal/Zip Code:</label>
      <input autocomplete="postal-code" id="pzip" name="pzip" type="text">
    </div>    
  </fieldset>
</form>

Related techniques:
- H44: Using label elements to associate text labels with form controls
- H65: Using the title attribute to identify form controls when the label element cannot be used


------------------------------

H76: - Using meta refresh to create an instant client-side redirect
Using meta refresh to create an instant client-side redirect

About this Technique
	- This technique relates to 3.2.5: Change on Request (Sufficient when used with G110: Using an instant client-side redirect).
	- This technique applies to HTML.

Description : The objective of this technique is to enable redirects on the client side without confusing the user. Redirects are preferably implemented on the server side (see Implementing automatic redirects on the server side instead of on the client side), but authors do not always have control over server-side technologies. : In HTML, one can use the meta element with the value of the http-equiv attribute set to refresh and the value of the content attribute set to 0 (meaning zero seconds), followed by the URI that the browser should request. It is important that the time-out is set to zero, to avoid that content is displayed before the new page is loaded. The page containing the redirect code should only contain information related to the redirect.

Examples
Example 1: Instantly redirecting a page
<!doctype html>
<html lang="en">    
  <head>
    <meta charset="utf-8">
    <title>Panucci's Pizza</title>
    <meta http-equiv="refresh" content="0; URL=https://planet-express.example.com">
  </head>    
  <body>
    <p>This page has moved to <a href="https://planet-express.example.com">
       Planet Express</a>.</p> 
  </body>  
</html>

Related techniques:
- G110: Using an instant client-side redirect


------------------------------

H77: - Identifying the purpose of a link using link text combined with its enclosing list item
Identifying the purpose of a link using link text combined with its enclosing list item

About this Technique
	- This technique relates to 2.4.4: Link Purpose (In Context) (Sufficient when used for Identifying the purpose of a link using link text combined with programmatically determined link context).
	- This technique applies to all technologies that contain links.

Description : The objective of this technique is to identify the purpose of a link from the link and its list item context. The list item enclosing the link provides context for an otherwise unclear link when the list item is the nearest enclosing block-level ancestor element. The description lets a user distinguish this link from links in the Web page that lead to other destinations and helps the user determine whether to follow the link. Note that simply providing the URI of the destination is generally not sufficiently descriptive. : Note : These descriptions will be most useful to the user if the additional information needed to understand the link precedes the link. If the additional information follows the link, there can be confusion and difficulty for screen reader users who are reading through the page in order (top to bottom).

Examples
Example 1
<ul>
  <li>
    Check out the video report for last year's 
    <a href="festival.html">National Folk Festival</a>.
  </li>
  <li>
    <a href="listen.html">Listen to the instruments</a>
  </li>
  <li>
    Guitar Man: George Golden talks about 
    <a href="mkguitars.html">making guitars</a>.
  </li>
</ul>
Example 2: A list of video games for download
<ul>
  <li>
    <a href="zelda-tears.html">Legend Of Zelda: Tears Of The Kingdom</a>
    <a href="zelda-tears-images.html">See Images</a>
    <a download href="zelda-tears-demo.mp4">Download Demo</a>
  </li>
  <li>
    <a href="metroid-prime.html">Metroid Prime</a>
    <a href="metroid-prime-images.html">See Images</a>
    <a download href="metroid-prime-demo.mp4">Download Demo</a>
  </li>
  <li>
    <a href="grand-theft-auto.html">Grand Theft Auto</a>
    <a href="grand-theft-auto-images.html">See Images</a>
    <a download href="grand-theft-auto.mp4">Download Demo</a>
  </li>
</ul>

Related techniques:
- G53: Identifying the purpose of a link using link text combined with the text of the enclosing sentence
- G91: Providing link text that describes the purpose of a link
- H33: Supplementing link text with the title attribute
- H78: Identifying the purpose of a link using link text combined with its enclosing paragraph
- H79: Identifying the purpose of a link in a data table using the link text combined with its enclosing table cell and associated table header cells
- H80: Identifying the purpose of a link using link text combined with the preceding heading element
- H81: Identifying the purpose of a link in a nested list using link text combined with the parent list item under which the list is nested
- C7: Using CSS to hide a portion of the link text


------------------------------

H78: - Identifying the purpose of a link using link text combined with its enclosing paragraph
Identifying the purpose of a link using link text combined with its enclosing paragraph

About this Technique
	- This technique relates to 2.4.4: Link Purpose (In Context) (Sufficient when used for Identifying the purpose of a link using link text combined with programmatically determined link context).
	- This technique applies to all technologies that contain links.

Description : The objective of this technique is to identify the purpose of a link from the link in its paragraph context. The paragraph enclosing the link provides context for an otherwise unclear link when the paragraph is the nearest enclosing block-level ancestor element. The description lets a user distinguish this link from links in the Web page that lead to other destinations and helps the user determine whether to follow the link. Note that simply providing the URI of the destination is generally not sufficiently descriptive. : Note : These descriptions will be most useful to the user if the additional information needed to understand the link precedes the link. If the additional information follows the link, there can be confusion and difficulty for screen reader users who are reading through the page in order (top to bottom).

Examples
Example 1: Announcements content on a folk festival Web page
<h3>The final 15</h3>
<p>
  Coming soon to a town near you: the final 15 in the 
  National Folk Festival lineup.
  <a href="final-15.html">Read more</a>
</p>

<h3>Folk artists get awards</h3>
<p>
  Performers from the upcoming National Folk Festival receive 
  National Heritage Fellowships. 
  <a href="national-heritage.html">Read more</a>
</p>

Related techniques:
- G53: Identifying the purpose of a link using link text combined with the text of the enclosing sentence
- G91: Providing link text that describes the purpose of a link
- H33: Supplementing link text with the title attribute
- H77: Identifying the purpose of a link using link text combined with its enclosing list item
- H79: Identifying the purpose of a link in a data table using the link text combined with its enclosing table cell and associated table header cells
- H80: Identifying the purpose of a link using link text combined with the preceding heading element
- H81: Identifying the purpose of a link in a nested list using link text combined with the parent list item under which the list is nested
- C7: Using CSS to hide a portion of the link text


------------------------------

H79: - Identifying the purpose of a link in a data table using the link text combined with its enclosing table cell and associated table header cells
Identifying the purpose of a link in a data table using the link text combined with its enclosing table cell and associated table header cells

About this Technique
	- This technique relates to 2.4.4: Link Purpose (In Context) (Sufficient when used for Identifying the purpose of a link using link text combined with programmatically determined link context).
	- This technique applies to all technologies that contain links.

Description : The objective of this technique is to identify the purpose of a link from the link in its data table context. This context is the table cell enclosing the link and the cell's associated table header cells. The data table context provides the purpose for an otherwise unclear link when the table cell is the nearest enclosing block-level ancestor element. It lets a user distinguish this link from other links in the Web page that lead to other destinations and helps the user determine whether to follow the link. Note that simply providing the URI of the destination is not sufficiently descriptive for people with disabilities, especially those with cognitive disabilities.

Examples
Example 1: A table of rental car choices
<table>
  <caption>Available rental cars with cost per day</caption>
  <tr>
    <th>Type of car</th>
    <th>Alamo</th>
    <th>Budget</th>
    <th>National</th>
    <th>Avis</th>
    <th>Hertz</th>
  </tr>
  <tr>
    <th scope="row">Economy</th>
    <td><a href="econ-ala.html">$67</a></td>
    <td><a href="econ-bud.html">$68</a></td>
    <td><a href="econ-nat.html">$72</a></td>
    <td><a href="econ-av.html">$74</a></td>
    <td><a href="econ-hz.html">$74</a></td>
  </tr>
  <tr>
    <th scope="row">Compact</th>
    <td><a href="comp-ala.html">$68</a></td>
    <td><a href="comp-bud.html">$69</a></td>
    <td><a href="comp-nat.html">$74</a></td>
    <td><a href="comp-av.html">$76</a></td>
    <td><a href="comp-hz.html">$76</a></td>
  </tr>
  <tr>
    <th scope="row">Mid-sized</th>
    <td><a href="mid-ala.html">$79</a></td>
    <td><a href="mid-bud.html">$80</a></td>
    <td><a href="mid-nat.html">$83</a></td>
    <td><a href="mid-av.html">$85</a></td>
    <td><a href="mid-hz.html">$85</a></td>
  </tr>
  <tr>
    <th scope="row">Full-sized</th>
    <td><a href="full-ala.html">$82</a></td>
    <td><a href="full-bud.html">$83</a></td>
    <td><a href="full-nat.html">$89</a></td>
    <td><a href="full-av.html">$91</a></td>
    <td><a href="full-hz.html">$91</a></td>
  </tr>
</table>

Related techniques:
- G53: Identifying the purpose of a link using link text combined with the text of the enclosing sentence
- G91: Providing link text that describes the purpose of a link
- H33: Supplementing link text with the title attribute
- H77: Identifying the purpose of a link using link text combined with its enclosing list item
- H78: Identifying the purpose of a link using link text combined with its enclosing paragraph
- H80: Identifying the purpose of a link using link text combined with the preceding heading element
- H81: Identifying the purpose of a link in a nested list using link text combined with the parent list item under which the list is nested
- C7: Using CSS to hide a portion of the link text


------------------------------

H80: - Identifying the purpose of a link using link text combined with the preceding heading element
Identifying the purpose of a link using link text combined with the preceding heading element

About this Technique
	- This technique relates to 2.4.4: Link Purpose (In Context) (Advisory).
	- This technique applies to HTML.

Description : The objective of this technique is to describe the purpose of a link from the context provided by its heading context. The preceding heading provides context for an otherwise unclear link. The description lets a user distinguish this link from links in the Web page that lead to other destinations and helps the user determine whether to follow the link. : Note : Whenever possible, provide link text that identifies the purpose of the link without needing additional context.

Examples
Example 1: Blocks of information on hotels

The information for each hotel consists of the hotel name, a description and a series of links to a map, photos, directions, guest reviews and a booking form.

<h2><a href="royal_palm_hotel.html" id="royal-heading">Royal Palm Hotel</a></h2>
<nav aria-labelledby="royal-heading">
  <ul>
    <li><a href="royal-palm-hotel_map.html">Map</a></li>
    <li><a href="royal-palm-hotel-photos.html">Photos</a></li>
    <li><a href="hroyal-palm-hotel-directions.html">Directions</a></li>
    <li><a href="royal-palm-hotel-reviews.html">Guest reviews</a></li>
    <li><a href="royal-palm-hotel-book.html">Book now</a></li>
  </ul>
</nav>	

<h2><a href="hotel-three-rivers.html" id="rivers-heading">Hotel Three Rivers</a></h2>
<nav aria-labelledby="rivers-heading">
  <ul>
    <li><a href="hotel-three-rivers-map.html">Map</a></li>
    <li><a href="hotel-three-rivers-photos.html">Photos</a></li>
    <li><a href="hotel-three-rivers-directions.html">Directions</a></li>
    <li><a href="hotel-three-rivers-reviews.html">Guest reviews</a></li>
    <li><a href="hotel-three-rivers-book.html">Book now</a></li>
  </ul>
</nav>
Example 2: A document provided in three formats
<h2>Annual Report 2006-2007</h2>
<p> 
  <a href="annual-report-0607.html">HTML</a>
  <a href="annual-report-0607.pdf">PDF</a>
  <a href="annual-report-0607.rtf">RTF</a>
</p>
Example 3: Newspaper Web site
<div class="card-link">
   <h2><a href="market-2023-09-27.html">Stock market soars as bullishness prevails</a></h2>
   <p>This week was a stellar week for the stock market as investing in gold rose 2%.</p>
</div>

A script is used to find each element with a class of card-link and append an additional paragraph with a "Read more" link at the end of the div with the class .card-link that goes to the same location as the link in the heading.

Related techniques:
- G91: Providing link text that describes the purpose of a link
- G53: Identifying the purpose of a link using link text combined with the text of the enclosing sentence
- H33: Supplementing link text with the title attribute
- C7: Using CSS to hide a portion of the link text
- H77: Identifying the purpose of a link using link text combined with its enclosing list item
- H78: Identifying the purpose of a link using link text combined with its enclosing paragraph
- H79: Identifying the purpose of a link in a data table using the link text combined with its enclosing table cell and associated table header cells
- H81: Identifying the purpose of a link in a nested list using link text combined with the parent list item under which the list is nested


------------------------------

H81: - Identifying the purpose of a link in a nested list using link text combined with the parent list item under which the list is nested
Identifying the purpose of a link in a nested list using link text combined with the parent list item under which the list is nested

About this Technique
	- This technique relates to 2.4.4: Link Purpose (In Context) (Sufficient when used for Identifying the purpose of a link using link text combined with programmatically determined link context).
	- This technique applies to HTML.

Description : The objective of this technique is to describe the purpose of a link in a nested list from the context provided by the list item under which the list is nested. This list item provides context for an otherwise unclear link. The description lets a user distinguish this link from links in the Web page that lead to other destinations and helps the user determine whether to follow the link. : Because current assistive technologies do not include commands to query contextual information provided by parent list items, use of this technique requires users to navigate the list one item at a time. Therefore, this technique may not be appropriate for very long or deeply nested lists. : Note : Whenever possible, provide link text that identifies the purpose of the link without needing additional context.

Examples
Example 1: A document provided in three formats
<ul>
  <li>Annual Report 2021
    <ul> 
      <li>
        <a href="ar-2021.html"><abbr title="HyperText Markup Language">HTML</abbr></a>
      </li>
      <li>
        <a href="ar-2021.pdf"><abbr title="Portable Document Format">PDF</abbr></a>
      </li>
      <li>
        <a href="ar-2021.rtf"><abbr title="Rich Text Format">RTF</abbr></a>
      </li>
    </ul>
  </li>
  <li>Annual Report 2022
    <ul> 
      <li>
        <a href="ar-2022.html">HTML</a>
      </li>
      <li>
        <a href="ar-2022.pdf">PDF</a>
      </li>
      <li>
        <a href="ar-2022.rtf">RTF</a>
      </li>
    </ul>
  </li>
</ul>
Example 2: Blocks of information about hotels

The information for each hotel consists of the hotel name, a description and a series of links to a map, photos, directions, guest reviews and a booking form.

<nav>
  <ul>
    <li><a href="royal-palm-hotel.html">Royal Palm Hotel</a>
      <ul>
        <li><a href="royal-palm-hotel-map.html">Map</a></li>
        <li><a href="royal-palm-hotel-photos.html">Photos</a></li>
        <li><a href="royal-palm-hotel-directions.html">Directions</a></li>
        <li><a href="royal-palm-hotel-reviews.html">Guest reviews</a></li>
        <li><a href="royal-palm-hotel-book.html">Book now</a></li>
      </ul>
    </li>
    <li><a href="hotel-three-rivers.html">Hotel Three Rivers</a>
      <ul>
        <li><a href="hotel-three-rivers-map.html">Map</a></li>
        <li><a href="hotel-three-rivers-photos.html">Photos</a></li>
        <li><a href="hotel-three-rivers-directions.html">Directions</a></li>
        <li><a href="hotel-three-rivers-reviews.html">Guest reviews</a></li>
        <li><a href="hotel-three-rivers-book.html">Book now</a></li>
      </ul>
    </li>
  </ul>
</nav>

Related techniques:
- G91: Providing link text that describes the purpose of a link
- G53: Identifying the purpose of a link using link text combined with the text of the enclosing sentence
- H33: Supplementing link text with the title attribute
- C7: Using CSS to hide a portion of the link text
- H77: Identifying the purpose of a link using link text combined with its enclosing list item
- H78: Identifying the purpose of a link using link text combined with its enclosing paragraph
- H79: Identifying the purpose of a link in a data table using the link text combined with its enclosing table cell and associated table header cells
- H80: Identifying the purpose of a link using link text combined with the preceding heading element


------------------------------

H83: - Using the target attribute to open a new window on user request and indicating this in link text
Using the target attribute to open a new window on user request and indicating this in link text

About this Technique
	- This technique relates to 3.2.5: Change on Request (Sufficient when used for including pop-up windows).
	- This technique applies to HTML.

Description : The objective of this technique is to avoid confusion that may be caused by the appearance of new windows that were not requested by the user. Suddenly opening new windows can disorient users or be missed completely by some. In HTML, the target attribute can be used to open a new window. : Use of the target attribute provides an unambiguously machine-readable indication that a new window will open. User agents can inform the user, and can also be configured not to open the new window. For those not using assistive technology, the indication would also be available from the link text. : Note : Note that not using the target allows the user to decide whether a new window should be opened or not.

Examples
Example 1: Using the target attribute in a link to indicate it will open in a new window
<a href="help.html" target="_blank">Show Help (opens new window)</a>

Related techniques:
- SCR24: Using progressive enhancement to open new windows on user request


------------------------------

H84: - Using a button with a select element to perform an action
Using a button with a select element to perform an action

About this Technique
	- This technique relates to 3.2.2: On Input (Sufficient when used with G80: Providing a submit button to initiate a change of context).
	- This technique applies to HTML.

Description : The objective of this technique is to allow the user to control when an action is performed, rather than having the action occur as a side effect of choosing a value for the select element. The user may inspect the different values of the select element, or may accidentally choose the wrong value, without causing the action to occur. When the user is satisfied with their choice, they select the button to perform the action. : This is particularly important for users who are choosing the value of the select element via the keyboard, since navigating through the options of the select element changes the value of the control.

Examples
Example 1: A calendar

A Web page lets the user choose a quarter of any year and display the calendar for those months. After the user has set the quarter and year, they display the calendar by pressing the "Show" button. This example relies on client-side scripting to implement the action.

<label for="quarter">Quarter:</label>
<select id="quarter" name="quarter">
  <option value="1">Quarter 1 (January - March)</option>
  <option value="2">Quarter 2 (April - June)</option>
  <option value="3">Quarter 3 (July - September)</option>
  <option value="4">Quarter 4 (October - December)</option>
</select> 
<label for="year">Year:</label>
<input name="year" type="text" id="year">
<button name="show" type="button">Show</button>
Example 2: Choosing an action

A select element contains a list of possible actions. The action is not performed until the user presses the "Update" button.

<form action="/process-form" method="post">
  <label for="action">Options:</label>
  <select name="action" id="action">
    <option value="add">Add</option>
    <option value="remove">Remove</option>
    <option value="cancel">Cancel</option>
    <option value="order">Order</option>
  </select> 
  <button name="submit" type="submit">Update</button>
</form>

Related techniques:
- H32: Providing submit buttons
- G80: Providing a submit button to initiate a change of context


------------------------------

H85: - Using optgroup to group option elements inside a select
Using optgroup to group option elements inside a select

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Sufficient when used for making information and relationships conveyed through presentation programmatically determinable).
	- This technique applies to HTML pages that collect user input.

Description : The objective of this technique is to group items in a selection list. A selection list is a set of allowed values for a form control such as a multi-select list or a combo box. Often, selection lists have groups of related options. Those groups should be semantically identified, rather than being delimited with "dummy" list entries, for example: an option element containing only a series of dashes to create a horizontal line. Semantically identifying groups of options helps to visually break up long lists so that users can more easily locate what they are interested in. : In HTML, the select element is used to create both multi-select lists and combo boxes. The various allowed options are each indicated with option elements. To group options together, use the optgroup element, with the related option elements inside that element. Label the group with the label attribute so users will know what to expect inside the group. : The optgroup element should be directly inside the select element, and the option elements directly inside the optgroup. It is possible for a select element to contain both single option elements and optgroup groups, though authors should consider if this is in fact the desired intent when using this. It is not possible to nest the optgroup element, so only one level of grouping can be done within a select. : If grouping information is essential to understanding the list, authors may define option labels that can be understood even when the screen reader does not present the grouping information provided by optgroup.

Examples
Example 1

The following combo box collects data about favorite foods. Grouping by type allows users to select their preference more quickly.

<form action="/favorite-food/" method="post">
  <label for="food">What is your favorite food?</label>
  <select id="food" name="food">
    <optgroup label="Fruits">
      <option value="1">Apples</option>
      <option value="2">Bananas</option>
      <option value="3">Peaches</option>
    </optgroup>
    <optgroup label="Vegetables">
      <option value="4">Broccoli</option>
      <option value="5">Carrots</option>
      <option value="6">Cucumbers</option>
    </optgroup>
    <optgroup label="Baked Goods">
      <option value="7">Apple Pie</option>
      <option value="8">Bagels</option>
      <option value="9">Chocolate Cake</option>
    </optgroup>
   </select>
</form>
Example 2

The following example shows how a multi-select box can make use of the optgroup element.

<form action="/animals/" method="post">
  <label for="animals">Pick your favorite animals:</label>
  <select id="animals" multiple name="animals" size="10">
    <optgroup label="Dinosaurs">
      <option value="brontosaurus">Brontosaurus</option>
      <option value="pterodactyl">Pterodactyl</option>
      <option value="trex">Tyrannosaurus Rex</option>
      <option value="velociraptor">Velociraptor</option>
    </optgroup>
    <optgroup label="Ungulates">
      <option value="camel">Camel</option>
      <option value="giraffe">Giraffe</option>
      <option value="hippo">Hippo</option>
      <option value="horse">Horse</option>
      <option value="zebra">Zebra</option>
    </optgroup>
    <optgroup label="Household Pets">
      <option value="cat">Cat</option>
      <option value="dog">Dog</option>
      <option value="fish">Fish</option>
      <option value="rabbit">Rabbit</option>
    </optgroup>
  </select>
</form>


------------------------------

H86: - Providing text alternatives for emojis, emoticons, ASCII art, and leetspeak
Providing text alternatives for emojis, emoticons, ASCII art, and leetspeak

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Sufficient).
	- This technique applies to HTML.

Description : Emojis are very popular and are frequently used online to help provide more context and expression to text-based communication. Emojis come with their own pre-defined names that might not always match what the author is intending to communicate. For example, the emoji of a black right-facing triangle (►) is described by default as black right-pointing pointer, which would be confusing if a designer had changed its rotation or color, or if it was being used to give the accessible name to a "play" button in a multimedia player. : Emoticons pre-date emojis, are still used but are much less popular than they once were. Emoticons use ASCII characters to create facial expressions and other ways to communicate an emotion. Because emoticons are made from many text characters, they can be confusing for screen reader users. When possible it is better simply to use a word like "smile" or a suitable emoji instead of an emoticon. If emoticons are used they should have a text alternative. : ASCII art was common on the internet before graphics became widely used. ASCII characters were arranged to form pictures, pictures of text, or graphs. Although ASCII content is not used frequently on the Web anymore, it must be remembered that, when it is used, it can be very confusing to people who are accessing the internet using screen readers. If ASCII art is used, it should also have a text explanation of what the picture is. It is also suggested that, if the ASCII picture isn't marked up as an image using ARIA, that there is a link to skip over the art (although this is not required). : Leet used to be a fairly-common part of Internet culture and slang, but is now hardly used. Leetspeak uses various combinations of characters, including numerals and special characters, to replace standard characters. Leet is often incomprehensible to people using screen readers, and therefore requires a text alternative in order to conform to Success Criterion 1.1.1 (Non-Text Content).

Examples
Example 1: Marking up emojis in a sentence

This shows a technique to mark up emojis with accessible names that differ from their default. Because you can't use an alt attribute on a span element and the ARIA recommendation disallows accessible names on generic elements, to give the emojis accessible names they are defined as images with the ARIA role="img" property which then allows the creation of an accessible name using the aria-label property.

<p>I smiled at my friend and gestured 
   <span aria-label="you" role="img">👉🏾</span>
   <span aria-label="rock" role="img">🤘🏾</span>!
</p>
Example 2: Four options for providing alternatives for an emoticon representing "smile"

The following shows four options for providing alternatives for an emoticon representing "smile", which is consists of a colon followed by a closing parenthesis.

:) (smile)
<abbr title="smile">:)</abbr>
<span aria-label="smile" role="img">:)</span>
<img alt="smile" src="smile.gif">
Example 3: Using the aria-label and role="img" properties

Adding the role="img" property to the ASCII content's containing element defines it as an image, and the aria-label property gives it the required text alternative. Skip to the next ASCII example.


<div aria-label="WCAG" role="img">
oooooo   oooooo     oooo   .oooooo.         .o.         .oooooo.    
 `888.    `888.     .8'   d8P'  `Y8b       .888.       d8P'  `Y8b   
   `888.   .8888.   .8'   888              .8"888.     888           
    `888  .8'`888. .8'    888             .8' `888.    888           
     `888.8'  `888.8'     888            .88ooo8888.   888     ooooo 
       `888'    `888'      `88b    ooo   .8'     `888.  `88.    .88'  
        `8'      `8'        `Y8bood8P'  o88o     o8888o  `Y8bood8P'
</div>
Example 4: ASCII art with an explanation of the picture preceding it

This example includes a link to skip over the ASCII art. Skip to the Leetspeak example.

<figure>
  <figcaption>
    <p>Figure 1: ASCII art picture of a butterfly.
      <a href="#skipbutterfly">Skip ASCII butterfly image</a>
    </p>
  </figcaption>
                                 
                                                                LLLLLLLLLLL
                                                            __LLLLLLLLLLLLLL
                                                           LLLLLLLLLLLLLLLLL
                                                         _LLLLLLLLLLLLLLLLLL
                                                        LLLLLLLLLLLLLLLLLLLL
                                                      _LLLLLLLLLLLLLLLLLLLLL
                                                      LLLLLLLLLLLLLLLLLLLLLL
                                              L     _LLLLLLLLLLLLLLLLLLLLLLL
                                             LL     LLLLLL~~~LLLLLLLLLLLLLL
                                            _L    _LLLLL      LLLLLLLLLLLLL
                                            L~    LLL~        LLLLLLLLLLLLL
                                           LL   _LLL        _LL   LLLLLLLL
                                          LL    LL~         ~~     ~LLLLLL
                                          L   _LLL_LLLL___         _LLLLLL
                                         LL  LLLLLLLLLLLLLL      LLLLLLLL
                                         L  LLLLLLLLLLLLLLL        LLLLLL
                                        LL LLLLLLLLLLLLLLLL        LLLLL~
                  LLLLLLLL_______       L _LLLLLLLLLLLLLLLL     LLLLLLLL
                         ~~~~~~~LLLLLLLLLLLLLLLLLLLLLLLLL~       LLLLLL
                       ______________LLL  LLLLLLLLLLLLLL ______LLLLLLLLL_
                   LLLLLLLLLLLLLLLLLLLL  LLLLLLLL~~LLLLLLL~~~~~~   ~LLLLLL
             ___LLLLLLLLLL __LLLLLLLLLLLLL LLLLLLLLLLLLL____       _LLLLLL_
          LLLLLLLLLLL~~   LLLLLLLLLLLLLLL   LLLLLLLLLLLLLLLLLL     ~~~LLLLL
      __LLLLLLLLLLL     _LLLLLLLLLLLLLLLLL_  LLLLLLLLLLLLLLLLLL_       LLLLL
     LLLLLLLLLLL~       LLLLLLLLLLLLLLLLLLL   ~L ~~LLLLLLLLLLLLL      LLLLLL
   _LLLLLLLLLLLL       LLLLLLLLLLLLLLLLLLLLL_  LL      LLLLLLLLL   LLLLLLLLL
  LLLLLLLLLLLLL        LLLLLLLLLLLLL~LLLLLL~L   LL       ~~~~~       ~LLLLLL
 LLLLLLLLLLLLLLL__L    LLLLLLLLLLLL_LLLLLLL LL_  LL_            _     LLLLLL
LLLLLLLLLLLLLLLLL~     ~LLLLLLLL~~LLLLLLLL   ~L  ~LLLL          ~L   LLLLLL~
LLLLLLLLLLLLLLLL               _LLLLLLLLLL    LL  LLLLLLL___     LLLLLLLLLL
LLLLLLLLLLLLLLLL              LL~LLLLLLLL~     LL  LLLLLLLLLLLL   LLLLLLL~
LLLLLLLLLLLLLLLL_  __L       _L  LLLLLLLL      LLL_ LLLLLLLLLLLLLLLLLLLLL
 LLLLLLLLLLLLLLLLLLLL        L~  LLLLLLLL      LLLLLLL~LLLLLLLLLLLLLLLL~
  LLLLLLLLLLLLLLLLLLLL___L_ LL   LLLLLLL       LLLL     LLLLLLLLLLLLLL
   ~~LLLLLLLLLLLLLLLLLLLLLLLL     LLLLL~      LLLLL        ~~~~~~~~~
           LLLLLLLLLLLLLLLLLL_ _   LLL       _LLLLL
               ~~~~~~LLLLLLLLLL~             LLLLLL
                         LLLLL              _LLLLLL
                         LLLLL    L     L   LLLLLLL
                          LLLLL__LL    _L__LLLLLLLL
                          LLLLLLLLLL  LLLLLLLLLLLL
                           LLLLLLLLLLLLLLLLLLLLLL
                            ~LLLLLLLLLLLLLLLLL~~
                               LLLLLLLLLLLLL
                                 ~~~~~~~~~
</figure>
<p id="skipbutterfly">New content after the ASCII image.</p>
Example 5: Marking up Leetspeak

The following is Leetspeak for "Austin Rocks".

<abbr title="Austin Rocks">Au5t1N r0xx0rz</abbr>


------------------------------

H88: - Using HTML according to spec
Using HTML according to spec

About this Technique
	- This technique relates to 4.1.2: Name, Role, Value (Sufficient when used with G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes).
	- This technique applies to HTML.

Description : The objective of this technique is to use HTML according to its specification. Technology specifications define the meaning and proper handling of features of the technology. Using those features in the manner described by the specification ensures that user agents, including assistive technologies, will be able to present representations of the feature that are accurate to the author's intent and interoperable with each other. : There are a few broad aspects to using HTML according to its specification. : Using only features that are defined in the specification HTML defines sets of elements, attributes, and attribute values that may be used on Web pages. These features have specific semantic meanings and are intended to be processed by user agents in particular ways. Sometimes, however, additional features come into common authoring practice. These are usually initially supported by only one user agent. When features not in the specification are used, many user agents may not support the feature for a while or ever. Furthermore, lacking standard specifications for the use of these features, different user agents may provide varying support. This impacts accessibility because assistive technologies, developed with fewer resources than mainstream user agents, may take a long time if ever to add useful support. Therefore, authors should avoid features not defined in HTML to prevent unexpected accessibility problems.
	- Using features in the manner prescribed by the specification The HTML specification provides specific guidance about how particular elements, attributes, and attribute values are to be processed and understood semantically. Sometimes, however, authors use features in a manner that is not supported by the specification, for example, using semantic elements to achieve visual effects without intending the underlying semantic message to be conveyed. This leads to confusion for user agents and assistive technologies that rely on correct semantic information to present a coherent representation of the page. It is important to use HTML features only as prescribed by the HTML specification.
	- Making sure the content can be parsed HTML defines how content should be encoded in order to be correctly processed by user agents. Rules about the structure of start and end tags, attributes and values, nesting of elements, etc. ensure that user agents will parse the content in a way to achieve the intended document representation. Following the structural rules in these specifications is an important part of using these technologies according to specification.


------------------------------

H89: - Using the title attribute to provide context-sensitive help
Using the title attribute to provide context-sensitive help

About this Technique
	- This technique relates to 3.3.5: Help (Advisory).
	- This technique applies to HTML.

Description : The objective of this technique is to provide context sensitive help for users as they enter data in forms by providing the help information in a title attribute. The help may include format information or examples of input. : Note : Current user agents and assistive technologies do not always provide the information contained in the title attribute to users. Avoid using this technique in isolation.

Examples
Example 1

A mapping application provides a form consisting of a label "Address:", an input component and a submit button with value "Find map". The input component has a title attribute value with an example of the address format the user should enter.

<label for="search-address">Address:</label>
<input id="search-address" name="search-address" size="30"
 title="Address example: 101 Collins St, Melbourne, Australia" type="text" value="">
Example 2

A form that allows users to pay their bill online requires the user to enter their account number. The input component associated with the "Account number" label has a title attribute providing information on locating the account number.

<label for="acc-num1">Account number:</label>
<input id="acc-num1" size="10"
 title="Your account number can be found in the top right-hand corner of your bill"
 type="text" value="">

Related techniques:
- H65: Using the title attribute to identify form controls when the label element cannot be used
- G71: Providing a help link on every Web page


------------------------------

H90: - Indicating required form controls using label or legend
Indicating required form controls using label or legend

About this Technique
	- This technique relates to 3.3.2: Labels or Instructions (Sufficient when used with G131: Providing descriptive labels).
	- This technique applies to HTML controls that use external labels.

Description : The objective of this technique is to provide a clear indication that a specific form control in a Web application or form is required for successful data submission. A symbol or text indicating that the control is required is programmatically associated with the field by using the label element, or the legend for groups of controls associated via fieldset. If a symbol is used, the user is advised of its meaning before the first use.

Examples
Example 1: Using text to indicate required state

The text field in the example below has the explicit label of "First name (required):". The label element's for attribute matches the id attribute of the input element and the label text indicates that the control is required.

<label for="firstname">First name (required):</label> 
<input id="firstname" name="firstname" type="text">

Note

Some authors abbreviate "required" to "req.". There is anecdotal evidence that suggests this abbreviation is confusing.

Example 2: Using an asterisk to indicate required state

The text field in the example below has an explicit label that includes an asterisk to indicate the control is required. It is important that the asterisk meaning is defined at the start of the form. In this example, the asterisk is contained within a abbr element to allow for the asterisk character to be styled so that it is larger than the default asterisk character, since the asterisk character can be difficult to see for those with impaired vision.

The CSS
.req {font-size: 150%}
The HTML
<p>Required fields are marked with an asterisk
   (<abbr class="req" title="required">*</abbr>).</p>
<form action="https://example.com" method="post">
  <label for="firstname">First name <abbr class="req" title="required">*</abbr>:</label> 
  <input id="firstname" name="firstname" type="text">
  ...
</form>
Example 3: Using an image to indicate required state

The text field in the example below has an explicit label that includes an image to indicate the control is required. It is important that the image meaning is defined at the start of the form.

<p><img alt="required" src="req_img.gif"> indicates that the information is required</p>
<form action="https://www.example.com" method="post">
  <label for="firstname">First name <img alt="required" src="req_img.gif">:</label> 
  <input id="firstname" name="firstname" type="text">
  ...
</form>
Example 4: Indicating required state for groups of radio buttons or check box controls

Radio buttons and checkboxes are treated differently than other interactive controls since individual radio buttons and checkboxes are not required but indicates that a response for the group is required. The methods used in examples 1-3 apply to radio buttons and checkboxes, but the indication of the required state should be placed in the legend element instead of the label element.

<fieldset>
  <legend>I am interested in the following (Required):</legend>
  <div>
    <input id="photo" name="interests" type="checkbox" value="ph">
    <label for="photo">Photography</label>
  </div>
  <div>
    <input checked id="watercol" name="interests" type="checkbox" value="wa">
    <label for="watercol">Watercolor</label>
  </div>
  <div>
    <input checked id="acrylic" name="interests" type="checkbox" value="ac">
    <label for="acrylic">Acrylic</label>
  </div>
  ...
</fieldset>

Related techniques:
- H44: Using label elements to associate text labels with form controls
- H65: Using the title attribute to identify form controls when the label element cannot be used
- H71: Providing a description for groups of form controls using fieldset and legend elements


------------------------------

H91: - Using HTML form controls and links
Using HTML form controls and links

About this Technique
	- This technique relates to:
	- 2.1.1: Keyboard (Sufficient when used for ensuring keyboard control)
	- 4.1.2: Name, Role, Value (Sufficient when used with G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes)
	- This technique applies to HTML form controls and links.

Description : The objective of this technique is to use standard HTML form controls and link elements to provide keyboard operation and assistive technology interoperability of interactive user interface elements. : User agents provide the keyboard operation of HTML form controls and links. In addition, the user agent maps the form controls and links to an accessibility API. Assistive technologies use the accessibility API to extract appropriate accessibility information, such as role, name, state, and value, and present them to users. The role is provided by the HTML element, and the name is provided by the text associated with that element. Elements for which values and states are appropriate also expose the values and states via multiple mechanisms. : In some cases, the text is already associated with the control through a required attribute. For example, submit buttons use the button element text or image alt attribute as the name. In the case of form controls, label elements; the aria-label or aria-labelledby properties; or the title attribute are used.

Examples
Example 1: Links

User agents provide mechanisms to navigate to and select links. In each of the following examples, the role is "link" because the a element has an href attribute. An a element without an href isn't a link. The link's value is the URI in the href attribute.

Link example A

In example A, the name is the text inside the link, in this case "Example Site".

<a href="https://example.com">Example Site</a>
Link example B

In example B of an image inside a link, the alt attribute for the image provides the name.

<a href="https://example.com"><img alt="Example" src="example-logo.gif"></a>
Link example C

In example C, some assistive technology will not automatically insert a space character when concatenating the image's alt text and the text of the link. If the text should not be concatenated without a space, it is safest to insert a space between the image and the adjacent word so that words will not run together.

<a href="https://example.com"><img alt="Example " src="example_logo.gif">Text</a>
Example 2: Buttons

There are several ways to create a button in HTML.

Buttons example A

In example A, the text contained in the button element, in this case "save", gives the button its name. There is no value.

<button type="button">Save</button>
Buttons example B

Example B uses the value attribute, in this case "Save", "Submit", or "Reset" as the name.

<input type="button" value="Save"> 
<input type="submit" value="Submit">
<input type="reset" value="Reset">
Buttons example C

Example C uses the alt attribute, in this case "save", as the name.

<input alt="save" src="save.gif" type="image">
Buttons example D

Example D clarifies how the user agent determines the name if the author specifies both the alt and title attributes of the input element. In this case, the user agent uses the alt attribute ("Save") and ignores the title attribute.

<input alt="save" src="save.gif" title="save the file" type="image">
Example 3: Text Input
Text Input example A

In example A, the input field has a role of "editable text". The label element is associated to the input element via the for attribute which references the id attribute of the input element. The name comes from the label element, in this case, "Type of fruit". Its value comes from its value attribute, in this case "bananas".

<label for="text-1">Type of fruit</label>
<input id="text-1" type="text" value="bananas">
Text Input example B

In example B, the input field has the same role as example A, but the value is the empty string and the field gets its name from the aria-label property.

<input aria-label="Type of fruit" id="text-1" type="text">
Example 4: Checkbox

This example has a role of checkbox, from the type attribute of the input element. The label element is associated with the input element via the for attribute which refers to the id attribute of the input element. The name comes from the label element, in this case "cheese". Its state can be checked or unchecked and comes from the checked attribute. The state can be changed by the user's interaction with the control.

<label for="cb-1">Cheese</label> 
<input checked id="cb-1" type="checkbox">
Example 5: Radio Buttons

This example has a role of "radio button" from the type attribute on the input element. Its name comes from the label element. Its state can be checked or unchecked and comes from the checked attribute. The state can be changed by the user's interaction with the control.

<input checked id="r1" name="color" type="radio"><label for="r1">Red</label>
<input id="r2" name="color" type="radio"><label for="r2">Blue</label>
<input id="r3" name="color" type="radio"><label for="r3">Green</label>
Example 6: Radio Fieldset

The radio fieldset has a role of "grouping". The name comes from the legend element.

<fieldset>
  <legend>Choose a Color:</legend>
  <div>
    <input id="red" name="color" type="radio" value="red">
    <label for="red">Red</label>
  </div>
  <div>
    <input id="blue" name="color" type="radio" value="blue">
    <label for="blue">Blue</label>
  </div>
  <div>
    <input id="green" name="color" type="radio" value="green">
    <label for="green">Green</label> 
</fieldset>
Example 7: Select Element
Select element example A

Example A has a role of "list box" from the select element. Its name is "Numbers" from the label element. Forgetting to give a name to the select is a common error. The value is the option element that has the selected attribute present. In this case, the default value is "Two".

<label for="s1">Numbers</label>
<select id="s1">
  <option>One</option>
  <option selected>Two</option>
  <option>Three</option>
</select>
Select Element example B

Example B has the same name, role, and value as the above, but sets the name with the aria-label property on the select element. This technique can be used when a visible label is not possible.

<select aria-label="Numbers" id="s1">
  <option>One</option>
  <option selected>Two</option>
  <option>Three</option>
</select>

Related techniques:
- H44: Using label elements to associate text labels with form controls


------------------------------

H95: - Using the track element to provide captions
Using the track element to provide captions

About this Technique
	- This technique relates to 1.2.2: Captions (Prerecorded) (Sufficient when used with G87: Providing closed captions).
	- This technique applies to HTML.

Description : The objective of this technique is to use the HTML track element to specify a captions timed text track for a video element. Caption timed text tracks contain transcription or translation of the dialogue, sound effects, relevant musical cues, and other relevant audio information, suitable for when sound is unavailable or not clearly audible. : The src attribute of the track element is a URL that is the address of the text track data. : The kind attribute of the track element indicates the kind of information in the timed text. captions text tracks provide a text version of dialogue and other sounds important to understanding the video. Subtitles contain only the dialogue. If other audio information is important to understanding the video, a subtitle track will not be sufficient to meet the success criterion. : Note : Some regions use the term "subtitle" for any visible text representation of the audio track. An author may mark up a timed text track in the language of the audio track as kind=subtitles, instead of kind=captions, and may include additional relevant audio information. It is not best practice to use subtitles in this situation, since it may confuse users who are trying to find captions, but such a timed text track would meet the requirements of Success Criterion 1.2.2.

Examples
Example 1: Captions in one language

A video element for a video in the English language with an English caption track. The captions are provided in the WebVTT format.

<video poster="myvideo.png" controls>
  <source src="myvideo.mp4" srclang="en" type="video/mp4">
  <track kind="captions" label="English" src="myvideo_en.vtt" srclang="en">
</video>
Example 2: Captions in multiple languages

A video element for a video in the English language with an English caption track. The captions are provided in the WebVTT format.

<video poster="myvideo.png" controls>
  <source src="myvideo.mp4" srclang="en" type="video/mp4">
  <source src="myvideo.webm" srclang="fr" type="video/webm">
  <track kind="captions" label="English" src="myvideo-en.vtt" srclang="en">
  <track kind="captions" label="Français" src="myvideo-fr.ttml" srclang="fr">
</video>

Related techniques:
- G87: Providing closed captions


------------------------------

H96: - Using the track element to provide audio descriptions
Using the track element to provide audio descriptions

About this Technique
	- This technique relates to:
	- 1.2.1: Audio-only and Video-only (Prerecorded) (Advisory)
	- 1.2.3: Audio Description or Media Alternative (Prerecorded) (Advisory)
	- 1.2.5: Audio Description (Prerecorded) (Advisory)
	- 1.2.7: Extended Audio Description (Prerecorded) (Advisory)
	- This technique applies to HTML.

Description : The objective of this technique is to use the HTML track element to specify a descriptions timed text track for a video element. Audio description timed text tracks contain textual descriptions of the video component of the media resource, intended for audio synthesis when the visual component is obscured, unavailable, or not usable. The user agent makes the cues available to the user in a non-visual fashion, for instance, by synthesizing them into speech. : The src attribute of the track element is an URL providing the text track data. : The audio description cues must fit into the gaps available in the audio component of the media resource. If there is not enough time to synthesize the description text in the track cue's time interval, user agents may truncate the speech. This limits the amount of supplementary information that can be added. : User agents may also support extended audio descriptions by halting the video until the description has been completely synthesized, then restarting the video. : Note : As of September 2023 when this Advisory technique was last reviewed by the Working Group, there is no native support in user agents for this technique. However, support is available via JavaScript polyfills.

Examples
Example 1: Audio description in one language

A video element for a video in the English language. The audio descriptions are provided in the WebVTT format.

<video poster="myvideo.png" controls>
  <source src="myvideo.mp4" srclang="en" type="video/mp4">
  <track kind="descriptions" label="English" src="myvideo-en.vtt" srclang="en">
</video>
Example 2: Audio description in multiple languages

A video element for a video with both an English and French language source element, and with an English and a French audio description track using the WebVTT file format.

<video poster="myvideo.png" controls>
  <source src="myvideo.mp4" srclang="en" type="video/mp4">
  <source src="myvideo.webm" srclang="fr" type="video/webm">
  <track kind="descriptions" label="English" src="myvideo-en.vtt" srclang="en">
  <track kind="descriptions" label="Français" src="myvideo-fr.vtt" srclang="fr">
</video>

Related techniques:
- G173: Providing a version of a movie with audio descriptions
- G8: Providing a movie with extended audio descriptions


------------------------------

H97: - Grouping related links using the nav element
Grouping related links using the nav element

About this Technique
	- This technique relates to:
	- 1.3.1: Info and Relationships (Sufficient when used for making information and relationships conveyed through presentation programmatically determinable)
	- 2.4.1: Bypass Blocks (Advisory)
	- This technique applies to HTML documents that contain related links.

Description : The objective of this technique is to group navigation links using the HTML nav element. The nav element is one of several sectioning elements in HTML. Use of this markup can make groups of links easier to locate and skip past by users of assistive technology such as screen readers. Using semantic structures allow custom style sheets to be used to change the presentation of groups of links while preserving their relationship. When the nav element is employed more than once on a page, distinguish the navigation groups by using an aria-labelledby or aria-label attribute. : Not all groups of links need to use the nav element for markup. For instance, links may be grouped in other structure such as lists or may use ARIA markup if they do not represent a discrete section of the page.

Examples
Example 1: Navigation links enclosed in a nav element

This example uses a nav element to group navigation links in an accessibility curriculum.

<nav>
  <ul>
    <li><a href="/web-accessibility.html">Web Accessibility</a></li>
    <li><a href="/doc-accessibility.html">Document Accessibility</a></li>
    <li><a href="/mobile-accessibility.html">Mobile Accessibility</a></li>
  </ul>
</nav>
Example 2: Multiple nav elements and aria-labelledby

The following example shows a best practice of how landmarks might be added to an HTML document in situations where there are two or more of the same type of landmark on the same page. For instance, if a nav element is used multiple times on a page, each instance may have a unique label specified using aria-labelledby:

<nav aria-labelledby="site-nav-heading">
  <h2 id="site-nav-heading">Site</h2>
    <ul>
      <li><a href="...">nav link 1</a></li>  
      <li><a href="...">nav link 2</a></li>
      <li><a href="...">nav link 3</a></li>
    </ul>
</nav>
<nav aria-labelledby="related-nav-heading">
  <h2 id="related-nav-heading">Related Topics</h2>
    <ul>
    <li><a href="...">topic link 1</a></li>
    <li><a href="...">topic link 2</a></li>
    <li><a href="...">topic link 3</a></li>
  </ul>
</nav>
Example 3: Multiple nav elements and aria-label

The following example shows a best practice of how landmarks might be added to an HTML document in situations where there are two or more of the same type of landmark on the same page, and there is no existing text on the page that can be referenced as the label:

<nav aria-label="Site">
  <ul>
    <li>< href="...">nav link 1</a></li>
    <li>< href="...">nav link 2</a></li>
    <li>< href="...">nav link 3</a></li>
  </ul>
</nav>
<nav aria-label="Tags">
  <ul>
    <li><a href="...">tag link 1</a></li>
    <li><a href="...">tag link 2</a></li>
    <li><a href="...">tag link 3</a></li>
  </ul>
</nav>

Related techniques:
- ARIA11: Using ARIA landmarks to identify regions of a page
- G141: Organizing a page using headings
- G140: Separating information and structure from presentation to enable different presentations
- H42: Using h1-h6 to identify headings


------------------------------

H98: - Using HTML 5.2 autocomplete attributes
Using HTML 5.2 autocomplete attributes

About this Technique
	- This technique relates to 1.3.5: Identify Input Purpose (Sufficient).
	- This technique applies to all HTML form fields that map to the HTML 5.2 autofill tokens.

Description : The objective of this technique is to programmatically link a pre-defined and published taxonomic term to the input, so that the inputs can also be machine-interpreted. This way the input will always have a common, referable and identifiable value associated to it, no matter what language is used, or what visible on-screen term is used to label the input. Then it can be further customized or otherwise machine-manipulated to help users. : The technique works by adding the appropriate autocomplete token to each form field on the form to make the identified inputs Programmatically Determinable. This will help people with cognitive disabilities who may not immediately know the purpose of the field because the label used by the author is not familiar to them. When inputs have been programmatically assigned, third party plugins and software can manipulate these form fields to make them more accessible to people with cognitive disabilities. For instance, a plugin could detect an autocomplete token with the text string "tel" and insert a telephone icon. It will further enable third party software to swap out the existing labels for text labels that the user finds more familiar. For instance, it could change "Given Name" to "First Name". : The autocomplete attribute also improves the browser's ability to pre-populate form fields with user-preferred values. When the input has been properly "tagged" with the known token value, the value entered by the user is stored locally on the host machine and associated with the token value for reuse. It helps those with dexterity disabilities who have trouble typing, those who may need more time, and anyone who wishes to reduce effort to fill out a form. : The autocomplete attribute allows the browser to do a pattern match against a list of values locally stored with the browser, and supplies the appropriate corresponding value when the input is programmatically tagged. This is a user setting that can be turned on or off, or modified by the end user. This reduces typing and reliance on memory because it uses stored values to fill in the fields. : It's important to note the Success Criterion Identify Input Purpose and autocomplete attribute only place requirements on input fields collecting information about the user. : For the Success Criterion, it is assumed that the autocomplete attribute is not used on form fields that do not correspond to an autocomplete field described in the HTML autocomplete attribute specification. If the autocomplete field is used to describe a "custom" taxonomy, rather than that described in the specification, this rule may produce incorrect results. : Security considerations : Organizations can be concerned about allowing input fields to be automatically filled-in. There is sometimes confusion about how browsers save information and the security implications. : For the autocomplete attribute: : This technique should only be used when asking for data about the user who is filling the form in, not for other people.
	- It only works if you are on the same computer, using the same user-account, and using the same browser. Any multi-login scenario does not save autocomplete data between different accounts. (Users can setup syncing of data across computers, but that is not the default.)
	- Saving information with autocomplete is opt-in by the user, usually at the point of saving data the first time.
	- The form is not auto-submitted, the user can see the data before it is submitted.
	- It is easy to wipe both history and form data in the browser settings.
	- It is easy to engage a privacy mode, such as private browsing.
	- Even without autocomplete set in the webpage, browsers can save data, and some plugins (such as password managers) will aggressively use heuristics to guess what fields are for and fill them in. Using the autocomplete attribute makes those guesses accurate. : The browser history provides far more detail about what people have done, and is just as available as autocomplete data. The solutions/mitigations for browser-history are similar to autocomplete.

Examples
Example 1: A user's credit card information

This is a simple form that collects contact and credit card information from the user.

<form method="post" action="step2">
  <div>
    <label for="fname">First Name</label>
    <input autocomplete="given-name" id="fname" type="text">
  </div>
  <div>
    <label for="lname">Last Name</label>
    <input autocomplete="family-name" id="lname" type="text">
  </div>
  <div>
    <label for="cc-num">Credit card number:</label>
    <input autocomplete="cc-number" id="cc-num" type="text">
  </div>
  <div>
    <label for="exp-date">Expiry Date:</label>
    <input autocomplete="cc-exp" id="exp-date" type="month">
  </div>
  <div>
    <input type="submit" value="Continue">
  </div>
</form>


------------------------------

H99: - Provide a page-selection mechanism
Provide a page-selection mechanism

About this Technique
	- This technique is not referenced from any Understanding document.
	- This technique applies to digital publications derived from a fixed layout source or that include static page break locations to enable common points of reference.
	- User agents may provide a specialized interface to the page list rather than render it directly, especially in ebook formats. Users might be presented with an input box into which to enter the page number they wish to go to, for example.

Description : The objective of this technique is to ensure that a page-selection mechanism is provided that makes available programmatically all set page locations in the digital publication. : The page-selection mechanism provides a way to locate static page break locations (i.e., where each new page begins) within a digital publication. These locations typically come from a print equivalent of the edition and allow synchronization in, for example, a mix of print and digital publications in environments such as schools and universities. : The source of pagination is not limited to print but could match up to any statically paginated alternative, such as a PDF or even a fixed-layout EPUB (i.e., where the content does not reflow to fit the available screen size). : The order of the page break locations in a digital publication is not sequential in all cases, and not all page breaks may be represented. Publishers often rearrange and remove content from the paginated source content when creating a digital version. : Page lists are a central feature of many digital publishing formats. EPUB 3 defines the page list in its navigation document while EPUB 2 and DAISY 3 use the pageList element in the NCX. The DPUB-ARIA module also includes a doc-pagelist role for identifying the navigation element containing the page list. : Other publications provide a means of page navigation through a 'go to' mechanism.

Examples
Example 1: Page list in HTML publications

To add a page list to a web-based document, the role "doc-pagelist" is added to the element (typically a nav element) that encloses the list and its title.

<nav role="doc-pagelist" aria-labelledby="pglist">
 <h2 id="pglist">Page List</h2>
 <ol>
   <li><a href="intro.xhtml#pg1">1</a></li>
   <li><a href="intro.xhtml#pg2">2</a></li>
   …
 </ol>
</nav>

The destinations of the page list links are usually explicit page break markers like the following:

<span id="pg1" role="doc-pagebreak" aria-label="page 1">
Example 2: Page list in EPUB 3 publications

EPUB 3 uses the epub:type attribute to identify the page list in the navigation document. The attribute is used on a nav element with the value "page-list" (note the different hyphenation). The ARIA role attribute has no effect unless the navigation document can be directly accessed by users (i.e., the document is in the EPUB spine). Like the previous HTML example, the contents of the nav element is a list of links to the page break locations.

<nav epub:type="page-list" role="doc-pagelist" aria-labelledby="pglist">
  <h2 id="pglist">Page List</h2>
  <ol>
    <li><a href="chapter01.xhtml#page001">1</a></li>
    <li><a href="chapter01.xhtml#page002">2</a></li>
    <li><a href="chapter01.xhtml#page003">3</a></li>
    ...
  </ol>
</nav>
Example 3: Page list in EPUB 2 and DAISY publications

The EPUB 2 and DAISY 3 formats both use an XML grammar called the NCX for expressing navigation aids. The page list is defined within the ncx element using the pageList tag. Each pageTarget within this element identifies a page break, providing both a label and a destination.

<ncx xmlns="http://www.daisy.org/z3986/2005/ncx/"
     version="2005-1"
     xml:lang="en-US">
  ...
  <pageList>
    <pageTarget id="p1" type="normal" value="1">
      <navLabel><text>1</text></navLabel>
      <content src="content.html#p001"/>
    </pageTarget>
    <pageTarget id="p2" type="normal" value="2">
      <navLabel><text>2</text></navLabel>
      <content src="content.html#p002"/>
    </pageTarget>
  </pageList>
</ncx>
Example 4: Go to page mechanism

A mechanism provides the ability to enter a page number as an input and reposition the user to the matching target page location.


------------------------------

H100: - Providing properly marked up email and password inputs
Providing properly marked up email and password inputs

About this Technique
	- This technique relates to:
	- 3.3.8: Accessible Authentication (Minimum) (Sufficient)
	- 3.3.9: Accessible Authentication (Enhanced) (Sufficient)
	- This technique applies to technologies that support authentication.

Description : The objective of this technique is to provide examples of properly marked up email and password inputs. This technique involves providing form mechanism where the user can enter their email address and password to log into the website. : Browsers and password managers generally use the accessible name of the input to determine how to fill it in. The user agent (including password managers) should not be blocked from populating the fields, and pasting by the user should also not be blocked.

Examples
Example 1: properly marked up email and password inputs

A secure website has an email and password based login form.

<form method="post" action="login">
  <div>
    <label for="email">Email</label>
    <input autocomplete="email" id="email" type="email" ...>
  </div>
  <div>
    <label for="password">Password</label>
    <input autocomplete="current-password" id="password" type="password" ...>
  </div>
    <input type="submit" value="Login">
  </div>
</form>


------------------------------

H101: - Using semantic HTML elements to identify regions of a page
Using semantic HTML elements to identify regions of a page

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Sufficient).
	- This technique applies to technologies that support ARIA (Accessible Rich Internet Applications).

Description : The purpose of this technique is to provide programmatic access to sections of a web page. Landmark roles (or "landmarks") programmatically identify sections of a page. Browsers don't expose landmarks directly to users, but they they are made available to them by assistive technology and browser extensions to help navigation to various sections of a page. : Landmarks provide an easy way for users of assistive technology understand the programmatic structure of a page and skip over content they're not interested in. For instance, if a site's header, global navigation, main content area, and footer are marked up as landmarks, a screen reader user can easily skip to the landmark they're interested in without having to work their way through all the preceding content. A blind user who may be familiar with a news site's menu, and is only interested in getting to the top story, could easily navigate to the "main" landmark, and bypass dozens of menu links. In another circumstance, a user who is blind may want to quickly find a navigation menu, and can do so by jumping to the navigation landmark. : Landmark regions are implicitly created when certain semantic HTML elements are used, which is different from using ARIA to explicitly create landmarks. These elements are: : <header>: When a header is a direct child of the body element, it creates a banner role, a region that typically contains the site's logo, name, and other persistent site-wide content at the top of a page.
	- <nav>: A region that contains navigation links to other pages or different parts of the same page.
	- <main>: A region that contains a page's main content.
	- <section>: A region that contains a generic section of a document or application. A section element isn't exposed as a landmark region unless it has an accessible name.
	- <form>: A region of the document that represents a collection of form-associated elements, some of which can represent editable values that can be submitted to a server for processing. A form element isn't exposed as a landmark region unless it has an accessible name.
	- <aside>: A region of the document that supports the main content, yet is separate and meaningful on its own.
	- <footer>: A region that, when its nearest ancestor is the body element, contains information about the page such as copyrights and links to privacy statements. : Modern web browsers don't need to have the HTML element's related ARIA role added to them to be exposed as a landmark region. For example, <main role="main"> is unnecessary, and should just be <main>. : There are cases when a particular landmark role can be used more than once on a page, for example, primary and secondary blocks of navigation. In these cases, identical roles should be labeled using a valid technique for labelling regions. : It is a best practice to include all content on the page in landmarks, so that screen reader users who rely on landmarks to navigate from section to section do not lose track of content.

Examples
Example 1: Simple landmarks

The following example shows how landmarks might be added to an HTML document:

<header> site logo and name, etc. here </header>
<form aria-label="site search"> search functionality here </form>
<nav> a list of navigation links here </nav>
<main> the page's main content here </main>
<section> a sponsor's promotion here </section>
<aside> sidebar content here </aside>
<footer> site contact details, copyright information, etc. here </footer>
Example 2: Multiple landmarks of the same type and aria-labelledby

The following example shows a best practice of how landmarks might be added to an HTML document in situations where there are two or more of the same type of landmark on the same page. For instance, if a nav element is used multiple times on a page, each instance may have a unique label specified using aria-labelledby:

<nav aria-labelledby="site-nav-heading">
  <h2 id="site-nav-heading">Site</h2>
  <ul>
    <li><a href="/news">News</a></li>  
    <li><a href="/weather">Weather</a></li>
    <li><a href="/sport">Sport</a></li>
  </ul>
</nav>
<nav aria-labelledby="related-nav-heading">
  <h2 id="related-nav-heading">Related Topics</h2>
  <ul>
    <li><a href="/local-news">Local News</a></li>
    <li><a href="/local-weather">Local Weather</a></li>
    <li><a href="/local-sport">Local Sport</a></li>
  </ul>
</nav>
Example 3: Multiple landmarks of the same type and aria-label

The following example shows a best practice of how landmarks might be added to an HTML document in situations where there are two or more of the same type of landmark on the same page, and there is no existing text on the page that can be referenced as the label:

<nav aria-label="Vehicles">
  <ul>
    <li><a aria-current="page" href="/cars">Cars</a></li>
    <li><a href="/trucks">Trucks</a></li>
    <li><a href="/bikes">Bikes</a></li>
  </ul>
</nav>
<nav aria-label="Tags">
  <ul>
    <li><a href="/cars-electric">Electric Cars</a></li>
    <li><a href="/cars-gas">Gas-powered Cars</a></li>
    <li><a href="/cars-family">Family Cars</a></li>
    <li><a href="/cars-working">Rugged Cars For Working</a></li>
    <li><a href="/cars-commuting">Cars For Suburban Commuting</a></li>
  </ul>
</nav>
Example 4: Search form

The following example shows a search form. A form element must have an accessible name to be exposed as a landmark area:

<form aria-labelledby="search-label">
  <label for="product-search" id="search-label">Search</label>
  <input id="product-search" placeholder="title, author, or ISBN" type="text">
  <button type="submit">Find Books</button>
</form>

Related techniques:
- ARIA11: Using ARIA landmarks to identify regions of a page
- G1: Adding a link at the top of each page that goes directly to the main content area
- G124: Adding links at the top of the page to each area of the content
- H69: Providing heading elements at the beginning of each section of content
- SCR28: Using an expandable and collapsible menu to bypass block of content


------------------------------

H102: - Creating modal dialogs with the HTML dialog element
Creating modal dialogs with the HTML dialog element

About this Technique
	- This technique relates to 2.4.3: Focus Order (Sufficient when used for changing a Web page dynamically).
	- This technique applies to HTML.

Description : Website authors often use modal dialogs to focus a user's attention on information, or a task-related activity beyond the scope of the primary page's content. Modal dialogs can be built in markup using ARIA's dialog role and related attributes, or the HTML's dialog element. As well as meeting the first rule of ARIA, the HTML dialog element offers several advantages to its ARIA counterpart, with the browser handling these features: : keyboard focus is moved to the newly-opened modal dialog;
	- keyboard focus returns to the invoking element (assuming the element is still on the page) when the modal dialog is closed;
	- keyboard focus is limited to the contents of the modal dialog and the browser's chrome (e.g., the browser-specific UI, such as the address bar, etc.);
	- the page's content 'outside' of the modal dialog becomes inert, resulting in the content becoming hidden from assistive technologies, and inoperable to all users, so long as the modal dialog remains open;
	- the use of the Escape key to close the modal dialog. : This technique uses the HTML dialog element rather than a custom ARIA implementation, reducing the level of effort to create an accessible modal dialog.

Examples
Example 1: A dialog to sign up to a mailing list

This is an example of using a modal dialog element to show a mailing-list sign-up form to a user. The main part of the page contains a button element that, when activated, invokes the modal dialog. The button uses the type attribute to tell the browser that this isn't a submit button.

When the modal dialog is opened, the browser will treat all content outside of the modal dialog as inert, rendering it inoperable and hiding the content from assistive technology. For example, a screen reader will not be able to reach or announce any of the inert content. Additionally, because the page content is inert, keyboard focus will only be able to reach focusable elements within the dialog element, and the browser's controls. When invoked, the browser automatically sets focus to the first focusable element in the dialog's DOM. In this example the h1 element will receive focus because it has a tabindex="-1" attribute. Note that, although the dialog's close button is visibly before the h1, it is the last item in the dialog's DOM. If the button was first, it would receive focus when dialog was opened.

The HTML
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,
     initial-scale=1, shrink-to-fit=no">
    <title>Turbo Encabulator News</title>
  </head>
  <body>
    <main>
      <h1>All The News About Turbo Encabulators</h1>
      <button class="open-modal" type="button">Sign up to our mailing list!</button>
    </main>
    <dialog aria-labelledby="dialog-heading" id="mailing-list-dialog">
      <h1 id="dialog-heading" tabindex="-1">Sign up to our mailing list</h1>
      <form>
        <p class="req-note">All form fields are required.</p>
        <div>
          <label for="fname">First Name</label>
          <input aria-required="true" autocomplete="given-name" id="fname" type="text">
        </div>
        <div>
          <label for="lname">Last Name</label>
          <input aria-required="true" autocomplete="family-name" id="lname" type="text">
        </div>
        <div>
          <label for="email">Email address</label>
          <input aria-required="true" autocomplete="email" id="email" type="text">
        </div>
        <button class="sign-up" type="submit">Sign up</button>
      </form>
     <form method="dialog">
        <button aria-label="close" class="close-modal">&times;</button>
      </form>
    </dialog>
  </body>
</html>
The CSS
*, *::after, *::before {
  box-sizing: inherit;
}

body {
  background:#fff;
  color:#000;
  font:1rem/1.5 system-ui, Helvetica, Roboto, sans-serif;
}

*:focus-visible {
  outline:1px solid #0054AE;
  outline-offset:1px;
}

dialog {
  border:1px solid #000;
  padding:2rem;
  position:relative;
}
 
dialog::backdrop {
  background-color:hsla(0, 0%, 0%, .5);
}
 
.close-modal {
  inset-block-start:1.5rem;  
  inset-inline-end:1.5rem;  
  line-height:1.3;
  padding:0.25em 0.5em;
  position:absolute;
}

.sign-up {
  background:#000;
  color:#fff;
  padding:0.25em;
}

dialog h1 {
  display:inline-block;
  line-height:1.3333;
  margin:0;
  max-inline-size:95%;
}

form {
  display:grid;
  grid-gap:20px;
  grid-template-columns:repeat(auto-fit, minmax(150px, 1fr));
}

.req-note, .sign-up {
  grid-column:1 / -1;
}
 
label {
  display:block;
}
 
input {
  border:1px solid hsl(0, 0%, 50%);
  font:inherit;
  inline-size:calc(100% - 4px);
}

button {
  background:#fff;
  border:1px solid hsl(0, 0%, 50%);
  border-radius:3px;
  color:inherit;
  font:inherit;
  margin:0;
}
The JavaScript

The script is necessary to display the dialog when invoked. The HTML dialog element can be opened using two different commands: show() (for non-modal dialogs), and showModal() (for modal dialogs) - used in this example.

Note: instead of writing a function to close the dialog, the close button is nested within a separate form element with a method="dialog" attribute. This method allows the dialog to be closed when activating this button, and the browser will handle returning keyboard focus to the invoking element,

document.addEventListener("DOMContentLoaded", function(e){
  const d = document.querySelector("dialog");
  const btnOpen = document.querySelector(".open-modal");

  btnOpen.addEventListener("click", function(){
    d.showModal();
  }, false);

});

Related techniques:
- SCR26: Inserting dynamic content into the Document Object Model immediately following its trigger element
- G59: Placing the interactive elements in an order that follows sequences and relationships within the content

--------------------------------------------------

File: pdf.json
==================================================

PDF1: - Applying text alternatives to images with the Alt entry in PDF documents
Applying text alternatives to images with the Alt entry in PDF documents

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Sufficient).
	- This technique applies to tagged PDF documents with images.

Description : The objective of this technique is to provide text alternatives for images via an /Alt entry in the property list for a Tag. This is normally accomplished using a tool for authoring PDF. : PDF documents may be enhanced by providing alternative descriptions for images, formulas, and other items that do not translate naturally into text. In fact, such text alternatives are required for accessibility: alternate descriptions are human-readable text that can be vocalized by text-to-speech technology for the benefit of users with vision disabilities. : When an image contains words that are important to understanding the content, the text alternative should include those words. This will allow the alternative to accurately represent the image. Note that it does not necessarily describe the visual characteristics of the image itself but must convey the same meaning as the image.

Examples
Example 1: Adding alt text to an image in Adobe Acrobat DC Pro

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

Open the Accessibility panel via the Tools → Accessibility options.
Select the image in the document and select the "Set Alternative Text" option in the Accessibility tools panel.

In the Set Alternative Text dialog that appears, type in your alternative text, then press the Save & Close button.

 

This example is shown in operation in the working example of Adding an /Alt entry to an image.

Example 2: Adding alt text to an image in Microsoft Word
Right-click on the image and choose View Alt Text
Type the alternative text into the text box provided.
 
Example 3: Adding alt text to an image in OpenOffice with the Writer add-on

This example is shown with Open Office Writer. There are other software tools that perform similar functions.

Select "Insert" then "picture", select the image to be inserted
Right click on the mouse
Select "Description"
Enter a text title and a good text description
Click OK.
Example 4: Adding a text alternative to an image in a PDF document using an /Alt entry

The /Alt property used on an image of mountains with a moon and trees typically would be used like this (typically accomplished by an authoring tool):

/Figure <</Alt (Sketch of Mountains with moon rising over trees)>>

The image might also be represented by a tag with a different name. A different name might be used because the tag name is written in a language other than English or because a specific tool uses a different name for some other reason. In this situation, it is also necessary that the RoleMap contained within the StructTreeRoot for the PDF document contain an entry which explicitly maps the name of the tag used for the image with the standard structure type used in PDF documents (in this case, Figure). If the RoleMap contains only an entry mapping Shape tags to Figure tags, the rolemap information would appear as follows:

/RoleMap << /Shape /Figure >>

In this case, the usage of the /Alt entry as follows would also be correct:

/Shape <</Alt (Crater Lake in the summer, with the blue sky, clouds and
 crater walls perfectly reflected in the lake) >>

Note that the /Alt entry in property lists can be combined with other entries.

Related techniques:
- G94: Providing short text alternative for non-text content that serves the same purpose and presents the same information as the non-text content


------------------------------

PDF2: - Creating bookmarks in PDF documents
Creating bookmarks in PDF documents

About this Technique
	- This technique relates to 2.4.5: Multiple Ways (Advisory).
	- This technique applies to tagged PDF documents.

Description : The intent of this technique is to make it possible for users to locate content using bookmarks (outline entries in an Outline dictionary) in long documents. : A person with cognitive disabilities may prefer a hierarchical outline that provides an overview of the document rather than reading and traversing through many pages. This is also a conventional means of navigating a document that benefits all users.

Examples
Example 1: Converting a table of contents created with Microsoft Word to bookmarks in a PDF

This example is shown with Microsoft Word and Adobe Acrobat Pro. There are other software tools that perform similar functions.

Create a table of contents at the beginning of the Word document.
Use Save as... → PDF to convert the Word document to PDF.

The table-of-contents entries in the converted document will be linked to the headings in the document. In addition, the headings will appear as PDF Bookmarks in the Acrobat navigation pane.

If the document provides a glossary and/or index, these sections should have headings that appear in the table of contents (and thus as bookmarks in the Navigation pane). The table of contents also should be marked up with a heading so it is bookmarked as well.

If this markup has not been done in the authoring tool, Adobe Acrobat Pro can be used to provide the tags. See PDF9 if you need to modify converted headings or add new ones.

This example is shown in operation in the working example of creating bookmarks with Word.

Example 2: Converting a table of contents created with OpenOffice and Writer to bookmarks in a PDF

This example is shown with OpenOffice Writer and Adobe Acrobat Pro and Reader. There are other software tools that perform similar functions.

Using the Styles and Formatting dialog found in the Format option, or by press F11, select the text to appear in the table of contents and then select a Heading.

To create a table of contents at the beginning of the OpenOffice.org Writer document:

Move your cursor to the appropriate place in the document to insert the table of contents.
Insert → Indexes and Tables... → Indexes and Tables → Insert Index/Table
Use File → Export as PDF... to convert the document to PDF, specifying Tagged PDF in the Options dialog.

The table-of-contents entries in the converted document will be linked to the headings in the document, and will appear as PDF Bookmarks in the left-hand Navigation pane. The OpenOffice.org Table of Contents and Bookmarks look the same as they appeared in Example 1.

This example is shown in operation in the working example of creating bookmarks with OpenOffice Writer.

Example 3: Adding bookmarks using Adobe Acrobat Pro after conversion

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

After conversion to tagged PDF, you may decide to add bookmarks that were not automatically generated. Like the converted bookmarks, tagged bookmarks use the underlying structural information in the document.

In the Bookmarks panel, choose the options menu, then choose New Bookmarks From Structure...
From the Structure Elements dialog, select the elements you want specified as tagged bookmarks. 
The tagged bookmarks are nested under a new, untitled bookmark. Access the context menu for the new bookmark and select the Rename option to rename the new bookmark.

This example is shown in operation in the working example of creating bookmarks with Acrobat Pro.

Example 4: Creating bookmarks with the outline hierarchy

The following code fragment illustrates part of an outline hierarchy used to create bookmarks This is typically accomplished by an authoring tool.

121 0 obj
  << /Type /Outlines
    /First 22 0 R
    /Last 29 0 R
    /Count 6
  >>
endobj
22 0 obj
  << /Title (Applying Guerrilla Tactics to Usability Testing by People with Disabilities)
    /Parent 21 0 R
    /Next 29 0 R
    /First 25 0 R
    /Last 28 0 R
    /Count 4
    /Dest [3 0 R /XYZ 0 792 0]
  >>
endobj
25 0 obj
  << /Title (Getting started)
    /Parent 22 0 R
    /Next 26 0 R
    /Dest [3 0 R /XYZ null 701 null]
  >>
endobj

Related techniques:
- G64: Providing a Table of Contents


------------------------------

PDF3: - Ensuring correct tab and reading order in PDF documents
Ensuring correct tab and reading order in PDF documents

About this Technique
	- This technique relates to:
	- 1.3.2: Meaningful Sequence (Sufficient)
	- 2.1.1: Keyboard (Sufficient when used for ensuring keyboard control)
	- 2.4.3: Focus Order (Sufficient when used for giving focus to elements in an order that follows sequences and relationships within the content)
	- This technique applies to tagged PDF documents.

Description : The intent of this technique is to ensure that users can navigate through content in a logical order that is consistent with the meaning of the content. Correct tab and reading order is typically accomplished using a tool for authoring PDF. : For sighted users, the logical order of PDF content is also the visual order on the screen. For keyboard and assistive technology users, the tab order through content, including interactive elements (form fields and links), determines the order in which these users can navigate the content. The tab order must reflect the logical order of the document. : Logical structure is created when a document is saved as tagged PDF. The reading order of a PDF document is determined primarily by the tag order of document elements, including interactive elements, but the order of content within individual tags is determined by the PDF document's content tree structure. : If the reading order is not correct, keyboard and assistive technology users may not be able to understand the content. For example, some documents use multiple columns, and the reading order is clear visually to sighted users as flowing from the top to the bottom of the first column, then to the top of the next column. But if the document is not properly tagged, a screen reader may read the document from top to bottom, across both columns, interpreting them as one column. : The simplest way to ensure correct reading order is to structure the document correctly in the authoring tool used to create the document, before conversion to tagged PDF. Note, however, that pages with complex layouts with graphics, tables, footnotes, side-bars, form fields, and other elements may not convert to tagged PDF in the correct reading order. These inconsistencies must then be corrected with repair tools such as Acrobat Pro. : When a PDF document containing form fields has a correct reading order, all form fields are contained in the tab order in the appropriate order, and in the correct order relative to other content in the PDF. Common tab-order errors include: : Form fields missing from the tagged content.
	- Form fields in the wrong location in the PDF content; e.g., at the end of non-interactive content.

Examples
Example 1: Creating a 2-column document using Microsoft Word

This example is shown with Microsoft Word. There are other software tools that perform similar functions.

Multi-column documents created using Word's Layout → Columns tool typically are in the correct reading order when converted to tagged PDF. The following image shows Word's Columns tool.

This example is shown in operation in the working example of 2-column document (Word file) and working example of 2-column document using Word (PDF file).

Example 2: Creating a 2-column document using OpenOffice Writer

This example is shown with OpenOffice Writer. There are other software tools that perform similar functions.

Multi-column documents created using OpenOffice Writer's Columns tool typically are in the correct reading order when converted to tagged PDF. The image below shows Writer's Columns tool. The Columns tool can be found under Format.

This example is shown in operation in the working example of 2-column document using OpenOffice Writer (OpenOffice file) and working example of 2-column document using OpenOffice Writer (PDF file).

Example 3: Setting the tab order for one or more pages using Adobe Acrobat Pro

In a tagged PDF document:

Open Organize Pages tool.
Select one or more page thumbnails.
Right-click to access the context menu for the selected thumbnail(s) and select Page Properties.
Select the Tab Order tab in the Page Properties dialog.
If needed, select a tab order option:
Option	Description
Use Row Order	Tabs from the upper left field, moving first left to right and then down, one table row at a time.
Use Column Order	Tabs from the upper left field, moving first from top to bottom and then across from left to right, one table column at a time.
Use Document Structure	For tagged documents, moves in the tag order specified by the authoring application. This is usually the correct reading order and will be selected by default for tagged documents.
Unspecified	If the document was created using an earlier version of Acrobat Pro, the tab order is Unspecified by default. With this setting, form fields are tabbed through first, followed by links and then comments ordered by row. This may not be correct reading order.

This example is shown in operation in the working example of setting the tab order (Word file) and working example of setting the tab order (PDF file).

Example 4: Repairing the reading order using the Tags panel in Adobe Acrobat Pro

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

Use the Tags panel to correct the reading order. Either:

Drag and drop a tag to its required position, or
Cut a tag and paste it to its required position.

Related techniques:
- G57: Ordering the content in a meaningful sequence
- G59: Placing the interactive elements in an order that follows sequences and relationships within the content
- G202: Ensuring keyboard control for all functionality


------------------------------

PDF4: - Hiding decorative images with the Artifact tag in PDF documents
Hiding decorative images with the Artifact tag in PDF documents

About this Technique
	- This technique relates to 1.1.1: Non-text Content (Sufficient).
	- This technique applies to tagged PDF documents.

Description : The purpose of this technique is to show how purely decorative images in PDF documents can be marked so that they can be ignored by Assistive Technology by using the /Artifact tag. This is typically accomplished by using a tool for authoring PDF. : In PDF, artifacts are generally graphics objects or other markings that are not part of the authored content. Examples of artifacts include page header or footer information, lines or other graphics separating sections of the page, or decorative images.

Examples
Example 1: Marking an image as an artifact using Acrobat Pro's TouchUp Reading Order Tool

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

The TouchUp Reading Order Tool can be used to mark an image as "Background / Artifact", which removes it from the document tag structure.

Open the TouchUp Reading Order Tool in Acrobat Pro: Accessibility → TouchUp Reading Order
Select the decorative image in the document
In the TouchUp Reading Order Tool, click the Background/Artifact button to remove the selected image from the tag structure

This example is shown in operation in the working example of creating a decorative image (Word file) and working example of marking a background image as an artifact (PDF file).

Example 2: Marking an image as an artifact in a PDF document using an /Artifact tag or property list

The PDF specification allows images to be marked as "artifacts". An artifact is explicitly distinguished from real content by enclosing it in a marked-content sequence with the /Artifact tag.

/Artifact
BMC  ...  EMC

or

/Artifact propertyList
BDC  ...  EMC

The first is used to identify a generic artifact; the second is used for artifacts that have an associated property list. Note, to aid in text reflow, artifacts should be defined with property lists whenever possible. Artifacts lacking a specified bounding box are likely to be discarded during reflow.

Property list entries for artifacts include Type, BBox, Attached, and Subtype.


------------------------------

PDF5: - Indicating required form controls in PDF forms
Indicating required form controls in PDF forms

About this Technique
	- This technique relates to:
	- 3.3.1: Error Identification (Sufficient)
	- 3.3.2: Labels or Instructions (Sufficient when used with G131: Providing descriptive labels)
	- This technique applies to tagged PDF documents with forms.

Description : The objective of this technique is to notify the user when a field that must be completed has not been completed in a PDF form. Required fields are implemented using the /Ff entry in the form field's dictionary. This is normally accomplished using a tool for authoring PDFs. : If errors are found, an alert dialog describes the nature of the error in text. This may be accomplished through scripting created by the author (see, for example, SCR18: Providing client-side validation and alert). User agents, such as Adobe Acrobat Pro and LiveCycle, can provide automatic alerts (as described in the examples below). : Note : Once the user dismisses the alert dialog, it may be helpful if the script positions the keyboard focus on the field where the error occurred, although some users may expect the focus to remain on the last control focused prior to the alert appearing. Authors should exercise care to ensure that any movement of the focus will be expected. For example, if the alert announces a missing required phone number, positioning the focus on the phone number field when the alert is dismissed can be regarded as helpful and expected. In some cases, however, this may not be possible. If multiple input errors occur on the page, another approach must be taken to error reporting. (See, for example, the Adobe SDK.) : Ensuring that users are aware an error has occurred, can determine what is wrong, and can correct it are keys to software usability and accessibility. Meeting this objective helps ensure that all users can complete transactions with ease and confidence. : Labels for required form controls : It is also important that users are aware that an error may occur. You can incorporate this information in labels; for example, "Date (required)" or the use of a red asterisk to indicate required fields. (Make sure that a legend appears on each form with required fields, e.g., "* = required field".) See PDF10.

Examples
Example 1: Creating a required field in a PDF form using Acrobat Pro
Open the Prepare Form tool, access the form field's context menu, and then select the Properties option.
If the form field is required, check the Required box. This checkbox forces the user to fill in the selected form field. If the user attempts to submit the form while a required field is blank, an error message appears and the empty required form field is highlighted.

This example is shown in operation in the working example of creating a required field in Acrobat.

Example 2: Adding a required text field in a PDF form using the /Tx field type and Ff flag

The following code fragment illustrates code that is typical for the object definitions for a typical text field. Note that the text field is required, using the Ff flag. This is typically accomplished by an authoring tool.

<< /AP -dict-                                                   
   /DA /Helv  0 Tf 0 g
   /DR -dict-
   /F 0x4
   /FT Tx              % FT key set to Tx for Text Field
   /Ff 0x2             % Ff integer 0x2 value indicates required
   /P -dict-
   /Rect -array-
   /StructParent 0x1
   /Subtype Widget
   /T First            % Partial field name First
   /TU First name (required)  % TU tool tip value serves as short description
   /Type Annot
   /V Pat Jones
>>
...
<Start Stream>
 BT
  /P <</MCID 0 >>BDC
  /CS0 cs 0  scn 
  /TT0 1 Tf
   -0.001 Tc 0.003 Tw 11.04 0 0 11.04 72 709.56 Tm
   [(P)-6(le)-3(as)10(e)-3( )11(P)-6(rin)2(t)-3( Y)8(o)-7(u)2(r N)4(a)11(m)-6(e)]TJ
  0 Tc 0 Tw 9.533 0 Td
  ( )Tj
  -0.004 Tc 0.004 Tw 0.217 0 Td
  [(\()-5(R)-4(e)5(q)-1(u)-1(i)-3(r)-3(e)-6(d)-1(\))]TJ
   EMC
   /P <</MCID 1 >>BDC
   0 Tc 0 Tw 4.283 0 Td
   [( )-2( )]TJ
    EMC
    /ArtifactSpan <</MCID 2 >>BDC
    0.002 Tc -0.002 Tw 0.456 0 Td
    [(__)11(___)11(___)11(___)11(___)11(_)11(____)11(___)11(___)11(__)]TJ
    0 Tc 0 Tw 13.391 0 Td
    ( )Tj
  EMC
ET
<End Stream>

Related techniques:
- G83: Providing text descriptions to identify required fields that were not completed
- H90: Indicating required form controls using label or legend
- SCR18: Providing client-side validation and alert
- PDF23: Providing interactive form controls in PDF documents
- PDF10: Providing labels for interactive form controls in PDF documents
- PDF22: Indicating when user input falls outside the required format or values in PDF forms


------------------------------

PDF6: - Using table elements for table markup in PDF Documents
Using table elements for table markup in PDF Documents

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Sufficient when used for making information and relationships conveyed through presentation programmatically determinable).
	- This technique applies to tagged PDF documents with tables.

Description : The purpose of this technique is to show how tables in PDF documents can be marked up so that they are recognized by assistive technology. This is typically accomplished by using a tool for authoring PDF. : Tabular information must be presented in a way that preserves relationships within the information even when users cannot see the table or the presentation format is changed. Information is considered tabular when logical relationships among text, numbers, images, or other data exist in two dimensions (vertical and horizontal). These relationships are represented in columns and rows, and the columns and rows must be recognizable in order for the logical relationships to be perceived. : Tagged tables can be created using the Add Tags to Document feature in Adobe Acrobat, using the Object Library in Adobe LiveCycle, or converting tables to PDF from a third-party application, such as Microsoft Word. However, the resulting tables may not be tagged correctly and you should ensure that table tagging issues are resolved. : Within PDF documents, a table uses the following structure types for table elements: : A table element (Table).
	- One or more table row elements (TR) which define each row of table cells as immediate children of the Table element.
	- One or more table header elements (TH) or table data elements (TD) as the immediate children of each table row element.
	- Cells that span two or more rows or columns should use the RowSpan or ColSpan attribute.
	- For tables that contain blank cells, you may need to add empty TD cells so that each row or column has the same number of cells.

Examples
Example 1: Creating tables in Microsoft Word that have correctly tagged headings when converted to PDF

This example is shown with Word. There are other software tools that perform similar functions.

Select the table
In the Ribbon, select Table Design.
Check the Header Row checkbox

This example is shown in operation in the working example of tagged table headings in Word.

Note

When the table has a more complex heading structure, this mark-up must be added in a PDF editor such as Acrobat Pro.

Example 2: Creating tables in OpenOffice.org Writer 2.2 that have correctly tagged headings when converted to PDF

This example is shown with OpenOffice.org Writer. There are other software tools that perform similar functions.

Access the table's context menu and select Table...
Select the Table Format tab.
Check Repeat Heading and select "1" in the First Rows listbox as shown in the following image.

This example is shown in operation in the working example of tagged table headings in OpenOffice Writer.

Note

OpenOffice.org Writer can only mark up cells as column headings, not as row headings. Only the first row can be marked as heading for all table columns. When the table has row headings or a more complex heading structure, this mark-up must be added in a PDF editor such as Acrobat Pro.

Example 3: Modifying table tags using the Tags tab in Adobe Acrobat Pro

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

To check that a converted document with tables has correct table tagging:

Open the View menu → Show/Hide → Navigation Panes → Accessibility Tags.
Manually inspect each table's tags to make sure that header and data cells have been converted correctly.

Note that in this case, the table headers were incorrectly formatted, and are marked as data cells (TD). To change these to TH tags:

On the Accessibility Tags tab, expand the table row that contains the header cells, as shown on the image above.
Select all of the incorrectly-formatted cells, open the context menu, and select Properties...
On the Tags tab in the Properties dialog, use the Type dropdown to change Table Data Cell to Table Header Cell.

This example is shown in operation in the working example of tagged table headings in Acrobat.

Example 4: Marking up a table using table structure elements

The following code fragment illustrates code that is typical for a simple table (header row and data row):

95 0 obj                %Structure element for a table
  << 
    /A 39 0 R
    /K[96 0 R 101 0 R 106 0 R 111 0 R]
    /P 93 0 R
    /S/Table              %standard structure type is table
  >> 
  endobj
96 0 obj                %Structure element for a table row
  << 
    /K[97 0 R 98 0 R 99 0 R 100 0 R]
    /P 95 0 R
    /S/TR                 %standard structure type is table row
  >> 
  endobj
  97 0 obj                %Structure element for a table header
  <<
    /A[23 0 R 120 0 R]
    /K 1
    /P 96 0 R
    /S/TH                 %standard structure type is table head
    /Pg 8 0 R
  >> 
  endobj
  104 0 obj                %Structure element for table data (cell contents)
  << 
    /A 29 0 R
    /K 7
    /P 101 0 R
    /S/TD                  %standard structure type is table data
    /Pg 8 0 R
  >> 
endobj

Related techniques:
- H51: Using table markup to present tabular information
- PDF20: Using Adobe Acrobat Pro's Table Editor to repair mistagged tables


------------------------------

PDF7: - Performing OCR on a scanned PDF document to provide actual text
Performing OCR on a scanned PDF document to provide actual text

About this Technique
	- This technique relates to:
	- 1.4.5: Images of Text (Sufficient)
	- 1.4.9: Images of Text (No Exception) (Sufficient)
	- This technique applies to scanned PDF documents.

Description : The intent of this technique is to ensure that visually rendered text is presented in such a manner that it can be perceived without its visual presentation interfering with its readability. : A document that consists of scanned images of text is inherently inaccessible because the content of the document is images, not searchable text. Assistive technologies cannot read or extract the words; users cannot select, edit, resize, or reflow text nor can they change text and background colors; and authors cannot manipulate the PDF for accessibility. : For these reasons, authors should use actual text rather than images of text, using an authoring tool such as Microsoft Word or Oracle Open Office to author and convert content to PDF. : If authors do not have access to the source file and authoring tool, scanned images of text can be converted to PDF using optical character recognition (OCR). Adobe Acrobat Pro can then be used to create accessible text.

Examples
Example 1: Generating actual text rather than images of text using Adobe Acrobat Pro

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

This example uses a simple one-page scanned image of text. To ensure that actual text is stored in the document, perform the following steps:

Select Tools → Scan & OCR.
In the Scan & OCR toolbar, select Insert and then either From File or From Scanner.
Depending on the resolution and how clear the text was, OCR converts images of words and characters to actual text. Text that Acrobat Pro does not recognize is listed as an "OCR suspect", or text element that Acrobat suspects was not recognized correctly.
To fix the suspects, in the Scan & OCR toolbar, choose Recognize Text → Correct Recognized Text. Acrobat Pro presents each suspect one at a time, which can then be corrected.
Using the Accessibility Tags panel, add tags to the document.
Test for accessibility: Accessibility Tool → Accessibility Check.

The following image shows a scanned one-page document in Adobe Acrobat Pro.

The next image shows the converted content after adding tags to the document. It will be necessary to use the Reading Order tool and the Tags panel to tag the content properly. The Reading Order tool was used in this example to hide the image of the hand as decorative image / artifact (see PDF4). The recipe title was tagged as a first level header.

Note: Acrobat Pro may automatically add tags when the file is run through OCR.

This example is shown in operation in the working example of generating actual text and the result of tagging text created with OCR.

Related techniques:
- G140: Separating information and structure from presentation to enable different presentations


------------------------------

PDF8: - Providing definitions for abbreviations via an E entry for a structure element
Providing definitions for abbreviations via an E entry for a structure element

About this Technique
	- This technique relates to 3.1.4: Abbreviations (Sufficient when used with G102: Providing the expansion or explanation of an abbreviation).
	- This technique applies to tagged PDF documents containing abbreviations or acronyms.

Description : The objective of this technique is to provide an expansion or definition of an abbreviation for the first occurrence of the abbreviation. For example, a reference to an abbreviation, such as "WCAG", should be available as "Web Content Accessibility Guidelines (WCAG)" on its first occurrence in a document. : This is done by setting expansion text using an /E entry for a structure element, and is normally accomplished using a tool for authoring PDF. A Span structure element is typically used to tag the abbreviation, but the /E entry is valid with any structure element. : This technique is applicable for any abbreviation, including acronyms and initialisms. Note that on the first occurrence of the abbreviation, both the abbreviation and the expansion text must be provided. This will aid recognition of later use of the abbreviation. : PDF documents may be enhanced by providing expansions for abbreviations. In fact, such expansions are required for accessibility to ensure understanding by people who have difficulty decoding words; rely on screen magnification (which may obscure context); have limited memory; or who have difficulty using context to aid understanding.

Examples
Example 1: Adding an /E entry to an abbreviation using Adobe Acrobat Pro's Tags panel

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

In a tagged PDF document:

Select View → Show/Hide → Navigation Panes → Accessibility Tags.
Select the first instance of the abbreviated text that needs to be expanded. If the selected text is part of a larger tag, use the Accessibility Tags panel's "Create Tag from Selection", and create a new Span tag. In this example, the text "WCAG2.2" (within the LBody tag) has been enclosed in a Span tag.
In the Tags panel, access the context menu for the spanned text and select Properties...
In the Content tab of the Properties dialog, enter the expansion text, followed by the originally selected text.

The following image illustrates this technique:

This example is shown in operation in:

Working example of Providing definitions for Abbreviations (Word document);
Working example of Providing definitions for Abbreviations (OpenOffice document);
Working example of Providing definitions for Abbreviations (PDF document).
Example 2: Using a /Span structure element with an /E entry to define an abbreviation

The following code fragment illustrates code that is typical for using the /Span structure element to define an abbreviation.

This example uses the sentence "Sugar is commonly sold in 5 lb bags." The abbreviation "lb" is tagged as a /Span structure element with an /E entry (typically accomplished by an authoring tool).

1 0 obj                                  % structure element
  << /Type /StructElemen
           /S /Span                      % element type
           /P ...                        % Parent in structure hierarchy
           /K << /Type /MCR
                      /Page 2 0 R        % Page containing marked-content sequence
                     /MCID 0             % Marked content identifier for "lb"
              >>
           /E  (pound, lb)
  >>
endobj
Example 3: Using a /TH structure element with an /E entry to define an abbreviation

As noted in the Description, the /E entry is valid with any structure element.

The following code fragment illustrates code that is typical for using an /E entry to define an abbreviation.

A table that contains columns for each month uses abbreviations as the values of column headers. The expansion for each abbreviation is provided as the /E entry of the /TH structure element (typically accomplished by an authoring tool).

1 0 obj                                  % structure element
  << /Type /StructElemen
          /S /TH                        % element type
          /P ...                        % Parent in structure hierarchy
          /K << /Type /MCR
                      /Page 2 0 R       % Page containing marked-content sequence
                      /MCID 0           % Marked content identifier for "Dec"
             >>
          /E  (December, Dec)
  >>
endobj

Related techniques:
- G102: Providing the expansion or explanation of an abbreviation
- G55: Linking to definitions
- G62: Providing a glossary
- G70: Providing a function to search an online dictionary
- G97: Providing the first use of an abbreviation immediately before or after the expanded form


------------------------------

PDF9: - Providing headings by marking content with heading tags in PDF documents
Providing headings by marking content with heading tags in PDF documents

About this Technique
	- This technique relates to:
	- 1.3.1: Info and Relationships (Sufficient when used for making information and relationships conveyed through presentation programmatically determinable)
	- 2.4.1: Bypass Blocks (Sufficient when used for grouping blocks of repeated material in a way that can be skipped)
	- This technique applies to tagged PDF documents with headings.

Description : The purpose of this technique is to show how headings in PDF documents can be marked so that they are recognized by assistive technologies. Headings are marked up using the heading elements (H, H1, H2, ... H6) in the structure tree. This is typically accomplished by using a tool for authoring PDF. : Heading markup can be used: : to indicate start of main content;
	- to mark up section headings within the main content area;
	- to demarcate different navigational sections, such as top or main navigation, left or secondary navigation, and footer navigation;
	- to mark up images (containing text) which have the appearance of headings visually. : Because headings indicate the start of important sections of content, it is possible for assistive technology users to access the list of headings and to jump directly to the appropriate heading and begin reading the content. This ability to "skim" the content through the headings and go directly to content of interest significantly speeds interaction for users who would otherwise access the content slowly.

Examples
Example 1: Adding or modifying tagged headings in PDF documents with Adobe Acrobat Pro

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

Open the PDF document in Adobe Acrobat Pro.
Select Accessibility → Reading Order...
Open the Tags panel to view the Accessibility Tags

To correct the H3:

Click on H3's text.
Click on the Heading 2 tag in the TouchUp Reading Order panel.
Example 2: Creating documents in Microsoft Word that have correctly tagged headings when converted to PDF

This example is shown with Microsoft Word. There are other software tools that perform similar functions.

Use Styles to create heading formats: Heading 1, Heading 2, Heading 3, etc. Make styles progress in a logical manner; e.g., a Heading 2 should come after a Heading 1.

Related techniques:
- G141: Organizing a page using headings


------------------------------

PDF10: - Providing labels for interactive form controls in PDF documents
Providing labels for interactive form controls in PDF documents

About this Technique
	- This technique relates to:
	- 1.3.1: Info and Relationships (Sufficient when used for making information and relationships conveyed through presentation programmatically determinable)
	- 3.3.2: Labels or Instructions (Sufficient)
	- 4.1.2: Name, Role, Value (Sufficient when used with G135: Using the accessibility API features of a technology to expose names and … notification of changes)
	- This technique applies to content implemented in Adobe Tagged PDF.

Description : The objective of this technique is to ensure that users of assistive technology are able to perceive form control labels and understand how form controls are used. : Form controls allow users to interact with a PDF document by filling in information or indicating choices which can then be submitted for processing. Assistive technology users must be able to recognize and understand the form fields, make selections, and provide input to complete the forms, and submit the form, just as sighted users can. Understandable labels that convey the purpose of each form control are essential to form accessibility. : Form inputs generally have labels and instructions to help users understand what information is required and how to fill in the form. Unless these labels are programmatically associated with the relevant fields, assistive technology might not be able to associate them correctly, and thus users might not understand how to complete the form. : Using Adobe Acrobat Pro with documents with interactive forms, you can make sure that the forms are accessible and usable by making sure that programmatically associated labels that convey the purpose of the fields are provided. : The heuristics used by assistive technology will sometimes use the text label if a programmatically associated label cannot be found. The TU entry (which is the tooltip) of the field dictionary is the programmatically associated label. Therefore, add a tooltip to each field to provide a label that assistive technology can interpret.

Examples
Example 1: Providing labels using the Forms tool in Adobe Acrobat Pro

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

As noted in the Description, text labels added in an authoring tool and then converted to PDF might be visually associated with the fields but are not programmatically associated, and you should provide a tooltip.

Select the Prepare Form tool.
For the field you want to edit, access the context menu and select the Properties dialog.
In the General tab of the Properties dialog, type a description for the form field in the Tooltip field.
Repeat for all form fields.

This example is shown in operation in the working example of providing labels using the forms tool (PDF).

Example 2: Adding a tooltip to interactive form controls

The following code fragment illustrates the use of the TU entry to provide a tooltip (or programmatically associated text label) for a form field. This is typically accomplished by an authoring tool.

<< /AP -dict-                                                   
   /DA /Helv  0 Tf 0 g
   /DR -dict-
   /F 0x4
   /FT Tx              % FT key set to Tx for Text Field
   /P -dict-
   /Rect -array-
   /StructParent 0x1
   /Subtype Widget
   /T Date you are available   % Partial field name Date
   /TU Date you are available: use MM/DD/YYYY format % TU tool tip serves as description
   /Type Annot
   /V Pat Jones
>>
...
<Start Stream>
 BT
  /P <</MCID 0 >>BDC
  /CS0 cs 0  scn 
  /TT0 1 Tf
    -0.001 Tc 0.003 Tw 11.04 0 0 11.04 72 709.56 Tm
    [(P)-6(le)-3(as)10(e)-3( )11(P)-6(rin)2(t)-3( Y)8(o)-7(u)2(r N)4(a)11(m)-6(e)]TJ
  0 Tc 0 Tw 9.533 0 Td
  ( )Tj
  -0.004 Tc 0.004 Tw 0.217 0 Td
  [(\()-5(R)-4(e)5(q)-1(u)-1(i)-3(r)-3(e)-6(d)-1(\))]TJ
 EMC
  /P <</MCID 1 >>BDC
  0 Tc 0 Tw 4.283 0 Td
  [( )-2( )]TJ
   EMC
   /ArtifactSpan <</MCID 2 >>BDC
   0.002 Tc -0.002 Tw 0.456 0 Td
  [(__)11(___)11(___)11(___)11(___)11(_)11(____)11(___)11(___)11(__)]TJ
  0 Tc 0 Tw 13.391 0 Td
  ( )Tj
  EMC
 ET
<End Stream>

Related techniques:
- G131: Providing descriptive labels
- G162: Positioning labels to maximize predictability of relationships
- PDF23: Providing interactive form controls in PDF documents
- PDF5: Indicating required form controls in PDF forms
- PDF22: Indicating when user input falls outside the required format or values in PDF forms


------------------------------

PDF11: - Providing links and link text using the Link annotation and the /Link structure element in PDF documents
Providing links and link text using the Link annotation and the /Link structure element in PDF documents

About this Technique
	- This technique relates to:
	- 1.3.1: Info and Relationships (Sufficient when used for making information and relationships conveyed through presentation programmatically determinable)
	- 2.1.1: Keyboard (Sufficient when used for ensuring keyboard control)
	- 2.4.4: Link Purpose (In Context) (Sufficient when used with G91: Providing link text that describes the purpose of a link)
	- 2.4.9: Link Purpose (Link Only) (Sufficient when used for semantically indicating links)
	- This technique applies to PDF documents that contain links.

Description : The purpose of this technique is to show how link text in PDF documents can be marked up to be recognizable by keyboard and assistive technology users. That is, the link information is programmatically available to user agents so that links are recognizable when presented in a different format. This is typically accomplished by using a tool for authoring PDF. : Links in PDF documents are represented by a Link tag and objects in its sub-tree, consisting of a link object reference (or Link annotation) and one or more text objects. The text object or objects inside the Link tag are used by assistive technologies to provide a name for the link. : The simplest way to provide links that comply with the WCAG success criteria is to create them when authoring the document, before conversion to PDF. : However, in some cases, it may not be possible to create the links using the original authoring tool. In these cases, Adobe Acrobat Pro can be used to create the link. But, because the tooltip created using the Link dialog in Adobe Acrobat Pro is not accessible to screen readers, be sure that the link text or the link context makes the purpose clear. : In all cases, link purpose should be made clear as described in the general techniques: : G53: Identifying the purpose of a link using link text combined with the text of the enclosing sentence
	- G91: Providing link text that describes the purpose of a link

Examples
Example 1: Creating a hyperlink in Microsoft Word before conversion to PDF

This example is shown with Microsoft Word. There are other software tools that perform similar functions.

To create a hyperlink in Microsoft Word:

In the document, highlight the text that you want to use for the link;
Open the Insert Hyperlink dialog by either:
selecting the Insert menu option, followed by the Hyperlink option; or
using the CTRL+K keyboard shortcut.
On the Insert Hyperlink dialog, enter the link destination.
Example 2: Creating a hyperlink in OpenOffice Writer before conversion to PDF

This example is shown with OpenOffice Writer. There are other software tools that perform similar functions.

Select the text that will have the hyperlink added.
On the Insert menu, select Hyperlink.
In the Hyperlink dialog, insert the target URI in the Target field under Hyperlink Type.
The text that will have the hyperlink added to can also be changed or added to in the hyperlink dialog.
To save the file as tagged PDF, select Save As from the File menu and select the Tagged PDF checkbox.
Example 3: Creating a hyperlink using the Create Link dialog in Adobe Acrobat Pro

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

Select the text that will become the link text.
Access the context menu and select Create Link.
Follow the instructions in the Create Link dialog to specify the link appearance.
Then select Next and specify the URL. The following image shows the resulting hyperlink and tooltip.

This example is shown in operation in the working example of creating a hyperlink in a PDF.

Example 4: Marking up link text using a /Link structure element

Link annotations in PDF documents are associated with a geometric region of a page rather than a particular object in a content stream. For this reason, link annotations alone are not useful for users with visual impairments, or to applications that must determine which content can be activated to invoke a hypertext link.

Tagged PDF /Link elements use PDF's logical structure to establish the association between content items and link annotations, providing functionality comparable to HTML hypertext links.

In HTML, the following example produces text containing a hypertext link:

<p>Here is some text <a href="https://www.w3.org/WAI/">with a link</a> inside.</p>

In PDF the page must be painted first and then a link annotation placed over the area where the object action will occur.

The following code fragment shows PDF equivalent to the HTML above; it uses link text displayed in blue and underlined. A second code fragment follows, indicating the associated logical structure hierarchy. This is typically accomplished by an authoring tool.

/P <</MCID 0>>                                                %Marked Content Sequence 0 (paragraph)
  BDC                                                          %Begin marked content sequence
   BT                                                          %Begin text object
    /F1 11.04 Tf                                               %set text font and size
    1 0 0 1 72.024 709.54 Tm                                   %set text matrix
    0 g                                                        %set non stroking color to black
    0 G                                                        %set stroke color to black
   [(H)3(ere )-4(is s)10(o)5(m)-4(e)9( t)-3(e)9(xt)-3( )] TJ   %Show text preceding the link" Here is some text"
   ET                                                          %end text object
  EMC                                                          %end marked content sequence
 
 /Span <</MCID 1>>                                             %Marked Content Sequence 1 (underlined link text)
  BDC                                                          %Begin marked content sequence
   BT                                                          %Begin text object
    1 0 0 1 152.42 709.54 Tm                                   %set text matrix
    0 0 1 rg                                                   %set non-stroking color to blue
    0 0 1 RG                                                   %set stroke color to blue
    [(with a )-2(li)3(n)14(k)] TJ                              %Show link text " with a link"
   ET                                                          %end text object
    0 0 1 rg                                                   %set stroke color to blue
    152.42 707.62 45.984 0.72 re                               %rectangle operator - target area for the link
    f*                                                         %fill the path using the even-odd rule
  EMC                                                          %end marked content sequence
 
 /P <</MCID 2>>                                                %Marked Content Sequence 2 (paragraph)
  BDC                                                          %Begin marked content sequence
   BT                                                          %begin text object
    1 0 0 1 198.41 709.54 Tm                                   %set text matrix                                            
    0 g                                                        %set non stroking color to black
    0 G                                                        %set stroke color to black
    [( )] TJ                                                   %empty text string showing white space
   ET                                                          %end text object
   BT                                                          %begin text object
    1 0 0 1 200.93 709.54 Tm                                   %set text matrix
    [(in)5(sid)5(e.)] TJ                                       %show text following the link "inside."
   ET                                                          %end text
   BT                                                          %begin text object
    1 0 0 1 229.97 709.54 Tm                                   %set text matrix
    [( )] TJ                                                   %empty text string showing white space
   ET                                                          %end text object
  EMC                                                          %end marked content sequence 
  

The following code fragment is an excerpt from the logical structure that establishes the association between the content items and the link annotation:

 11 0 obj                                              %Object ID 11, generation   0, obj keyword
  <</K[1                                               %immediate child of the structure tree root
   <<
    /Obj 26 0 R                                        %reference to Object 26
    /Type/OBJR                                         %this object describes an indirect object reference
   >>]
    /P 12 0 R
    /Pg 17 0 R
    /S/Link
  >>
 endobj
 
 26 0 obj                                              %object ID 26 which is referenced by the OBJR in Object 11
  <</A 31 0 R
   /BS
   <</S/S
     /Type/Border
     /W 0
   >>
   /Border[0 0 0]                                      %a colorless border
   /H/I
   /Rect[150.128 694.558 200.551 720.0]                %the boundaries defining target area where link annotation is active
   /StructParent 1
   /Type/Annot                                         %Structure element is an annotation
   /Subtype/Link
  >>                                                   %It is a link annotation                                                 
 endobj     
 31 0 obj                                              %Object 31, gen 0, obj
  <</S/URI                                             %Object type is URI action
    /URI(https://www.w3.org/WAI)                        %The Uniform resource identifier to resolve
  >>   
 endobj

Related techniques:
- G53: Identifying the purpose of a link using link text combined with the text of the enclosing sentence
- G91: Providing link text that describes the purpose of a link
- PDF13: Providing replacement text using the /Alt entry for links in PDF documents


------------------------------

PDF12: - Providing name, role, value information for form fields in PDF documents
Providing name, role, value information for form fields in PDF documents

About this Technique
	- This technique relates to:
	- 1.3.1: Info and Relationships (Sufficient when used for making information and relationships conveyed through presentation programmatically determinable)
	- 4.1.2: Name, Role, Value (Sufficient when used with G135: Using the accessibility API features of a technology to expose names and … notification of changes)
	- This technique applies to tagged PDF documents with interactive form fields.

Description : The objective of this technique is to ensure that assistive technologies can gather information about and interact with form controls in PDF content. : The types of PDF form controls are: text input field, check box, radio button, combo box, list box, and button. : Providing name, role, state, and value information for all form components enables compatibility with assistive technology, such as screen readers, screen magnifiers, and speech recognition software used by people with disabilities. : Interactive Form Dictionary Entries	Used to Define	Comments
	- FT	Role	Controls that share field type also use field flags to set the appropriate role. In Adobe Acrobat the role for form controls is set automatically.
	- TU	Name	In Adobe Acrobat the TU entry value is provided via the Tooltip field in the form control's Properties dialog. This should not be confused with the T entry which is defined as the Name in Acrobat's form control properties dialog - the name field in the Properties dialog is not used to provide the name for a control when read by assistive technologies.
	- CA	Name (Pushbuttons only)	In Adobe Acrobat the CA entry value is provided via the label field in the form control's Properties dialog.
	- V	Value	The Value entry is set by the user interacting with the control, where a value is needed.
	- DV	Default Value	In Adobe Acrobat the DV entry value can be set in the form control's Properties dialog. : The following table describes how the role, name, value, and state are defined for PDF form controls created using Adobe Acrobat Pro. Adobe LiveCycle Designer provides the same controls as well as several additional ones: see Example 2 below. : PDF form element	Role (FT entry)	Name (TU entry)	Value (V entry)	Configurable States
	- Text field	Text /Tx	Tooltip	Default value (DV entry in field dictionary) can be set in the Properties dialog. Value is entered by user.	Read Only, Required, Multiline, Password
	- Check box	Check box /Btn	Tooltip	V entry is set to 'Yes' or 'No' depending on Checked state.	Read Only, Required, Checked
	- Radio button	Radio button /Btn (Field Flag set to 'Radio')	Tooltip	V entry is set to 'Yes' or 'No' depending on Checked state.	Read Only, Required, Checked
	- Combo box	Combo box /Ch (Field Flag set to 'Combo')	Tooltip	Default value (/DV) can be set in the Properties dialog. Value is determined by user selection.	Read Only, Required
	- List box	Drop-down list /Ch	Tooltip	Default value (/DV) can be set in the Properties dialog. Value is determined by user selection.	Read Only, Required
	- Button	Push button /Btn (Field Flag set to 'Pushbutton')	Label (CA entry instead of TU entry)	Push buttons do not have or require a value.	Read Only, Required
	- Signature field	Text /Sig	Tooltip	Default value (DV entry in field dictionary) can be set in the Properties dialog. Value is entered by user.	Read Only, Required

Examples
Example 1: Specifying name, role, value and/or state for a form field using Adobe Acrobat Pro

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

This example uses a check box for illustration; the procedure is the same for other form controls.

Open the Prepare Form tool.
Select the form field you are creating or modifying and access the context menu for it.
Select the Properties... option.
Specify the name by adding a value to the Tooltip field. This will used by the accessibility API as the Name for the control. To conform to the Label In Name Criterion, the Tooltip value must contain the text that presented visually.
If you need to specify the default value and state, select the Options tab for these options.

The image below shows the Check Box Properties dialog, open in the General tab. (The Name field in the dialog is not needed for accessibility.)

This example is shown in operation in the working example of specifying name, role, value using Acrobat Pro.

Example 2: Adding a checkbox in a PDF document using the /Btn field type

The following code fragment illustrates code that is typical for a simple check box field such as shown in Examples 1 and 2. This is typically accomplished by an authoring tool.

1 0 obj
  << /FT /Btn     % Role
     /TU Retiree  % Name
     /V /Yes      % Value
     /AS /Yes
     /AP << /N << /Yes 2 0 R /Off 3 0 R>>
  >>
endobj

Related techniques:
- PDF23: Providing interactive form controls in PDF documents
- PDF5: Indicating required form controls in PDF forms
- PDF22: Indicating when user input falls outside the required format or values in PDF forms


------------------------------

PDF13: - Providing replacement text using the /Alt entry for links in PDF documents
Providing replacement text using the /Alt entry for links in PDF documents

About this Technique
	- This technique relates to:
	- 2.4.4: Link Purpose (In Context) (Sufficient when used with G91: Providing link text that describes the purpose of a link)
	- 2.4.9: Link Purpose (Link Only) (Sufficient when used for semantically indicating links)
	- This technique applies to tagged PDF documents that contain links.

Description : The objective of this technique is to provide replacement link text via the /Alt entry in the property list for a tag. This is usually not necessary, but in some situations, additional information beyond the visible link text is needed, particularly for screen reader users. Screen readers can read visible link text, but replacing the screen text with meaningful alternate text for links in a PDF document can make links more accessible. : Links in PDF documents are represented by a Link tag and objects in its sub-tree, consisting of a link object reference (or Link annotation) and one or more text objects. The text object or objects inside the Link tag are used by assistive technologies to provide a name for the link. : Authors can replace the default link text by providing an /Alt entry for the Link tag. When the Link tag has an /Alt entry, screen readers ignore the value of any visible text objects in the Link tag and use the /Alt entry value for the link text. : The simplest way to provide context-independent link text that complies with the WCAG 2.0 success criteria is to create them when authoring the document, before conversion to PDF. In some cases, it may not be possible to create the links using the original authoring tool. When editing PDF documents with Adobe Acrobat Pro, the best way to create accessible links is to use the Create Link command. : Authors should make sure that the alternate text makes sense in context of the screen text before and after the link.

Examples
Example 1: Adding alternate link text using Adobe Acrobat 9 Pro

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

The image below shows a document converted to PDF from Oracle Open Office. Note that the visible link text is the URL for the link target. A screen reader will read the entire URI as the link text.

To create more accessible link text for assistive technology:

In the View menu, open the Tag panel by selecting Navigation Panels → Tags.
Locate the Link tag in the tag tree, access the context menu for the link, and select Properties.
In the TouchUp Properties dialog, in the Tags tab, enter replacement text in the Alternate Text field. Screen readers will read this text instead of the entire URI.

The next image shows the Link tag structure in the Tag panel.

The last image shows the Alternate Text specified in the Link tag's TouchUp Properties dialog. A screen reader will read the Alternate Text as the link text.

This example is shown in operation in the working example of adding alternate link text (OpenOffice file) and working example of adding alternate link text (PDF file).

Example 2: Adding alternate link text in a PDF document using the /Alt entry

The following code fragment illustrates code that is typical for alternative text for a link. This is typically accomplished by an authoring tool.

32 0 obj
<<
  /S/URI                                       %Action type (required), must be URI for a URI action
  /URI(http://www.boston.com/business/technology/)  %Uniform resource identifier(required), the URI to be resolved
>>
endobj

The following illustrates how to specify alternate text for the URL in the above link:

11 0 obj
<<
  /Alt(Boston Globe technology page)    %Alternate text entry
  /K [ 1                                                      
       <<
         /Obj 27 0 R
         /Type /OBJR            %Object reference to the link
       >>
       ]                       
  /P 12 0 R
  /Pg 18 0 R
  /S
  /Link
>>
endobj

Related techniques:
- G53: Identifying the purpose of a link using link text combined with the text of the enclosing sentence
- G91: Providing link text that describes the purpose of a link
- G149: Using user interface components that are highlighted by the user agent when they receive focus
- PDF11: Providing links and link text using the Link annotation and the /Link structure element in PDF documents


------------------------------

PDF14: - Providing running headers and footers in PDF documents
Providing running headers and footers in PDF documents

About this Technique
	- This technique relates to:
	- 2.4.8: Location (Advisory)
	- 3.2.3: Consistent Navigation (Advisory)
	- This technique applies to tagged PDF documents.

Description : The objective of this technique is to help users locate themselves in a document by providing running headers and footers via pagination artifacts. This is normally accomplished using a tool for authoring PDF. : Running headers and footers help make content easier to use and understandable by providing repeated information in a consistent and predictable way. The content of headers and footers will vary widely depending on the document scope and content, the audience, and design decisions. Some examples of location information that may be used in headers and footers are listed below. Whether the information appears in a header or a footer is often a design decision; page numbers often appear in footers but they may alternatively appear in headers. : Document title
	- Current chapter and/or section in the document
	- Page numbers with location information such as, "Page 3-4" or "Page 9 of 15."
	- Author and/or date information. : Consistency helps users with cognitive limitations, screen-reader users and low-vision magnifier users, and users with intellectual disabilities understand content more readily. : The easiest way to provide page headers and footers is in the authoring tool for the document. Authoring tools typically provide features for creating header and footer text and information (such as page numbers). However, if after converting your document to PDF, you need to add or modify page headers and footers, authoring or repair tools like Adobe Acrobat Pro's Header & Footer tools can be used. In all cases, the tools generate page headers and footers in consistent and predictable layout, format, and text.

Examples
Example 1: Adding running headers and footers using Microsoft Word

This example is shown with Microsoft Word. There are other software tools that perform similar functions.

In Microsoft Word, use the Header and Footer tools in the Insert ribbon. When the Word document is converted into a PDF, the headers and footers will be tagged as pagination artifacts.

This example is shown in operation in the working example of adding running headers using Word (Word file) and working example of adding running headers using Word (PDF file).

Example 2: Adding running headers and footers using OpenOffice Writer

This example is shown with OpenOffice Writer. There are other software tools that perform similar functions.

In OpenOffice Writer, use the Insert → Header and Insert → Footer tools, which allow you to specify header and footer information and layout, as shown in the following images.

When converted to PDF, the page headers and footers appear in the document as they do in the converted Word document in Example 1.

This example is shown in operation in the working example of adding running headers using OpenOffice Writer (OpenOffice file) and working example of adding running headers using OpenOffice Writer (PDF file).

Example 3: Adding running headers and footers to PDF documents using Adobe Acrobat Pro

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

In Adobe Acrobat Pro, you can add or modify headers and footers:

Select the Edit PDF tool.
In the newly-opened Edit PDF toolbar, select Header & Footer → Add.
In the Add Header and Footer tool, specify text and formats for headers and footers in your document.
Use the Previews to make sure the text, fonts, and layout are as you want them for your document.

The image below shows Acrobat Pro's Add Header and Footer tool.

Related techniques:
- G61: Presenting repeated components in the same relative order each time they appear
- PDF9: Providing headings by marking content with heading tags in PDF documents
- PDF2: Creating bookmarks in PDF documents


------------------------------

PDF15: - Providing submit buttons with the submit-form action in PDF forms
Providing submit buttons with the submit-form action in PDF forms

About this Technique
	- This technique relates to 3.2.2: On Input (Sufficient when used with G80: Providing a submit button to initiate a change of context).
	- This technique applies to tagged PDF documents with forms.

Description : The objective of this technique is to provide a mechanism that allows users to explicitly request a change of context using the submit-form action in a PDF form. The intended use of a submit button is to generate an HTTP request that submits data entered in a form, so it is an appropriate control to use for causing a change of context. In PDF documents, submit buttons are normally implemented using a tool for authoring PDF.

Examples
Example 1: Adding a submit button using Adobe Acrobat Pro

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

Select the Prepare Form tool.
Using the Prepare Form toolbar, add a button to the form.
Select the button and access the context menu and select the Properties... menu item.
In the General tab, provide a Name. This will be used by any JavaScript scripting, so should be a value that can be assigned to a variable.
In the General tab, provide a tooltip for the button.
In the Options tab, choose an option in the Layout menu for the button label, icon image, or both. Then, type text in the Label box to identify the button as a submit button and/or click Choose Icon and locate the image file you want to use.
In the Actions tab:
For Select Trigger, choose Mouse Up. (The Mouse Up event is keyboard accessible and, in addition, ensures that the button will not change context unexpectedly, as it might with with a Mouse Enter event.)
For Select Action, choose Submit A Form.
Click Add.
In the Add dialog, enter a URL to collect data on a server or collect form data as e-mail attachments.
Example 2: Adding a script action to a submit button in a PDF document using JavaScript

The following JavaScript code illustrates the use of a script to specify the submit-form action. To add this script to the form field:

Open the Button Properties dialog, as shown in Example 1, and select the Actions tab
Select Run a JavaScript from the drop-down list, and select the Add button
Enter JavaScript code in the JavaScript Editor dialog.

This example is shown in operation in the working example of adding a script action to a submit button.

Related techniques:
- G80: Providing a submit button to initiate a change of context
- PDF23: Providing interactive form controls in PDF documents
- PDF12: Providing name, role, value information for form fields in PDF documents


------------------------------

PDF16: - Setting the default language using the /Lang entry in the document catalog of a PDF document
Setting the default language using the /Lang entry in the document catalog of a PDF document

About this Technique
	- This technique relates to 3.1.1: Language of Page (Sufficient).
	- This technique applies to tagged PDF documents.

Description : The objective of this technique is to specify a document's default language by setting the /Lang entry in the document catalog. This is normally accomplished using a tool for authoring PDF. : Both assistive technologies and conventional user agents can render text more accurately when the language of the document is identified. Screen readers can load the correct pronunciation rules. Visual browsers can display characters and scripts correctly. Media players can show captions correctly. As a result, users with disabilities are better able to understand the content.

Examples
Example 1: Adding a /Lang entry to specify the default document language using Adobe Acrobat Pro

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

Open the document in Adobe Acrobat Pro
From the File menu, select "Properties..."
In the "Properties" dialog, select the "Advanced" tab
In the "Reading Options" field, select the default language from the "Language" combo box

Note

Acrobat includes numerous preset language selections. If you need to specify a language that is not on the list, such as Russian, you must type the ISO 639-2 code for the language, not its name.

Example 2: Specifying the default document language in a PDF document using a /Lang entry

The natural language used for text in a document is determined in a hierarchical fashion, based on whether an optional /Lang entry is present in any of several possible locations. At the highest level, the document's default language may be specified by a /Lang entry in the document catalog.

The following code fragment illustrates code that is typical for using the /Lang entry in the document catalog for a document's default language (in this case English). (This is typically accomplished by an authoring tool.)

1 0 obj
   << /Type /Catalog
      ...
      /Lang (en)
      ...
   >> 
 endobj

Related techniques:
- PDF19: Specifying the language for a passage or phrase with the Lang entry in PDF documents


------------------------------

PDF17: - Specifying consistent page numbering for PDF documents
Specifying consistent page numbering for PDF documents

About this Technique
	- This technique relates to:
	- 1.3.1: Info and Relationships (Sufficient when used for making information and relationships conveyed through presentation programmatically determinable)
	- 2.4.8: Location (Advisory)
	- 3.2.3: Consistent Navigation (Advisory)
	- This technique applies to tagged PDF documents.

Description : The objective of this technique is to help users locate themselves in a document by ensuring that the page numbering displayed in the PDF viewer page controls has the same page numbering as the document. For example, Adobe Acrobat Pro and Reader display page numbers in the Page Navigation toolbar. The page number format is specified by the /PageLabels entry in the Document Catalog. : Many documents use specific page number formats within a document. Commonly, front matter is numbered with lowercase Roman numerals. The main content, starting on the page numbered 1, may actually be the fifth or sixth page in the document. Similarly, appendices may begin with page number 1 plus a prefix of the appendix letter (e.g., "A-1"). : Authors should make sure that the page numbering of their converted documents is reflected in any page number displays in their user agent. Consistency in presenting the document's page numbers will help make navigating the document more predictable and understandable. : As an example, if /PageLabels has not been provided to describe the page number formatting, the page numbering scheme will not be reflected in the Page Navigation toolbar in Adobe Acrobat Pro or Reader. This toolbar displays the page number in a text box, which users can change to move to another page. In addition, users can select the arrows to move one page up or down in the document. The toolbar also displays the relative page number location. In the image below, the default display indicates the user is on page 12 of 116 pages. : A more direct way of going to a page is to use the shortcut for the View > Page Navigation → Go To Page menu item. On Windows, this shortcut is "Ctrl + Shift + N"; on Mac OS, it is "Cmd + Shift + N". This brings up a dialog box to go to a specific page number.

Examples
Example 1: Editing PDF page number formatting specifications using Adobe Acrobat Pro

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

The example document converted from Microsoft Word has 4 pages, numbered i, ii, iii, iv, and 1. This is specified In Word using the Format Page Numbers in the Page Number option in Word's Insert ribbon.

In this document, a new section has been created with page numbering beginning with Arabic numeral 1 on the fourth page of the document. The document was then converted to PDF from Word.

In Adobe Acrobat Pro:

Select the Organize Pages tool;
Select the the pages that need their numbering updated;
Open the context menu and select the Page Labels... option;
Select the Page Numbering option;
Use the Begin New Section settings to update the page numbering style.

To correct the page numbers:

Select the pages to be renumbered
Access the context menu for the selected pages and select Number Pages
In the Page Numbering dialog, select the lowercase Roman numeral style and the starting page (1 by default, which is correct in this case)
Select OK

The following image shows the Page Numbering dialog and selections.

Follow the same process to change the fifth page number to Arabic numeral 1.

The following image shows the correct page numbers for the 5 pages.

This example is shown in operation in the working example of specifying page numbers in a document converted from Word (Word file) and working example of specifying page numbers in a document converted from Word (PDF file).

Example 2: Adding Page Numbers in OpenOffice Writer

To add page numbering in OpenOffice with Writer, the user needs to add a footer from the Insert dropdown.

After inserting the footer, click in the footer then select Insert ← Fields ← Page Number.

Example 3: Specifying page numbers using the /PageLabels entry

The following code fragment illustrates code that is typical for specifying multiple page numbering schemes in a document.

The example below is for a document with pages labeled: i, ii, iii, iv, 1, 2, 3, A-8, A-9, ...

This numbering scheme requires 3 page-label dictionaries (for lowercase Roman, Arabic, and prefixed numbers)

1 0 obj
    << /Type /Catalog
       /PageLabels << /Nums [ 0 << /S /r >>  % lowercase Roman numerals
                              4 << /S /D >>  % Arabic numerals
                              7 << /S /D     % Arabic numerals with ...
                      /P (A-)                % the prefix "A-"...
                      /St 8                  % starting at page 8
                                >>
                            ]
                    >>
       ...
   >>
  endobj


Page labels are specified as follows:

/S specifies the numbering style for page numbers:

/D - Arabic numerals (1,2,3...)
/r - lowercase Roman numerals (i, ii, iii,...)
/R - uppercase Roman numerals (I, II, III,...)
/A - uppercase letters (A-Z)
/a - lowercase letters (a-z)
/P (optional) - page number prefix
/St (optional) - the value of the first page number in the range (default: 1)

Related techniques:
- PDF14: Providing running headers and footers in PDF documents


------------------------------

PDF18: - Specifying the document title using the Title entry in the document information dictionary of a PDF document
Specifying the document title using the Title entry in the document information dictionary of a PDF document

About this Technique
	- This technique relates to 2.4.2: Page Titled (Sufficient when used with G88: Providing descriptive titles for Web pages).
	- This technique applies to tagged PDF documents.

Description : The intent of this technique is to show how a descriptive title for a PDF document can be specified for assistive technology by using the /Title entry in the document information dictionary and by setting the DisplayDocTitle flag to True in a viewer preferences dictionary. This is typically accomplished by using a tool for authoring PDF. : Document titles identify the current location without requiring users to read or interpret page content. User agents make the title of the page easily available to the user for identifying the page. For instance, a user agent may display the page title in the window title bar or as the name of the tab containing the page.

Examples
Example 1: Setting the document title in the metadata and specifying that the title be displayed in the title bar using Adobe Acrobat Pro

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

Open the PDF document in Adobe Acrobat Pro:

Select File → Properties
Select the Description tab to view the metadata in the document, including the document information dictionary
Modify the Title field to add or change the document's Title entry

Note that, with Adobe Acrobat installed, you can also enter and read the data properties information from the desktop. Access the file's context menu, choose Properties, and select the PDF tab. Any information you type or edit in this dialog box also appears in the Document Properties Description when you open the file.

To display the document title in the title bar of a user agent:

Select File → Properties
Select the Initial View tab
In the Window Options section, select Document Title in the Show pull-down list.

The title is now displayed in the title bar.

Example 2: A /Title entry in the document information dictionary of a PDF document

The following code fragment illustrates code that is typical for providing a /Title entry in a document information dictionary that contains a document title.

1 0 obj   
  << /Title (Applying Guerrilla Tactics to Usability Testing by People with Disabilities)    
    /Author (Mary Smith) 
    /CreationDate (D:19970915110347-08'00')    
  >>   
endobj

Related techniques:
- G88: Providing descriptive titles for Web pages


------------------------------

PDF19: - Specifying the language for a passage or phrase with the Lang entry in PDF documents
Specifying the language for a passage or phrase with the Lang entry in PDF documents

About this Technique
	- This technique relates to:
	- 3.1.1: Language of Page (Sufficient)
	- 3.1.2: Language of Parts (Sufficient)
	- This technique applies to tagged PDF documents.

Description : The objective of this technique is to specify the language of a passage, phrase, or word using the /Lang entry to provide information in the PDF document that user agents need to present text and other linguistic content correctly. This is normally accomplished using a tool for authoring PDF. : Both assistive technologies and conventional user agents can render text more accurately when the language is identified. Screen readers can load the correct pronunciation rules. As a result, users with disabilities are better able to understand the content. : Note : This technique can be used to set the default language for the entire document if the entire document is contained in the container or tag. In this case, this technique would apply to Success Criterion 3.1.1.

Examples
Example 1: Adding a /Lang entry to specify the language for a paragraph using Adobe Acrobat Pro

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

In the Navigation Panes, select the Accessibility Tags option.
Find the tag that contains the content that is in a different language.
Right-click the tag and select Properties in the context menu.
In the Tags tab in the Object Properties dialog, select the correct language from the drop-down list.

Note

Acrobat includes numerous preset language selections. If you need to specify a language that is not on the list, such as Russian, you must type the ISO 639-2 code for the language, rather than its name.

Example 2: Adding a /Lang entry to specify the language for a specific word or phrase using Adobe Acrobat Pro

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

Select the word or phrase that is in a different language.
Open the Accessibility Tags panel and select the Create Tag From Selection option.
Find the newly-created tag and right-click on it.
In the Tag tab in the Properties dialog, select the language from the drop-down list.

When you tag a word or phrase, Acrobat splits the original content into three document content tags: one for the text that precedes your selection, one for the selection, and one for the text that follows the selection. As needed, drag the document content tag for the selected text into position between the other two tags, so that the text reads in the proper order. All three tags must also be at the same level beneath their parent tag. Drag them into place if they are not.

This example is shown in operation in the working example of marking a specific word or phrase in Acrobat Pro (PDF).

Example 3: Specifying the language for a word or phrase in a PDF document using a /Lang entry

Below the level of the default document language, the language for a passage may be specified for the following items:

Marked-content sequences that are not in the structure hierarchy, through a /Lang entry in a property list attached to the marked-content sequence with a Span tag.
Structure elements of any type, through a /Lang entry in the structure element dictionary.

The following code fragment illustrates code that is typical for using the /Lang entry to override the default document language by specifying a marked-content sequence within a page's content stream:

/P % Start of marked-content sequence
   BDC
      (See you later, or in Spanish you would say, ) Tj
      /Span << /Lang (es-MX) >>% Start of nested marked-content sequence
     BDC
      (Hasta la vista.) Tj
     EMC% End of nested marked-content sequence
   EMC% End of marked-content sequence

The following code fragment illustrates code that is typical for using the /Lang entry in the structure element dictionary. In this case, the /Lang entry applies to the marked-content sequence having an MCID (marked-content identifier) value of 0 within the indicated page's content stream.

1 0 obj% Structure element
  << /Type /StructElem
    /S /Span% Structure type
    /P /P% Parent in structure hierarchy
    /K<< /Type /MCR
      /Pg 2 0 R% Page containing marked-content sequence
      /MCID 0% Marked-content identifier
     >>
   /Lang (es-MX)% Language specification for this element
   >>
endobj
2 0 obj% Page object
  << /Type /Page
     /Contents 3 0 R% Content stream
   …
   >>
   endobj
3 0 obj% Page's content stream
  << /Length … >>
    stream
     BT
      /P % Start of marked-content sequence
      BDC
     (See you later, or in Spanish you would say, ) Tj
     /Span << /MCID 0 >>% Start of nested marked-content sequence
    BDC
     (Hasta la vista.) Tj
    EMC% End of nested marked-content sequence
  EMC% End of marked-content sequence
 ET
 endstream
 endobj

Related techniques:
- PDF16: Setting the default language using the /Lang entry in the document catalog of a PDF document


------------------------------

PDF20: - Using Adobe Acrobat Pro's Table Editor to repair mistagged tables
Using Adobe Acrobat Pro's Table Editor to repair mistagged tables

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Sufficient when used for making information and relationships conveyed through presentation programmatically determinable).
	- This technique applies to tagged PDF documents with tables.

Description : The purpose of this technique is to show how table cells in PDF documents can be marked up so that the logical relationships among rows and columns are preserved and recognized by assistive technology. This is typically accomplished by using a tool for authoring PDF. : However, tables converted to PDF may have incorrectly merged or split table cells, even if they were marked up correctly in the authoring tool. Authors can ensure that table cells are structured properly by using the Table Editor in Adobe Acrobat Pro's Reading Order tool.

Examples
Example 1: Repairing table cells using the table editor in the Reading Order tool in Adobe Acrobat Pro

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

This example uses a table that was marked up correctly when it was created in Microsoft Word. Some table headers span two rows in the header row; one table header spans two columns.

To check the table in the PDF document:

Advanced → Accessibility → Reading Order...
Select the table by clicking the number in the top left hand corner of the table (3 in the reading order in the image below).
Select the Table Editor button on the Reading Order panel. The table cells will be outlined in red and labeled with their tags. The red outlines may not exactly match up to the table cells but you should be able to determine if the cells are tagged correctly.

The following image shows the example table in the Reading Order tool.

The following images shows the example table in the Table Editor. The cells are outlined in red, and the tab for each cell is displayed. Upon conversion, the Results headers were correctly split, but most of the table headers were incorrectly tagged as table data cells.

To repair the header cells:

Select the cell in the table (it will be outlined in blue when selected)
Right click the cell and select Table Cell Properties...
In the Table Cell Properties dialog, change Data Cell to Header Cell.

Similarly, to repair the incorrectly split header cells to the left of Results header:

Select the top cell in the column (it will be outlined in blue when selected)
Right click the cell and select Table Cell Properties...
In the Table Cell Properties dialog, change the Row Span from 1 to 2

The following image shows the repaired example table.

This example is shown in operation in the working example of repairing table structure (Word file) and working example of repairing table structure (PDF file).

Example 2: Marking up a table using table structure elements

The following code fragment illustrates code that is typical for a simple table (header row and data row) such as shown in Examples 1-3:

95 0 obj                %Structure element for a table
 << 
  /A 39 0 R
  /K[96 0 R 101 0 R 106 0 R 111 0 R]
  /P 93 0 R
  /S/Table              %standard structure type is table
 >> 
 endobj
96 0 obj                %Structure element for a table row
 << 
  /K[97 0 R 98 0 R 99 0 R 100 0 R]
  /P 95 0 R
  /S/TR                 %standard structure type is table row
 >> 
 endobj
97 0 obj                %Structure element for a table header
 <</A[23 0 R 120 0 R]
   /K 1
   /P 96 0 R
   /S/TH                 %standard structure type is table head
   /Pg 8 0 R
 >> 
endobj
104 0 obj                %Structure element for table data (cell contents)
 << 
  /A 29 0 R
  /K 7
  /P 101 0 R
  /S/TD                  %standard structure type is table data
  /Pg 8 0 R
 >> 
endobj

Related techniques:
- H51: Using table markup to present tabular information
- PDF6: Using table elements for table markup in PDF Documents


------------------------------

PDF21: - Using List tags for lists in PDF documents
Using List tags for lists in PDF documents

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Sufficient when used for making information and relationships conveyed through presentation programmatically determinable).
	- This technique applies to tagged PDF documents with lists.

Description : The intent of this technique is to create lists of related items using list elements appropriate for their purposes. PDF files containing lists are normally created or repaired using a tool for authoring PDF. : When markup is used that visually formats items as a list but does not indicate the list relationship, users may have difficulty navigating the information. An example of such visual formatting is simply using line-breaks to separate list items. : Some assistive technologies allow users to navigate from list to list or item to item. If the lists are not correctly formatted with list tags, these users will have difficulty understanding the list content. : The easiest way to create lists in PDF content is to format them properly using list markup in the authoring tool, for example, Microsoft Word or OpenOffice Writer. However, if you do not have access to the source file and authoring tool, you can use Acrobat Pro's Reading Order tool and the Tags panel. : The structure types for lists in PDF documents are: : L - the List tag, which contains one or more LI tags.
	- LI - the List Item tag. List item tags can contain Lbl and LBody tags.
	- Lbl - the list item label. Contains distinguishing information such as a item number or bullet character.
	- LBody - the list item body. Contains list item content, or in the case of a nested list, it may contain additional List tag trees.

Examples
Example 1: Adding lists to Microsoft Word documents

This example is shown with Microsoft Word. There are other software tools that perform similar functions.

On the Home ribbon, use the lists tools to create or repair lists in Word documents. This is the easiest way to ensure that lists are formatted correctly when they are converted to PDF.

Example 2: Adding lists to OpenOffice Writer documents

This example is shown with OpenOffice Writer. There are other software tools that perform similar functions.

Use the Bullets and Numbering tool to create or repair lists in OpenOffice Writer documents. This is the easiest way to ensure that lists are formatted correctly when they are converted to PDF.

Example 3: Ensuring that lists are correctly formatted using Adobe Acrobat Pro

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

View → Navigation Panels... → Accessibility Tags
Inspect the lists in the document to determine which, if any, are not formatted properly.

In the following image, the third list is formatted as text. The list items are separated only by line-breaks. Assistive technology may not be able to render the list intelligibly for users.

To repair the list, use the Tags panel to create list tags in the content.

The following image shows the resulting first list item correctly formatted.

This example, with two list items not nested inside the list element, is shown in the working example of ensuring lists are properly formatted.

Related techniques:
- G115: Using semantic elements to mark up structure


------------------------------

PDF22: - Indicating when user input falls outside the required format or values in PDF forms
Indicating when user input falls outside the required format or values in PDF forms

About this Technique
	- This technique relates to:
	- 3.3.1: Error Identification (Sufficient)
	- 3.3.3: Error Suggestion (Sufficient)
	- This technique applies to tagged PDF documents.

Description : The objective of this technique is to notify the user when user input to a field that requires a specific, required format (e.g., date fields) is not submitted in that format. : If the required format is not used, an alert dialog describes the nature of the error in text. This may be accomplished through scripting created by the author (see, for example, SCR18: Providing client-side validation and alert). User agents can provide automatic alerts (as described in the examples below). : Note : Once the user dismisses the alert dialog, it may be helpful if the script positions the keyboard focus on the field where the error occurred, although some users may expect the focus to remain on the last control focused prior to the alert appearing. Authors should exercise care to ensure that any movement of the focus will be expected. For example, if the alert announces an error in a phone number format, positioning the focus on the phone number field when the alert is dismissed can be regarded as helpful and expected. In some cases, however, this may not be possible. If multiple input errors occur on the page, an alternative approach to error notification should be implemented. : Ensuring that users are aware an error has occurred, can determine what is wrong, and can correct it are key to software usability and accessibility. Meeting this objective helps ensure that all users can complete for-based transactions with ease and confidence. : Labels for required formats in form controls : It is also important that users are aware that an error may occur. You can incorporate this information in labels; for example, "Date (MM/DD/YYYY)." See PDF10.

Examples
Example 1: Providing validation for an input field format using Adobe Acrobat Pro

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

Many fields, for example: telephone number, postal code, and dates, must have data entered in a specific format or pattern.

Access the context menu for the form control that requires a specific format.
Select Properties...
In the Format tab, select the Format Category (in this case, Date). The Date Options appear.
Select the format for this form control (in this case, mm/dd/yyyy).
In the General tab, specify "Date (mm/dd/yyyy)" for the Name and Tooltip for the control.

When a user types a recognized date format, it is converted automatically to the specified format. If the date format or value is not recognized, an error alert appears and provides further information

This example is shown in operation in the working example of Required Fields in Acrobat (PDF).

Example 2: Validating a required date format in a PDF form using JavaScript using Adobe Acrobat Pro

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

The following JavaScript illustrates the use of a script to validate form fields, in this case, a date field. To add this script to the form field, open the Text Field Properties dialog and select Edit in the Validate tab.

// JavaScript code for date mask format MM/DD/YYYY
var re = /^[mdy0-9]{2}\/[mdy0-9]{2}\/[mdy0-9]{4}$/
//Allow blank space in field
if (event.value !="") {
  if (re.test(event.value) == false) {
    app.alert ({
       cTitle: "Incorrect Format",
       cMsg: "Please enter date using\nmm/dd/yyyy format"
    });
  }
}

Related techniques:
- G89: Providing expected data format and example
- SCR18: Providing client-side validation and alert
- PDF23: Providing interactive form controls in PDF documents
- PDF10: Providing labels for interactive form controls in PDF documents
- PDF5: Indicating required form controls in PDF forms


------------------------------

PDF23: - Providing interactive form controls in PDF documents
Providing interactive form controls in PDF documents

About this Technique
	- This technique relates to 2.1.1: Keyboard (Sufficient when used for ensuring keyboard control).
	- This technique applies to tagged PDF documents with forms.

Description : The objective of this technique is to ensure that interactive form controls in PDF documents allow keyboard operation. Interactive PDF forms are generally created using a tool for authoring PDF. : The types of PDF form controls are: text input field, check box, radio button, combo box, list box, and button. : Form controls allow users to interact with a PDF document by filling in information or indicating choices, which can then be submitted for processing. Users who rely on keyboard access must be able to recognize and understand the form fields, make selections, and provide input to complete the forms, and submit the form, just as sighted users can. : Interactive form controls can be provided for forms created by converting a scanned paper form to tagged PDF or by creating a form in an authoring application such as Microsoft Word or Open Office and converting it to tagged PDF. : However, documents created by authoring applications that provide form design features might not fully retain their fillable form fields on conversion to PDF. Complex forms in particular may not have properly converted form fields and labels when tagged in conversion. : Using Adobe Acrobat Pro with forms in converted documents, you can ensure that form fields are keyboard accessible and usable by: : Opening tagged PDF documents with form fields and creating interactive PDF form elements with the Identify Form Fields tool.
	- Modifying fillable form fields, or adding form fields, using Adobe Acrobat Pro

Examples
Example 1: Adding interactive controls to existing forms in PDF documents using Adobe Acrobat Pro

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

If you have a form in a tagged PDF document (created by scanning a paper form or using an authoring tool to generate tagged PDF), you can use Adobe Acrobat Pro to make the form elements keyboard accessible in the same page locations as the static form.

Use the Accessibility tool and then Identify Form Fields option to automatically detect form fields and make them fillable.

This example is shown in operation in the working example of Interactive Controls in Acrobat (PDF).

Example 2: Adding form controls in PDF documents using Adobe Acrobat Pro

This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions.

You can add keyboard accessible form controls to your form as follows:

Select the Prepare Form tool
From the newly-opened Prepare Form toolbar, select the type of form control you want to add.
Example 3: Adding a text field in a PDF document using the /Tx field type

The following code fragment illustrates code that is typical for a simple text field such as shown in Examples 1 and 2. This is typically accomplished by an authoring tool.

<< /AP -dict-                                                   
   /DA /Helv  0 Tf 0 g
   /DR -dict-
   /F 0x4
   /FT Tx              % FT key set to Tx for Text Field
   /P -dict-
   /Rect -array-
   /StructParent 0x1
   /Subtype Widget
   /T Date you are available   % Partial field name Date
   /TU Date you are available: use mm/dd/yyyy format % TU tool tip value serves as short description
   /Type Annot
   /V Pat Jones
>>
...
<Start Stream>
 BT
  /P <</MCID 0 >>BDC
  /CS0 cs 0  scn 
  /TT0 1 Tf
    -0.001 Tc 0.003 Tw 11.04 0 0 11.04 72 709.56 Tm
    [(P)-6(le)-3(as)10(e)-3( )11(P)-6(rin)2(t)-3( Y)8(o)-7(u)2(r N)4(a)11(m)-6(e)]TJ
  0 Tc 0 Tw 9.533 0 Td
  ( )Tj
  -0.004 Tc 0.004 Tw 0.217 0 Td
  [(\()-5(R)-4(e)5(q)-1(u)-1(i)-3(r)-3(e)-6(d)-1(\))]TJ
 EMC
  /P <</MCID 1 >>BDC
  0 Tc 0 Tw 4.283 0 Td
  [( )-2( )]TJ
   EMC
   /ArtifactSpan <</MCID 2 >>BDC
   0.002 Tc -0.002 Tw 0.456 0 Td
  [(__)11(___)11(___)11(___)11(___)11(_)11(____)11(___)11(___)11(__)]TJ
  0 Tc 0 Tw 13.391 0 Td
  ( )Tj
  EMC
 ET
<End Stream>

Related techniques:
- G202: Ensuring keyboard control for all functionality
- PDF3: Ensuring correct tab and reading order in PDF documents
- PDF12: Providing name, role, value information for form fields in PDF documents
- PDF15: Providing submit buttons with the submit-form action in PDF forms

--------------------------------------------------

File: server-side-script.json
==================================================

SVR1: - Implementing automatic redirects on the server side instead of on the client side
Implementing automatic redirects on the server side instead of on the client side

About this Technique
	- This technique relates to 3.2.5: Change on Request (Sufficient).
	- This technique applies to server-side technologies, including server-side scripting languages and server configuration files with URLs or URL patterns for redirects.

Description : The objective of this technique is to avoid confusion that may be caused when two new pages are loaded in quick succession because one page (the one requested by the user) redirects to another. Some user agents support the use of the HTML meta element to redirect the user to another page after a specified number of seconds. This makes a page inaccessible to some users, especially users with screen readers. Server-side technologies provide methods to implement redirects in a way that does not confuse users. A server-side script or configuration file can cause the server to send an appropriate HTTP response with a status code in the 3xx range and a Location header with another URL. When the browser receives this response, the location bar changes and the browser makes a request with the new URL.

Examples
Example 1: JSP/Servlets

In Java Servlets or JavaServer Pages (JSP), developers can use HttpServletResponse.sendRedirect(String url).

...
public void doGet(HttpServletRequest request, HttpServletResponse response)
throws ServletException, IOException {
  ...
  response.sendRedirect("/newUserLogin.do");
}

This sends a response with a 302 status code ("Found") and a Location header with the new URL to the user agent. It is also possible to set another status code with response.sendError(int code, String message) with one of the constants defined in the interface javax.servlet.http.HttpServletResponse as status code.

...
public void doGet(HttpServletRequest request, HttpServletResponse response)
throws ServletException, IOException {
  ...
  response.sendError(response.SC_MOVED_PERMANENTLY, "/newUserLogin.do");
}

If an application uses HttpServletResponse.encodeURL(String url) for URL rewriting because the application depends on sessions, the method HttpServletResponse.encodeRedirectURL(String url) should be used instead of HttpServletResponse.sendRedirect(String url). It is also possible to rewrite a URL with HttpServletResponse.encodeURL(String url) and then pass this URL to HttpServletResponse.sendRedirect(String url).

Example 2: ASP

In Active Server Page (ASP) with VBScript, developers can use Response.Redirect.

Response.Redirect "newUserLogin.asp"

or

Response.Redirect("newUserLogin.asp")

The code below is a more complete example with a specific HTTP status code.

Response.Clear
Response.Status = 301
Response.AddHeader "Location", "newUserLogin.asp"
Response.Flush
Response.End
Example 3: PHP

In PHP, developers can send a raw HTTP header with the header method. The code below sends a 301 status code and a new location. If the status is not explicitly set, the redirect response sends an HTTP status code 302.

<?php
header("HTTP/1.1 301 Moved Permanently");
header("Location: https://www.example.com/newUserLogin.php");
?>
Example 4: Apache

Developers can configure the Apache Web server to handle redirects, as in the following example.

redirect 301 /oldUserLogin.jsp http://www.example.com/newUserLogin.do


------------------------------

SVR2: - Using .htaccess to ensure that the only way to access non-conforming content is from conforming content
Using .htaccess to ensure that the only way to access non-conforming content is from conforming content

About this Technique
	- This technique is not referenced from any Understanding document.
	- This technique applies to content residing on a Web server that supports .htaccess (typically Apache) where a conforming version of content is provided as an alternative to a non-conforming version.

Description : The objective of this technique is to ensure that users can always access an accessible version of the content when non-conforming versions are also available. Whenever content is provided in a format that does not conform to WCAG, the site as a whole can still conform if alternate versions of the inaccessible content are provided. Conformance Requirement 4 requires that alternate versions can be derived from the nonconforming content or from its URI. : Since it is not always possible to provide an accessible link from within non-conforming content, this technique describes how authors can use Apache's Module "mod_access" to ensure that non-conforming content can only be accessed from URIs that serve as alternate versions to the non-conforming content or from pages that include links to both the non-conforming version and the alternative version.

Examples
Example 1: Using Apache's mod_redirect module to redirect requests

The following .htaccess file uses Apache's mod_redirect module to redirect requests for "inaccessible.html" to "accessible.html" unless the request comes from "accessible.html".

# If the request for inaccessible content comes from a file 
# called accessible.html, then set an environment variable that 
# allows the inaccessible version to be displayed.
SetEnvIf Referer .*(accessible.html)$ let_me_in
<FilesMatch ^(inaccessible.html)$>
  Order Deny,Allow
  Deny from all
  Allow from env=let_me_in
</FilesMatch>

# If the request comes from anyplace but accessible.html, then 
# redirect the error condition to a location where the accessible 
# version resides
ErrorDocument 403 /example_directory/accessible.html
Example 2: Redirecting direct requests for files

This example assumes a directory structure where documents are available in multiple formats. One of the formats does not meet WCAG at the level claimed and uses the file extension "jna" (Just Not Accessible). All of these files are stored in a folder called "jna" with an .htaccess file which ensures that any direct request for a file with the .jna extension from pages where inaccessible versions are not already available is redirected to an index page that lists all of the available formats.

# If the request for inaccessible content comes from a file at 
# https://example.com/documents/index.html, then set an environment 
# variable that allows the inaccessible version to be displayed.
SetEnvIf Referer ^https://example.com/documents/index.html$ let_me_in
<FilesMatch ^(.*\.jna)$>
  Order Deny,Allow
  Deny from all
  Allow from env=let_me_in
</FilesMatch>

# If the request comes from anyplace but https://example.com/documents/index.html, then 
# redirect the error condition to a location where a link the accessible 
# version resides
ErrorDocument 403 https://example.com/documents/index.html

Related techniques:
- G136: Providing a link at the beginning of a nonconforming Web page that points to a conforming alternate version
- G190: Providing a link adjacent to or associated with a non-conforming object that links to a conforming alternate version
- SVR3: Using HTTP referer to ensure that the only way to access non-conforming content is from conforming content
- SVR4: Allowing users to provide preferences for the display of conforming alternate versions
- C29: Using a style switcher to provide a conforming alternate version


------------------------------

SVR3: - Using HTTP referer to ensure that the only way to access non-conforming content is from conforming content
Using HTTP referer to ensure that the only way to access non-conforming content is from conforming content

About this Technique
	- This technique is not referenced from any Understanding document.
	- This technique applies to content created using server-side scripting where a conforming version of content is provided as an alternative to a non-conforming version based on HTTP Referer.

Description : The objective of this technique is to ensure that users can obtain an accessible version of content where both non-conforming and conforming versions are provided. : Conformance Requirement 1 allows non-conforming pages to be included within the scope of conformance as long as they have a conforming alternate version. It is not always possible for authors to include accessibility supported links to conforming content from within non-conforming content. Therefore, authors may need to rely on the use of Server Side Scripting technologies (ex. PHP, ASP, JSP) to ensure that the non-conforming version can only be reached from a conforming page. : This technique describes how to use information provided by the HTTP referer to ensure that non-conforming content can only be reached from a conforming page. The HTTP referer header is set by the user agent and contains the URI of the page (if any) which referred the user agent to the non-conforming page. : To implement this technique, an author identifies the URI for the conforming version of the content, for each non-conforming page. When a request for the non-conforming version of a page is received, the server compares the value of the HTTP referer header against the URI of the conforming version to determine whether the link to the non-conforming version came from the conforming version. The non-conforming version is only served if the HTTP referer matches the URI of the non-conforming version. Otherwise, the user is redirected to the conforming version of the content. Note that when comparing the URI in the HTTP referer header, non-relevant variations in the URI, such as in the query and target, should be taken into account.

Examples
Example 1: Interactive demonstrations of physical processes

An online physics course uses a proprietary modeling language to provide interactive demonstrations of physical processes. The user agent for the modeling language is not compatible with assistive technology. The site includes a script that uses the HTTP referer to ensure that unless users attempt to access the interactive demonstration from a page that contains a conforming description of the process and models, the server redirects the request to a conforming page which contains a link to the non-conforming version. Students may choose to access the non-conforming, interactive version, but those who do not are still able to learn about the process.

Example 2: Using HTTP referer in PHP

The following example illustrates how this technique can be used in PHP. It includes two files, conforming.php and non-conforming.php which work together to ensure that the only way to access non-conforming content is from conforming content.

Conforming PHP
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Conforming Content</title>
</head>
<body>
  <h1>This is a conforming page</h1>
  <p>From here, you can visit the <a href="non-conforming.php">non-conforming 
    page</a>.</p>
</body>
</html>
Non-conforming PHP
<?php 
// if the request comes from a file that contains the string "conforming.php" 
// then render the page
  if(stristr($_SERVER['HTTP_REFERER'], "conforming.php")) {
?>	
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Non-Conforming Content</title>
</head>
<body>
  <h1>This is a non-conforming page</h1>
  <p>Because you came from <?php echo $_SERVER['HTTP_REFERER']; ?>, 
   you are able to view the content on this page.</p>
</body>
</html>
<?php
 }
// if the referring page is not conforming.php, then redirect the user to 
// the conforming version
else  {
header("Location: conforming.php");
}
?>

A working example, Conforming content, is available.

Related techniques:
- G136: Providing a link at the beginning of a nonconforming Web page that points to a conforming alternate version
- G190: Providing a link adjacent to or associated with a non-conforming object that links to a conforming alternate version
- SVR2: Using .htaccess to ensure that the only way to access non-conforming content is from conforming content
- SVR4: Allowing users to provide preferences for the display of conforming alternate versions
- C29: Using a style switcher to provide a conforming alternate version


------------------------------

SVR4: - Allowing users to provide preferences for the display of conforming alternate versions
Allowing users to provide preferences for the display of conforming alternate versions

About this Technique
	- This technique is not referenced from any Understanding document.
	- This technique applies to content created using server-side scripting to store preferences.

Description : The objective of this technique is to provide a mechanism for users to select a preference for an alternate conforming version of a Web page. : Providing preferences to allow users to view conforming alternate versions can be accomplished in several ways. One common method is to provide a link which triggers a server-side process that sets a session or persistent cookie that the Web server uses to modify the page or redirect the user to the alternate version. Other methods include providing user-specific choices that are stored as part of the user's login information for a system where users sign in to access a Web page or service. : Users requiring an alternate version will need the mechanism provided in the non-conforming page to be accessible in order to find and use it. The mechanism itself should conform to the accessibility level being claimed.

Examples
Example 1: Setting a session or persistent cookie to store a user preference

A Web site offers a link to a "preferences" page on pages within the site. On this page, there is an option to view an alternate version of the site. There may be various aspects of the page that are affected, or the user may be opting to view an entirely alternate version of the site. The preference may be to display a version of the site where video included on the site displays captioning, or it may be offered because the primary site contains accessibility conformance issues that are addressed only via the alternative.

A Web page author may choose to handle this preference via a cookie, which may be handled via a server-side scripting language such as PHP.

The preferences page may be offered as follows:

<!DOCTYPE html>
<html lang="en">
<head>
  <title>Site Preferences</title>
</head>
<body>
  <h1>Site Preferences</h1>
  <form id="form1" name="site_prefs" method="post" action="pref.php">
    <fieldset>
      <legend>Which version of the site do you want to view?</legend>
      <input type="radio" name="site_pref" id="site_pref_reg" value="reg">
      <label for="site_pref_reg">Main version of site</label>
      <input type="radio" name="site_pref" id="site_pref_axx" value="axx">
      <label for="site_pref_axx">Accessibility-conforming version</label>
    </fieldset> 
  </form>
</body>
</html>

The form is submitted to the pref.php file for processing. A cookie is set, and in this simple example the user's browser is directed to the site home page.

pref.php
<?php
if(isset($site_pref)) {
setcookie("site_pref",$site_pref, time() + (86400 * 30)); //set for 30 days
header("location: http://www.example.com"); //redirects to home page
}
?>

The home page starts with code that implements the user's preference.

index.php
<?
if(isset($site_pref)) {
  if($site_pref="axx") {
    header("location: ./accessible/index.php");
  }
?>
<!DOCTYPE html>
<html lang="en">
<head>
  ...

For a login-based system, the preference is stored in the user's database record and referred to by the server-side script generating the pages for the user to view.

Related techniques:
- G136: Providing a link at the beginning of a nonconforming Web page that points to a conforming alternate version
- G190: Providing a link adjacent to or associated with a non-conforming object that links to a conforming alternate version
- SCR38: Creating a conforming alternate version for a web page designed with progressive enhancement
- SVR2: Using .htaccess to ensure that the only way to access non-conforming content is from conforming content
- SVR3: Using HTTP referer to ensure that the only way to access non-conforming content is from conforming content
- C29: Using a style switcher to provide a conforming alternate version


------------------------------

SVR5: - Specifying the default language in the HTTP header
Specifying the default language in the HTTP header

About this Technique
	- This technique relates to 3.1.1: Language of Page (Advisory).
	- This technique applies to server-side technologies, including server-side scripting languages and server configuration files for setting HTTP headers.

Description : The objective of this technique is to provide information on the primary language or languages in a Web page, in order to identify the audience of the content. The Content-Language HTTP header can contain a list of one or more language codes, which can be used for language negotiation between a user agent and a server. If the language preferences in a user agent are set correctly, language negotiation can help the user to find a language version of the content that suits their preferences. : Note that the Content-Language HTTP header does not serve to identify the language used for processing the content. The content processing language can be identified by means of other techniques, such as the attributes lang and xml:lang in markup languages. : This technique ensures that the primary language of the document, as specified for example in the lang or xml:lang attribute, is listed in the Content-Language HTTP header.

Examples
Example 1: Setting content language in Java Servlet and JSP

In Java Servlet or JavaServer Pages (JSP), developers can use response.setHeader("Content-Language", lang), in which "lang" stands for a language tag (for example, "en" for English):

...
public void doGet(HttpServletRequest request, HttpServletResponse response)
  throws ServletException, IOException {
   ...
   response.setHeader("Content-Language", "en");
   PrintWriter out = response.getWriter();
   ...
}
Example 2: Setting content language in PHP

In PHP, developers can send a raw HTTP header with the header method. The following example sets the language to French:

<?php header('Content-language: fr'); ... ?>

Related techniques:
- H57: Using the language attribute on the HTML element

--------------------------------------------------

File: smil.json
==================================================

SM1: - Adding extended audio description in SMIL 1.0
Adding extended audio description in SMIL 1.0

About this Technique
	- This technique relates to:
	- 1.2.3: Audio Description or Media Alternative (Prerecorded) (Sufficient when used with G8: Providing a movie with extended audio descriptions)
	- 1.2.5: Audio Description (Prerecorded) (Sufficient when used with G8: Providing a movie with extended audio descriptions)
	- 1.2.7: Extended Audio Description (Prerecorded) (Sufficient when used with G8: Providing a movie with extended audio descriptions)
	- This technique applies whenever SMIL 1.0 player is available.

Description : The purpose of this technique is to allow there to be more audio description than will fit into the gaps in the dialogue of the audio-visual material. : With SMIL 1.0 there is no easy way to do this but it can be done by breaking the audio and video files up into a series of files that are played sequentially. Additional audio description is then played while the audio-visual program is frozen. The last frame of the video file is frozen so that it remains on screen while the audio file plays out. : The effect is that the video appears to play through from end to end but freezes in places while a longer audio description is provided. It then continues automatically when the audio description is complete. : To turn the extended audio description on and off one could use script to switch back and forth between two SMIL scripts, one with and one without the extended audio description lines. Or script could be used to add or remove the extended audio description lines from the SMIL file so that the film clips would just play sequentially. : If scripting is not available then two versions of the video could be provided, one with and one without extended audio descriptions.

Examples
Example 1: SMIL 1.0 Video with audio descriptions that pause the main media in 4 locations to allow extended audio description
<?xml version="1.0" encoding="UTF-8"?>
<smil xmlns:qt="http://www.apple.com/quicktime/resources/smilextensions" 
 xmlns="https://www.w3.org/TR/REC-smil" qt:time-slider="true">
  <head>
    <layout>
      <root-layout background-color="black" height="266" width="320"/>
      <region id="videoregion" background-color="black" top="26" left="0" 
       height="144" width="320"/>
    </layout>
  </head>
  <body>
    <par>
      <seq>
        <par>
          <video src="video.rm" region="videoregion" clip-begin="0s" clip-end="5.4" 
           dur="8.7" fill="freeze" alt="videoalt"/>   
           <audio src="no1.wav" begin="5.4" alt="audio alt"/>
        </par>
        <par>
          <video src="video.rm" region="videoregion" clip-begin="5.4" clip-end="24.1" 
           dur="20.3" fill="freeze" alt="videoalt"/>
          <audio src="no2.wav" begin="18.7" alt="audio alt"/>
        </par>
        <par>
          <video src="video.rm" region="videoregion" clip-begin="24.1" clip-end="29.6" 
           dur="7.7" fill="freeze" alt="videoalt"/>
          <audio src="no3.wav" begin="5.5" alt="audio alt"/>
        </par>
        <par>
          <video src="video.rm" region="videoregion" clip-begin="29.6" clip-end="34.5" 
           dur="5.7" fill="freeze" alt="videoalt"/>
          <audio src="no4.wav" begin="4.9" alt="audio alt"/>
        </par>
        <par>
          <video src="video.rm" region="videoregion" clip-begin="77.4" alt="video alt"/>
        </par>
      </seq>
    </par>
  </body>
</smil>

The markup above is broken into five par segments. In each, there is a video and an audio tag (the last par has no <audio> tag intentionally). The convention with extended audio descriptions is that the main media pauses during the description. The way to make this happen in SMIL 1.0 is to set a clip-begin and clip-end which dictate the start and end of the video clip, and to set a duration for the clip that is longer than what is defined by the clip-begin and clip-end. The fill="freeze" holds the last frame of the video during the extended description. The audio tag has a begin attribute with a value that is equal to the clip-end value of the preceding video tag.

To determine the values for clip-begin, clip-end, and dur, find the start and end time of the portion of the video being described, and find out the total length of the extended audio description. The clip-begin and clip-end define their own values, but the dur value is the sum of the length of the extended description and the clip defined by the clip-begin and clip-end. In the first par, the video clip starts at 0 seconds, ends at 5.4 seconds, and the description length is 3.3 seconds, so the dur value is 5.4s + 3.3s = 8.7s.

Related techniques:
- SM2: Adding extended audio description in SMIL 2.0
- SM6: Providing audio description in SMIL 1.0
- G81: Providing a synchronized video of the sign language interpreter that can be displayed in a different viewport or overlaid on the image by the player
- SM11: Providing captions through synchronized text streams in SMIL 1.0


------------------------------

SM2: - Adding extended audio description in SMIL 2.0
Adding extended audio description in SMIL 2.0

About this Technique
	- This technique relates to:
	- 1.2.3: Audio Description or Media Alternative (Prerecorded) (Sufficient when used with G8: Providing a movie with extended audio descriptions)
	- 1.2.5: Audio Description (Prerecorded) (Sufficient when used with G8: Providing a movie with extended audio descriptions)
	- 1.2.7: Extended Audio Description (Prerecorded) (Sufficient when used with G8: Providing a movie with extended audio descriptions)
	- This technique applies whenever SMIL 2.0 player is available.

Description : The purpose of this technique is to allow there to be more audio description than will fit into the gaps in the dialogue of the audio-visual material. : With SMIL 2.0 it is possible to specify that particular audio files be played at particular times, and that the program be frozen (paused) while the audio file is being played. : The effect is that the video appears to play through from end to end but freezes in places while a longer audio description is provided. It then continues automatically when the audio description is complete. : To turn the extended audio description on and off one could use script to switch back and forth between two SMIL scripts, one with and one without the extended audio description lines. Or script could be used to add or remove the extended audio description lines from the SMIL file so that the film clips would just play uninterrupted. : If scripting is not available then two versions of the SMIL file could be provided, one with and one without extended audio description.

Examples
Example 1: Video with extended audio description
<smil xmlns="https://www.w3.org/2001/SMIL20/Language"> 
<head>
  <layout> 
    <root-layout backgroundColor="black" height="266" width="320"/> 
    <region id="video" backgroundColor="black" top="26" left="0" 
     height="144" width="320"/> 
  </layout> 
</head> 
<body>	 
  <excl> 
    <priorityClass peers="pause"> 
      <video src="movie.rm" region="video" title="video" alt="video" /> 
      <audio src="desc1.rm" begin="12.85s" alt="Description 1" /> 
      <audio src="desc2.rm" begin="33.71s" alt="Description 2" /> 
      <audio src="desc3.rm" begin="42.65s" alt="Description 3" /> 
      <audio src="desc4.rm" begin="59.80s" alt="Description 4" /> 
    </priorityClass> 
  </excl> 
</body> 
</smil>

Related techniques:
- G81: Providing a synchronized video of the sign language interpreter that can be displayed in a different viewport or overlaid on the image by the player
- SM7: Providing audio description in SMIL 2.0
- SM11: Providing captions through synchronized text streams in SMIL 1.0


------------------------------

SM6: - Providing audio description in SMIL 1.0
Providing audio description in SMIL 1.0

About this Technique
	- This technique relates to:
	- 1.2.3: Audio Description or Media Alternative (Prerecorded) (Sufficient when used with G173: Providing a version of a movie with audio descriptions)
	- 1.2.5: Audio Description (Prerecorded) (Sufficient when used with G173: Providing a version of a movie with audio descriptions)
	- This technique applies whenever SMIL 1.0 player is available.

Description : The objective of this technique is to provide a way for people who are blind or otherwise have trouble seeing the video in audio-visual material to be able to access the material. With this technique a description of the video is provided via audio description that will fit into the gaps in the dialogue in the audio-visual material.

Examples
Example 1: SMIL 1.0 audio description sample for QuickTime player
<?xml version="1.0" encoding="UTF-8"?>
<smil xmlns:qt="http://www.apple.com/quicktime/resources/smilextensions" 
      xmlns="https://www.w3.org/TR/REC-smil" qt:time-slider="true">
<head>
  <layout>
    <root-layout background-color="black" height="266" width="320"/>
    <region id="videoregion" background-color="black" top="26" left="0" 
      height="144" width="320"/>
  </layout>
</head>
<body>
  <par>
    <video dur="0:01:20.00" region="videoregion" src="salesdemo.mov" 
     alt="Sales Demo"/>
    <audio dur="0:01:20.00" src="salesdemo_ad.mp3" 
     alt="Sales Demo Audio Description"/>
  </par>
</body>
</smil>

Related techniques:
- SM2: Adding extended audio description in SMIL 2.0
- SM7: Providing audio description in SMIL 2.0


------------------------------

SM7: - Providing audio description in SMIL 2.0
Providing audio description in SMIL 2.0

About this Technique
	- This technique relates to:
	- 1.2.3: Audio Description or Media Alternative (Prerecorded) (Sufficient when used with G173: Providing a version of a movie with audio descriptions)
	- 1.2.5: Audio Description (Prerecorded) (Sufficient when used with G173: Providing a version of a movie with audio descriptions)
	- This technique applies whenever SMIL 2.0 player is available.

Description : The objective of this technique is to provide a way for people who are blind or otherwise have trouble seeing the video in audio-visual material to be able to access the material. With this technique a description of the video is provided via audio description that will fit into the gaps in the dialogue in the audio-visual material.

Examples
Example 1: SMIL 2.0 audio description sample for RealMedia player
<smil xmlns="https://www.w3.org/2001/SMIL20/Language">
<head>
  <layout>
    <root-layout backgroundColor="black" height="266" width="320"/>
    <region id="video" backgroundColor="black" top="26" left="0" 
     height="144" width="320"/>
  </layout>
  </head>
  <body>
    <par>
      <video src="salesdemo.mpg" region="video" title="Sales Demo" 
      alt="Sales Demo"/>
      <audio src="salesdemo_ad.mp3" begin="33.71s" title="audio description" 
      alt="Sales Demo Audio Description"/>
    </par>
  </body>
</smil>

The example shows a par segment containing an audio and a video tag. The audio stream is not started immediately.

Related techniques:
- SM2: Adding extended audio description in SMIL 2.0
- SM6: Providing audio description in SMIL 1.0


------------------------------

SM11: - Providing captions through synchronized text streams in SMIL 1.0
Providing captions through synchronized text streams in SMIL 1.0

About this Technique
	- This technique relates to:
	- 1.2.2: Captions (Prerecorded) (Sufficient when used with G87: Providing closed captions)
	- 1.2.4: Captions (Live) (Sufficient when used with G9: Creating captions for live synchronized media and G87: Providing closed captions)
	- This technique applies to SMIL 1.0.

Description : The objective of this technique is to provide a way for people who are deaf or otherwise have trouble hearing the dialogue in audio visual material to be able to view the material. With this technique all of the dialogue and important sounds are available in a text stream that is displayed in a caption area. : With SMIL 1.0, separate regions can be defined for the video and the captions. The captions and video playback are synchronized, with the caption text displayed in one region of the screen, while the corresponding video is displayed in another region.

Examples
Example 1: SMIL 1.0 caption sample for QuickTime player
<?xml version="1.0" encoding="UTF-8"?>
<smil xmlns:qt="http://www.apple.com/quicktime/resources/smilextensions" 
     xmlns="https://www.w3.org/TR/REC-smil" qt:time-slider="true">
<head>
  <layout>
    <root-layout width="320" height="300" background-color="black"/>
    <region top="0" width="320" height="240" left="0" background-color="black" 
     id="videoregion"/>
    <region top="240" width="320" height="60" left="0" background-color="black" 
     id="textregion"/>
  </layout>
</head>
<body>
  <par>
    <video dur="0:01:20.00" region="videoregion" src="salesdemo.mov" 
     alt="Sales Demo"/>
    <textstream dur="0:01:20.00" region="textregion" src="salesdemo_cc.txt" 
     alt="Sales Demo Captions"/>
  </par>
</body>
</smil>
Example 2: SMIL 1.0 caption sample with internal text streams
<?xml version="1.0" encoding="UTF-8"?>
<smil xmlns="https://www.w3.org/TR/REC-smil">
<head>
  <layout>
    <root-layout background-color="black" height="310" width="330"/>
    <region id="video" background-color="black" top="5" left="5" 
     height="240" width="320"/>
    <region id="captions" background-color="black" top="250" 
     height="60" left="5" width="320"/>
  </layout>
</head>
<body>
  <par>
    <video src="salesdemo.mpg" region="video" title="Sales Demo" 
     alt="Sales Demo"/>
    <text src="data:,This%20is%20inline%20text." region="captions" begin="0s" 
     dur="3" alt="Sales Demo Captions">
      <param name="charset" value="iso-8859-1"/>
      <param name="fontFace" value="System"/>
      <param name="fontColor" value="yellow"/>
      <param name="backgroundColor" value="blue"/>
    </text>
  </par>
</body>
</smil>

This example shows a text element that includes synchronized text streams within the SMIL file.

Related techniques:
- SM12: Providing captions through synchronized text streams in SMIL 2.0


------------------------------

SM12: - Providing captions through synchronized text streams in SMIL 2.0
Providing captions through synchronized text streams in SMIL 2.0

About this Technique
	- This technique relates to:
	- 1.2.2: Captions (Prerecorded) (Sufficient when used with G87: Providing closed captions)
	- 1.2.4: Captions (Live) (Sufficient when used with G9: Creating captions for live synchronized media and G87: Providing closed captions)
	- This technique applies to SMIL 2.0.

Description : The objective of this technique is to provide a way for people who are deaf or otherwise have trouble hearing the dialogue in audio visual material to be able to view the material. With this technique all of the dialogue and important sounds are available in a text stream that is displayed in a caption area. : With SMIL 2.0, separate regions can be defined for the video and the captions. The captions and video playback are synchronized, with the caption text displayed in one region of the screen, and the corresponding video displayed in another region.

Examples
Example 1: SMIL 2.0 caption sample with internal text streams for RealMedia player
<?xml version="1.0" encoding="UTF-8"?>
<smil xmlns="https://www.w3.org/2001/SMIL20/Language">
<head>
  <layout>
    <root-layout backgroundColor="black" height="310" width="330"/>
    <region id="video" backgroundColor="black" top="5" left="5" 
     height="240" width="320"/>
    <region id="captions" backgroundColor="black" top="250" 
     height="60" left="5" width="320"/>
  </layout>
</head>
<body>
  <par>
    <video src="salesdemo.mpg" region="video" title="Sales Demo" 
     alt="Sales Demo"/>
    <text src="data:,This%20is%20inline%20text." region="captions" 
     begin="0s" dur="3">
      <param name="charset" value="iso-8859-1"/>
      <param name="fontFace" value="System"/>
      <param name="fontColor" value="yellow"/>
      <param name="backgroundColor" value="blue"/>
    </text>
    <text src="data:,This%20is%20a%20second%20text." 
     region="captions" begin="3s" dur="3">
      <param name="charset" value="iso-8859-1"/>
      <param name="fontFace" value="System"/>
      <param name="fontColor" value="yellow"/>
      <param name="backgroundColor" value="blue"/>
    </text>
  </par>
</body>
</smil>

This example shows a text element that includes synchronized text streams within the SMIL file.

Related techniques:
- SM11: Providing captions through synchronized text streams in SMIL 1.0


------------------------------

SM13: - Providing sign language interpretation through synchronized video streams in SMIL 1.0
Providing sign language interpretation through synchronized video streams in SMIL 1.0

About this Technique
	- This technique relates to 1.2.6: Sign Language (Prerecorded) (Sufficient when used with G81: Providing a synchronized video of the sign language interpreter that can be displayed in a different viewport or overlaid on the image by the player).
	- This technique applies whenever SMIL 1.0 player is available.

Description : The objective of this technique is to provide a way for people who are deaf or otherwise have trouble hearing the dialogue in audio visual material to be able to view the material. With this technique all of the dialogue and important sounds are available in a sign-language interpretation video that is displayed in a caption area. : With SMIL 1.0, separate regions can be defined for the two videos. The two video playbacks are synchronized, with the content video displayed in one region of the screen, while the corresponding sign-language interpretation video is displayed in another region.

Examples
Example 1: SMIL 1.0 sign-language interpretation sample for QuickTime player
<?xml version="1.0" encoding="UTF-8"?>
<smil xmlns:qt="http://www.apple.com/quicktime/resources/smilextensions" 
   xmlns="https://www.w3.org/TR/REC-smil" qt:time-slider="true">
<head>
  <layout>
    <root-layout width="320" height="300" background-color="black"/>
    <region top="0" width="320" height="240" left="0" background-color="black" 
     id="videoregion"/>
    <region top="240" width="320" height="60" left="0" background-color="black" 
     id="signingregion"/>
  </layout>
</head>
<body>
  <par>
    <video dur="0:01:20.00" region="videoregion" src="salesdemo.mov" 
     alt="Sales Demo"/>
    <video dur="0:01:20.00" region="signingregion" system-captions="on" 
     src="salesdemo_si.mov" alt="Sales Demo Sign Language Interpretation"/>
  </par>
</body>
</smil>

Related techniques:
- SM14: Providing sign language interpretation through synchronized video streams in SMIL 2.0


------------------------------

SM14: - Providing sign language interpretation through synchronized video streams in SMIL 2.0
Providing sign language interpretation through synchronized video streams in SMIL 2.0

About this Technique
	- This technique relates to 1.2.6: Sign Language (Prerecorded) (Sufficient when used with G81: Providing a synchronized video of the sign language interpreter that can be displayed in a different viewport or overlaid on the image by the player).
	- This technique applies to SMIL 2.0.

Description : The objective of this technique is to provide a way for people who are deaf or otherwise have trouble hearing the dialogue in audio visual material to be able to view the material. With this technique all of the dialogue and important sounds are available in a sign-language interpretation video that is displayed in a caption area. : With SMIL 2.0, separate regions can be defined for the two videos. The two video playbacks are synchronized, with the content video displayed in one region of the screen, while the corresponding sign-language interpretation video is displayed in another region.

Examples
Example 1: SMIL 2.0 sign-language video sample for RealMedia player
<smil xmlns="https://www.w3.org/2001/SMIL20/Language">
<head>
  <layout>
    <root-layout backgroundColor="black" height="310" width="330"/>
    <region id="video" backgroundColor="black" top="5" left="5" 
     height="240" width="320"/>
    <region id="signing" backgroundColor="black" top="250" 
     height="60" left="5" width="320"/>
  </layout>
</head>
<body>
  <par>
    <video src="salesdemo.mpg" region="video" title="Sales Demo" 
     alt="Sales Demo"/>
    <video src="salesdemo_signing.mpg" 
     region="signing" systemCaptions="on" 
     title="sign language interpretation" 
     alt="Sales Demo Sign Language Interpretation"/>
  </par>
</body>
</smil>

The example shows a par segment containing two video tags. The systemCaptions attribute indicates that the sign language video should be displayed when the user's player setting for captions indicates the preference for captions to be displayed. The layout section defines the regions used for the main video and the sign language interpretation video.

Related techniques:
- SM13: Providing sign language interpretation through synchronized video streams in SMIL 1.0

--------------------------------------------------

File: text.json
==================================================

T1: - Using standard text formatting conventions for paragraphs
Using standard text formatting conventions for paragraphs

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Sufficient when used for making information and relationships conveyed through presentation programmatically determinable or available in text).
	- This technique applies to plain text documents. Not applicable to technologies that contain markup.

Description : The objective of this technique is to recognize a paragraph in a plain text document. A paragraph is a coherent block of text, such as a group of related sentences that develop a single topic or a coherent part of a larger topic. : The beginning of a paragraph is indicated by : the beginning of the content, that is, the paragraph is the first content in the document, or
	- exactly one blank line preceding the paragraph text : The end of a paragraph is indicated by : the end of the content, that is, the paragraph is the last content in the document, or
	- one or more blank lines following the paragraph text : A blank line contains zero or more non-printing characters, such as space or tab, followed by a new line.

Examples
Example 1

Two paragraphs. Each starts and ends with a blank line.

						
This is the first sentence in this
paragraph. Paragraphs may be long
or short.
   
    In this paragraph the first line is
indented. Indented and non-indented
sentences are allowed. White space within
the paragraph lines is ignored in
defining paragraphs. Only completely blank
lines are significant.


------------------------------

T2: - Using standard text formatting conventions for lists
Using standard text formatting conventions for lists

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Sufficient when used for making information and relationships conveyed through presentation programmatically determinable or available in text).
	- This technique applies to plain text documents. Not applicable to technologies that contain markup.

Description : The objective of this technique is to use text formatting conventions to create simple lists of related items. Hierarchical lists or nested lists cannot be represented using this technique and should be represented using a different technology. : A list is a sequence of list items. A list item is a paragraph that begins with a label. For unordered lists, asterisks, dashes, and bullet characters may be used as the label, but the same label characters must be used for all the items in a list. For ordered lists, the label may be alphabetic or numeric, and may be terminated by a period or a right parenthesis. The labels must be in ascending order, that is, : numbers must be in numeric order,
	- alphabetic labels must be in alphabetical order or in numeric order when interpreted as Roman numerals.

Examples
Example 1: Unordered list
						
- unordered list item
 
- unordered list item
 
- unordered list item


Example 2: Numeric ordered list
						
1. Ordered list item
 
2. Ordered list item
 
3. Ordered list item


Example 3: Roman numeral ordered list
						
i.   Ordered list item
 
ii.  Ordered list item
 
iii. Ordered list item
 
iv.  Ordered list item


Example 4: Alphabetic ordered list
						
A) Ordered list item
 
B) Ordered list item
 
C) Ordered list item


------------------------------

T3: - Using standard text formatting conventions for headings
Using standard text formatting conventions for headings

About this Technique
	- This technique relates to 1.3.1: Info and Relationships (Sufficient when used for making information and relationships conveyed through presentation programmatically determinable or available in text).
	- This technique applies to plain text documents. Not applicable to technologies that contain markup.

Description : The objective of this technique is to use text formatting conventions to convey the structure of the content. Headings are used to locate and label sections of a text document, showing the organization of the document. : The beginning of a heading is indicated by : two blank lines preceding the heading : The end of a heading is indicated by : a blank line following the heading : A blank line contains any number of non-printing characters, such as space or tab, followed by a new line. : The programmatic identification of the Heading is the two blank lines preceding it and one blank line succeeding it. Text documents are necessarily void of underlying structure and so structure must be indicated in the programmatic layout for screen readers. This programmatic layout will enable screen readers to voice blank lines twice before the text that will be considered as a heading. A screen magnifier user would decipher headings by visually identifying the space before it (or their technology may have Screen reader capabilities that can identify the spaces).

Examples
Example 1

A paragraph is followed by two blank lines, then a heading, then one blank line, then another paragraph:

						
...this is the end of paragraph 1.


The Text of the Heading

This is the beginning of paragraph 2.

--------------------------------------------------

